
experiment3a.elf:     file format elf32-littlenios2
experiment3a.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000194c memsz 0x0000194c flags r-x
    LOAD off    0x0000296c vaddr 0x0000596c paddr 0x00005af4 align 2**12
         filesz 0x00000188 memsz 0x00000188 flags rw-
    LOAD off    0x00002c7c vaddr 0x00005c7c paddr 0x00005c7c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000183c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0000585c  0000585c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000188  0000596c  00005af4  0000296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00005c7c  00005c7c  00002c7c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003e8  00000000  00000000  00002b18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000728  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006456  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001d41  00000000  00000000  00009a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005713  00000000  00000000  0000b7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000664  00000000  00000000  00010ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000014c8  00000000  00000000  00011538  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000019ae  00000000  00000000  00012a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000143b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  000143f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00015b72  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00015b75  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00015b7a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00015b7b  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00015b7c  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00015b87  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00015b92  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000c  00000000  00000000  00015b9d  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000003d  00000000  00000000  00015ba9  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000420be  00000000  00000000  00015be6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
0000585c l    d  .rodata	00000000 .rodata
0000596c l    d  .rwdata	00000000 .rwdata
00005c7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 experiment3a.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004684 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000596c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004f74 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000050f8 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005a4c l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000572c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00005184 g     F .text	0000002c alt_main
000044cc g     F .text	00000090 _puts_r
00005af4 g       *ABS*	00000000 __flash_rwdata_start
000054d4 g     F .text	00000010 alt_up_character_lcd_send_cmd
00004434 g     F .text	00000054 printf
00004e9c g     F .text	00000060 memmove
00000000  w      *UND*	00000000 __errno
0000544c g     F .text	00000018 get_DDRAM_addr
00004de4 g     F .text	000000b8 __sfvwrite_small_str
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005c7c g     O .bss	00000004 errno
00005c84 g     O .bss	00000004 alt_argv
0000dad0 g       *ABS*	00000000 _gp
00005344 g     F .text	00000004 usleep
00005aa0 g     O .rwdata	00000030 alt_fd_list
000057a4 g     F .text	00000070 alt_find_dev
000054a4 g     F .text	00000020 alt_up_character_lcd_write_fd
0000455c g     F .text	00000014 puts
00004488 g     F .text	00000044 _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000050b0 g     F .text	00000008 __udivsi3
00005aec g     O .rwdata	00000004 alt_max_fd
00005ad4 g     O .rwdata	00000004 _global_impure_ptr
00005c8c g       *ABS*	00000000 __bss_end
00005a78 g     O .rwdata	00000028 alt_dev_null
000054e4 g     F .text	00000008 alt_up_character_lcd_cursor_blink_on
00005728 g     F .text	00000004 alt_dcache_flush_all
00005af4 g       *ABS*	00000000 __ram_rwdata_end
00005ae4 g     O .rwdata	00000008 alt_dev_list
00005348 g     F .text	00000078 write
0000596c g       *ABS*	00000000 __ram_rodata_end
00005ad8 g     O .rwdata	00000004 jtag_uart_0
000050b8 g     F .text	00000008 __umodsi3
00005c8c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005418 g     F .text	00000034 altera_avalon_jtag_uart_write
00005480 g     F .text	00000024 alt_up_character_lcd_write
00004704 g     F .text	00000600 ___vfprintf_internal_r
000045f4 g     F .text	00000070 _sprintf_r
000051b0 g     F .text	00000144 alt_printf
00004020 g     F .text	0000003c _start
000053c0 g     F .text	00000038 alt_sys_init
00005558 g     F .text	00000070 alt_up_character_lcd_shift_display
000054f4 g     F .text	00000064 alt_up_character_lcd_erase_pos
000050c0 g     F .text	00000038 __mulsi3
0000596c g       *ABS*	00000000 __ram_rwdata_start
0000585c g       *ABS*	00000000 __ram_rodata_start
0000569c g     F .text	0000008c alt_busy_sleep
00005820 g     F .text	0000003c memcmp
00005c8c g       *ABS*	00000000 __alt_stack_base
00005734 g     F .text	00000070 alt_dev_llist_insert
00004d28 g     F .text	000000bc __sfvwrite_small_dev
00005c7c g       *ABS*	00000000 __bss_start
00004414 g     F .text	00000020 memset
0000405c g     F .text	000003b8 main
00005c88 g     O .bss	00000004 alt_envp
000055c8 g     F .text	00000070 alt_up_character_lcd_shift_cursor
00005af0 g     O .rwdata	00000004 alt_errno
00004ff0 g     F .text	00000060 __divsi3
00005690 g     F .text	0000000c alt_up_character_lcd_open_dev
000054c4 g     F .text	00000010 alt_up_character_lcd_init
0000585c g       *ABS*	00000000 __flash_rodata_start
000053f8 g     F .text	00000020 alt_irq_init
00004570 g     F .text	00000084 sprintf
000054ec g     F .text	00000008 alt_up_character_lcd_cursor_off
00004efc g     F .text	00000078 _write_r
00005ad0 g     O .rwdata	00000004 _impure_ptr
00005c80 g     O .bss	00000004 alt_argc
00005adc g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005af4 g       *ABS*	00000000 _edata
00005c8c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00005818 g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00005050 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00005464 g     F .text	0000001c alt_up_character_lcd_string
0000400c g       .entry	00000000 _exit
00004664 g     F .text	00000020 strlen
000052f4 g     F .text	00000050 alt_putchar
00005814 g     F .text	00000004 alt_icache_flush_all
00005638 g     F .text	00000058 alt_up_character_lcd_set_cursor_pos
00004d04 g     F .text	00000024 __vfprintf_internal
00005118 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b6b414 	ori	gp,gp,56016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10971f14 	ori	r2,r2,23676

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d72314 	ori	r3,r3,23692

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00051180 	call	5118 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00051840 	call	5184 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include <io.h>
#include "sys/alt_stdio.h"
#include "altera_up_avalon_character_lcd.h"
#include "sys/alt_irq.h"

int main() {
    405c:	deffe804 	addi	sp,sp,-96
	alt_16 switch_val_array[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0 };

	alt_up_character_lcd_dev *lcd_0;

	alt_printf("Experiment 3a:\n");
    4060:	01000034 	movhi	r4,0
    4064:	21161704 	addi	r4,r4,22620
#include <io.h>
#include "sys/alt_stdio.h"
#include "altera_up_avalon_character_lcd.h"
#include "sys/alt_irq.h"

int main() {
    4068:	dfc01715 	stw	ra,92(sp)
    406c:	dcc01115 	stw	r19,68(sp)
    4070:	df001615 	stw	fp,88(sp)
    4074:	ddc01515 	stw	r23,84(sp)
    4078:	dd801415 	stw	r22,80(sp)
    407c:	dd401315 	stw	r21,76(sp)
    4080:	dd001215 	stw	r20,72(sp)
    4084:	dc801015 	stw	r18,64(sp)
    4088:	dc400f15 	stw	r17,60(sp)
    408c:	dc000e15 	stw	r16,56(sp)
	alt_16 switch_val_array[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0 };

	alt_up_character_lcd_dev *lcd_0;

	alt_printf("Experiment 3a:\n");
    4090:	00051b00 	call	51b0 <alt_printf>

	lcd_0 = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
    4094:	01000034 	movhi	r4,0
    4098:	21161b04 	addi	r4,r4,22636
    409c:	00056900 	call	5690 <alt_up_character_lcd_open_dev>
    40a0:	1027883a 	mov	r19,r2


	if (lcd_0 == NULL)
    40a4:	1000031e 	bne	r2,zero,40b4 <main+0x58>
		alt_printf("Error opening LCD device\n");
    40a8:	01000034 	movhi	r4,0
    40ac:	21162104 	addi	r4,r4,22660
    40b0:	00000206 	br	40bc <main+0x60>
	else
		alt_printf("LCD device opened.\n");
    40b4:	01000034 	movhi	r4,0
    40b8:	21162804 	addi	r4,r4,22688
    40bc:	00051b00 	call	51b0 <alt_printf>
	//	char printStr_3[12][16];//16 register values
	//	char printStr_4[12][16];//longest sequence values


	alt_16 switch_val_array[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0 };
    40c0:	000b883a 	mov	r5,zero
    40c4:	d9000604 	addi	r4,sp,24
    40c8:	01800804 	movi	r6,32
    40cc:	00044140 	call	4414 <memset>
    40d0:	0039883a 	mov	fp,zero
    40d4:	0007883a 	mov	r3,zero


	/* Event loop never exits. */
	while (1) {
		//16 bit and 32 bit versions for 16 and 17 bit lose
		switch_val_full_bits = IORD(SWITCH_I_BASE, 0);
    40d8:	00a40014 	movui	r2,36864
    40dc:	11800037 	ldwio	r6,0(r2)
		switch_val = IORD(SWITCH_I_BASE, 0);
    40e0:	10800037 	ldwio	r2,0(r2)
    40e4:	102b883a 	mov	r21,r2

		IOWR(LED_RED_O_BASE, 0, switch_val_full_bits);
    40e8:	00a40414 	movui	r2,36880
    40ec:	11800035 	stwio	r6,0(r2)

		if (start == 0) {
    40f0:	18803fcc 	andi	r2,r3,255
    40f4:	1005003a 	cmpeq	r2,r2,zero
    40f8:	1000101e 	bne	r2,zero,413c <main+0xe0>
		}
		start = 1;

		//////////////

		if (switch_val_buf != switch_val) { //DETECT CHANGE IN SWITCH CONFIGURATION AND PRINT SEQUENCE OF 16 PREV INPUTS
    40fc:	80ffffcc 	andi	r3,r16,65535
    4100:	a8bfffcc 	andi	r2,r21,65535
    4104:	18e0001c 	xori	r3,r3,32768
    4108:	10a0001c 	xori	r2,r2,32768
    410c:	18e00004 	addi	r3,r3,-32768
    4110:	10a00004 	addi	r2,r2,-32768
    4114:	18800926 	beq	r3,r2,413c <main+0xe0>
    4118:	014003c4 	movi	r5,15
    411c:	d9000d84 	addi	r4,sp,54

			//shift up values if we detect shift in switches config
			for (i = 15; i > 0; i--) {
				switch_val_array[i] = switch_val_array[i - 1];
    4120:	20ffff8b 	ldhu	r3,-2(r4)
    4124:	28bfffc4 	addi	r2,r5,-1
		//////////////

		if (switch_val_buf != switch_val) { //DETECT CHANGE IN SWITCH CONFIGURATION AND PRINT SEQUENCE OF 16 PREV INPUTS

			//shift up values if we detect shift in switches config
			for (i = 15; i > 0; i--) {
    4128:	100b883a 	mov	r5,r2
				switch_val_array[i] = switch_val_array[i - 1];
    412c:	20c0000d 	sth	r3,0(r4)
		//////////////

		if (switch_val_buf != switch_val) { //DETECT CHANGE IN SWITCH CONFIGURATION AND PRINT SEQUENCE OF 16 PREV INPUTS

			//shift up values if we detect shift in switches config
			for (i = 15; i > 0; i--) {
    4130:	213fff84 	addi	r4,r4,-2
    4134:	103ffa1e 	bne	r2,zero,4120 <main+0xc4>
				switch_val_array[i] = switch_val_array[i - 1];
			}
			switch_val_array[0] = switch_val;
    4138:	dd40060d 	sth	r21,24(sp)
			//
			//			alt_up_character_lcd_string(lcd_0, "Welcome");

		}

		sw_16_val = (switch_val_full_bits >> 16) & (0x1);
    413c:	3004d43a 	srli	r2,r6,16
    4140:	0009883a 	mov	r4,zero
    4144:	043ffc74 	movhi	r16,65521
    4148:	842f7004 	addi	r16,r16,-16960
    414c:	15c0004c 	andi	r23,r2,1
    4150:	000d883a 	mov	r6,zero
    4154:	d8c00604 	addi	r3,sp,24
    4158:	01400404 	movi	r5,16
		largest = -1000000;
		largest_index = 0;
		second_largest = -10000000;

		for (i = 0; i < 16; i++) {
			if (switch_val_array[i] > largest) {
    415c:	1880000f 	ldh	r2,0(r3)

		largest = -1000000;
		largest_index = 0;
		second_largest = -10000000;

		for (i = 0; i < 16; i++) {
    4160:	18c00084 	addi	r3,r3,2
			if (switch_val_array[i] > largest) {
    4164:	8080020e 	bge	r16,r2,4170 <main+0x114>
    4168:	1021883a 	mov	r16,r2
    416c:	200d883a 	mov	r6,r4

		largest = -1000000;
		largest_index = 0;
		second_largest = -10000000;

		for (i = 0; i < 16; i++) {
    4170:	21000044 	addi	r4,r4,1
    4174:	217ff91e 	bne	r4,r5,415c <main+0x100>
    4178:	0007883a 	mov	r3,zero
    417c:	04bfd9f4 	movhi	r18,65383
    4180:	949a6004 	addi	r18,r18,27008
    4184:	d9000604 	addi	r4,sp,24
    4188:	01400404 	movi	r5,16
				}
			}
		}

		for (i = 0; i < 16; i++) {
			if (i != largest_index) {
    418c:	19800326 	beq	r3,r6,419c <main+0x140>
    4190:	2080000f 	ldh	r2,0(r4)
    4194:	9080010e 	bge	r18,r2,419c <main+0x140>
    4198:	1025883a 	mov	r18,r2

				}
			}
		}

		for (i = 0; i < 16; i++) {
    419c:	18c00044 	addi	r3,r3,1
    41a0:	21000084 	addi	r4,r4,2
    41a4:	197ff91e 	bne	r3,r5,418c <main+0x130>
    41a8:	01400044 	movi	r5,1
    41ac:	0029883a 	mov	r20,zero
    41b0:	002d883a 	mov	r22,zero
    41b4:	000d883a 	mov	r6,zero
    41b8:	2811883a 	mov	r8,r5
    41bc:	d9c00604 	addi	r7,sp,24
    41c0:	024003c4 	movi	r9,15
		length = 1;
		longestlength = 1;
		begin = 0;
		end = 0;
		for (i = 0; i < 15; i++) {
			if (switch_val_array[i] > switch_val_array[i + 1]) {
    41c4:	38c0000f 	ldh	r3,0(r7)
    41c8:	3880008f 	ldh	r2,2(r7)
				length++;
    41cc:	29400044 	addi	r5,r5,1
		length = 1;
		longestlength = 1;
		begin = 0;
		end = 0;
		for (i = 0; i < 15; i++) {
			if (switch_val_array[i] > switch_val_array[i + 1]) {
    41d0:	31000044 	addi	r4,r6,1
    41d4:	10c00216 	blt	r2,r3,41e0 <main+0x184>
    41d8:	01400044 	movi	r5,1
    41dc:	00000506 	br	41f4 <main+0x198>
				length++;
				if (length > longestlength) { //subSeqLength > longestCurrentLength
					longestlength = length;
					begin = i - (length - 2);
    41e0:	3145c83a 	sub	r2,r6,r5
		begin = 0;
		end = 0;
		for (i = 0; i < 15; i++) {
			if (switch_val_array[i] > switch_val_array[i + 1]) {
				length++;
				if (length > longestlength) { //subSeqLength > longestCurrentLength
    41e4:	4140032e 	bgeu	r8,r5,41f4 <main+0x198>
					longestlength = length;
					begin = i - (length - 2);
    41e8:	15000084 	addi	r20,r2,2
    41ec:	202d883a 	mov	r22,r4
    41f0:	2811883a 	mov	r8,r5
		//		end=0;
		length = 1;
		longestlength = 1;
		begin = 0;
		end = 0;
		for (i = 0; i < 15; i++) {
    41f4:	200d883a 	mov	r6,r4
			if (switch_val_array[i] > switch_val_array[i + 1]) {
				length++;
				if (length > longestlength) { //subSeqLength > longestCurrentLength
					longestlength = length;
					begin = i - (length - 2);
    41f8:	39c00084 	addi	r7,r7,2
		//		end=0;
		length = 1;
		longestlength = 1;
		begin = 0;
		end = 0;
		for (i = 0; i < 15; i++) {
    41fc:	227ff11e 	bne	r4,r9,41c4 <main+0x168>
		//		char printStr_1[12]; //2nd largest
		//
		//		char printStr_3[16][12];//16 register values
		//		char printStr_4[16][12];//longest sequence values

		sprintf(printStr_0, "%d", largest);
    4200:	d809883a 	mov	r4,sp
    4204:	01400034 	movhi	r5,0
    4208:	29562d04 	addi	r5,r5,22708
    420c:	800d883a 	mov	r6,r16
    4210:	00045700 	call	4570 <sprintf>
		sprintf(printStr_1, "%d", second_largest);
    4214:	d9000304 	addi	r4,sp,12
    4218:	01400034 	movhi	r5,0
    421c:	29562d04 	addi	r5,r5,22708
    4220:	900d883a 	mov	r6,r18
    4224:	00045700 	call	4570 <sprintf>
		//		char printStr_1[12]; //2nd largest
		//
		//		char printStr_3[16][12];//16 register values
		//		char printStr_4[16][12];//longest sequence values

		if (largest >= 10000)
    4228:	0089c3c4 	movi	r2,9999
    422c:	14007516 	blt	r2,r16,4404 <main+0x3a8>
			largest_offset = 12;
		if (largest < 10000)
			largest_offset = 13;
		if (largest < 1000)
    4230:	0080f9c4 	movi	r2,999
    4234:	14001116 	blt	r2,r16,427c <main+0x220>
			largest_offset = 14;
		if (largest < 100)
    4238:	008018c4 	movi	r2,99
    423c:	14000b16 	blt	r2,r16,426c <main+0x210>
			largest_offset = 15;
		if (largest < 10)
    4240:	00800244 	movi	r2,9
    4244:	14000516 	blt	r2,r16,425c <main+0x200>
			largest_offset = 16;
		if (largest < 0)
    4248:	80000216 	blt	r16,zero,4254 <main+0x1f8>
    424c:	04400404 	movi	r17,16
    4250:	00000e06 	br	428c <main+0x230>
			largest_offset = 15;
		if (largest < (-10))
    4254:	00bffd84 	movi	r2,-10
    4258:	80800216 	blt	r16,r2,4264 <main+0x208>
    425c:	044003c4 	movi	r17,15
    4260:	00000a06 	br	428c <main+0x230>
			largest_offset = 14;
		if (largest < (-100))
    4264:	00bfe704 	movi	r2,-100
    4268:	80800216 	blt	r16,r2,4274 <main+0x218>
    426c:	04400384 	movi	r17,14
    4270:	00000606 	br	428c <main+0x230>
			largest_offset = 13;
		if (largest < (-1000))
    4274:	00bf0604 	movi	r2,-1000
    4278:	80800216 	blt	r16,r2,4284 <main+0x228>
    427c:	04400344 	movi	r17,13
    4280:	00000206 	br	428c <main+0x230>
			largest_offset = 12;
		if (largest < (-10000))
    4284:	84763c08 	cmpgei	r17,r16,-10000
    4288:	8c4002c4 	addi	r17,r17,11
			largest_offset = 11;

		if (second_largest >= 10000)
    428c:	0089c3c4 	movi	r2,9999
    4290:	14805e16 	blt	r2,r18,440c <main+0x3b0>
			second_largest_offset = 12;
		if (second_largest < 10000)
			second_largest_offset = 13;
		if (second_largest < 1000)
    4294:	0080f9c4 	movi	r2,999
    4298:	14801116 	blt	r2,r18,42e0 <main+0x284>
			second_largest_offset = 14;
		if (second_largest < 100)
    429c:	008018c4 	movi	r2,99
    42a0:	14800b16 	blt	r2,r18,42d0 <main+0x274>
			second_largest_offset = 15;
		if (second_largest < 10)
    42a4:	00800244 	movi	r2,9
    42a8:	14800516 	blt	r2,r18,42c0 <main+0x264>
			second_largest_offset = 16;
		if (second_largest < 0)
    42ac:	90000216 	blt	r18,zero,42b8 <main+0x25c>
    42b0:	04000404 	movi	r16,16
    42b4:	00000e06 	br	42f0 <main+0x294>
			second_largest_offset = 15;
		if (second_largest < (-10))
    42b8:	00bffd84 	movi	r2,-10
    42bc:	90800216 	blt	r18,r2,42c8 <main+0x26c>
    42c0:	040003c4 	movi	r16,15
    42c4:	00000a06 	br	42f0 <main+0x294>
			second_largest_offset = 14;
		if (second_largest < (-100))
    42c8:	00bfe704 	movi	r2,-100
    42cc:	90800216 	blt	r18,r2,42d8 <main+0x27c>
    42d0:	04000384 	movi	r16,14
    42d4:	00000606 	br	42f0 <main+0x294>
			second_largest_offset = 13;
		if (second_largest < (-1000))
    42d8:	00bf0604 	movi	r2,-1000
    42dc:	90800216 	blt	r18,r2,42e8 <main+0x28c>
    42e0:	04000344 	movi	r16,13
    42e4:	00000206 	br	42f0 <main+0x294>
			second_largest_offset = 12;
		if (second_largest < (-10000))
    42e8:	94363c08 	cmpgei	r16,r18,-10000
    42ec:	840002c4 	addi	r16,r16,11
			second_largest_offset = 11;

		//printf("The largest offset is %d, ", largest_offset);


		if (!sw_16_val_buf && sw_16_val) {
    42f0:	e0803fcc 	andi	r2,fp,255
    42f4:	1004c03a 	cmpne	r2,r2,zero
    42f8:	b8c03fcc 	andi	r3,r23,255
    42fc:	1000131e 	bne	r2,zero,434c <main+0x2f0>
    4300:	1805003a 	cmpeq	r2,r3,zero
    4304:	1000381e 	bne	r2,zero,43e8 <main+0x38c>

			alt_up_character_lcd_init(lcd_0);
    4308:	9809883a 	mov	r4,r19
    430c:	00054c40 	call	54c4 <alt_up_character_lcd_init>
			alt_up_character_lcd_set_cursor_pos(lcd_0, largest_offset - 1, 0);
    4310:	897fffc4 	addi	r5,r17,-1
    4314:	9809883a 	mov	r4,r19
    4318:	000d883a 	mov	r6,zero
    431c:	00056380 	call	5638 <alt_up_character_lcd_set_cursor_pos>

			alt_up_character_lcd_string(lcd_0, printStr_0);
    4320:	9809883a 	mov	r4,r19
    4324:	d80b883a 	mov	r5,sp
    4328:	00054640 	call	5464 <alt_up_character_lcd_string>

			alt_up_character_lcd_set_cursor_pos(lcd_0, second_largest_offset
    432c:	01800044 	movi	r6,1
    4330:	9809883a 	mov	r4,r19
    4334:	817fffc4 	addi	r5,r16,-1
    4338:	00056380 	call	5638 <alt_up_character_lcd_set_cursor_pos>
					- 1, 1);

			//alt_up_character_lcd_string(lcd_0,second_largest);
			alt_up_character_lcd_string(lcd_0, printStr_1);
    433c:	9809883a 	mov	r4,r19
    4340:	d9400304 	addi	r5,sp,12
    4344:	00054640 	call	5464 <alt_up_character_lcd_string>
    4348:	00002706 	br	43e8 <main+0x38c>

		}

		//falling edge sw 16
		if (sw_16_val_buf && !sw_16_val) {
    434c:	1804c03a 	cmpne	r2,r3,zero
    4350:	1000251e 	bne	r2,zero,43e8 <main+0x38c>

			//for (i = 0; i < 15; i++) {
			//		printf("%d ", switch_val_array[i]);
			//printf("\n");
			//}
			printf("\n----------------------------------------------------\n");
    4354:	01000034 	movhi	r4,0
    4358:	21162e04 	addi	r4,r4,22712
    435c:	000455c0 	call	455c <puts>
			printf("The ENTIRE 16-value recorded sequence is: \n");
    4360:	01000034 	movhi	r4,0
    4364:	21163c04 	addi	r4,r4,22768
    4368:	000455c0 	call	455c <puts>
    436c:	dc000604 	addi	r16,sp,24

			for (i = 0; i < 16; i++) {
				//printf("Printing \n ");

				printf("%d, ", switch_val_array[i]);
    4370:	8140000f 	ldh	r5,0(r16)
    4374:	01000034 	movhi	r4,0
    4378:	21164704 	addi	r4,r4,22812
    437c:	84000084 	addi	r16,r16,2
    4380:	00044340 	call	4434 <printf>
			//printf("\n");
			//}
			printf("\n----------------------------------------------------\n");
			printf("The ENTIRE 16-value recorded sequence is: \n");

			for (i = 0; i < 16; i++) {
    4384:	d8800e04 	addi	r2,sp,56
    4388:	80bff91e 	bne	r16,r2,4370 <main+0x314>
				//printf("Printing \n ");

				printf("%d, ", switch_val_array[i]);
				//printf("\n");
			}
			if (begin == 0 && end == 0) {
    438c:	a000041e 	bne	r20,zero,43a0 <main+0x344>
    4390:	b000031e 	bne	r22,zero,43a0 <main+0x344>
				printf("\nNo sub-sequence exists :( \n");
    4394:	01000034 	movhi	r4,0
    4398:	21164904 	addi	r4,r4,22820
    439c:	00001106 	br	43e4 <main+0x388>
			} else {
			printf("\n \nThe LONGEST sequence is: \n");
    43a0:	01000034 	movhi	r4,0
    43a4:	21165004 	addi	r4,r4,22848
    43a8:	000455c0 	call	455c <puts>
    43ac:	a507883a 	add	r3,r20,r20
    43b0:	d8800604 	addi	r2,sp,24
    43b4:	10e3883a 	add	r17,r2,r3
    43b8:	a021883a 	mov	r16,r20
    43bc:	00000306 	br	43cc <main+0x370>

			for(i=begin;i<=end;i++) {
				printf("%d, ", switch_val_array[i]);
    43c0:	897fff8f 	ldh	r5,-2(r17)
			if (begin == 0 && end == 0) {
				printf("\nNo sub-sequence exists :( \n");
			} else {
			printf("\n \nThe LONGEST sequence is: \n");

			for(i=begin;i<=end;i++) {
    43c4:	84000044 	addi	r16,r16,1
				printf("%d, ", switch_val_array[i]);
    43c8:	00044340 	call	4434 <printf>
    43cc:	01000034 	movhi	r4,0
    43d0:	21164704 	addi	r4,r4,22812
			if (begin == 0 && end == 0) {
				printf("\nNo sub-sequence exists :( \n");
			} else {
			printf("\n \nThe LONGEST sequence is: \n");

			for(i=begin;i<=end;i++) {
    43d4:	8c400084 	addi	r17,r17,2
    43d8:	b43ff92e 	bgeu	r22,r16,43c0 <main+0x364>
				printf("%d, ", switch_val_array[i]);
			}
			printf("\n----------------------------------------------------\n");
    43dc:	01000034 	movhi	r4,0
    43e0:	21162e04 	addi	r4,r4,22712
    43e4:	000455c0 	call	455c <puts>

		}
	}
	usleep(100000);// SLEEP BECAUSE DEWBOUNCING PLS DONT SUE ME
    43e8:	010000b4 	movhi	r4,2
    43ec:	2121a804 	addi	r4,r4,-31072
    43f0:	00053440 	call	5344 <usleep>
    43f4:	b839883a 	mov	fp,r23
    43f8:	a821883a 	mov	r16,r21
    43fc:	00c00044 	movi	r3,1
    4400:	003f3506 	br	40d8 <main+0x7c>
	sw_16_val_buf = sw_16_val;
	switch_val_buf = switch_val;

}
    4404:	04400304 	movi	r17,12
    4408:	003fa006 	br	428c <main+0x230>
    440c:	04000304 	movi	r16,12
    4410:	003fb706 	br	42f0 <main+0x294>

00004414 <memset>:
    4414:	30000526 	beq	r6,zero,442c <memset+0x18>
    4418:	310d883a 	add	r6,r6,r4
    441c:	2005883a 	mov	r2,r4
    4420:	11400005 	stb	r5,0(r2)
    4424:	10800044 	addi	r2,r2,1
    4428:	11bffd1e 	bne	r2,r6,4420 <memset+0xc>
    442c:	2005883a 	mov	r2,r4
    4430:	f800283a 	ret

00004434 <printf>:
    4434:	defffb04 	addi	sp,sp,-20
    4438:	dfc00115 	stw	ra,4(sp)
    443c:	d9400215 	stw	r5,8(sp)
    4440:	d9800315 	stw	r6,12(sp)
    4444:	d9c00415 	stw	r7,16(sp)
    4448:	00800034 	movhi	r2,0
    444c:	1096b404 	addi	r2,r2,23248
    4450:	11400017 	ldw	r5,0(r2)
    4454:	d8800204 	addi	r2,sp,8
    4458:	d8800015 	stw	r2,0(sp)
    445c:	29c00217 	ldw	r7,8(r5)
    4460:	100d883a 	mov	r6,r2
    4464:	00800034 	movhi	r2,0
    4468:	10934a04 	addi	r2,r2,19752
    446c:	200b883a 	mov	r5,r4
    4470:	38800115 	stw	r2,4(r7)
    4474:	3809883a 	mov	r4,r7
    4478:	0004d040 	call	4d04 <__vfprintf_internal>
    447c:	dfc00117 	ldw	ra,4(sp)
    4480:	dec00504 	addi	sp,sp,20
    4484:	f800283a 	ret

00004488 <_printf_r>:
    4488:	defffc04 	addi	sp,sp,-16
    448c:	dfc00115 	stw	ra,4(sp)
    4490:	d9800215 	stw	r6,8(sp)
    4494:	d9c00315 	stw	r7,12(sp)
    4498:	22000217 	ldw	r8,8(r4)
    449c:	d8800204 	addi	r2,sp,8
    44a0:	d8800015 	stw	r2,0(sp)
    44a4:	100f883a 	mov	r7,r2
    44a8:	00800034 	movhi	r2,0
    44ac:	10934a04 	addi	r2,r2,19752
    44b0:	280d883a 	mov	r6,r5
    44b4:	40800115 	stw	r2,4(r8)
    44b8:	400b883a 	mov	r5,r8
    44bc:	00047040 	call	4704 <___vfprintf_internal_r>
    44c0:	dfc00117 	ldw	ra,4(sp)
    44c4:	dec00404 	addi	sp,sp,16
    44c8:	f800283a 	ret

000044cc <_puts_r>:
    44cc:	defffd04 	addi	sp,sp,-12
    44d0:	dc000015 	stw	r16,0(sp)
    44d4:	2021883a 	mov	r16,r4
    44d8:	2809883a 	mov	r4,r5
    44dc:	dfc00215 	stw	ra,8(sp)
    44e0:	dc400115 	stw	r17,4(sp)
    44e4:	2823883a 	mov	r17,r5
    44e8:	00046640 	call	4664 <strlen>
    44ec:	80c00217 	ldw	r3,8(r16)
    44f0:	02000034 	movhi	r8,0
    44f4:	42134a04 	addi	r8,r8,19752
    44f8:	880d883a 	mov	r6,r17
    44fc:	100f883a 	mov	r7,r2
    4500:	8009883a 	mov	r4,r16
    4504:	180b883a 	mov	r5,r3
    4508:	1a000115 	stw	r8,4(r3)
    450c:	403ee83a 	callr	r8
    4510:	047fffc4 	movi	r17,-1
    4514:	8009883a 	mov	r4,r16
    4518:	01800034 	movhi	r6,0
    451c:	31962704 	addi	r6,r6,22684
    4520:	01c00044 	movi	r7,1
    4524:	1440071e 	bne	r2,r17,4544 <_puts_r+0x78>
    4528:	00ffffc4 	movi	r3,-1
    452c:	1805883a 	mov	r2,r3
    4530:	dfc00217 	ldw	ra,8(sp)
    4534:	dc400117 	ldw	r17,4(sp)
    4538:	dc000017 	ldw	r16,0(sp)
    453c:	dec00304 	addi	sp,sp,12
    4540:	f800283a 	ret
    4544:	81400217 	ldw	r5,8(r16)
    4548:	28c00117 	ldw	r3,4(r5)
    454c:	183ee83a 	callr	r3
    4550:	0007883a 	mov	r3,zero
    4554:	147ff51e 	bne	r2,r17,452c <_puts_r+0x60>
    4558:	003ff306 	br	4528 <_puts_r+0x5c>

0000455c <puts>:
    455c:	00800034 	movhi	r2,0
    4560:	1096b404 	addi	r2,r2,23248
    4564:	200b883a 	mov	r5,r4
    4568:	11000017 	ldw	r4,0(r2)
    456c:	00044cc1 	jmpi	44cc <_puts_r>

00004570 <sprintf>:
    4570:	defff504 	addi	sp,sp,-44
    4574:	2015883a 	mov	r10,r4
    4578:	dfc00815 	stw	ra,32(sp)
    457c:	d9800915 	stw	r6,36(sp)
    4580:	d9c00a15 	stw	r7,40(sp)
    4584:	d8800904 	addi	r2,sp,36
    4588:	d8800015 	stw	r2,0(sp)
    458c:	00800034 	movhi	r2,0
    4590:	1096b404 	addi	r2,r2,23248
    4594:	11000017 	ldw	r4,0(r2)
    4598:	d9c00017 	ldw	r7,0(sp)
    459c:	00808204 	movi	r2,520
    45a0:	02200034 	movhi	r8,32768
    45a4:	423fffc4 	addi	r8,r8,-1
    45a8:	280d883a 	mov	r6,r5
    45ac:	d880010d 	sth	r2,4(sp)
    45b0:	00c00034 	movhi	r3,0
    45b4:	18d37904 	addi	r3,r3,19940
    45b8:	d9400104 	addi	r5,sp,4
    45bc:	00bfffc4 	movi	r2,-1
    45c0:	d8c00215 	stw	r3,8(sp)
    45c4:	da800315 	stw	r10,12(sp)
    45c8:	da000415 	stw	r8,16(sp)
    45cc:	d880018d 	sth	r2,6(sp)
    45d0:	da800515 	stw	r10,20(sp)
    45d4:	da000615 	stw	r8,24(sp)
    45d8:	d8000715 	stw	zero,28(sp)
    45dc:	00047040 	call	4704 <___vfprintf_internal_r>
    45e0:	d8c00517 	ldw	r3,20(sp)
    45e4:	18000005 	stb	zero,0(r3)
    45e8:	dfc00817 	ldw	ra,32(sp)
    45ec:	dec00b04 	addi	sp,sp,44
    45f0:	f800283a 	ret

000045f4 <_sprintf_r>:
    45f4:	defff604 	addi	sp,sp,-40
    45f8:	2815883a 	mov	r10,r5
    45fc:	dfc00815 	stw	ra,32(sp)
    4600:	d9c00915 	stw	r7,36(sp)
    4604:	d8800904 	addi	r2,sp,36
    4608:	d8800015 	stw	r2,0(sp)
    460c:	100f883a 	mov	r7,r2
    4610:	00808204 	movi	r2,520
    4614:	02200034 	movhi	r8,32768
    4618:	423fffc4 	addi	r8,r8,-1
    461c:	d880010d 	sth	r2,4(sp)
    4620:	00c00034 	movhi	r3,0
    4624:	18d37904 	addi	r3,r3,19940
    4628:	d9400104 	addi	r5,sp,4
    462c:	00bfffc4 	movi	r2,-1
    4630:	d8c00215 	stw	r3,8(sp)
    4634:	da800315 	stw	r10,12(sp)
    4638:	da000415 	stw	r8,16(sp)
    463c:	d880018d 	sth	r2,6(sp)
    4640:	da800515 	stw	r10,20(sp)
    4644:	da000615 	stw	r8,24(sp)
    4648:	d8000715 	stw	zero,28(sp)
    464c:	00047040 	call	4704 <___vfprintf_internal_r>
    4650:	d8c00517 	ldw	r3,20(sp)
    4654:	18000005 	stb	zero,0(r3)
    4658:	dfc00817 	ldw	ra,32(sp)
    465c:	dec00a04 	addi	sp,sp,40
    4660:	f800283a 	ret

00004664 <strlen>:
    4664:	20800007 	ldb	r2,0(r4)
    4668:	10000526 	beq	r2,zero,4680 <strlen+0x1c>
    466c:	2007883a 	mov	r3,r4
    4670:	18c00044 	addi	r3,r3,1
    4674:	18800007 	ldb	r2,0(r3)
    4678:	103ffd1e 	bne	r2,zero,4670 <strlen+0xc>
    467c:	1905c83a 	sub	r2,r3,r4
    4680:	f800283a 	ret

00004684 <print_repeat>:
    4684:	defffb04 	addi	sp,sp,-20
    4688:	dc800315 	stw	r18,12(sp)
    468c:	dc400215 	stw	r17,8(sp)
    4690:	dc000115 	stw	r16,4(sp)
    4694:	dfc00415 	stw	ra,16(sp)
    4698:	2025883a 	mov	r18,r4
    469c:	2823883a 	mov	r17,r5
    46a0:	3821883a 	mov	r16,r7
    46a4:	d9800005 	stb	r6,0(sp)
    46a8:	9009883a 	mov	r4,r18
    46ac:	880b883a 	mov	r5,r17
    46b0:	d80d883a 	mov	r6,sp
    46b4:	01c00044 	movi	r7,1
    46b8:	04000b0e 	bge	zero,r16,46e8 <print_repeat+0x64>
    46bc:	88c00117 	ldw	r3,4(r17)
    46c0:	843fffc4 	addi	r16,r16,-1
    46c4:	183ee83a 	callr	r3
    46c8:	103ff726 	beq	r2,zero,46a8 <print_repeat+0x24>
    46cc:	00bfffc4 	movi	r2,-1
    46d0:	dfc00417 	ldw	ra,16(sp)
    46d4:	dc800317 	ldw	r18,12(sp)
    46d8:	dc400217 	ldw	r17,8(sp)
    46dc:	dc000117 	ldw	r16,4(sp)
    46e0:	dec00504 	addi	sp,sp,20
    46e4:	f800283a 	ret
    46e8:	0005883a 	mov	r2,zero
    46ec:	dfc00417 	ldw	ra,16(sp)
    46f0:	dc800317 	ldw	r18,12(sp)
    46f4:	dc400217 	ldw	r17,8(sp)
    46f8:	dc000117 	ldw	r16,4(sp)
    46fc:	dec00504 	addi	sp,sp,20
    4700:	f800283a 	ret

00004704 <___vfprintf_internal_r>:
    4704:	deffec04 	addi	sp,sp,-80
    4708:	ddc01115 	stw	r23,68(sp)
    470c:	dd801015 	stw	r22,64(sp)
    4710:	dd000e15 	stw	r20,56(sp)
    4714:	dcc00d15 	stw	r19,52(sp)
    4718:	dc400b15 	stw	r17,44(sp)
    471c:	dfc01315 	stw	ra,76(sp)
    4720:	df001215 	stw	fp,72(sp)
    4724:	dd400f15 	stw	r21,60(sp)
    4728:	dc800c15 	stw	r18,48(sp)
    472c:	dc000a15 	stw	r16,40(sp)
    4730:	d9000915 	stw	r4,36(sp)
    4734:	282d883a 	mov	r22,r5
    4738:	3829883a 	mov	r20,r7
    473c:	3027883a 	mov	r19,r6
    4740:	0023883a 	mov	r17,zero
    4744:	d8000815 	stw	zero,32(sp)
    4748:	d8000715 	stw	zero,28(sp)
    474c:	002f883a 	mov	r23,zero
    4750:	d8000615 	stw	zero,24(sp)
    4754:	d8000515 	stw	zero,20(sp)
    4758:	d8000415 	stw	zero,16(sp)
    475c:	d8000315 	stw	zero,12(sp)
    4760:	d8000215 	stw	zero,8(sp)
    4764:	99400003 	ldbu	r5,0(r19)
    4768:	01c00044 	movi	r7,1
    476c:	9cc00044 	addi	r19,r19,1
    4770:	29003fcc 	andi	r4,r5,255
    4774:	2100201c 	xori	r4,r4,128
    4778:	213fe004 	addi	r4,r4,-128
    477c:	20001626 	beq	r4,zero,47d8 <___vfprintf_internal_r+0xd4>
    4780:	89c02226 	beq	r17,r7,480c <___vfprintf_internal_r+0x108>
    4784:	00800084 	movi	r2,2
    4788:	88802526 	beq	r17,r2,4820 <___vfprintf_internal_r+0x11c>
    478c:	883ff51e 	bne	r17,zero,4764 <___vfprintf_internal_r+0x60>
    4790:	00800944 	movi	r2,37
    4794:	2081291e 	bne	r4,r2,4c3c <___vfprintf_internal_r+0x538>
    4798:	05ffffc4 	movi	r23,-1
    479c:	00800284 	movi	r2,10
    47a0:	d9c00415 	stw	r7,16(sp)
    47a4:	d8000815 	stw	zero,32(sp)
    47a8:	d8000715 	stw	zero,28(sp)
    47ac:	ddc00615 	stw	r23,24(sp)
    47b0:	d8800515 	stw	r2,20(sp)
    47b4:	d8000315 	stw	zero,12(sp)
    47b8:	99400003 	ldbu	r5,0(r19)
    47bc:	3823883a 	mov	r17,r7
    47c0:	9cc00044 	addi	r19,r19,1
    47c4:	29003fcc 	andi	r4,r5,255
    47c8:	2100201c 	xori	r4,r4,128
    47cc:	213fe004 	addi	r4,r4,-128
    47d0:	01c00044 	movi	r7,1
    47d4:	203fea1e 	bne	r4,zero,4780 <___vfprintf_internal_r+0x7c>
    47d8:	d8800217 	ldw	r2,8(sp)
    47dc:	dfc01317 	ldw	ra,76(sp)
    47e0:	df001217 	ldw	fp,72(sp)
    47e4:	ddc01117 	ldw	r23,68(sp)
    47e8:	dd801017 	ldw	r22,64(sp)
    47ec:	dd400f17 	ldw	r21,60(sp)
    47f0:	dd000e17 	ldw	r20,56(sp)
    47f4:	dcc00d17 	ldw	r19,52(sp)
    47f8:	dc800c17 	ldw	r18,48(sp)
    47fc:	dc400b17 	ldw	r17,44(sp)
    4800:	dc000a17 	ldw	r16,40(sp)
    4804:	dec01404 	addi	sp,sp,80
    4808:	f800283a 	ret
    480c:	00800c04 	movi	r2,48
    4810:	20805f26 	beq	r4,r2,4990 <___vfprintf_internal_r+0x28c>
    4814:	00800944 	movi	r2,37
    4818:	20811526 	beq	r4,r2,4c70 <___vfprintf_internal_r+0x56c>
    481c:	04400084 	movi	r17,2
    4820:	00800b84 	movi	r2,46
    4824:	20805826 	beq	r4,r2,4988 <___vfprintf_internal_r+0x284>
    4828:	29bff404 	addi	r6,r5,-48
    482c:	30c03fcc 	andi	r3,r6,255
    4830:	00800244 	movi	r2,9
    4834:	3021883a 	mov	r16,r6
    4838:	10c00c36 	bltu	r2,r3,486c <___vfprintf_internal_r+0x168>
    483c:	d8c00617 	ldw	r3,24(sp)
    4840:	3025883a 	mov	r18,r6
    4844:	18005816 	blt	r3,zero,49a8 <___vfprintf_internal_r+0x2a4>
    4848:	d9000617 	ldw	r4,24(sp)
    484c:	01400284 	movi	r5,10
    4850:	00050c00 	call	50c0 <__mulsi3>
    4854:	80c03fcc 	andi	r3,r16,255
    4858:	18c0201c 	xori	r3,r3,128
    485c:	18ffe004 	addi	r3,r3,-128
    4860:	10c5883a 	add	r2,r2,r3
    4864:	d8800615 	stw	r2,24(sp)
    4868:	003fbe06 	br	4764 <___vfprintf_internal_r+0x60>
    486c:	00801b04 	movi	r2,108
    4870:	20804a26 	beq	r4,r2,499c <___vfprintf_internal_r+0x298>
    4874:	28bfea04 	addi	r2,r5,-88
    4878:	10803fcc 	andi	r2,r2,255
    487c:	00c00804 	movi	r3,32
    4880:	18803f36 	bltu	r3,r2,4980 <___vfprintf_internal_r+0x27c>
    4884:	1085883a 	add	r2,r2,r2
    4888:	1085883a 	add	r2,r2,r2
    488c:	00c00034 	movhi	r3,0
    4890:	18d22804 	addi	r3,r3,18592
    4894:	10c5883a 	add	r2,r2,r3
    4898:	11000017 	ldw	r4,0(r2)
    489c:	2000683a 	jmp	r4
    48a0:	000049d0 	cmplti	zero,zero,295
    48a4:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48a8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48ac:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48b0:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48b4:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48b8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48bc:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48c0:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48c4:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48c8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48cc:	00004b3c 	xorhi	zero,zero,300
    48d0:	00004b90 	cmplti	zero,zero,302
    48d4:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48d8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48dc:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48e0:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48e4:	00004b90 	cmplti	zero,zero,302
    48e8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48ec:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48f0:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48f4:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48f8:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    48fc:	00004be0 	cmpeqi	zero,zero,303
    4900:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    4904:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    4908:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    490c:	00004924 	muli	zero,zero,292
    4910:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    4914:	00004bf4 	movhi	zero,303
    4918:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    491c:	00004980 	call	498 <__alt_mem_onchip_memory2_0-0x3b68>
    4920:	00004c00 	call	4c0 <__alt_mem_onchip_memory2_0-0x3b40>
    4924:	a4400017 	ldw	r17,0(r20)
    4928:	8809883a 	mov	r4,r17
    492c:	00046640 	call	4664 <strlen>
    4930:	d9000917 	ldw	r4,36(sp)
    4934:	b8a5c83a 	sub	r18,r23,r2
    4938:	b00b883a 	mov	r5,r22
    493c:	01800804 	movi	r6,32
    4940:	900f883a 	mov	r7,r18
    4944:	1021883a 	mov	r16,r2
    4948:	00046840 	call	4684 <print_repeat>
    494c:	1000b81e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4950:	b0c00117 	ldw	r3,4(r22)
    4954:	d9000917 	ldw	r4,36(sp)
    4958:	880d883a 	mov	r6,r17
    495c:	b00b883a 	mov	r5,r22
    4960:	800f883a 	mov	r7,r16
    4964:	183ee83a 	callr	r3
    4968:	1000b11e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    496c:	d8c00217 	ldw	r3,8(sp)
    4970:	a5000104 	addi	r20,r20,4
    4974:	1c05883a 	add	r2,r3,r16
    4978:	90a5883a 	add	r18,r18,r2
    497c:	dc800215 	stw	r18,8(sp)
    4980:	0023883a 	mov	r17,zero
    4984:	003f7706 	br	4764 <___vfprintf_internal_r+0x60>
    4988:	d8000615 	stw	zero,24(sp)
    498c:	003f7506 	br	4764 <___vfprintf_internal_r+0x60>
    4990:	04400084 	movi	r17,2
    4994:	d9c00815 	stw	r7,32(sp)
    4998:	003f7206 	br	4764 <___vfprintf_internal_r+0x60>
    499c:	00800044 	movi	r2,1
    49a0:	d8800715 	stw	r2,28(sp)
    49a4:	003f6f06 	br	4764 <___vfprintf_internal_r+0x60>
    49a8:	b800af16 	blt	r23,zero,4c68 <___vfprintf_internal_r+0x564>
    49ac:	b809883a 	mov	r4,r23
    49b0:	01400284 	movi	r5,10
    49b4:	00050c00 	call	50c0 <__mulsi3>
    49b8:	1007883a 	mov	r3,r2
    49bc:	90803fcc 	andi	r2,r18,255
    49c0:	1080201c 	xori	r2,r2,128
    49c4:	10bfe004 	addi	r2,r2,-128
    49c8:	18af883a 	add	r23,r3,r2
    49cc:	003f6506 	br	4764 <___vfprintf_internal_r+0x60>
    49d0:	00c00404 	movi	r3,16
    49d4:	00800044 	movi	r2,1
    49d8:	d8c00515 	stw	r3,20(sp)
    49dc:	d8000415 	stw	zero,16(sp)
    49e0:	d8800315 	stw	r2,12(sp)
    49e4:	182b883a 	mov	r21,r3
    49e8:	d8c00717 	ldw	r3,28(sp)
    49ec:	1805003a 	cmpeq	r2,r3,zero
    49f0:	10006b1e 	bne	r2,zero,4ba0 <___vfprintf_internal_r+0x49c>
    49f4:	d8800417 	ldw	r2,16(sp)
    49f8:	10006b1e 	bne	r2,zero,4ba8 <___vfprintf_internal_r+0x4a4>
    49fc:	a4800017 	ldw	r18,0(r20)
    4a00:	a5000104 	addi	r20,r20,4
    4a04:	dd000115 	stw	r20,4(sp)
    4a08:	9009883a 	mov	r4,r18
    4a0c:	a80b883a 	mov	r5,r21
    4a10:	00050b00 	call	50b0 <__udivsi3>
    4a14:	0023883a 	mov	r17,zero
    4a18:	1021883a 	mov	r16,r2
    4a1c:	10006d26 	beq	r2,zero,4bd4 <___vfprintf_internal_r+0x4d0>
    4a20:	07000044 	movi	fp,1
    4a24:	e029883a 	mov	r20,fp
    4a28:	a009883a 	mov	r4,r20
    4a2c:	a80b883a 	mov	r5,r21
    4a30:	00050c00 	call	50c0 <__mulsi3>
    4a34:	8009883a 	mov	r4,r16
    4a38:	a80b883a 	mov	r5,r21
    4a3c:	1029883a 	mov	r20,r2
    4a40:	00050b00 	call	50b0 <__udivsi3>
    4a44:	1021883a 	mov	r16,r2
    4a48:	e7000044 	addi	fp,fp,1
    4a4c:	103ff61e 	bne	r2,zero,4a28 <___vfprintf_internal_r+0x324>
    4a50:	d8800817 	ldw	r2,32(sp)
    4a54:	bf2fc83a 	sub	r23,r23,fp
    4a58:	10009226 	beq	r2,zero,4ca4 <___vfprintf_internal_r+0x5a0>
    4a5c:	8805003a 	cmpeq	r2,r17,zero
    4a60:	10000d1e 	bne	r2,zero,4a98 <___vfprintf_internal_r+0x394>
    4a64:	b0c00117 	ldw	r3,4(r22)
    4a68:	d9000917 	ldw	r4,36(sp)
    4a6c:	00800b44 	movi	r2,45
    4a70:	d8800005 	stb	r2,0(sp)
    4a74:	b00b883a 	mov	r5,r22
    4a78:	d80d883a 	mov	r6,sp
    4a7c:	01c00044 	movi	r7,1
    4a80:	183ee83a 	callr	r3
    4a84:	10006a1e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4a88:	d8c00217 	ldw	r3,8(sp)
    4a8c:	bdffffc4 	addi	r23,r23,-1
    4a90:	18c00044 	addi	r3,r3,1
    4a94:	d8c00215 	stw	r3,8(sp)
    4a98:	d9000917 	ldw	r4,36(sp)
    4a9c:	b00b883a 	mov	r5,r22
    4aa0:	01800c04 	movi	r6,48
    4aa4:	b80f883a 	mov	r7,r23
    4aa8:	00046840 	call	4684 <print_repeat>
    4aac:	1000601e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4ab0:	d8800217 	ldw	r2,8(sp)
    4ab4:	b8a3883a 	add	r17,r23,r2
    4ab8:	a0005826 	beq	r20,zero,4c1c <___vfprintf_internal_r+0x518>
    4abc:	9009883a 	mov	r4,r18
    4ac0:	a00b883a 	mov	r5,r20
    4ac4:	00050b00 	call	50b0 <__udivsi3>
    4ac8:	11000c04 	addi	r4,r2,48
    4acc:	20c03fcc 	andi	r3,r4,255
    4ad0:	00800e44 	movi	r2,57
    4ad4:	10c0052e 	bgeu	r2,r3,4aec <___vfprintf_internal_r+0x3e8>
    4ad8:	d8c00317 	ldw	r3,12(sp)
    4adc:	1805003a 	cmpeq	r2,r3,zero
    4ae0:	10004c1e 	bne	r2,zero,4c14 <___vfprintf_internal_r+0x510>
    4ae4:	008001c4 	movi	r2,7
    4ae8:	2089883a 	add	r4,r4,r2
    4aec:	b0c00117 	ldw	r3,4(r22)
    4af0:	d9000005 	stb	r4,0(sp)
    4af4:	d9000917 	ldw	r4,36(sp)
    4af8:	b00b883a 	mov	r5,r22
    4afc:	d80d883a 	mov	r6,sp
    4b00:	01c00044 	movi	r7,1
    4b04:	183ee83a 	callr	r3
    4b08:	1000491e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4b0c:	a009883a 	mov	r4,r20
    4b10:	a80b883a 	mov	r5,r21
    4b14:	00050b00 	call	50b0 <__udivsi3>
    4b18:	1021883a 	mov	r16,r2
    4b1c:	8c400044 	addi	r17,r17,1
    4b20:	10003e26 	beq	r2,zero,4c1c <___vfprintf_internal_r+0x518>
    4b24:	a00b883a 	mov	r5,r20
    4b28:	9009883a 	mov	r4,r18
    4b2c:	00050b80 	call	50b8 <__umodsi3>
    4b30:	1025883a 	mov	r18,r2
    4b34:	8029883a 	mov	r20,r16
    4b38:	003fe006 	br	4abc <___vfprintf_internal_r+0x3b8>
    4b3c:	d9000917 	ldw	r4,36(sp)
    4b40:	b00b883a 	mov	r5,r22
    4b44:	01800804 	movi	r6,32
    4b48:	b9ffffc4 	addi	r7,r23,-1
    4b4c:	00046840 	call	4684 <print_repeat>
    4b50:	1000371e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4b54:	a0800017 	ldw	r2,0(r20)
    4b58:	b0c00117 	ldw	r3,4(r22)
    4b5c:	d9000917 	ldw	r4,36(sp)
    4b60:	d8800005 	stb	r2,0(sp)
    4b64:	b00b883a 	mov	r5,r22
    4b68:	d80d883a 	mov	r6,sp
    4b6c:	01c00044 	movi	r7,1
    4b70:	183ee83a 	callr	r3
    4b74:	10002e1e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4b78:	d8800217 	ldw	r2,8(sp)
    4b7c:	a5000104 	addi	r20,r20,4
    4b80:	0023883a 	mov	r17,zero
    4b84:	15c5883a 	add	r2,r2,r23
    4b88:	d8800215 	stw	r2,8(sp)
    4b8c:	003ef506 	br	4764 <___vfprintf_internal_r+0x60>
    4b90:	d8c00717 	ldw	r3,28(sp)
    4b94:	dd400517 	ldw	r21,20(sp)
    4b98:	1805003a 	cmpeq	r2,r3,zero
    4b9c:	103f9526 	beq	r2,zero,49f4 <___vfprintf_internal_r+0x2f0>
    4ba0:	d8c00417 	ldw	r3,16(sp)
    4ba4:	183f9526 	beq	r3,zero,49fc <___vfprintf_internal_r+0x2f8>
    4ba8:	a4800017 	ldw	r18,0(r20)
    4bac:	a5000104 	addi	r20,r20,4
    4bb0:	dd000115 	stw	r20,4(sp)
    4bb4:	903f940e 	bge	r18,zero,4a08 <___vfprintf_internal_r+0x304>
    4bb8:	04a5c83a 	sub	r18,zero,r18
    4bbc:	9009883a 	mov	r4,r18
    4bc0:	a80b883a 	mov	r5,r21
    4bc4:	00050b00 	call	50b0 <__udivsi3>
    4bc8:	04400044 	movi	r17,1
    4bcc:	1021883a 	mov	r16,r2
    4bd0:	103f931e 	bne	r2,zero,4a20 <___vfprintf_internal_r+0x31c>
    4bd4:	07000044 	movi	fp,1
    4bd8:	e029883a 	mov	r20,fp
    4bdc:	003f9c06 	br	4a50 <___vfprintf_internal_r+0x34c>
    4be0:	00800204 	movi	r2,8
    4be4:	102b883a 	mov	r21,r2
    4be8:	d8800515 	stw	r2,20(sp)
    4bec:	d8000415 	stw	zero,16(sp)
    4bf0:	003f7d06 	br	49e8 <___vfprintf_internal_r+0x2e4>
    4bf4:	dd400517 	ldw	r21,20(sp)
    4bf8:	d8000415 	stw	zero,16(sp)
    4bfc:	003f7a06 	br	49e8 <___vfprintf_internal_r+0x2e4>
    4c00:	00c00404 	movi	r3,16
    4c04:	182b883a 	mov	r21,r3
    4c08:	d8c00515 	stw	r3,20(sp)
    4c0c:	d8000415 	stw	zero,16(sp)
    4c10:	003f7506 	br	49e8 <___vfprintf_internal_r+0x2e4>
    4c14:	008009c4 	movi	r2,39
    4c18:	003fb306 	br	4ae8 <___vfprintf_internal_r+0x3e4>
    4c1c:	dd000117 	ldw	r20,4(sp)
    4c20:	8f23883a 	add	r17,r17,fp
    4c24:	dc400215 	stw	r17,8(sp)
    4c28:	0023883a 	mov	r17,zero
    4c2c:	003ecd06 	br	4764 <___vfprintf_internal_r+0x60>
    4c30:	00bfffc4 	movi	r2,-1
    4c34:	d8800215 	stw	r2,8(sp)
    4c38:	003ee706 	br	47d8 <___vfprintf_internal_r+0xd4>
    4c3c:	b0c00117 	ldw	r3,4(r22)
    4c40:	d9000917 	ldw	r4,36(sp)
    4c44:	d9400005 	stb	r5,0(sp)
    4c48:	d80d883a 	mov	r6,sp
    4c4c:	b00b883a 	mov	r5,r22
    4c50:	183ee83a 	callr	r3
    4c54:	103ff61e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4c58:	d8c00217 	ldw	r3,8(sp)
    4c5c:	18c00044 	addi	r3,r3,1
    4c60:	d8c00215 	stw	r3,8(sp)
    4c64:	003ebf06 	br	4764 <___vfprintf_internal_r+0x60>
    4c68:	0007883a 	mov	r3,zero
    4c6c:	003f5306 	br	49bc <___vfprintf_internal_r+0x2b8>
    4c70:	b0c00117 	ldw	r3,4(r22)
    4c74:	d9000005 	stb	r4,0(sp)
    4c78:	d9000917 	ldw	r4,36(sp)
    4c7c:	b00b883a 	mov	r5,r22
    4c80:	d80d883a 	mov	r6,sp
    4c84:	880f883a 	mov	r7,r17
    4c88:	183ee83a 	callr	r3
    4c8c:	103fe81e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4c90:	d8800217 	ldw	r2,8(sp)
    4c94:	1445883a 	add	r2,r2,r17
    4c98:	0023883a 	mov	r17,zero
    4c9c:	d8800215 	stw	r2,8(sp)
    4ca0:	003eb006 	br	4764 <___vfprintf_internal_r+0x60>
    4ca4:	8821003a 	cmpeq	r16,r17,zero
    4ca8:	80001426 	beq	r16,zero,4cfc <___vfprintf_internal_r+0x5f8>
    4cac:	d9000917 	ldw	r4,36(sp)
    4cb0:	b00b883a 	mov	r5,r22
    4cb4:	01800804 	movi	r6,32
    4cb8:	b80f883a 	mov	r7,r23
    4cbc:	00046840 	call	4684 <print_repeat>
    4cc0:	103fdb1e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4cc4:	d8c00217 	ldw	r3,8(sp)
    4cc8:	b8e3883a 	add	r17,r23,r3
    4ccc:	803f7a1e 	bne	r16,zero,4ab8 <___vfprintf_internal_r+0x3b4>
    4cd0:	b0c00117 	ldw	r3,4(r22)
    4cd4:	d9000917 	ldw	r4,36(sp)
    4cd8:	00800b44 	movi	r2,45
    4cdc:	d8800005 	stb	r2,0(sp)
    4ce0:	b00b883a 	mov	r5,r22
    4ce4:	d80d883a 	mov	r6,sp
    4ce8:	01c00044 	movi	r7,1
    4cec:	183ee83a 	callr	r3
    4cf0:	103fcf1e 	bne	r2,zero,4c30 <___vfprintf_internal_r+0x52c>
    4cf4:	8c400044 	addi	r17,r17,1
    4cf8:	003f6f06 	br	4ab8 <___vfprintf_internal_r+0x3b4>
    4cfc:	bdffffc4 	addi	r23,r23,-1
    4d00:	003fea06 	br	4cac <___vfprintf_internal_r+0x5a8>

00004d04 <__vfprintf_internal>:
    4d04:	00800034 	movhi	r2,0
    4d08:	1096b404 	addi	r2,r2,23248
    4d0c:	2013883a 	mov	r9,r4
    4d10:	11000017 	ldw	r4,0(r2)
    4d14:	2805883a 	mov	r2,r5
    4d18:	300f883a 	mov	r7,r6
    4d1c:	480b883a 	mov	r5,r9
    4d20:	100d883a 	mov	r6,r2
    4d24:	00047041 	jmpi	4704 <___vfprintf_internal_r>

00004d28 <__sfvwrite_small_dev>:
    4d28:	2880000b 	ldhu	r2,0(r5)
    4d2c:	defffa04 	addi	sp,sp,-24
    4d30:	dcc00315 	stw	r19,12(sp)
    4d34:	1080020c 	andi	r2,r2,8
    4d38:	dc800215 	stw	r18,8(sp)
    4d3c:	dc400115 	stw	r17,4(sp)
    4d40:	dfc00515 	stw	ra,20(sp)
    4d44:	dd000415 	stw	r20,16(sp)
    4d48:	dc000015 	stw	r16,0(sp)
    4d4c:	2825883a 	mov	r18,r5
    4d50:	2027883a 	mov	r19,r4
    4d54:	3023883a 	mov	r17,r6
    4d58:	10002026 	beq	r2,zero,4ddc <__sfvwrite_small_dev+0xb4>
    4d5c:	2940008f 	ldh	r5,2(r5)
    4d60:	28000f16 	blt	r5,zero,4da0 <__sfvwrite_small_dev+0x78>
    4d64:	01c01b0e 	bge	zero,r7,4dd4 <__sfvwrite_small_dev+0xac>
    4d68:	3821883a 	mov	r16,r7
    4d6c:	05010004 	movi	r20,1024
    4d70:	00000206 	br	4d7c <__sfvwrite_small_dev+0x54>
    4d74:	0400170e 	bge	zero,r16,4dd4 <__sfvwrite_small_dev+0xac>
    4d78:	9140008f 	ldh	r5,2(r18)
    4d7c:	880d883a 	mov	r6,r17
    4d80:	9809883a 	mov	r4,r19
    4d84:	800f883a 	mov	r7,r16
    4d88:	a400010e 	bge	r20,r16,4d90 <__sfvwrite_small_dev+0x68>
    4d8c:	01c10004 	movi	r7,1024
    4d90:	0004efc0 	call	4efc <_write_r>
    4d94:	88a3883a 	add	r17,r17,r2
    4d98:	80a1c83a 	sub	r16,r16,r2
    4d9c:	00bff516 	blt	zero,r2,4d74 <__sfvwrite_small_dev+0x4c>
    4da0:	9080000b 	ldhu	r2,0(r18)
    4da4:	00ffffc4 	movi	r3,-1
    4da8:	10801014 	ori	r2,r2,64
    4dac:	9080000d 	sth	r2,0(r18)
    4db0:	1805883a 	mov	r2,r3
    4db4:	dfc00517 	ldw	ra,20(sp)
    4db8:	dd000417 	ldw	r20,16(sp)
    4dbc:	dcc00317 	ldw	r19,12(sp)
    4dc0:	dc800217 	ldw	r18,8(sp)
    4dc4:	dc400117 	ldw	r17,4(sp)
    4dc8:	dc000017 	ldw	r16,0(sp)
    4dcc:	dec00604 	addi	sp,sp,24
    4dd0:	f800283a 	ret
    4dd4:	0007883a 	mov	r3,zero
    4dd8:	003ff506 	br	4db0 <__sfvwrite_small_dev+0x88>
    4ddc:	00ffffc4 	movi	r3,-1
    4de0:	003ff306 	br	4db0 <__sfvwrite_small_dev+0x88>

00004de4 <__sfvwrite_small_str>:
    4de4:	2900000b 	ldhu	r4,0(r5)
    4de8:	defffd04 	addi	sp,sp,-12
    4dec:	dc000015 	stw	r16,0(sp)
    4df0:	20ffffcc 	andi	r3,r4,65535
    4df4:	1880020c 	andi	r2,r3,8
    4df8:	2821883a 	mov	r16,r5
    4dfc:	dfc00215 	stw	ra,8(sp)
    4e00:	dc400115 	stw	r17,4(sp)
    4e04:	300b883a 	mov	r5,r6
    4e08:	10001d26 	beq	r2,zero,4e80 <__sfvwrite_small_str+0x9c>
    4e0c:	8080008f 	ldh	r2,2(r16)
    4e10:	1000190e 	bge	r2,zero,4e78 <__sfvwrite_small_str+0x94>
    4e14:	1880800c 	andi	r2,r3,512
    4e18:	10001726 	beq	r2,zero,4e78 <__sfvwrite_small_str+0x94>
    4e1c:	81800517 	ldw	r6,20(r16)
    4e20:	31c0020e 	bge	r6,r7,4e2c <__sfvwrite_small_str+0x48>
    4e24:	1880200c 	andi	r2,r3,128
    4e28:	1000131e 	bne	r2,zero,4e78 <__sfvwrite_small_str+0x94>
    4e2c:	3023883a 	mov	r17,r6
    4e30:	3980010e 	bge	r7,r6,4e38 <__sfvwrite_small_str+0x54>
    4e34:	3823883a 	mov	r17,r7
    4e38:	81000417 	ldw	r4,16(r16)
    4e3c:	880d883a 	mov	r6,r17
    4e40:	0004e9c0 	call	4e9c <memmove>
    4e44:	80800417 	ldw	r2,16(r16)
    4e48:	80c00517 	ldw	r3,20(r16)
    4e4c:	0009883a 	mov	r4,zero
    4e50:	1445883a 	add	r2,r2,r17
    4e54:	1c47c83a 	sub	r3,r3,r17
    4e58:	80800415 	stw	r2,16(r16)
    4e5c:	2005883a 	mov	r2,r4
    4e60:	80c00515 	stw	r3,20(r16)
    4e64:	dfc00217 	ldw	ra,8(sp)
    4e68:	dc400117 	ldw	r17,4(sp)
    4e6c:	dc000017 	ldw	r16,0(sp)
    4e70:	dec00304 	addi	sp,sp,12
    4e74:	f800283a 	ret
    4e78:	20801014 	ori	r2,r4,64
    4e7c:	8080000d 	sth	r2,0(r16)
    4e80:	013fffc4 	movi	r4,-1
    4e84:	2005883a 	mov	r2,r4
    4e88:	dfc00217 	ldw	ra,8(sp)
    4e8c:	dc400117 	ldw	r17,4(sp)
    4e90:	dc000017 	ldw	r16,0(sp)
    4e94:	dec00304 	addi	sp,sp,12
    4e98:	f800283a 	ret

00004e9c <memmove>:
    4e9c:	2011883a 	mov	r8,r4
    4ea0:	2900022e 	bgeu	r5,r4,4eac <memmove+0x10>
    4ea4:	2989883a 	add	r4,r5,r6
    4ea8:	41000a36 	bltu	r8,r4,4ed4 <memmove+0x38>
    4eac:	30000726 	beq	r6,zero,4ecc <memmove+0x30>
    4eb0:	000f883a 	mov	r7,zero
    4eb4:	29c5883a 	add	r2,r5,r7
    4eb8:	11000003 	ldbu	r4,0(r2)
    4ebc:	3a07883a 	add	r3,r7,r8
    4ec0:	39c00044 	addi	r7,r7,1
    4ec4:	19000005 	stb	r4,0(r3)
    4ec8:	31fffa1e 	bne	r6,r7,4eb4 <memmove+0x18>
    4ecc:	4005883a 	mov	r2,r8
    4ed0:	f800283a 	ret
    4ed4:	303ffd26 	beq	r6,zero,4ecc <memmove+0x30>
    4ed8:	4187883a 	add	r3,r8,r6
    4edc:	198dc83a 	sub	r6,r3,r6
    4ee0:	213fffc4 	addi	r4,r4,-1
    4ee4:	20800003 	ldbu	r2,0(r4)
    4ee8:	18ffffc4 	addi	r3,r3,-1
    4eec:	18800005 	stb	r2,0(r3)
    4ef0:	19bffb1e 	bne	r3,r6,4ee0 <memmove+0x44>
    4ef4:	4005883a 	mov	r2,r8
    4ef8:	f800283a 	ret

00004efc <_write_r>:
    4efc:	defffd04 	addi	sp,sp,-12
    4f00:	dc000015 	stw	r16,0(sp)
    4f04:	04000034 	movhi	r16,0
    4f08:	84171f04 	addi	r16,r16,23676
    4f0c:	dc400115 	stw	r17,4(sp)
    4f10:	80000015 	stw	zero,0(r16)
    4f14:	2023883a 	mov	r17,r4
    4f18:	2809883a 	mov	r4,r5
    4f1c:	300b883a 	mov	r5,r6
    4f20:	380d883a 	mov	r6,r7
    4f24:	dfc00215 	stw	ra,8(sp)
    4f28:	00053480 	call	5348 <write>
    4f2c:	1007883a 	mov	r3,r2
    4f30:	00bfffc4 	movi	r2,-1
    4f34:	18800626 	beq	r3,r2,4f50 <_write_r+0x54>
    4f38:	1805883a 	mov	r2,r3
    4f3c:	dfc00217 	ldw	ra,8(sp)
    4f40:	dc400117 	ldw	r17,4(sp)
    4f44:	dc000017 	ldw	r16,0(sp)
    4f48:	dec00304 	addi	sp,sp,12
    4f4c:	f800283a 	ret
    4f50:	80800017 	ldw	r2,0(r16)
    4f54:	103ff826 	beq	r2,zero,4f38 <_write_r+0x3c>
    4f58:	88800015 	stw	r2,0(r17)
    4f5c:	1805883a 	mov	r2,r3
    4f60:	dfc00217 	ldw	ra,8(sp)
    4f64:	dc400117 	ldw	r17,4(sp)
    4f68:	dc000017 	ldw	r16,0(sp)
    4f6c:	dec00304 	addi	sp,sp,12
    4f70:	f800283a 	ret

00004f74 <udivmodsi4>:
    4f74:	29001b2e 	bgeu	r5,r4,4fe4 <udivmodsi4+0x70>
    4f78:	28001a16 	blt	r5,zero,4fe4 <udivmodsi4+0x70>
    4f7c:	00800044 	movi	r2,1
    4f80:	0007883a 	mov	r3,zero
    4f84:	01c007c4 	movi	r7,31
    4f88:	00000306 	br	4f98 <udivmodsi4+0x24>
    4f8c:	19c01326 	beq	r3,r7,4fdc <udivmodsi4+0x68>
    4f90:	18c00044 	addi	r3,r3,1
    4f94:	28000416 	blt	r5,zero,4fa8 <udivmodsi4+0x34>
    4f98:	294b883a 	add	r5,r5,r5
    4f9c:	1085883a 	add	r2,r2,r2
    4fa0:	293ffa36 	bltu	r5,r4,4f8c <udivmodsi4+0x18>
    4fa4:	10000d26 	beq	r2,zero,4fdc <udivmodsi4+0x68>
    4fa8:	0007883a 	mov	r3,zero
    4fac:	21400236 	bltu	r4,r5,4fb8 <udivmodsi4+0x44>
    4fb0:	2149c83a 	sub	r4,r4,r5
    4fb4:	1886b03a 	or	r3,r3,r2
    4fb8:	1004d07a 	srli	r2,r2,1
    4fbc:	280ad07a 	srli	r5,r5,1
    4fc0:	103ffa1e 	bne	r2,zero,4fac <udivmodsi4+0x38>
    4fc4:	30000226 	beq	r6,zero,4fd0 <udivmodsi4+0x5c>
    4fc8:	2005883a 	mov	r2,r4
    4fcc:	f800283a 	ret
    4fd0:	1809883a 	mov	r4,r3
    4fd4:	2005883a 	mov	r2,r4
    4fd8:	f800283a 	ret
    4fdc:	0007883a 	mov	r3,zero
    4fe0:	003ff806 	br	4fc4 <udivmodsi4+0x50>
    4fe4:	00800044 	movi	r2,1
    4fe8:	0007883a 	mov	r3,zero
    4fec:	003fef06 	br	4fac <udivmodsi4+0x38>

00004ff0 <__divsi3>:
    4ff0:	defffe04 	addi	sp,sp,-8
    4ff4:	dc000015 	stw	r16,0(sp)
    4ff8:	dfc00115 	stw	ra,4(sp)
    4ffc:	0021883a 	mov	r16,zero
    5000:	20000c16 	blt	r4,zero,5034 <__divsi3+0x44>
    5004:	000d883a 	mov	r6,zero
    5008:	28000e16 	blt	r5,zero,5044 <__divsi3+0x54>
    500c:	0004f740 	call	4f74 <udivmodsi4>
    5010:	1007883a 	mov	r3,r2
    5014:	8005003a 	cmpeq	r2,r16,zero
    5018:	1000011e 	bne	r2,zero,5020 <__divsi3+0x30>
    501c:	00c7c83a 	sub	r3,zero,r3
    5020:	1805883a 	mov	r2,r3
    5024:	dfc00117 	ldw	ra,4(sp)
    5028:	dc000017 	ldw	r16,0(sp)
    502c:	dec00204 	addi	sp,sp,8
    5030:	f800283a 	ret
    5034:	0109c83a 	sub	r4,zero,r4
    5038:	04000044 	movi	r16,1
    503c:	000d883a 	mov	r6,zero
    5040:	283ff20e 	bge	r5,zero,500c <__divsi3+0x1c>
    5044:	014bc83a 	sub	r5,zero,r5
    5048:	8021003a 	cmpeq	r16,r16,zero
    504c:	003fef06 	br	500c <__divsi3+0x1c>

00005050 <__modsi3>:
    5050:	deffff04 	addi	sp,sp,-4
    5054:	dfc00015 	stw	ra,0(sp)
    5058:	01800044 	movi	r6,1
    505c:	2807883a 	mov	r3,r5
    5060:	20000416 	blt	r4,zero,5074 <__modsi3+0x24>
    5064:	28000c16 	blt	r5,zero,5098 <__modsi3+0x48>
    5068:	dfc00017 	ldw	ra,0(sp)
    506c:	dec00104 	addi	sp,sp,4
    5070:	0004f741 	jmpi	4f74 <udivmodsi4>
    5074:	0109c83a 	sub	r4,zero,r4
    5078:	28000b16 	blt	r5,zero,50a8 <__modsi3+0x58>
    507c:	180b883a 	mov	r5,r3
    5080:	01800044 	movi	r6,1
    5084:	0004f740 	call	4f74 <udivmodsi4>
    5088:	0085c83a 	sub	r2,zero,r2
    508c:	dfc00017 	ldw	ra,0(sp)
    5090:	dec00104 	addi	sp,sp,4
    5094:	f800283a 	ret
    5098:	014bc83a 	sub	r5,zero,r5
    509c:	dfc00017 	ldw	ra,0(sp)
    50a0:	dec00104 	addi	sp,sp,4
    50a4:	0004f741 	jmpi	4f74 <udivmodsi4>
    50a8:	0147c83a 	sub	r3,zero,r5
    50ac:	003ff306 	br	507c <__modsi3+0x2c>

000050b0 <__udivsi3>:
    50b0:	000d883a 	mov	r6,zero
    50b4:	0004f741 	jmpi	4f74 <udivmodsi4>

000050b8 <__umodsi3>:
    50b8:	01800044 	movi	r6,1
    50bc:	0004f741 	jmpi	4f74 <udivmodsi4>

000050c0 <__mulsi3>:
    50c0:	20000a26 	beq	r4,zero,50ec <__mulsi3+0x2c>
    50c4:	0007883a 	mov	r3,zero
    50c8:	2080004c 	andi	r2,r4,1
    50cc:	1005003a 	cmpeq	r2,r2,zero
    50d0:	2008d07a 	srli	r4,r4,1
    50d4:	1000011e 	bne	r2,zero,50dc <__mulsi3+0x1c>
    50d8:	1947883a 	add	r3,r3,r5
    50dc:	294b883a 	add	r5,r5,r5
    50e0:	203ff91e 	bne	r4,zero,50c8 <__mulsi3+0x8>
    50e4:	1805883a 	mov	r2,r3
    50e8:	f800283a 	ret
    50ec:	0007883a 	mov	r3,zero
    50f0:	1805883a 	mov	r2,r3
    50f4:	f800283a 	ret

000050f8 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    50f8:	2900051e 	bne	r5,r4,5110 <alt_load_section+0x18>
    50fc:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    5100:	20800017 	ldw	r2,0(r4)
    5104:	21000104 	addi	r4,r4,4
    5108:	28800015 	stw	r2,0(r5)
    510c:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    5110:	29bffb1e 	bne	r5,r6,5100 <alt_load_section+0x8>
    5114:	f800283a 	ret

00005118 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5118:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    511c:	01000034 	movhi	r4,0
    5120:	2116bd04 	addi	r4,r4,23284
    5124:	01400034 	movhi	r5,0
    5128:	29565b04 	addi	r5,r5,22892
    512c:	01800034 	movhi	r6,0
    5130:	3196bd04 	addi	r6,r6,23284
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5134:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5138:	00050f80 	call	50f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    513c:	01000034 	movhi	r4,0
    5140:	21100804 	addi	r4,r4,16416
    5144:	01400034 	movhi	r5,0
    5148:	29500804 	addi	r5,r5,16416
    514c:	01800034 	movhi	r6,0
    5150:	31900804 	addi	r6,r6,16416
    5154:	00050f80 	call	50f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5158:	01000034 	movhi	r4,0
    515c:	21161704 	addi	r4,r4,22620
    5160:	01400034 	movhi	r5,0
    5164:	29561704 	addi	r5,r5,22620
    5168:	01800034 	movhi	r6,0
    516c:	31965b04 	addi	r6,r6,22892
    5170:	00050f80 	call	50f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5174:	00057280 	call	5728 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5178:	dfc00017 	ldw	ra,0(sp)
    517c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5180:	00058141 	jmpi	5814 <alt_icache_flush_all>

00005184 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5184:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5188:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    518c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5190:	00053f80 	call	53f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5194:	00053c00 	call	53c0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5198:	d1206c17 	ldw	r4,-32336(gp)
    519c:	d1606d17 	ldw	r5,-32332(gp)
    51a0:	d1a06e17 	ldw	r6,-32328(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    51a4:	dfc00017 	ldw	ra,0(sp)
    51a8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    51ac:	000405c1 	jmpi	405c <main>

000051b0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    51b0:	defff804 	addi	sp,sp,-32
    51b4:	dfc00415 	stw	ra,16(sp)
    51b8:	dc800315 	stw	r18,12(sp)
    51bc:	dc400215 	stw	r17,8(sp)
    51c0:	dc000115 	stw	r16,4(sp)
    51c4:	d9400515 	stw	r5,20(sp)
    51c8:	d9800615 	stw	r6,24(sp)
    51cc:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    51d0:	d8800504 	addi	r2,sp,20
    51d4:	2025883a 	mov	r18,r4
    51d8:	d8800015 	stw	r2,0(sp)
    51dc:	00003d06 	br	52d4 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    51e0:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    51e4:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    51e8:	18800226 	beq	r3,r2,51f4 <alt_printf+0x44>
        {
            alt_putchar(c);
    51ec:	1809883a 	mov	r4,r3
    51f0:	00000a06 	br	521c <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    51f4:	91000007 	ldb	r4,0(r18)
    51f8:	94800044 	addi	r18,r18,1
    51fc:	20003726 	beq	r4,zero,52dc <alt_printf+0x12c>
            {
                if (c == '%')
    5200:	20c00626 	beq	r4,r3,521c <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    5204:	008018c4 	movi	r2,99
    5208:	2080061e 	bne	r4,r2,5224 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    520c:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    5210:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    5214:	10800104 	addi	r2,r2,4
    5218:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    521c:	00052f40 	call	52f4 <alt_putchar>
    5220:	00002c06 	br	52d4 <alt_printf+0x124>
                }
                else if (c == 'x')
    5224:	00801e04 	movi	r2,120
    5228:	20801e1e 	bne	r4,r2,52a4 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    522c:	d8800017 	ldw	r2,0(sp)
    5230:	14400017 	ldw	r17,0(r2)
    5234:	10800104 	addi	r2,r2,4
    5238:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    523c:	88000226 	beq	r17,zero,5248 <alt_printf+0x98>
    5240:	04000704 	movi	r16,28
    5244:	00000306 	br	5254 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    5248:	01000c04 	movi	r4,48
    524c:	003ff306 	br	521c <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    5250:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    5254:	008003c4 	movi	r2,15
    5258:	1404983a 	sll	r2,r2,r16
    525c:	8884703a 	and	r2,r17,r2
    5260:	103ffb26 	beq	r2,zero,5250 <alt_printf+0xa0>
    5264:	00000b06 	br	5294 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    5268:	8884703a 	and	r2,r17,r2
    526c:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    5270:	00800244 	movi	r2,9
                            c = '0' + digit;
    5274:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    5278:	10c0012e 	bgeu	r2,r3,5280 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    527c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    5280:	21003fcc 	andi	r4,r4,255
    5284:	2100201c 	xori	r4,r4,128
    5288:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    528c:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    5290:	00052f40 	call	52f4 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    5294:	008003c4 	movi	r2,15
    5298:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    529c:	803ff20e 	bge	r16,zero,5268 <alt_printf+0xb8>
    52a0:	00000c06 	br	52d4 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    52a4:	00801cc4 	movi	r2,115
    52a8:	20800a1e 	bne	r4,r2,52d4 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    52ac:	d8800017 	ldw	r2,0(sp)
    52b0:	14000017 	ldw	r16,0(r2)
    52b4:	10800104 	addi	r2,r2,4
    52b8:	d8800015 	stw	r2,0(sp)
    52bc:	00000106 	br	52c4 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    52c0:	00052f40 	call	52f4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    52c4:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    52c8:	84000044 	addi	r16,r16,1
    52cc:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    52d0:	103ffb1e 	bne	r2,zero,52c0 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    52d4:	90c00007 	ldb	r3,0(r18)
    52d8:	183fc11e 	bne	r3,zero,51e0 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    52dc:	dfc00417 	ldw	ra,16(sp)
    52e0:	dc800317 	ldw	r18,12(sp)
    52e4:	dc400217 	ldw	r17,8(sp)
    52e8:	dc000117 	ldw	r16,4(sp)
    52ec:	dec00804 	addi	sp,sp,32
    52f0:	f800283a 	ret

000052f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    52f4:	defffd04 	addi	sp,sp,-12
    52f8:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    52fc:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    5300:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    5304:	01800044 	movi	r6,1
    5308:	01000034 	movhi	r4,0
    530c:	2116b604 	addi	r4,r4,23256
    5310:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    5314:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    5318:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    531c:	00054180 	call	5418 <altera_avalon_jtag_uart_write>
    5320:	1009883a 	mov	r4,r2
    5324:	00bfffc4 	movi	r2,-1
    5328:	2080011e 	bne	r4,r2,5330 <alt_putchar+0x3c>
    532c:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    5330:	8005883a 	mov	r2,r16
    5334:	dfc00217 	ldw	ra,8(sp)
    5338:	dc000117 	ldw	r16,4(sp)
    533c:	dec00304 	addi	sp,sp,12
    5340:	f800283a 	ret

00005344 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    5344:	000569c1 	jmpi	569c <alt_busy_sleep>

00005348 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5348:	deffff04 	addi	sp,sp,-4
    534c:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5350:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5354:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    5358:	000f883a 	mov	r7,zero
    535c:	01000034 	movhi	r4,0
    5360:	2116b604 	addi	r4,r4,23256
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5364:	18800526 	beq	r3,r2,537c <write+0x34>
    5368:	00800084 	movi	r2,2
    536c:	1880061e 	bne	r3,r2,5388 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5370:	01000034 	movhi	r4,0
    5374:	2116b604 	addi	r4,r4,23256
    5378:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    537c:	dfc00017 	ldw	ra,0(sp)
    5380:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5384:	00054181 	jmpi	5418 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5388:	00800034 	movhi	r2,0
    538c:	1096bc04 	addi	r2,r2,23280
    5390:	10800017 	ldw	r2,0(r2)
    5394:	00c00034 	movhi	r3,0
    5398:	18d71f04 	addi	r3,r3,23676
    539c:	10000226 	beq	r2,zero,53a8 <write+0x60>
    53a0:	103ee83a 	callr	r2
    53a4:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    53a8:	00801444 	movi	r2,81
    53ac:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    53b0:	00bfffc4 	movi	r2,-1
    53b4:	dfc00017 	ldw	ra,0(sp)
    53b8:	dec00104 	addi	sp,sp,4
    53bc:	f800283a 	ret

000053c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53c0:	defffe04 	addi	sp,sp,-8
    53c4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    53c8:	04000034 	movhi	r16,0
    53cc:	84169304 	addi	r16,r16,23116
    53d0:	8009883a 	mov	r4,r16
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53d4:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    53d8:	00054c40 	call	54c4 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    53dc:	01400034 	movhi	r5,0
    53e0:	2956b904 	addi	r5,r5,23268
    53e4:	8009883a 	mov	r4,r16
}
    53e8:	dfc00117 	ldw	ra,4(sp)
    53ec:	dc000017 	ldw	r16,0(sp)
    53f0:	dec00204 	addi	sp,sp,8
    53f4:	00057341 	jmpi	5734 <alt_dev_llist_insert>

000053f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    53f8:	deffff04 	addi	sp,sp,-4
    53fc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    5400:	00058180 	call	5818 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5404:	00800044 	movi	r2,1
    5408:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    540c:	dfc00017 	ldw	ra,0(sp)
    5410:	dec00104 	addi	sp,sp,4
    5414:	f800283a 	ret

00005418 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    5418:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    541c:	298f883a 	add	r7,r5,r6
    5420:	20c00104 	addi	r3,r4,4
    5424:	00000606 	br	5440 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    5428:	18800037 	ldwio	r2,0(r3)
    542c:	10bfffec 	andhi	r2,r2,65535
    5430:	10000326 	beq	r2,zero,5440 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5434:	28800007 	ldb	r2,0(r5)
    5438:	29400044 	addi	r5,r5,1
    543c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5440:	29fff936 	bltu	r5,r7,5428 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    5444:	3005883a 	mov	r2,r6
    5448:	f800283a 	ret

0000544c <get_DDRAM_addr>:
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
	{
		addr |= x_pos;
    544c:	2005883a 	mov	r2,r4
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    5450:	28000126 	beq	r5,zero,5458 <get_DDRAM_addr+0xc>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    5454:	20801014 	ori	r2,r4,64
    5458:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    545c:	10802014 	ori	r2,r2,128
    5460:	f800283a 	ret

00005464 <alt_up_character_lcd_string>:
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    5464:	00000306 	br	5474 <alt_up_character_lcd_string+0x10>
	while ( *ptr )
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    5468:	20800a17 	ldw	r2,40(r4)
    546c:	10c00065 	stbio	r3,1(r2)
		++ptr;
    5470:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5474:	28c00007 	ldb	r3,0(r5)
    5478:	183ffb1e 	bne	r3,zero,5468 <alt_up_character_lcd_string+0x4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    547c:	f800283a 	ret

00005480 <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    5480:	000f883a 	mov	r7,zero
    5484:	00000406 	br	5498 <alt_up_character_lcd_write+0x18>
	unsigned int i;
	for (i = 0; i < len; i++)
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    5488:	10c00007 	ldb	r3,0(r2)
    548c:	20800a17 	ldw	r2,40(r4)
    5490:	10c00065 	stbio	r3,1(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    5494:	39c00044 	addi	r7,r7,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    5498:	29c5883a 	add	r2,r5,r7
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    549c:	39bffa1e 	bne	r7,r6,5488 <alt_up_character_lcd_write+0x8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    54a0:	f800283a 	ret

000054a4 <alt_up_character_lcd_write_fd>:
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    54a4:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    54a8:	deffff04 	addi	sp,sp,-4
    54ac:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    54b0:	00054800 	call	5480 <alt_up_character_lcd_write>
	return 0;
}
    54b4:	0005883a 	mov	r2,zero
    54b8:	dfc00017 	ldw	ra,0(sp)
    54bc:	dec00104 	addi	sp,sp,4
    54c0:	f800283a 	ret

000054c4 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    54c4:	20c00a17 	ldw	r3,40(r4)
    54c8:	00800044 	movi	r2,1
    54cc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    54d0:	f800283a 	ret

000054d4 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    54d4:	20800a17 	ldw	r2,40(r4)
    54d8:	29403fcc 	andi	r5,r5,255
    54dc:	11400025 	stbio	r5,0(r2)
}
    54e0:	f800283a 	ret

000054e4 <alt_up_character_lcd_cursor_blink_on>:
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    54e4:	014003c4 	movi	r5,15
    54e8:	00054d41 	jmpi	54d4 <alt_up_character_lcd_send_cmd>

000054ec <alt_up_character_lcd_cursor_off>:
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    54ec:	01400304 	movi	r5,12
    54f0:	00054d41 	jmpi	54d4 <alt_up_character_lcd_send_cmd>

000054f4 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    54f4:	defffe04 	addi	sp,sp,-8
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    54f8:	008009c4 	movi	r2,39
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    54fc:	dc000015 	stw	r16,0(sp)
    5500:	dfc00115 	stw	ra,4(sp)
    5504:	2807883a 	mov	r3,r5
    5508:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    550c:	11400d36 	bltu	r2,r5,5544 <alt_up_character_lcd_erase_pos+0x50>
    5510:	00800044 	movi	r2,1
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5514:	300b883a 	mov	r5,r6
    5518:	1809883a 	mov	r4,r3
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    551c:	11800936 	bltu	r2,r6,5544 <alt_up_character_lcd_erase_pos+0x50>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5520:	000544c0 	call	544c <get_DDRAM_addr>
    5524:	11403fcc 	andi	r5,r2,255
    5528:	8009883a 	mov	r4,r16
    552c:	00054d40 	call	54d4 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    5530:	80c00a17 	ldw	r3,40(r16)
    5534:	00800084 	movi	r2,2
    5538:	18800065 	stbio	r2,1(r3)
    553c:	0005883a 	mov	r2,zero
    5540:	00000106 	br	5548 <alt_up_character_lcd_erase_pos+0x54>
	return 0;
    5544:	00bfffc4 	movi	r2,-1
}
    5548:	dfc00117 	ldw	ra,4(sp)
    554c:	dc000017 	ldw	r16,0(sp)
    5550:	dec00204 	addi	sp,sp,8
    5554:	f800283a 	ret

00005558 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    5558:	defffc04 	addi	sp,sp,-16
    555c:	dc400115 	stw	r17,4(sp)
    5560:	dfc00315 	stw	ra,12(sp)
    5564:	dc800215 	stw	r18,8(sp)
    5568:	dc000015 	stw	r16,0(sp)
    556c:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    5570:	28000f26 	beq	r5,zero,55b0 <alt_up_character_lcd_shift_display+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    5574:	01400216 	blt	zero,r5,5580 <alt_up_character_lcd_shift_display+0x28>
    5578:	04800604 	movi	r18,24
    557c:	00000106 	br	5584 <alt_up_character_lcd_shift_display+0x2c>
    5580:	04800704 	movi	r18,28
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    5584:	2800010e 	bge	r5,zero,558c <alt_up_character_lcd_shift_display+0x34>
    5588:	014bc83a 	sub	r5,zero,r5
    558c:	2821883a 	mov	r16,r5
    5590:	00000106 	br	5598 <alt_up_character_lcd_shift_display+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5594:	00054d40 	call	54d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5598:	843fffc4 	addi	r16,r16,-1
    559c:	80c03fcc 	andi	r3,r16,255
    55a0:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    55a4:	8809883a 	mov	r4,r17
    55a8:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    55ac:	18bff91e 	bne	r3,r2,5594 <alt_up_character_lcd_shift_display+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    55b0:	dfc00317 	ldw	ra,12(sp)
    55b4:	dc800217 	ldw	r18,8(sp)
    55b8:	dc400117 	ldw	r17,4(sp)
    55bc:	dc000017 	ldw	r16,0(sp)
    55c0:	dec00404 	addi	sp,sp,16
    55c4:	f800283a 	ret

000055c8 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    55c8:	defffc04 	addi	sp,sp,-16
    55cc:	dc400115 	stw	r17,4(sp)
    55d0:	dfc00315 	stw	ra,12(sp)
    55d4:	dc800215 	stw	r18,8(sp)
    55d8:	dc000015 	stw	r16,0(sp)
    55dc:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    55e0:	28000f26 	beq	r5,zero,5620 <alt_up_character_lcd_shift_cursor+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    55e4:	01400216 	blt	zero,r5,55f0 <alt_up_character_lcd_shift_cursor+0x28>
    55e8:	04800404 	movi	r18,16
    55ec:	00000106 	br	55f4 <alt_up_character_lcd_shift_cursor+0x2c>
    55f0:	04800504 	movi	r18,20
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    55f4:	2800010e 	bge	r5,zero,55fc <alt_up_character_lcd_shift_cursor+0x34>
    55f8:	014bc83a 	sub	r5,zero,r5
    55fc:	2821883a 	mov	r16,r5
    5600:	00000106 	br	5608 <alt_up_character_lcd_shift_cursor+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5604:	00054d40 	call	54d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    5608:	843fffc4 	addi	r16,r16,-1
    560c:	80c03fcc 	andi	r3,r16,255
    5610:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    5614:	8809883a 	mov	r4,r17
    5618:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    561c:	18bff91e 	bne	r3,r2,5604 <alt_up_character_lcd_shift_cursor+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    5620:	dfc00317 	ldw	ra,12(sp)
    5624:	dc800217 	ldw	r18,8(sp)
    5628:	dc400117 	ldw	r17,4(sp)
    562c:	dc000017 	ldw	r16,0(sp)
    5630:	dec00404 	addi	sp,sp,16
    5634:	f800283a 	ret

00005638 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    5638:	defffe04 	addi	sp,sp,-8
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    563c:	008009c4 	movi	r2,39
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    5640:	dc000015 	stw	r16,0(sp)
    5644:	dfc00115 	stw	ra,4(sp)
    5648:	2807883a 	mov	r3,r5
    564c:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    5650:	11400a36 	bltu	r2,r5,567c <alt_up_character_lcd_set_cursor_pos+0x44>
    5654:	00800044 	movi	r2,1
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5658:	300b883a 	mov	r5,r6
    565c:	1809883a 	mov	r4,r3

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    5660:	11800636 	bltu	r2,r6,567c <alt_up_character_lcd_set_cursor_pos+0x44>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    5664:	000544c0 	call	544c <get_DDRAM_addr>
    5668:	11403fcc 	andi	r5,r2,255
    566c:	8009883a 	mov	r4,r16
    5670:	00054d40 	call	54d4 <alt_up_character_lcd_send_cmd>
    5674:	0005883a 	mov	r2,zero
    5678:	00000106 	br	5680 <alt_up_character_lcd_set_cursor_pos+0x48>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    567c:	00bfffc4 	movi	r2,-1
}
    5680:	dfc00117 	ldw	ra,4(sp)
    5684:	dc000017 	ldw	r16,0(sp)
    5688:	dec00204 	addi	sp,sp,8
    568c:	f800283a 	ret

00005690 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    5690:	01400034 	movhi	r5,0
    5694:	2956b904 	addi	r5,r5,23268
    5698:	00057a41 	jmpi	57a4 <alt_find_dev>

0000569c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    569c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    56a0:	014666b4 	movhi	r5,6554
    56a4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    56a8:	dc000015 	stw	r16,0(sp)
    56ac:	dfc00115 	stw	ra,4(sp)
    56b0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    56b4:	00050b00 	call	50b0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    56b8:	10001126 	beq	r2,zero,5700 <alt_busy_sleep+0x64>
    56bc:	0007883a 	mov	r3,zero
    56c0:	01200034 	movhi	r4,32768
    56c4:	213fffc4 	addi	r4,r4,-1
    56c8:	017999b4 	movhi	r5,58982
    56cc:	295999c4 	addi	r5,r5,26215
    56d0:	00000406 	br	56e4 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    56d4:	213fffc4 	addi	r4,r4,-1
    56d8:	203ffe1e 	bne	r4,zero,56d4 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    56dc:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    56e0:	18c00044 	addi	r3,r3,1
    56e4:	18bffb16 	blt	r3,r2,56d4 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    56e8:	8009883a 	mov	r4,r16
    56ec:	01400144 	movi	r5,5
    56f0:	00050c00 	call	50c0 <__mulsi3>
    56f4:	10bfffc4 	addi	r2,r2,-1
    56f8:	103ffe1e 	bne	r2,zero,56f4 <alt_busy_sleep+0x58>
    56fc:	00000506 	br	5714 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5700:	8009883a 	mov	r4,r16
    5704:	01400144 	movi	r5,5
    5708:	00050c00 	call	50c0 <__mulsi3>
    570c:	10bfffc4 	addi	r2,r2,-1
    5710:	00bffe16 	blt	zero,r2,570c <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    5714:	0005883a 	mov	r2,zero
    5718:	dfc00117 	ldw	ra,4(sp)
    571c:	dc000017 	ldw	r16,0(sp)
    5720:	dec00204 	addi	sp,sp,8
    5724:	f800283a 	ret

00005728 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5728:	f800283a 	ret

0000572c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    572c:	3005883a 	mov	r2,r6
    5730:	f800283a 	ret

00005734 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5734:	deffff04 	addi	sp,sp,-4
    5738:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    573c:	20000326 	beq	r4,zero,574c <alt_dev_llist_insert+0x18>
    5740:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
    5744:	000d883a 	mov	r6,zero
    5748:	10000c1e 	bne	r2,zero,577c <alt_dev_llist_insert+0x48>
    574c:	00800034 	movhi	r2,0
    5750:	1096bc04 	addi	r2,r2,23280
    5754:	10800017 	ldw	r2,0(r2)
    5758:	00c00034 	movhi	r3,0
    575c:	18d71f04 	addi	r3,r3,23676
    5760:	10000226 	beq	r2,zero,576c <alt_dev_llist_insert+0x38>
    5764:	103ee83a 	callr	r2
    5768:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    576c:	00800584 	movi	r2,22
    5770:	01bffa84 	movi	r6,-22
    5774:	18800015 	stw	r2,0(r3)
    5778:	00000606 	br	5794 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    577c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5780:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    5784:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    5788:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
    578c:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    5790:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    5794:	3005883a 	mov	r2,r6
    5798:	dfc00017 	ldw	ra,0(sp)
    579c:	dec00104 	addi	sp,sp,4
    57a0:	f800283a 	ret

000057a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    57a4:	defffb04 	addi	sp,sp,-20
    57a8:	dcc00315 	stw	r19,12(sp)
    57ac:	dc800215 	stw	r18,8(sp)
    57b0:	dc400115 	stw	r17,4(sp)
    57b4:	dc000015 	stw	r16,0(sp)
    57b8:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    57bc:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    57c0:	2823883a 	mov	r17,r5
    57c4:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    57c8:	00046640 	call	4664 <strlen>
    57cc:	14800044 	addi	r18,r2,1
    57d0:	00000406 	br	57e4 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    57d4:	81000217 	ldw	r4,8(r16)
    57d8:	00058200 	call	5820 <memcmp>
    57dc:	10000526 	beq	r2,zero,57f4 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    57e0:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    57e4:	980b883a 	mov	r5,r19
    57e8:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    57ec:	847ff91e 	bne	r16,r17,57d4 <alt_find_dev+0x30>
    57f0:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
    57f4:	8005883a 	mov	r2,r16
    57f8:	dfc00417 	ldw	ra,16(sp)
    57fc:	dcc00317 	ldw	r19,12(sp)
    5800:	dc800217 	ldw	r18,8(sp)
    5804:	dc400117 	ldw	r17,4(sp)
    5808:	dc000017 	ldw	r16,0(sp)
    580c:	dec00504 	addi	sp,sp,20
    5810:	f800283a 	ret

00005814 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5814:	f800283a 	ret

00005818 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    5818:	000170fa 	wrctl	ienable,zero
}
    581c:	f800283a 	ret

00005820 <memcmp>:
    5820:	31ffffc4 	addi	r7,r6,-1
    5824:	3000061e 	bne	r6,zero,5840 <memcmp+0x20>
    5828:	00000a06 	br	5854 <memcmp+0x34>
    582c:	39ffffc4 	addi	r7,r7,-1
    5830:	00bfffc4 	movi	r2,-1
    5834:	21000044 	addi	r4,r4,1
    5838:	29400044 	addi	r5,r5,1
    583c:	38800526 	beq	r7,r2,5854 <memcmp+0x34>
    5840:	20c00003 	ldbu	r3,0(r4)
    5844:	28800003 	ldbu	r2,0(r5)
    5848:	18bff826 	beq	r3,r2,582c <memcmp+0xc>
    584c:	1885c83a 	sub	r2,r3,r2
    5850:	f800283a 	ret
    5854:	0005883a 	mov	r2,zero
    5858:	f800283a 	ret

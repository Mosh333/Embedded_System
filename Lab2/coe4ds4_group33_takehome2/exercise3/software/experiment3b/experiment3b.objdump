
experiment3b.elf:     file format elf32-littlenios2
experiment3b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004140

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000ec8 memsz 0x00000ec8 flags r-x
    LOAD off    0x00001ee8 vaddr 0x00004ee8 paddr 0x00004f8c align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x00002030 vaddr 0x00005030 paddr 0x00005030 align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000d14  00004140  00004140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000094  00004e54  00004e54  00001e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  00004ee8  00004f8c  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000114  00005030  00005030  00002030  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000358  00000000  00000000  00001fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000673  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002c36  00000000  00000000  0000297b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011d6  00000000  00000000  000055b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003d50  00000000  00000000  00006787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000050c  00000000  00000000  0000a4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ec1  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c7c  00000000  00000000  0000b8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000c524  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c0  00000000  00000000  0000c568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000dbb6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000dbb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000dbbe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000dbbf  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000dbc0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000dbcb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000dbd6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000dbe1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  0000dbed  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00049149  00000000  00000000  0000dc2a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004140 l    d  .text	00000000 .text
00004e54 l    d  .rodata	00000000 .rodata
00004ee8 l    d  .rwdata	00000000 .rwdata
00005030 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 experiment3b.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000045c4 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004ee8 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004b80 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004cd0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00004650 g     F .text	0000002c alt_main
00005044 g     O .bss	00000100 alt_irq
00004f8c g       *ABS*	00000000 __flash_rwdata_start
00004928 g     F .text	00000010 alt_up_character_lcd_send_cmd
000042dc g     F .text	00000038 find_4_MSB_GLED_ON
00000000  w      *UND*	00000000 __errno
000048a0 g     F .text	00000018 get_DDRAM_addr
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005040 g     O .bss	00000004 errno
00004354 g     F .text	0000010c SW_GRPB_interrupt
00005038 g     O .bss	00000004 alt_argv
0000cf6c g       *ABS*	00000000 _gp
00004810 g     F .text	00000004 usleep
00004f3c g     O .rwdata	00000030 alt_fd_list
00004bf8 g     F .text	00000070 alt_find_dev
000048f8 g     F .text	00000020 alt_up_character_lcd_write_fd
00004314 g     F .text	00000040 find_4_LSB_GLED_ON
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004e0c g     F .text	00000008 __udivsi3
00004f84 g     O .rwdata	00000004 alt_max_fd
00004524 g     F .text	000000a0 alt_irq_register
00005144 g       *ABS*	00000000 __bss_end
00005030 g     O .bss	00000004 alt_irq_active
000040ec g     F .exceptions	00000054 alt_irq_handler
00004f14 g     O .rwdata	00000028 alt_dev_null
00004938 g     F .text	00000008 alt_up_character_lcd_cursor_blink_on
00004b7c g     F .text	00000004 alt_dcache_flush_all
00004f8c g       *ABS*	00000000 __ram_rwdata_end
00004f7c g     O .rwdata	00000008 alt_dev_list
00004ee8 g       *ABS*	00000000 __ram_rodata_end
00004f70 g     O .rwdata	00000004 jtag_uart_0
00004e14 g     F .text	00000008 __umodsi3
00005144 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000486c g     F .text	00000034 altera_avalon_jtag_uart_write
000048d4 g     F .text	00000024 alt_up_character_lcd_write
0000467c g     F .text	00000144 alt_printf
00004140 g     F .text	0000003c _start
00004814 g     F .text	00000038 alt_sys_init
000049ac g     F .text	00000070 alt_up_character_lcd_shift_display
00004948 g     F .text	00000064 alt_up_character_lcd_erase_pos
00004e1c g     F .text	00000038 __mulsi3
00004ee8 g       *ABS*	00000000 __ram_rwdata_start
00004e54 g       *ABS*	00000000 __ram_rodata_start
0000417c g     F .text	000000f0 disp_seven_seg
00004af0 g     F .text	0000008c alt_busy_sleep
00004c74 g     F .text	0000003c memcmp
00005144 g       *ABS*	00000000 __alt_stack_base
00004b88 g     F .text	00000070 alt_dev_llist_insert
00005030 g       *ABS*	00000000 __bss_start
0000426c g     F .text	00000070 main
0000503c g     O .bss	00000004 alt_envp
00004a1c g     F .text	00000070 alt_up_character_lcd_shift_cursor
00004f88 g     O .rwdata	00000004 alt_errno
00004d4c g     F .text	00000060 __divsi3
00004ae4 g     F .text	0000000c alt_up_character_lcd_open_dev
00004918 g     F .text	00000010 alt_up_character_lcd_init
00004e54 g       *ABS*	00000000 __flash_rodata_start
0000484c g     F .text	00000020 alt_irq_init
00004940 g     F .text	00000008 alt_up_character_lcd_cursor_off
00005034 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00004f74 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004f8c g       *ABS*	00000000 _edata
00005144 g       *ABS*	00000000 _end
000044c4 g     F .text	00000060 SW_GRPA_interrupt
00004140 g       *ABS*	00000000 __ram_exceptions_end
00004c6c g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00004dac g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000048b8 g     F .text	0000001c alt_up_character_lcd_string
00004460 g     F .text	00000064 blink_if_equal
0000400c g       .entry	00000000 _exit
00004cb0 g     F .text	00000020 strlen
000047c0 g     F .text	00000050 alt_putchar
00004c68 g     F .text	00000004 alt_icache_flush_all
00004a8c g     F .text	00000058 alt_up_character_lcd_set_cursor_pos
00004f6c g     O .rwdata	00000004 alt_priority_mask
000045e4 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08505014 	ori	at,at,16704
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    4044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040ec0 	call	40ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000306 	br	4098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    4094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    4098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    40c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    40e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40e8:	ef80083a 	eret

000040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40ec:	deffff04 	addi	sp,sp,-4
    40f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    40f4:	0009313a 	rdctl	r4,ipending
    40f8:	00c00044 	movi	r3,1
    40fc:	01400034 	movhi	r5,0
    4100:	29541104 	addi	r5,r5,20548
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    4104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    410c:	10000726 	beq	r2,zero,412c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4110:	29000117 	ldw	r4,4(r5)
    4114:	28800017 	ldw	r2,0(r5)
    4118:	103ee83a 	callr	r2
    411c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    4120:	10000426 	beq	r2,zero,4134 <alt_irq_handler+0x48>
    4124:	1009883a 	mov	r4,r2
    4128:	003ff306 	br	40f8 <alt_irq_handler+0xc>
    412c:	29400204 	addi	r5,r5,8
    4130:	003ff406 	br	4104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4134:	dfc00017 	ldw	ra,0(sp)
    4138:	dec00104 	addi	sp,sp,4
    413c:	f800283a 	ret

Disassembly of section .text:

00004140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4144:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4148:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    414c:	d6b3db14 	ori	gp,gp,53100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4154:	10940c14 	ori	r2,r2,20528

    movhi r3, %hi(__bss_end)
    4158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    415c:	18d45114 	ori	r3,r3,20804

    beq r2, r3, 1f
    4160:	10c00326 	beq	r2,r3,4170 <_start+0x30>

0:
    stw zero, (r2)
    4164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    416c:	10fffd36 	bltu	r2,r3,4164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4170:	00045e40 	call	45e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4174:	00046500 	call	4650 <alt_main>

00004178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4178:	003fff06 	br	4178 <alt_after_alt_main>

0000417c <disp_seven_seg>:
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "altera_up_avalon_character_lcd.h"

alt_u16 disp_seven_seg(alt_u8 val) {
	switch (val) {
    417c:	21003fcc 	andi	r4,r4,255
    4180:	008003c4 	movi	r2,15
    4184:	11001936 	bltu	r2,r4,41ec <disp_seven_seg+0x70>
    4188:	2105883a 	add	r2,r4,r4
    418c:	1085883a 	add	r2,r2,r2
    4190:	00c00034 	movhi	r3,0
    4194:	18d06904 	addi	r3,r3,16804
    4198:	10c5883a 	add	r2,r2,r3
    419c:	10800017 	ldw	r2,0(r2)
    41a0:	1000683a 	jmp	r2
    41a4:	000041f4 	movhi	zero,263
    41a8:	000041fc 	xorhi	zero,zero,263
    41ac:	00004204 	movi	zero,264
    41b0:	0000420c 	andi	zero,zero,264
    41b4:	00004214 	movui	zero,264
    41b8:	0000421c 	xori	zero,zero,264
    41bc:	00004224 	muli	zero,zero,264
    41c0:	0000422c 	andhi	zero,zero,264
    41c4:	00004234 	movhi	zero,264
    41c8:	0000423c 	xorhi	zero,zero,264
    41cc:	00004244 	movi	zero,265
    41d0:	0000424c 	andi	zero,zero,265
    41d4:	00004254 	movui	zero,265
    41d8:	0000425c 	xori	zero,zero,265
    41dc:	00004264 	muli	zero,zero,265
    41e0:	000041e4 	muli	zero,zero,263
    41e4:	00800384 	movi	r2,14
    41e8:	f800283a 	ret
    41ec:	00801fc4 	movi	r2,127
    41f0:	f800283a 	ret
    41f4:	00801004 	movi	r2,64
    41f8:	f800283a 	ret
	case 0:
		return 0x40;
    41fc:	00801e44 	movi	r2,121
    4200:	f800283a 	ret
	case 1:
		return 0x79;
    4204:	00800904 	movi	r2,36
    4208:	f800283a 	ret
	case 2:
		return 0x24;
    420c:	00800c04 	movi	r2,48
    4210:	f800283a 	ret
	case 3:
		return 0x30;
    4214:	00800644 	movi	r2,25
    4218:	f800283a 	ret
	case 4:
		return 0x19;
    421c:	00800484 	movi	r2,18
    4220:	f800283a 	ret
	case 5:
		return 0x12;
    4224:	00800084 	movi	r2,2
    4228:	f800283a 	ret
	case 6:
		return 0x02;
    422c:	00801e04 	movi	r2,120
    4230:	f800283a 	ret
	case 7:
		return 0x78;
    4234:	0005883a 	mov	r2,zero
    4238:	f800283a 	ret
	case 8:
		return 0x00;
    423c:	00800604 	movi	r2,24
    4240:	f800283a 	ret
	case 9:
		return 0x18;
    4244:	00800204 	movi	r2,8
    4248:	f800283a 	ret
	case 10:
		return 0x08;
    424c:	008000c4 	movi	r2,3
    4250:	f800283a 	ret
	case 11:
		return 0x03;
    4254:	00801184 	movi	r2,70
    4258:	f800283a 	ret
	case 12:
		return 0x46;
    425c:	00800844 	movi	r2,33
    4260:	f800283a 	ret
	case 13:
		return 0x21;
    4264:	00800184 	movi	r2,6
	case 15:
		return 0x0e;
	default:
		return 0x7f;
	}
}
    4268:	f800283a 	ret

0000426c <main>:

	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls GRPA

}

int main(void) {
    426c:	defffe04 	addi	sp,sp,-8
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
    4270:	00a41314 	movui	r2,36940

	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls GRPA

}

int main(void) {
    4274:	dfc00115 	stw	ra,4(sp)
    4278:	dc000015 	stw	r16,0(sp)
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
    427c:	10000035 	stwio	zero,0(r2)
	IOWR(SWITCH_GRPA_I_BASE, 2, 0x100); // set the IRQ mask for MSB of Group A ----> switch
    4280:	00c04004 	movi	r3,256
    4284:	00a41214 	movui	r2,36936
    4288:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(SWITCH_GRPA_I_IRQ, NULL, (void*) SW_GRPA_interrupt);
    428c:	04000044 	movi	r16,1
    4290:	8009883a 	mov	r4,r16
    4294:	000b883a 	mov	r5,zero
    4298:	01800034 	movhi	r6,0
    429c:	31913104 	addi	r6,r6,17604
    42a0:	00045240 	call	4524 <alt_irq_register>

	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
    42a4:	00a41714 	movui	r2,36956
    42a8:	10000035 	stwio	zero,0(r2)
	IOWR(SWITCH_GRPB_I_BASE, 2, 0x1); // set the IRQ mask for Group B
    42ac:	00a41614 	movui	r2,36952
    42b0:	14000035 	stwio	r16,0(r2)
	alt_irq_register(SWITCH_GRPB_I_IRQ, NULL, (void*) SW_GRPB_interrupt);
    42b4:	01000084 	movi	r4,2
    42b8:	000b883a 	mov	r5,zero
    42bc:	01800034 	movhi	r6,0
    42c0:	3190d504 	addi	r6,r6,17236
    42c4:	00045240 	call	4524 <alt_irq_register>

	IOWR(LED_GREEN_O_BASE, 0, 0x0); // clear the green LEDs
    42c8:	00a40414 	movui	r2,36880
    42cc:	10000035 	stwio	zero,0(r2)
	IOWR(LED_RED_O_BASE, 0, 0x0); // clear the red LEDs
    42d0:	00a40014 	movui	r2,36864
    42d4:	10000035 	stwio	zero,0(r2)
    42d8:	003fff06 	br	42d8 <main+0x6c>

000042dc <find_4_MSB_GLED_ON>:
int find_4_MSB_GLED_ON(void) { //find 8 msb group B switches that are on
	alt_u32 temp;
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPB_I_BASE, 0x0); //store 9 bits that are on, alternatively pass 1FE mask
    42dc:	00a41414 	movui	r2,36944
    42e0:	11800037 	ldwio	r6,0(r2)
    42e4:	0009883a 	mov	r4,zero
    42e8:	00c00044 	movi	r3,1
    42ec:	01400244 	movi	r5,9
	//mask the first 8 bits, one at a time, test each bit and sum
	for (i = 1; i < 9; i++) {// WRONG INDEXING CHECK THIS FAMMMMMMMMMMM
		if ((temp >> i) & (0x1)) {
    42f0:	30c4d83a 	srl	r2,r6,r3
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPB_I_BASE, 0x0); //store 9 bits that are on, alternatively pass 1FE mask
	//mask the first 8 bits, one at a time, test each bit and sum
	for (i = 1; i < 9; i++) {// WRONG INDEXING CHECK THIS FAMMMMMMMMMMM
    42f4:	18c00044 	addi	r3,r3,1
		if ((temp >> i) & (0x1)) {
    42f8:	1080004c 	andi	r2,r2,1
    42fc:	1005003a 	cmpeq	r2,r2,zero
    4300:	1000011e 	bne	r2,zero,4308 <find_4_MSB_GLED_ON+0x2c>
			result++;
    4304:	21000044 	addi	r4,r4,1
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPB_I_BASE, 0x0); //store 9 bits that are on, alternatively pass 1FE mask
	//mask the first 8 bits, one at a time, test each bit and sum
	for (i = 1; i < 9; i++) {// WRONG INDEXING CHECK THIS FAMMMMMMMMMMM
    4308:	197ff91e 	bne	r3,r5,42f0 <find_4_MSB_GLED_ON+0x14>
			result++;
		}
	}
	result = (result << 4);
	return result;
}
    430c:	2004913a 	slli	r2,r4,4
    4310:	f800283a 	ret

00004314 <find_4_LSB_GLED_ON>:
int find_4_LSB_GLED_ON(void) { //find 8 least significant group A switches that are on
	alt_u32 temp;
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPA_I_BASE, 0x0); //store 9 bits that are on, alternatively pass FF mask
    4314:	00a41014 	movui	r2,36928
    4318:	11800037 	ldwio	r6,0(r2)
    431c:	0009883a 	mov	r4,zero
    4320:	0007883a 	mov	r3,zero
    4324:	01400204 	movi	r5,8

	//mask the last 8 bits, one at a time, test each bit and sum
	for (i = 0; i < 8; i++) {
		if ((temp >> i) & (0x1)) {
    4328:	30c4d83a 	srl	r2,r6,r3
	int i;

	temp = IORD(SWITCH_GRPA_I_BASE, 0x0); //store 9 bits that are on, alternatively pass FF mask

	//mask the last 8 bits, one at a time, test each bit and sum
	for (i = 0; i < 8; i++) {
    432c:	18c00044 	addi	r3,r3,1
		if ((temp >> i) & (0x1)) {
    4330:	1080004c 	andi	r2,r2,1
    4334:	1005003a 	cmpeq	r2,r2,zero
    4338:	1000011e 	bne	r2,zero,4340 <find_4_LSB_GLED_ON+0x2c>
			result++;
    433c:	21000044 	addi	r4,r4,1
	int i;

	temp = IORD(SWITCH_GRPA_I_BASE, 0x0); //store 9 bits that are on, alternatively pass FF mask

	//mask the last 8 bits, one at a time, test each bit and sum
	for (i = 0; i < 8; i++) {
    4340:	197ff91e 	bne	r3,r5,4328 <find_4_LSB_GLED_ON+0x14>
		if ((temp >> i) & (0x1)) {
			result++;
		}
	}
	IOWR(SWITCH_GRPA_I_BASE,3, 0x0);
    4344:	00a41314 	movui	r2,36940
    4348:	10000035 	stwio	zero,0(r2)
	return result;
}
    434c:	2005883a 	mov	r2,r4
    4350:	f800283a 	ret

00004354 <SW_GRPB_interrupt>:
	IOWR(LED_GREEN_O_BASE, 0, FOUR_LSB_GLED_DISP+FOUR_MSB_GLED_DISP); // light on the green LEDs
	blink_if_equal(FOUR_MSB_GLED_DISP, FOUR_LSB_GLED_DISP); //blink position 8 green LED
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls GRPA
}

void SW_GRPB_interrupt(void) {
    4354:	defffe04 	addi	sp,sp,-8
    4358:	dc000015 	stw	r16,0(sp)
    435c:	dfc00115 	stw	ra,4(sp)
	alt_32 i = 0;

	alt_u32 test_switch;


	ninthBit_data_val = IORD(SWITCH_GRPB_I_BASE, 0x0); //read current SWITCHES B values
    4360:	04241414 	movui	r16,36944
    4364:	80800037 	ldwio	r2,0(r16)
	ninthBit_data_val = ninthBit_data_val & (0x1);
	ninthBit_edge_val = IORD(SWITCH_GRPB_I_BASE, 0x3);
    4368:	00e41714 	movui	r3,36956
    436c:	18c00037 	ldwio	r3,0(r3)
	if ((ninthBit_data_val)) {//rising edge
    4370:	1080004c 	andi	r2,r2,1
    4374:	1005003a 	cmpeq	r2,r2,zero
    4378:	10001b1e 	bne	r2,zero,43e8 <SW_GRPB_interrupt+0x94>
		alt_printf("LSB Switch 9 from GRPB was turned on\n");
    437c:	01000034 	movhi	r4,0
    4380:	21139504 	addi	r4,r4,20052
    4384:	000467c0 	call	467c <alt_printf>
    4388:	0007883a 	mov	r3,zero
    438c:	0009883a 	mov	r4,zero
    4390:	01a41014 	movui	r6,36928
    4394:	01400244 	movi	r5,9
		//FIND MOST SIG SWITCH TURNED ON
		for (i = 0; i <= 8; i++) {
			test_switch = IORD(SWITCH_GRPA_I_BASE, 0x0);
    4398:	30800037 	ldwio	r2,0(r6)

			if (((test_switch >> i) & 0x1)) {
    439c:	10c4d83a 	srl	r2,r2,r3
    43a0:	1080004c 	andi	r2,r2,1
    43a4:	1005003a 	cmpeq	r2,r2,zero
    43a8:	1000011e 	bne	r2,zero,43b0 <SW_GRPB_interrupt+0x5c>
    43ac:	1809883a 	mov	r4,r3
	ninthBit_data_val = ninthBit_data_val & (0x1);
	ninthBit_edge_val = IORD(SWITCH_GRPB_I_BASE, 0x3);
	if ((ninthBit_data_val)) {//rising edge
		alt_printf("LSB Switch 9 from GRPB was turned on\n");
		//FIND MOST SIG SWITCH TURNED ON
		for (i = 0; i <= 8; i++) {
    43b0:	18c00044 	addi	r3,r3,1
    43b4:	197ff81e 	bne	r3,r5,4398 <SW_GRPB_interrupt+0x44>
    43b8:	0007883a 	mov	r3,zero
    43bc:	01a41414 	movui	r6,36944
    43c0:	01400244 	movi	r5,9
				MS_sw_on = i;
			}
		}

		for (i = 0; i <= 8; i++) {
			test_switch = IORD(SWITCH_GRPB_I_BASE, 0x0);
    43c4:	30800037 	ldwio	r2,0(r6)

			if (test_switch >> i & 0x1)
    43c8:	10c4d83a 	srl	r2,r2,r3
    43cc:	1080004c 	andi	r2,r2,1
    43d0:	1005003a 	cmpeq	r2,r2,zero
    43d4:	1000011e 	bne	r2,zero,43dc <SW_GRPB_interrupt+0x88>
    43d8:	19000244 	addi	r4,r3,9
			if (((test_switch >> i) & 0x1)) {
				MS_sw_on = i;
			}
		}

		for (i = 0; i <= 8; i++) {
    43dc:	18c00044 	addi	r3,r3,1
    43e0:	197ff81e 	bne	r3,r5,43c4 <SW_GRPB_interrupt+0x70>
    43e4:	00001606 	br	4440 <SW_GRPB_interrupt+0xec>
		IOWR(LED_RED_O_BASE, 0, MS_sw_on);
	}

	if (!ninthBit_data_val ) {//falling edge & ninthBit_edge_val

		alt_printf("LSB Switch 9 from GRPB was turned off\n");
    43e8:	01000034 	movhi	r4,0
    43ec:	21139f04 	addi	r4,r4,20092
    43f0:	000467c0 	call	467c <alt_printf>
    43f4:	800d883a 	mov	r6,r16
    43f8:	0009883a 	mov	r4,zero
    43fc:	00c00204 	movi	r3,8
    4400:	017fffc4 	movi	r5,-1
		for (i = 8; i >= 0; i--) {
			test_switch = IORD(SWITCH_GRPB_I_BASE, 0x0);
    4404:	30800037 	ldwio	r2,0(r6)
			if (!((test_switch >> i) & 0x1)) //(!test_switch >> i)
    4408:	10c4d83a 	srl	r2,r2,r3
    440c:	1080004c 	andi	r2,r2,1
    4410:	1000011e 	bne	r2,zero,4418 <SW_GRPB_interrupt+0xc4>
    4414:	19000244 	addi	r4,r3,9
	}

	if (!ninthBit_data_val ) {//falling edge & ninthBit_edge_val

		alt_printf("LSB Switch 9 from GRPB was turned off\n");
		for (i = 8; i >= 0; i--) {
    4418:	18ffffc4 	addi	r3,r3,-1
    441c:	197ff91e 	bne	r3,r5,4404 <SW_GRPB_interrupt+0xb0>
    4420:	00c00204 	movi	r3,8
    4424:	01641014 	movui	r5,36928
			if (!((test_switch >> i) & 0x1)) //(!test_switch >> i)
				MS_sw_off = i + 9;
		}

		for (i = 8; i > 0; i--) {
			test_switch = IORD(SWITCH_GRPA_I_BASE, 0x0);
    4428:	28800037 	ldwio	r2,0(r5)

			if ((!(test_switch >> i) & 0x1)) //(!test_switch >> i)
    442c:	10c4d83a 	srl	r2,r2,r3
    4430:	1000011e 	bne	r2,zero,4438 <SW_GRPB_interrupt+0xe4>
    4434:	1809883a 	mov	r4,r3
			test_switch = IORD(SWITCH_GRPB_I_BASE, 0x0);
			if (!((test_switch >> i) & 0x1)) //(!test_switch >> i)
				MS_sw_off = i + 9;
		}

		for (i = 8; i > 0; i--) {
    4438:	18ffffc4 	addi	r3,r3,-1
    443c:	183ffa1e 	bne	r3,zero,4428 <SW_GRPB_interrupt+0xd4>

			if ((!(test_switch >> i) & 0x1)) //(!test_switch >> i)
				MS_sw_off = i;
		}

		IOWR(LED_RED_O_BASE, 0, MS_sw_off);
    4440:	00a40014 	movui	r2,36864
    4444:	11000035 	stwio	r4,0(r2)
	}

	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls GRPA
    4448:	00a41714 	movui	r2,36956
    444c:	10000035 	stwio	zero,0(r2)

}
    4450:	dfc00117 	ldw	ra,4(sp)
    4454:	dc000017 	ldw	r16,0(sp)
    4458:	dec00204 	addi	sp,sp,8
    445c:	f800283a 	ret

00004460 <blink_if_equal>:
	}
	result = (result << 4);
	return result;
}

void blink_if_equal(alt_u32 msb, alt_u32 lsb) {
    4460:	defffd04 	addi	sp,sp,-12
    4464:	dfc00215 	stw	ra,8(sp)
    4468:	dc400115 	stw	r17,4(sp)
    446c:	dc000015 	stw	r16,0(sp)
	int i;
	int msbTemp = msb;
	alt_u32 disp_MSB_GLED = 0;
	alt_u32 currentGREENval = 0;

	currentGREENval = IORD(LED_GREEN_O_BASE, 0x0);
    4470:	00e40414 	movui	r3,36880
    4474:	18800037 	ldwio	r2,0(r3)
	//alt_printf("I am in blink_if_equal\n");
	//alt_printf("currentGREENval is %x\n", currentGREENval);
	msbTemp = msbTemp >> 4;
	//alt_printf("msb is %x, lsb is %x", msbTemp, lsb);
	if (msbTemp == lsb) {
    4478:	2009d13a 	srai	r4,r4,4
    447c:	21400c1e 	bne	r4,r5,44b0 <blink_if_equal+0x50>
	int i;
	int msbTemp = msb;
	alt_u32 disp_MSB_GLED = 0;
	alt_u32 currentGREENval = 0;

	currentGREENval = IORD(LED_GREEN_O_BASE, 0x0);
    4480:	1021883a 	mov	r16,r2
	//alt_printf("I am in blink_if_equal\n");
	//alt_printf("currentGREENval is %x\n", currentGREENval);
	msbTemp = msbTemp >> 4;
	//alt_printf("msb is %x, lsb is %x", msbTemp, lsb);
	if (msbTemp == lsb) {
		IOWR(LED_GREEN_O_BASE, 0, 0x0);
    4484:	18000035 	stwio	zero,0(r3)
    4488:	0023883a 	mov	r17,zero
		for (i = 0; i < 6; i++) {
			currentGREENval = currentGREENval ^ (1 << 8);
    448c:	8400401c 	xori	r16,r16,256
			IOWR(LED_GREEN_O_BASE, 0, currentGREENval);
    4490:	00a40414 	movui	r2,36880
    4494:	14000035 	stwio	r16,0(r2)
			//currentGREENval = currentGREENval^(currentGREENval<<9); //complement 9th position but keep rest the same
			usleep(500000);
    4498:	01000234 	movhi	r4,8
    449c:	21284804 	addi	r4,r4,-24288
    44a0:	00048100 	call	4810 <usleep>
	//alt_printf("currentGREENval is %x\n", currentGREENval);
	msbTemp = msbTemp >> 4;
	//alt_printf("msb is %x, lsb is %x", msbTemp, lsb);
	if (msbTemp == lsb) {
		IOWR(LED_GREEN_O_BASE, 0, 0x0);
		for (i = 0; i < 6; i++) {
    44a4:	8c400044 	addi	r17,r17,1
    44a8:	00800184 	movi	r2,6
    44ac:	88bff71e 	bne	r17,r2,448c <blink_if_equal+0x2c>
			usleep(500000);
		}
	}
	//alt_printf("\nDone blink_if_equal\n");
	return;
}
    44b0:	dfc00217 	ldw	ra,8(sp)
    44b4:	dc400117 	ldw	r17,4(sp)
    44b8:	dc000017 	ldw	r16,0(sp)
    44bc:	dec00304 	addi	sp,sp,12
    44c0:	f800283a 	ret

000044c4 <SW_GRPA_interrupt>:

void SW_GRPA_interrupt(void) {
    44c4:	defffd04 	addi	sp,sp,-12
    44c8:	dfc00215 	stw	ra,8(sp)
    44cc:	dc400115 	stw	r17,4(sp)
    44d0:	dc000015 	stw	r16,0(sp)
	alt_u32 FOUR_LSB_GLED_DISP = find_4_LSB_GLED_ON();
    44d4:	00043140 	call	4314 <find_4_LSB_GLED_ON>
    44d8:	1023883a 	mov	r17,r2
	alt_u32 FOUR_MSB_GLED_DISP = find_4_MSB_GLED_ON();
    44dc:	00042dc0 	call	42dc <find_4_MSB_GLED_ON>

	alt_printf("MSB Switch 8 from GRPA changed\n");
    44e0:	01000034 	movhi	r4,0
    44e4:	2113a904 	addi	r4,r4,20132
	return;
}

void SW_GRPA_interrupt(void) {
	alt_u32 FOUR_LSB_GLED_DISP = find_4_LSB_GLED_ON();
	alt_u32 FOUR_MSB_GLED_DISP = find_4_MSB_GLED_ON();
    44e8:	1021883a 	mov	r16,r2

	alt_printf("MSB Switch 8 from GRPA changed\n");
    44ec:	000467c0 	call	467c <alt_printf>
	IOWR(LED_GREEN_O_BASE, 0, FOUR_LSB_GLED_DISP+FOUR_MSB_GLED_DISP); // light on the green LEDs
    44f0:	8c07883a 	add	r3,r17,r16
    44f4:	00a40414 	movui	r2,36880
    44f8:	10c00035 	stwio	r3,0(r2)
	blink_if_equal(FOUR_MSB_GLED_DISP, FOUR_LSB_GLED_DISP); //blink position 8 green LED
    44fc:	8009883a 	mov	r4,r16
    4500:	880b883a 	mov	r5,r17
    4504:	00044600 	call	4460 <blink_if_equal>
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls GRPA
    4508:	00a41314 	movui	r2,36940
    450c:	10000035 	stwio	zero,0(r2)
}
    4510:	dfc00217 	ldw	ra,8(sp)
    4514:	dc400117 	ldw	r17,4(sp)
    4518:	dc000017 	ldw	r16,0(sp)
    451c:	dec00304 	addi	sp,sp,12
    4520:	f800283a 	ret

00004524 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4524:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    4528:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    452c:	00fffa84 	movi	r3,-22
    4530:	11002236 	bltu	r2,r4,45bc <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4534:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4538:	027fff84 	movi	r9,-2
    453c:	5244703a 	and	r2,r10,r9
    4540:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    4544:	200490fa 	slli	r2,r4,3
    4548:	00c00034 	movhi	r3,0
    454c:	18d41104 	addi	r3,r3,20548
    4550:	02000034 	movhi	r8,0
    4554:	42140c04 	addi	r8,r8,20528
    4558:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
    455c:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    4560:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    4564:	30000826 	beq	r6,zero,4588 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4568:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    456c:	2244703a 	and	r2,r4,r9
    4570:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    4574:	00c00044 	movi	r3,1
    4578:	19c6983a 	sll	r3,r3,r7
    457c:	40800017 	ldw	r2,0(r8)
    4580:	10c4b03a 	or	r2,r2,r3
    4584:	00000706 	br	45a4 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4588:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    458c:	2244703a 	and	r2,r4,r9
    4590:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    4594:	00ffff84 	movi	r3,-2
    4598:	19c6183a 	rol	r3,r3,r7
    459c:	40800017 	ldw	r2,0(r8)
    45a0:	10c4703a 	and	r2,r2,r3
    45a4:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    45a8:	40800017 	ldw	r2,0(r8)
    45ac:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45b0:	2001703a 	wrctl	status,r4
    45b4:	5001703a 	wrctl	status,r10
    45b8:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    45bc:	1805883a 	mov	r2,r3
    45c0:	f800283a 	ret

000045c4 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    45c4:	2900051e 	bne	r5,r4,45dc <alt_load_section+0x18>
    45c8:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    45cc:	20800017 	ldw	r2,0(r4)
    45d0:	21000104 	addi	r4,r4,4
    45d4:	28800015 	stw	r2,0(r5)
    45d8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    45dc:	29bffb1e 	bne	r5,r6,45cc <alt_load_section+0x8>
    45e0:	f800283a 	ret

000045e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    45e4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    45e8:	01000034 	movhi	r4,0
    45ec:	2113e304 	addi	r4,r4,20364
    45f0:	01400034 	movhi	r5,0
    45f4:	2953ba04 	addi	r5,r5,20200
    45f8:	01800034 	movhi	r6,0
    45fc:	3193e304 	addi	r6,r6,20364
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4600:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4604:	00045c40 	call	45c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4608:	01000034 	movhi	r4,0
    460c:	21100804 	addi	r4,r4,16416
    4610:	01400034 	movhi	r5,0
    4614:	29500804 	addi	r5,r5,16416
    4618:	01800034 	movhi	r6,0
    461c:	31905004 	addi	r6,r6,16704
    4620:	00045c40 	call	45c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4624:	01000034 	movhi	r4,0
    4628:	21139504 	addi	r4,r4,20052
    462c:	01400034 	movhi	r5,0
    4630:	29539504 	addi	r5,r5,20052
    4634:	01800034 	movhi	r6,0
    4638:	3193ba04 	addi	r6,r6,20200
    463c:	00045c40 	call	45c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4640:	0004b7c0 	call	4b7c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4644:	dfc00017 	ldw	ra,0(sp)
    4648:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    464c:	0004c681 	jmpi	4c68 <alt_icache_flush_all>

00004650 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4650:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4654:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4658:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    465c:	000484c0 	call	484c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4660:	00048140 	call	4814 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4664:	d1203217 	ldw	r4,-32568(gp)
    4668:	d1603317 	ldw	r5,-32564(gp)
    466c:	d1a03417 	ldw	r6,-32560(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4670:	dfc00017 	ldw	ra,0(sp)
    4674:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4678:	000426c1 	jmpi	426c <main>

0000467c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    467c:	defff804 	addi	sp,sp,-32
    4680:	dfc00415 	stw	ra,16(sp)
    4684:	dc800315 	stw	r18,12(sp)
    4688:	dc400215 	stw	r17,8(sp)
    468c:	dc000115 	stw	r16,4(sp)
    4690:	d9400515 	stw	r5,20(sp)
    4694:	d9800615 	stw	r6,24(sp)
    4698:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    469c:	d8800504 	addi	r2,sp,20
    46a0:	2025883a 	mov	r18,r4
    46a4:	d8800015 	stw	r2,0(sp)
    46a8:	00003d06 	br	47a0 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    46ac:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    46b0:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    46b4:	18800226 	beq	r3,r2,46c0 <alt_printf+0x44>
        {
            alt_putchar(c);
    46b8:	1809883a 	mov	r4,r3
    46bc:	00000a06 	br	46e8 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    46c0:	91000007 	ldb	r4,0(r18)
    46c4:	94800044 	addi	r18,r18,1
    46c8:	20003726 	beq	r4,zero,47a8 <alt_printf+0x12c>
            {
                if (c == '%')
    46cc:	20c00626 	beq	r4,r3,46e8 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    46d0:	008018c4 	movi	r2,99
    46d4:	2080061e 	bne	r4,r2,46f0 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    46d8:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    46dc:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    46e0:	10800104 	addi	r2,r2,4
    46e4:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    46e8:	00047c00 	call	47c0 <alt_putchar>
    46ec:	00002c06 	br	47a0 <alt_printf+0x124>
                }
                else if (c == 'x')
    46f0:	00801e04 	movi	r2,120
    46f4:	20801e1e 	bne	r4,r2,4770 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    46f8:	d8800017 	ldw	r2,0(sp)
    46fc:	14400017 	ldw	r17,0(r2)
    4700:	10800104 	addi	r2,r2,4
    4704:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    4708:	88000226 	beq	r17,zero,4714 <alt_printf+0x98>
    470c:	04000704 	movi	r16,28
    4710:	00000306 	br	4720 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    4714:	01000c04 	movi	r4,48
    4718:	003ff306 	br	46e8 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    471c:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    4720:	008003c4 	movi	r2,15
    4724:	1404983a 	sll	r2,r2,r16
    4728:	8884703a 	and	r2,r17,r2
    472c:	103ffb26 	beq	r2,zero,471c <alt_printf+0xa0>
    4730:	00000b06 	br	4760 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    4734:	8884703a 	and	r2,r17,r2
    4738:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    473c:	00800244 	movi	r2,9
                            c = '0' + digit;
    4740:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    4744:	10c0012e 	bgeu	r2,r3,474c <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    4748:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    474c:	21003fcc 	andi	r4,r4,255
    4750:	2100201c 	xori	r4,r4,128
    4754:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4758:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    475c:	00047c00 	call	47c0 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    4760:	008003c4 	movi	r2,15
    4764:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4768:	803ff20e 	bge	r16,zero,4734 <alt_printf+0xb8>
    476c:	00000c06 	br	47a0 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    4770:	00801cc4 	movi	r2,115
    4774:	20800a1e 	bne	r4,r2,47a0 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    4778:	d8800017 	ldw	r2,0(sp)
    477c:	14000017 	ldw	r16,0(r2)
    4780:	10800104 	addi	r2,r2,4
    4784:	d8800015 	stw	r2,0(sp)
    4788:	00000106 	br	4790 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    478c:	00047c00 	call	47c0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    4790:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    4794:	84000044 	addi	r16,r16,1
    4798:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    479c:	103ffb1e 	bne	r2,zero,478c <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    47a0:	90c00007 	ldb	r3,0(r18)
    47a4:	183fc11e 	bne	r3,zero,46ac <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    47a8:	dfc00417 	ldw	ra,16(sp)
    47ac:	dc800317 	ldw	r18,12(sp)
    47b0:	dc400217 	ldw	r17,8(sp)
    47b4:	dc000117 	ldw	r16,4(sp)
    47b8:	dec00804 	addi	sp,sp,32
    47bc:	f800283a 	ret

000047c0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    47c0:	defffd04 	addi	sp,sp,-12
    47c4:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    47c8:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    47cc:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    47d0:	01800044 	movi	r6,1
    47d4:	01000034 	movhi	r4,0
    47d8:	2113dc04 	addi	r4,r4,20336
    47dc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    47e0:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    47e4:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    47e8:	000486c0 	call	486c <altera_avalon_jtag_uart_write>
    47ec:	1009883a 	mov	r4,r2
    47f0:	00bfffc4 	movi	r2,-1
    47f4:	2080011e 	bne	r4,r2,47fc <alt_putchar+0x3c>
    47f8:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    47fc:	8005883a 	mov	r2,r16
    4800:	dfc00217 	ldw	ra,8(sp)
    4804:	dc000117 	ldw	r16,4(sp)
    4808:	dec00304 	addi	sp,sp,12
    480c:	f800283a 	ret

00004810 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    4810:	0004af01 	jmpi	4af0 <alt_busy_sleep>

00004814 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4814:	defffe04 	addi	sp,sp,-8
    4818:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    481c:	04000034 	movhi	r16,0
    4820:	8413ba04 	addi	r16,r16,20200
    4824:	8009883a 	mov	r4,r16
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4828:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
    482c:	00049180 	call	4918 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4830:	01400034 	movhi	r5,0
    4834:	2953df04 	addi	r5,r5,20348
    4838:	8009883a 	mov	r4,r16
}
    483c:	dfc00117 	ldw	ra,4(sp)
    4840:	dc000017 	ldw	r16,0(sp)
    4844:	dec00204 	addi	sp,sp,8
    4848:	0004b881 	jmpi	4b88 <alt_dev_llist_insert>

0000484c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    484c:	deffff04 	addi	sp,sp,-4
    4850:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    4854:	0004c6c0 	call	4c6c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4858:	00800044 	movi	r2,1
    485c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4860:	dfc00017 	ldw	ra,0(sp)
    4864:	dec00104 	addi	sp,sp,4
    4868:	f800283a 	ret

0000486c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    486c:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    4870:	298f883a 	add	r7,r5,r6
    4874:	20c00104 	addi	r3,r4,4
    4878:	00000606 	br	4894 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    487c:	18800037 	ldwio	r2,0(r3)
    4880:	10bfffec 	andhi	r2,r2,65535
    4884:	10000326 	beq	r2,zero,4894 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4888:	28800007 	ldb	r2,0(r5)
    488c:	29400044 	addi	r5,r5,1
    4890:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4894:	29fff936 	bltu	r5,r7,487c <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    4898:	3005883a 	mov	r2,r6
    489c:	f800283a 	ret

000048a0 <get_DDRAM_addr>:
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
	{
		addr |= x_pos;
    48a0:	2005883a 	mov	r2,r4
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    48a4:	28000126 	beq	r5,zero,48ac <get_DDRAM_addr+0xc>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    48a8:	20801014 	ori	r2,r4,64
    48ac:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    48b0:	10802014 	ori	r2,r2,128
    48b4:	f800283a 	ret

000048b8 <alt_up_character_lcd_string>:
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    48b8:	00000306 	br	48c8 <alt_up_character_lcd_string+0x10>
	while ( *ptr )
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    48bc:	20800a17 	ldw	r2,40(r4)
    48c0:	10c00065 	stbio	r3,1(r2)
		++ptr;
    48c4:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    48c8:	28c00007 	ldb	r3,0(r5)
    48cc:	183ffb1e 	bne	r3,zero,48bc <alt_up_character_lcd_string+0x4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    48d0:	f800283a 	ret

000048d4 <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    48d4:	000f883a 	mov	r7,zero
    48d8:	00000406 	br	48ec <alt_up_character_lcd_write+0x18>
	unsigned int i;
	for (i = 0; i < len; i++)
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    48dc:	10c00007 	ldb	r3,0(r2)
    48e0:	20800a17 	ldw	r2,40(r4)
    48e4:	10c00065 	stbio	r3,1(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    48e8:	39c00044 	addi	r7,r7,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    48ec:	29c5883a 	add	r2,r5,r7
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    48f0:	39bffa1e 	bne	r7,r6,48dc <alt_up_character_lcd_write+0x8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    48f4:	f800283a 	ret

000048f8 <alt_up_character_lcd_write_fd>:
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    48f8:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    48fc:	deffff04 	addi	sp,sp,-4
    4900:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    4904:	00048d40 	call	48d4 <alt_up_character_lcd_write>
	return 0;
}
    4908:	0005883a 	mov	r2,zero
    490c:	dfc00017 	ldw	ra,0(sp)
    4910:	dec00104 	addi	sp,sp,4
    4914:	f800283a 	ret

00004918 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    4918:	20c00a17 	ldw	r3,40(r4)
    491c:	00800044 	movi	r2,1
    4920:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    4924:	f800283a 	ret

00004928 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    4928:	20800a17 	ldw	r2,40(r4)
    492c:	29403fcc 	andi	r5,r5,255
    4930:	11400025 	stbio	r5,0(r2)
}
    4934:	f800283a 	ret

00004938 <alt_up_character_lcd_cursor_blink_on>:
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    4938:	014003c4 	movi	r5,15
    493c:	00049281 	jmpi	4928 <alt_up_character_lcd_send_cmd>

00004940 <alt_up_character_lcd_cursor_off>:
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    4940:	01400304 	movi	r5,12
    4944:	00049281 	jmpi	4928 <alt_up_character_lcd_send_cmd>

00004948 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4948:	defffe04 	addi	sp,sp,-8
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    494c:	008009c4 	movi	r2,39
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    4950:	dc000015 	stw	r16,0(sp)
    4954:	dfc00115 	stw	ra,4(sp)
    4958:	2807883a 	mov	r3,r5
    495c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4960:	11400d36 	bltu	r2,r5,4998 <alt_up_character_lcd_erase_pos+0x50>
    4964:	00800044 	movi	r2,1
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4968:	300b883a 	mov	r5,r6
    496c:	1809883a 	mov	r4,r3
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    4970:	11800936 	bltu	r2,r6,4998 <alt_up_character_lcd_erase_pos+0x50>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4974:	00048a00 	call	48a0 <get_DDRAM_addr>
    4978:	11403fcc 	andi	r5,r2,255
    497c:	8009883a 	mov	r4,r16
    4980:	00049280 	call	4928 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    4984:	80c00a17 	ldw	r3,40(r16)
    4988:	00800084 	movi	r2,2
    498c:	18800065 	stbio	r2,1(r3)
    4990:	0005883a 	mov	r2,zero
    4994:	00000106 	br	499c <alt_up_character_lcd_erase_pos+0x54>
	return 0;
    4998:	00bfffc4 	movi	r2,-1
}
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	dc000017 	ldw	r16,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    49ac:	defffc04 	addi	sp,sp,-16
    49b0:	dc400115 	stw	r17,4(sp)
    49b4:	dfc00315 	stw	ra,12(sp)
    49b8:	dc800215 	stw	r18,8(sp)
    49bc:	dc000015 	stw	r16,0(sp)
    49c0:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    49c4:	28000f26 	beq	r5,zero,4a04 <alt_up_character_lcd_shift_display+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    49c8:	01400216 	blt	zero,r5,49d4 <alt_up_character_lcd_shift_display+0x28>
    49cc:	04800604 	movi	r18,24
    49d0:	00000106 	br	49d8 <alt_up_character_lcd_shift_display+0x2c>
    49d4:	04800704 	movi	r18,28
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    49d8:	2800010e 	bge	r5,zero,49e0 <alt_up_character_lcd_shift_display+0x34>
    49dc:	014bc83a 	sub	r5,zero,r5
    49e0:	2821883a 	mov	r16,r5
    49e4:	00000106 	br	49ec <alt_up_character_lcd_shift_display+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    49e8:	00049280 	call	4928 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    49ec:	843fffc4 	addi	r16,r16,-1
    49f0:	80c03fcc 	andi	r3,r16,255
    49f4:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    49f8:	8809883a 	mov	r4,r17
    49fc:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4a00:	18bff91e 	bne	r3,r2,49e8 <alt_up_character_lcd_shift_display+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4a04:	dfc00317 	ldw	ra,12(sp)
    4a08:	dc800217 	ldw	r18,8(sp)
    4a0c:	dc400117 	ldw	r17,4(sp)
    4a10:	dc000017 	ldw	r16,0(sp)
    4a14:	dec00404 	addi	sp,sp,16
    4a18:	f800283a 	ret

00004a1c <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    4a1c:	defffc04 	addi	sp,sp,-16
    4a20:	dc400115 	stw	r17,4(sp)
    4a24:	dfc00315 	stw	ra,12(sp)
    4a28:	dc800215 	stw	r18,8(sp)
    4a2c:	dc000015 	stw	r16,0(sp)
    4a30:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    4a34:	28000f26 	beq	r5,zero,4a74 <alt_up_character_lcd_shift_cursor+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    4a38:	01400216 	blt	zero,r5,4a44 <alt_up_character_lcd_shift_cursor+0x28>
    4a3c:	04800404 	movi	r18,16
    4a40:	00000106 	br	4a48 <alt_up_character_lcd_shift_cursor+0x2c>
    4a44:	04800504 	movi	r18,20
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    4a48:	2800010e 	bge	r5,zero,4a50 <alt_up_character_lcd_shift_cursor+0x34>
    4a4c:	014bc83a 	sub	r5,zero,r5
    4a50:	2821883a 	mov	r16,r5
    4a54:	00000106 	br	4a5c <alt_up_character_lcd_shift_cursor+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4a58:	00049280 	call	4928 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4a5c:	843fffc4 	addi	r16,r16,-1
    4a60:	80c03fcc 	andi	r3,r16,255
    4a64:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    4a68:	8809883a 	mov	r4,r17
    4a6c:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    4a70:	18bff91e 	bne	r3,r2,4a58 <alt_up_character_lcd_shift_cursor+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    4a74:	dfc00317 	ldw	ra,12(sp)
    4a78:	dc800217 	ldw	r18,8(sp)
    4a7c:	dc400117 	ldw	r17,4(sp)
    4a80:	dc000017 	ldw	r16,0(sp)
    4a84:	dec00404 	addi	sp,sp,16
    4a88:	f800283a 	ret

00004a8c <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4a8c:	defffe04 	addi	sp,sp,-8
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4a90:	008009c4 	movi	r2,39
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    4a94:	dc000015 	stw	r16,0(sp)
    4a98:	dfc00115 	stw	ra,4(sp)
    4a9c:	2807883a 	mov	r3,r5
    4aa0:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4aa4:	11400a36 	bltu	r2,r5,4ad0 <alt_up_character_lcd_set_cursor_pos+0x44>
    4aa8:	00800044 	movi	r2,1
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4aac:	300b883a 	mov	r5,r6
    4ab0:	1809883a 	mov	r4,r3

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    4ab4:	11800636 	bltu	r2,r6,4ad0 <alt_up_character_lcd_set_cursor_pos+0x44>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    4ab8:	00048a00 	call	48a0 <get_DDRAM_addr>
    4abc:	11403fcc 	andi	r5,r2,255
    4ac0:	8009883a 	mov	r4,r16
    4ac4:	00049280 	call	4928 <alt_up_character_lcd_send_cmd>
    4ac8:	0005883a 	mov	r2,zero
    4acc:	00000106 	br	4ad4 <alt_up_character_lcd_set_cursor_pos+0x48>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    4ad0:	00bfffc4 	movi	r2,-1
}
    4ad4:	dfc00117 	ldw	ra,4(sp)
    4ad8:	dc000017 	ldw	r16,0(sp)
    4adc:	dec00204 	addi	sp,sp,8
    4ae0:	f800283a 	ret

00004ae4 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    4ae4:	01400034 	movhi	r5,0
    4ae8:	2953df04 	addi	r5,r5,20348
    4aec:	0004bf81 	jmpi	4bf8 <alt_find_dev>

00004af0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4af0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4af4:	014666b4 	movhi	r5,6554
    4af8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4afc:	dc000015 	stw	r16,0(sp)
    4b00:	dfc00115 	stw	ra,4(sp)
    4b04:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    4b08:	0004e0c0 	call	4e0c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4b0c:	10001126 	beq	r2,zero,4b54 <alt_busy_sleep+0x64>
    4b10:	0007883a 	mov	r3,zero
    4b14:	01200034 	movhi	r4,32768
    4b18:	213fffc4 	addi	r4,r4,-1
    4b1c:	017999b4 	movhi	r5,58982
    4b20:	295999c4 	addi	r5,r5,26215
    4b24:	00000406 	br	4b38 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4b28:	213fffc4 	addi	r4,r4,-1
    4b2c:	203ffe1e 	bne	r4,zero,4b28 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4b30:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4b34:	18c00044 	addi	r3,r3,1
    4b38:	18bffb16 	blt	r3,r2,4b28 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4b3c:	8009883a 	mov	r4,r16
    4b40:	01400144 	movi	r5,5
    4b44:	0004e1c0 	call	4e1c <__mulsi3>
    4b48:	10bfffc4 	addi	r2,r2,-1
    4b4c:	103ffe1e 	bne	r2,zero,4b48 <alt_busy_sleep+0x58>
    4b50:	00000506 	br	4b68 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4b54:	8009883a 	mov	r4,r16
    4b58:	01400144 	movi	r5,5
    4b5c:	0004e1c0 	call	4e1c <__mulsi3>
    4b60:	10bfffc4 	addi	r2,r2,-1
    4b64:	00bffe16 	blt	zero,r2,4b60 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    4b68:	0005883a 	mov	r2,zero
    4b6c:	dfc00117 	ldw	ra,4(sp)
    4b70:	dc000017 	ldw	r16,0(sp)
    4b74:	dec00204 	addi	sp,sp,8
    4b78:	f800283a 	ret

00004b7c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4b7c:	f800283a 	ret

00004b80 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    4b80:	3005883a 	mov	r2,r6
    4b84:	f800283a 	ret

00004b88 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4b88:	deffff04 	addi	sp,sp,-4
    4b8c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4b90:	20000326 	beq	r4,zero,4ba0 <alt_dev_llist_insert+0x18>
    4b94:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
    4b98:	000d883a 	mov	r6,zero
    4b9c:	10000c1e 	bne	r2,zero,4bd0 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4ba0:	00800034 	movhi	r2,0
    4ba4:	1093e204 	addi	r2,r2,20360
    4ba8:	10800017 	ldw	r2,0(r2)
    4bac:	00c00034 	movhi	r3,0
    4bb0:	18d41004 	addi	r3,r3,20544
    4bb4:	10000226 	beq	r2,zero,4bc0 <alt_dev_llist_insert+0x38>
    4bb8:	103ee83a 	callr	r2
    4bbc:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    4bc0:	00800584 	movi	r2,22
    4bc4:	01bffa84 	movi	r6,-22
    4bc8:	18800015 	stw	r2,0(r3)
    4bcc:	00000606 	br	4be8 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    4bd0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4bd4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    4bd8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    4bdc:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
    4be0:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    4be4:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    4be8:	3005883a 	mov	r2,r6
    4bec:	dfc00017 	ldw	ra,0(sp)
    4bf0:	dec00104 	addi	sp,sp,4
    4bf4:	f800283a 	ret

00004bf8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4bf8:	defffb04 	addi	sp,sp,-20
    4bfc:	dcc00315 	stw	r19,12(sp)
    4c00:	dc800215 	stw	r18,8(sp)
    4c04:	dc400115 	stw	r17,4(sp)
    4c08:	dc000015 	stw	r16,0(sp)
    4c0c:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    4c10:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4c14:	2823883a 	mov	r17,r5
    4c18:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    4c1c:	0004cb00 	call	4cb0 <strlen>
    4c20:	14800044 	addi	r18,r2,1
    4c24:	00000406 	br	4c38 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4c28:	81000217 	ldw	r4,8(r16)
    4c2c:	0004c740 	call	4c74 <memcmp>
    4c30:	10000526 	beq	r2,zero,4c48 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    4c34:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4c38:	980b883a 	mov	r5,r19
    4c3c:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4c40:	847ff91e 	bne	r16,r17,4c28 <alt_find_dev+0x30>
    4c44:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
    4c48:	8005883a 	mov	r2,r16
    4c4c:	dfc00417 	ldw	ra,16(sp)
    4c50:	dcc00317 	ldw	r19,12(sp)
    4c54:	dc800217 	ldw	r18,8(sp)
    4c58:	dc400117 	ldw	r17,4(sp)
    4c5c:	dc000017 	ldw	r16,0(sp)
    4c60:	dec00504 	addi	sp,sp,20
    4c64:	f800283a 	ret

00004c68 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4c68:	f800283a 	ret

00004c6c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4c6c:	000170fa 	wrctl	ienable,zero
}
    4c70:	f800283a 	ret

00004c74 <memcmp>:
    4c74:	31ffffc4 	addi	r7,r6,-1
    4c78:	3000061e 	bne	r6,zero,4c94 <memcmp+0x20>
    4c7c:	00000a06 	br	4ca8 <memcmp+0x34>
    4c80:	39ffffc4 	addi	r7,r7,-1
    4c84:	00bfffc4 	movi	r2,-1
    4c88:	21000044 	addi	r4,r4,1
    4c8c:	29400044 	addi	r5,r5,1
    4c90:	38800526 	beq	r7,r2,4ca8 <memcmp+0x34>
    4c94:	20c00003 	ldbu	r3,0(r4)
    4c98:	28800003 	ldbu	r2,0(r5)
    4c9c:	18bff826 	beq	r3,r2,4c80 <memcmp+0xc>
    4ca0:	1885c83a 	sub	r2,r3,r2
    4ca4:	f800283a 	ret
    4ca8:	0005883a 	mov	r2,zero
    4cac:	f800283a 	ret

00004cb0 <strlen>:
    4cb0:	20800007 	ldb	r2,0(r4)
    4cb4:	10000526 	beq	r2,zero,4ccc <strlen+0x1c>
    4cb8:	2007883a 	mov	r3,r4
    4cbc:	18c00044 	addi	r3,r3,1
    4cc0:	18800007 	ldb	r2,0(r3)
    4cc4:	103ffd1e 	bne	r2,zero,4cbc <strlen+0xc>
    4cc8:	1905c83a 	sub	r2,r3,r4
    4ccc:	f800283a 	ret

00004cd0 <udivmodsi4>:
    4cd0:	29001b2e 	bgeu	r5,r4,4d40 <udivmodsi4+0x70>
    4cd4:	28001a16 	blt	r5,zero,4d40 <udivmodsi4+0x70>
    4cd8:	00800044 	movi	r2,1
    4cdc:	0007883a 	mov	r3,zero
    4ce0:	01c007c4 	movi	r7,31
    4ce4:	00000306 	br	4cf4 <udivmodsi4+0x24>
    4ce8:	19c01326 	beq	r3,r7,4d38 <udivmodsi4+0x68>
    4cec:	18c00044 	addi	r3,r3,1
    4cf0:	28000416 	blt	r5,zero,4d04 <udivmodsi4+0x34>
    4cf4:	294b883a 	add	r5,r5,r5
    4cf8:	1085883a 	add	r2,r2,r2
    4cfc:	293ffa36 	bltu	r5,r4,4ce8 <udivmodsi4+0x18>
    4d00:	10000d26 	beq	r2,zero,4d38 <udivmodsi4+0x68>
    4d04:	0007883a 	mov	r3,zero
    4d08:	21400236 	bltu	r4,r5,4d14 <udivmodsi4+0x44>
    4d0c:	2149c83a 	sub	r4,r4,r5
    4d10:	1886b03a 	or	r3,r3,r2
    4d14:	1004d07a 	srli	r2,r2,1
    4d18:	280ad07a 	srli	r5,r5,1
    4d1c:	103ffa1e 	bne	r2,zero,4d08 <udivmodsi4+0x38>
    4d20:	30000226 	beq	r6,zero,4d2c <udivmodsi4+0x5c>
    4d24:	2005883a 	mov	r2,r4
    4d28:	f800283a 	ret
    4d2c:	1809883a 	mov	r4,r3
    4d30:	2005883a 	mov	r2,r4
    4d34:	f800283a 	ret
    4d38:	0007883a 	mov	r3,zero
    4d3c:	003ff806 	br	4d20 <udivmodsi4+0x50>
    4d40:	00800044 	movi	r2,1
    4d44:	0007883a 	mov	r3,zero
    4d48:	003fef06 	br	4d08 <udivmodsi4+0x38>

00004d4c <__divsi3>:
    4d4c:	defffe04 	addi	sp,sp,-8
    4d50:	dc000015 	stw	r16,0(sp)
    4d54:	dfc00115 	stw	ra,4(sp)
    4d58:	0021883a 	mov	r16,zero
    4d5c:	20000c16 	blt	r4,zero,4d90 <__divsi3+0x44>
    4d60:	000d883a 	mov	r6,zero
    4d64:	28000e16 	blt	r5,zero,4da0 <__divsi3+0x54>
    4d68:	0004cd00 	call	4cd0 <udivmodsi4>
    4d6c:	1007883a 	mov	r3,r2
    4d70:	8005003a 	cmpeq	r2,r16,zero
    4d74:	1000011e 	bne	r2,zero,4d7c <__divsi3+0x30>
    4d78:	00c7c83a 	sub	r3,zero,r3
    4d7c:	1805883a 	mov	r2,r3
    4d80:	dfc00117 	ldw	ra,4(sp)
    4d84:	dc000017 	ldw	r16,0(sp)
    4d88:	dec00204 	addi	sp,sp,8
    4d8c:	f800283a 	ret
    4d90:	0109c83a 	sub	r4,zero,r4
    4d94:	04000044 	movi	r16,1
    4d98:	000d883a 	mov	r6,zero
    4d9c:	283ff20e 	bge	r5,zero,4d68 <__divsi3+0x1c>
    4da0:	014bc83a 	sub	r5,zero,r5
    4da4:	8021003a 	cmpeq	r16,r16,zero
    4da8:	003fef06 	br	4d68 <__divsi3+0x1c>

00004dac <__modsi3>:
    4dac:	deffff04 	addi	sp,sp,-4
    4db0:	dfc00015 	stw	ra,0(sp)
    4db4:	01800044 	movi	r6,1
    4db8:	2807883a 	mov	r3,r5
    4dbc:	20000416 	blt	r4,zero,4dd0 <__modsi3+0x24>
    4dc0:	28000c16 	blt	r5,zero,4df4 <__modsi3+0x48>
    4dc4:	dfc00017 	ldw	ra,0(sp)
    4dc8:	dec00104 	addi	sp,sp,4
    4dcc:	0004cd01 	jmpi	4cd0 <udivmodsi4>
    4dd0:	0109c83a 	sub	r4,zero,r4
    4dd4:	28000b16 	blt	r5,zero,4e04 <__modsi3+0x58>
    4dd8:	180b883a 	mov	r5,r3
    4ddc:	01800044 	movi	r6,1
    4de0:	0004cd00 	call	4cd0 <udivmodsi4>
    4de4:	0085c83a 	sub	r2,zero,r2
    4de8:	dfc00017 	ldw	ra,0(sp)
    4dec:	dec00104 	addi	sp,sp,4
    4df0:	f800283a 	ret
    4df4:	014bc83a 	sub	r5,zero,r5
    4df8:	dfc00017 	ldw	ra,0(sp)
    4dfc:	dec00104 	addi	sp,sp,4
    4e00:	0004cd01 	jmpi	4cd0 <udivmodsi4>
    4e04:	0147c83a 	sub	r3,zero,r5
    4e08:	003ff306 	br	4dd8 <__modsi3+0x2c>

00004e0c <__udivsi3>:
    4e0c:	000d883a 	mov	r6,zero
    4e10:	0004cd01 	jmpi	4cd0 <udivmodsi4>

00004e14 <__umodsi3>:
    4e14:	01800044 	movi	r6,1
    4e18:	0004cd01 	jmpi	4cd0 <udivmodsi4>

00004e1c <__mulsi3>:
    4e1c:	20000a26 	beq	r4,zero,4e48 <__mulsi3+0x2c>
    4e20:	0007883a 	mov	r3,zero
    4e24:	2080004c 	andi	r2,r4,1
    4e28:	1005003a 	cmpeq	r2,r2,zero
    4e2c:	2008d07a 	srli	r4,r4,1
    4e30:	1000011e 	bne	r2,zero,4e38 <__mulsi3+0x1c>
    4e34:	1947883a 	add	r3,r3,r5
    4e38:	294b883a 	add	r5,r5,r5
    4e3c:	203ff91e 	bne	r4,zero,4e24 <__mulsi3+0x8>
    4e40:	1805883a 	mov	r2,r3
    4e44:	f800283a 	ret
    4e48:	0007883a 	mov	r3,zero
    4e4c:	1805883a 	mov	r2,r3
    4e50:	f800283a 	ret

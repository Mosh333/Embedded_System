// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "io.h"
#include "system.h"
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "altera_up_avalon_character_lcd.h"

alt_u16 disp_seven_seg(alt_u8 val) {
	switch (val) {
	case 0:
		return 0x40;
	case 1:
		return 0x79;
	case 2:
		return 0x24;
	case 3:
		return 0x30;
	case 4:
		return 0x19;
	case 5:
		return 0x12;
	case 6:
		return 0x02;
	case 7:
		return 0x78;
	case 8:
		return 0x00;
	case 9:
		return 0x18;
	case 10:
		return 0x08;
	case 11:
		return 0x03;
	case 12:
		return 0x46;
	case 13:
		return 0x21;
	case 14:
		return 0x06;
	case 15:
		return 0x0e;
	default:
		return 0x7f;
	}
}

int find_4_LSB_GLED_ON(void){ //find 8 lsb group A switch that are on
	alt_u32 temp;
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPA_I_BASE, 0x0); //store 9 bits that are on, alternatively pass FF mask

	//mask the last 8 bits, one at a time, test each bit and sum
	for(i=0;i<8;i++){
		if((temp>>i)&(0x1)){
			result++;
		}
	}
	IOWR(SWITCH_GRPA_I_BASE,3, 0x0);
	return result;
}

int find_4_MSB_GLED_ON(void){ //find 8 msb group B switches that are on
	alt_u32 temp;
	alt_u32 result = 0;
	int i;

	temp = IORD(SWITCH_GRPB_I_BASE, 0x0); //store 9 bits that are on, alternatively pass 1FE mask
	//mask the first 8 bits, one at a time, test each bit and sum
	for(i=1;i<9;i++){
		if((temp>>i)&(0x1)){
			result++;
		}
	}
	result = (result << 4);
	return result;
}

void blink_if_equal(alt_u32 msb, alt_u32 lsb){
	int i;
	int msbTemp = msb;
	alt_u32 disp_MSB_GLED = 0;
	alt_u32 currentGREENval = 0;

	currentGREENval = IORD(LED_GREEN_O_BASE, 0x0);
	alt_printf("I am in blink_if_equal\n");
	alt_printf("currentGREENval is %x\n", currentGREENval);
	msbTemp = msbTemp >> 4;
	alt_printf("msb is %x, lsb is %x", msbTemp, lsb);
	if(msbTemp==lsb){
		for(i=0; i<6; i++){
			currentGREENval = currentGREENval^(0x1<<9); //complement 9th position but keep rest the same
			IOWR(LED_GREEN_O_BASE, 0, currentGREENval); //disp_MSB_GLED
			usleep(500000);
		}

	}
	alt_printf("Done blink_if_equal\n");
	return;
}

void SW_GRPA_interrupt(void) {
	alt_u32 FOUR_LSB_GLED_DISP = find_4_LSB_GLED_ON();
	alt_u32 FOUR_MSB_GLED_DISP = find_4_MSB_GLED_ON();
	alt_printf("LSB value is: %x\n", FOUR_LSB_GLED_DISP);
	alt_printf("MSB value is %x\n", FOUR_MSB_GLED_DISP);
	alt_printf("MSB Switch from GRPA changed\n");
	IOWR(LED_GREEN_O_BASE, 0, FOUR_LSB_GLED_DISP+FOUR_MSB_GLED_DISP); // light on the green LEDs
	blink_if_equal(FOUR_MSB_GLED_DISP,FOUR_LSB_GLED_DISP);	//blink position 8 green LED
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
}

void SW_GRPB_interrupt(void) {
	alt_printf("LSB Switch from GRPB changed\n");
	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0);
}

int main(void) {
	IOWR(SWITCH_GRPA_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
	IOWR(SWITCH_GRPA_I_BASE, 2, 0x100); // set the IRQ mask for MSB of Group A
	alt_irq_register(SWITCH_GRPA_I_IRQ, NULL, (void*) SW_GRPA_interrupt);

	IOWR(SWITCH_GRPB_I_BASE, 3, 0x0); //clear the edge register to prevent multiple ISR calls
	IOWR(SWITCH_GRPB_I_BASE, 2, 0x1); // set the IRQ mask for Group B
	alt_irq_register(SWITCH_GRPB_I_IRQ, NULL, (void*) SW_GRPB_interrupt);

	IOWR(LED_GREEN_O_BASE, 0, 0x0); // clear the green LEDs
	IOWR(LED_RED_O_BASE, 0, 0x0); // clear the red LEDs
	while (1);


	return 0;
}


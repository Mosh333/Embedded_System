// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

#include "define.h"

// For the performance counter
void *performance_name = PERFORMANCE_COUNTER_0_BASE;

// Definition of semaphore for PBs
OS_EVENT *PBSemaphore[4];

int new_priority_assign[4];
int new_born[4];
int button_times[4];
// Definition of task stacks
OS_STK initialize_task_stk[TASK_STACKSIZE];
OS_STK custom_scheduler_stk[TASK_STACKSIZE];
OS_TCB custom_scheduler_tcb;

OS_STK periodic_task_stk[NUM_TASK][TASK_STACKSIZE];
OS_TCB periodic_task_tcb[NUM_TASK];

// Struct for storing information about each custom task
typedef struct task_info_struct {
	int priority;
	int execution_time;
	int os_delay;
} task_info_struct;

// Struct for storing information about tasks during dynamic scheduling using the custom_scheduler
typedef struct scheduler_info_struct {
	int valid;
	int id;
	int period;
} scheduler_info_struct;

// Local function prototypes
void custom_delay(int);
//int custom_task_del(int, scheduler_info_struct[], task_info_struct[]);

void custom_task_create(int, int, scheduler_info_struct[], task_info_struct[]);


scheduler_info_struct scheduler_info_holder[NUM_TASK];
// Periodic task 0
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task0(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *) pdata;
	while (1) {
		printf("Start periodic_task0 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End	  periodic_task0 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 1
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task1(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *) pdata;
	while (1) {
		printf("Start periodic_task1 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End	  periodic_task1 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 2
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task2(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *) pdata;
	while (1) {
		printf("Start periodic_task2 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End	  periodic_task2 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 3
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task3(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *) pdata;
	while (1) {
		printf("Start periodic_task3 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End	  periodic_task3 (%4d ms) (%1d s) (%d priority)\n",
				task_info_ptr->execution_time, task_info_ptr->os_delay,
				task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}



int find_min(){//function to return the lowest OS time in our global array
	long int min=2147483647;
	int i;

	for(i=0;i<4;i++){
		if(button_times[i]!=-1){
			if(min>button_times[i]){
				min=i;

			}

		}

	}
	return min;
}

// The custom_scheduler
// It has the highest priority
// It checks the PBs every 500ms
// It a button has been pressed, it creates/deletes the corresponding task in the OS
// When creating a task, it will assign the new task with the lowest priority among the running tasks
void custom_scheduler(void *pdata) {
	INT8U return_code = OS_NO_ERR;
	int i;
	int PB_pressed[NUM_PB_BUTTON];
	int sem_value;
	int new_pressed;
	int lowest_priority_assign[4];//we will service or start tasks in order of this array from index 0 to 3

	int PB0_time;
	int PB1_time;
	int PB2_time;
	int PB3_time;
	int j;
	int task_num_to_serve;

	int num_buttons_pressed;


	int num_active_task;
	// Array of task_info
	task_info_struct task_info[NUM_TASK];
	scheduler_info_struct scheduler_info[NUM_TASK];

	printf("Starting custom scheduler...\n");

	num_active_task = 0;
	for(i=0;i<4;i++){
		lowest_priority_assign[i]=-1;
	}


	// Scheduler never returns
	while (1) {
		for(i=0;i<4;i++){
			lowest_priority_assign[i]=-1;
		}

		new_pressed = 0;
		// Check for PBs
		num_buttons_pressed=0;
		for (i = 0; i < NUM_PB_BUTTON; i++) {
			PB_pressed[i] = 0;
			sem_value = OSSemAccept(PBSemaphore[i]);
			if (sem_value != 0) {
				PB_pressed[i] = 1;
				new_pressed = 1;
				printf("Button %d was pressed at time %d\n", i, button_times[i]);
				num_buttons_pressed++;

			}
		}


		PB0_time=button_times[0];
		PB1_time=button_times[1];
		PB2_time=button_times[2];
		PB3_time=button_times[3];



//		for(i=0;i<4;i++){
//			button_times
//
//		}


		if (new_pressed != 0) {
			printf("Locking OS scheduler for new scheduling\n");
			OSSchedLock();
			for(j=0;j<num_buttons_pressed;j++){

				task_num_to_serve=find_min();
				printf("\nWe are serving task #%d\n", task_num_to_serve);
				custom_task_create(task_num_to_serve, num_active_task,scheduler_info, task_info);
				button_times[task_num_to_serve]=-1;

			}



//			custom_task_create(PB_pressed, num_active_task,
//					scheduler_info, task_info);

			////now check subsequent button presses




//			int k;
//
//			for (k = 0; k < NUM_TASK; k++) {
//				scheduler_info_holder[k] = scheduler_info[k];
//			}
//
//			for (i = 0; i < NUM_PB_BUTTON; i++) {
//				if (PB_pressed[i] == 1) {//the button has been pressed
//					if (new_born[i] == 0) {//the task is already running
//						//so we must decerement the priority value of the task now, and increment others
//
//
//					}
//				}
//			}

			printf("Printing task info:\n");
			for (i = 0; i < num_active_task; i++) {
				printf(
						"Priority %d: valid=%d, task_id=%d, period=%d, exec_time=%d, os_delay=%d, pri=%d\n",
						i, scheduler_info[i].valid, scheduler_info[i].id,
						scheduler_info[i].period,
						task_info[scheduler_info[i].id].execution_time,
						task_info[scheduler_info[i].id].os_delay,
						task_info[scheduler_info[i].id].priority);
			}

			printf("Unlocking OS scheduler\n");
			OSSchedUnlock();
		}

		OSTimeDly(3000);
	}
}


// Function for creating a task in the OS, and update the data structure task_info
// The new task has the lowest priority among the existing tasks
void custom_task_create(int task_num, int num_active_task,
	scheduler_info_struct scheduler_info[], task_info_struct task_info[]) {
	//int i;
	int t;
	int k;
	int num_task_created;
	INT8U return_code = OS_NO_ERR;
	int lowest_priority_assign[4];

	num_task_created = 0;


			//////////////////////////////////////////////////////////////////////////////////////////////
			if (new_born[task_num] == 1) {

				for (k = 0; k < NUM_TASK; k++) {
					scheduler_info_holder[k] = scheduler_info[k];
				}
				//////SHIFT ALL OTHER PRIORITIES DOWN
				printf("\n\nEntering SHIFT algorithm::::\n");

				for (t = 0; t < num_active_task; t++) {
					printf("shifting active task: %d out of %d\n", t,
							num_active_task - 1);
					//TASK_START_PRIORITY =10
					//TEMP_SHIFT_OFFSET=10
					//printf("\NThe t value is: %d and the num of active tasks is %d\n", t, num_active_task);
					printf(
							"shifting the priority of Active task( %d ) from ( %d ) to ( %d )\n",
							t, TASK_START_PRIORITY + t, TASK_START_PRIORITY
									+ TEMP_SHIFT_OFFSET + t + 1);
					return_code = OSTaskChangePrio(TASK_START_PRIORITY + t,
							TASK_START_PRIORITY + TEMP_SHIFT_OFFSET + t + 1);
					alt_ucosii_check_return_code(return_code);

					printf(
							"\nwe are now shifting scheduler_info data\n----------------------\n");
					//printf("saving scheduler")
					scheduler_info[t + 1].valid
							= scheduler_info_holder[t].valid;
					scheduler_info[t + 1].id = scheduler_info_holder[t].id;
					scheduler_info[t + 1].period
							= scheduler_info_holder[t].period;
					task_info[scheduler_info[t + 1].id].priority = t + 1;
					printf(
							"\ndone shifting scheduler_info data\n----------------------\n");
				}

				printf("Creating task(s) in the OS ...\n");
				task_info[task_num].execution_time = rand() % EXECUTION_TIME_LIMIT + 1;
				task_info[task_num].os_delay = rand() % OS_DELAY_LIMIT + 1;
				task_info[task_num].priority = 0;//num_active_task + num_task_created;

				scheduler_info[0].valid = 1;
				scheduler_info[0].period = task_info[task_num].execution_time
						+ task_info[task_num].os_delay * 1000;
				scheduler_info[0].id = task_num;

				printf(
						"-Creating periodic_task%d: execution_time_tick = %d, os_delay_time = %d: priority (%d)\n",
						task_num, task_info[task_num].execution_time, task_info[task_num].os_delay,
						0);

				// Create the task in the OS
				switch (task_num) {
				case 0:
					return_code = OSTaskCreateExt(periodic_task0,
							&task_info[task_num],
							(void *) &periodic_task_stk[task_num][TASK_STACKSIZE - task_num],
							TASK_START_PRIORITY, task_num, &periodic_task_stk[task_num][0],
							TASK_STACKSIZE, &periodic_task_tcb[task_num], 0);
					alt_ucosii_check_return_code(return_code);
					break;
				case 1:
					return_code = OSTaskCreateExt(periodic_task1,
							&task_info[task_num],
							(void *) &periodic_task_stk[task_num][TASK_STACKSIZE - 1],
							TASK_START_PRIORITY, task_num, &periodic_task_stk[task_num][0],
							TASK_STACKSIZE, &periodic_task_tcb[task_num], 0);
					alt_ucosii_check_return_code(return_code);
					break;
				case 2:
					return_code = OSTaskCreateExt(periodic_task2,
							&task_info[task_num],
							(void *) &periodic_task_stk[task_num][TASK_STACKSIZE - 1],
							TASK_START_PRIORITY, task_num, &periodic_task_stk[task_num][0],
							TASK_STACKSIZE, &periodic_task_tcb[task_num], 0);
					alt_ucosii_check_return_code(return_code);
					break;
				default:
					return_code = OSTaskCreateExt(periodic_task3,
							&task_info[task_num],
							(void *) &periodic_task_stk[task_num][TASK_STACKSIZE - 1],
							TASK_START_PRIORITY, task_num, &periodic_task_stk[task_num][0],
							TASK_STACKSIZE, &periodic_task_tcb[task_num], 0);
					alt_ucosii_check_return_code(return_code);
					break;
				}

				for (t = num_active_task - 1; t >= 0; t--) {
					printf("\nshifting active task: %d out of %d\n", t,
							num_active_task);
					//TASK_START_PRIORITY =10
					//TEMP_SHIFT_OFFSET=10
					//printf("\NThe t value is: %d and the num of active tasks is %d\n", t, num_active_task);
					printf(
							"\nshifting the priority of Active task( %d ) back from ( %d ) to ( %d )\n",
							t, TASK_START_PRIORITY + TEMP_SHIFT_OFFSET + t + 1,
							TASK_START_PRIORITY + t + 1);
					return_code = OSTaskChangePrio(TASK_START_PRIORITY
							+ TEMP_SHIFT_OFFSET + t + 1, TASK_START_PRIORITY
							+ t + 1);
					alt_ucosii_check_return_code(return_code);
				}

				new_born[task_num] = 0;
				num_task_created++;
			}

			//if multiple buttons were pressed between 2 runs of the scheduler, we need to find most recent presses and assign those highest priority
//
//
//			//if not a new born task
//			//we must make this task priority lowest (depending on most recent press and upgrade other prios
//			for (k = 0; k < NUM_TASK; k++) {
//				scheduler_info_holder[k] = scheduler_info[k];
//			}
//
//			//////SHIFT ALL OTHER PRIORITIES DOWN
//			printf("\n\nEntering SHIFT algorithm::::\n");
//
//			for (t = 0; t < num_active_task; t++) {
//				printf("shifting active task: %d out of %d\n", t,
//						num_active_task - 1);
//				//TASK_START_PRIORITY =10
//				//TEMP_SHIFT_OFFSET=10
//				//printf("\NThe t value is: %d and the num of active tasks is %d\n", t, num_active_task);
//				printf(
//						"shifting the priority of Active task( %d ) from ( %d ) to ( %d )\n",
//						t, TASK_START_PRIORITY + t, TASK_START_PRIORITY
//								+ TEMP_SHIFT_OFFSET + t + 1);
//				return_code = OSTaskChangePrio(TASK_START_PRIORITY + t,
//						TASK_START_PRIORITY + TEMP_SHIFT_OFFSET + t + 1);
//				alt_ucosii_check_return_code(return_code);
//
//				printf(
//						"\nwe are now shifting scheduler_info data\n----------------------\n");
//				//printf("saving scheduler")
//				scheduler_info[t + 1].valid = scheduler_info_holder[t].valid;
//				scheduler_info[t + 1].id = scheduler_info_holder[t].id;
//				scheduler_info[t + 1].period = scheduler_info_holder[t].period;
//				task_info[scheduler_info[t + 1].id].priority = t + 1;
//				printf(
//						"\ndone shifting scheduler_info data\n----------------------\n");
//			}




	printf("%d task created...\n", num_task_created);

	//return num_task_created;
}

// Function for occupying the processor for the specified number of clock ticks
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
	INT32U cur_tick;
	ticks--;
	cur_tick = OSTimeGet();
	while (ticks > 0) {
		if (OSTimeGet() > cur_tick) {
			ticks--;
			cur_tick = OSTimeGet();
		}
	}
}

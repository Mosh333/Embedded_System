
experiment2.elf:     file format elf32-littlenios2
experiment2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00017bfc memsz 0x00017bfc flags r-x
    LOAD off    0x00018c1c vaddr 0x00097c1c paddr 0x00099730 align 2**12
         filesz 0x00001b14 memsz 0x00001b14 flags rw-
    LOAD off    0x0001b244 vaddr 0x0009b244 paddr 0x0009b244 align 2**12
         filesz 0x00000000 memsz 0x0000f7a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016f2c  000801bc  000801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b34  000970e8  000970e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b14  00097c1c  00099730  00018c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f7a0  0009b244  0009b244  0001b244  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001a730  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  0001a758  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000024fa  00000000  00000000  0001b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003628d  00000000  00000000  0001dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a299  00000000  00000000  00053e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d75a  00000000  00000000  0005e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002968  00000000  00000000  0007b82c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002727  00000000  00000000  0007e194  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000da5c  00000000  00000000  000808bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008e318  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  0008e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00093b20  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00093b26  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00093b2b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00093b2c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00093b2d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00093b38  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00093b43  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00093b4e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000049  00000000  00000000  00093b59  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004b6b5  00000000  00000000  00093ba2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801bc l    d  .text	00000000 .text
000970e8 l    d  .rodata	00000000 .rodata
00097c1c l    d  .rwdata	00000000 .rwdata
0009b244 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 alt_ucosii_simple_error_check.c
00000000 l    df *ABS*	00000000 experiment2.c
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00097c1c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000812fc l     F .text	00000058 __sprint_r
00097812 l     O .rodata	00000010 blanks.3452
00097802 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083378 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084da0 l     F .text	00000058 std
00084eac l     F .text	00000008 __fp_lock
00084eb4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00099680 l     O .rwdata	00000004 charset
00097844 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009798c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00089384 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008a4b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008ac90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008acf0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008adf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b0d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b1b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b318 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b7fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000996a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008bab4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000996ac l     O .rwdata	00000004 lockid
0009b274 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000996b0 l     O .rwdata	00000004 lockid
0009b27c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0008d4ec l     F .text	00000044 OS_InitMisc
0008d530 l     F .text	0000006c OS_InitRdyList
0008d694 l     F .text	000000e0 OS_InitTCBList
0008d410 l     F .text	000000dc OS_InitEventList
0008d59c l     F .text	0000007c OS_InitTaskIdle
0008d618 l     F .text	0000007c OS_InitTaskStat
0008d908 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0008f828 l     F .text	00000110 OS_FlagTaskRdy
0008f580 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000985d8 l     O .rwdata	0000106c jtag_uart_0
00099644 l     O .rwdata	0000002c character_lcd_0
00094198 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00094450 l     F .text	000002c4 altera_avalon_jtag_uart_irq
00094714 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00094f2c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00095780 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00095c24 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00095d74 l     F .text	000000f8 alt_file_locked
00095ff8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00096e58 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0009700c l     F .text	00000040 alt_sim_halt
00086b90 g     F .text	00000094 _mprec_log10
000996fe g     O .rwdata	00000002 OSTaskNameSize
00086c7c g     F .text	00000088 __any_on
00088434 g     F .text	00000070 _isatty_r
00097964 g     O .rodata	00000028 __mprec_tinytens
0008b378 g     F .text	000000c8 alt_main
00081140 g     F .text	000000a0 _puts_r
000aa754 g     O .bss	00000100 alt_irq
000884a4 g     F .text	00000078 _lseek_r
0009011c g     F .text	000000d4 OS_MemInit
00099730 g       *ABS*	00000000 __flash_rwdata_start
0009407c g     F .text	00000064 OSTimeSet
000950a8 g     F .text	00000034 alt_up_character_lcd_send_cmd
00089ea4 g     F .text	00000088 __eqdf2
0008c068 g     F .text	000006b4 OSEventPendMulti
000aa9e4 g       *ABS*	00000000 __alt_heap_start
00096600 g     F .text	00000020 OSTaskCreateHook
0009b304 g     O .bss	00002000 custom_scheduler_stk
000810c8 g     F .text	00000044 printf
000996d6 g     O .rwdata	00000002 OSMboxEn
0008c770 g     F .text	0000007c OSIntEnter
00087eec g     F .text	00000068 __sseek
00084e08 g     F .text	000000a4 __sinit
00096bd8 g     F .text	00000130 __swbuf_r
000996e6 g     O .rwdata	00000002 OSQEn
00085b14 g     F .text	00000084 _setlocale_r
00084f08 g     F .text	0000009c __sfmoreglue
0008bd24 g     F .text	000000d0 __malloc_unlock
0009665c g     F .text	0000001c OSTaskStatHook
0009b284 g     O .bss	00000001 OSLockNesting
000802c4 g     F .text	00000044 KEY3_Pressed
00099724 g     O .rwdata	00000002 OSDataSize
0009b285 g     O .bss	00000001 OSRunning
0008660c g     F .text	000000e0 memmove
00096694 g     F .text	0000001c OSInitHookBegin
0009971c g     O .rwdata	00000002 OSTmrSize
00084ef8 g     F .text	00000010 _cleanup
00086d04 g     F .text	000000bc _Balloc
0009b288 g     O .bss	00000004 OSIdleCtr
00089fb4 g     F .text	00000088 __gtdf2
000962cc g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0009502c g     F .text	0000007c get_DDRAM_addr
0008dc3c g     F .text	000002e0 OS_TCBInit
00080000 g     F .entry	0000000c __reset
00099722 g     O .rwdata	00000002 OSTmrWheelTblSize
00080020 g       *ABS*	00000000 __flash_exceptions_start
000996c2 g     O .rwdata	00000002 OSEventSize
0009b28c g     O .bss	00000001 OSPrioHighRdy
000883c0 g     F .text	00000074 _fstat_r
00096620 g     F .text	00000020 OSTaskDelHook
0009b25c g     O .bss	00000004 errno
000962ac g       .text	00000000 OSStartHighRdy
00092834 g     F .text	00000200 OSTaskCreateExt
00080958 g     F .text	0000003c initialize_task
0008f09c g     F .text	00000068 OSFlagPendGetFlagsRdy
00099702 g     O .rwdata	00000002 OSTaskStatStkSize
0008e0a8 g     F .text	00000334 OSFlagAccept
00090858 g     F .text	000000c8 OSQFlush
000901f0 g     F .text	00000154 OSQAccept
0009b26c g     O .bss	00000004 alt_argv
000a1670 g       *ABS*	00000000 _gp
00092660 g     F .text	000001d4 OSTaskCreate
000920ec g     F .text	00000574 OSTaskChangePrio
0009b280 g     O .bss	00000004 alt_heapsem
0008df1c g     F .text	0000018c OSDebugInit
00092a34 g     F .text	0000040c OSTaskDel
00080d70 g     F .text	00000164 custom_scheduler
00098458 g     O .rwdata	00000180 alt_fd_list
000a7530 g     O .bss	00000370 OSFlagTbl
00080ed4 g     F .text	00000070 custom_delay
0008d1ec g     F .text	000000b8 OS_EventTaskRemove
000958a8 g     F .text	00000094 alt_find_dev
0008656c g     F .text	000000a0 memcpy
000996ec g     O .rwdata	00000002 OSRdyTblSize
00095240 g     F .text	0000004c alt_up_character_lcd_write_fd
00084eec g     F .text	0000000c _cleanup_r
0008a14c g     F .text	000000f8 __floatsidf
00095cfc g     F .text	00000078 alt_io_redirect
0008a0c4 g     F .text	00000088 __ltdf2
000970e8 g       *ABS*	00000000 __DTOR_END__
00080b18 g     F .text	00000084 init_OS_data_structs
000811e0 g     F .text	00000014 puts
0008bdf4 g     F .text	00000130 OSEventNameGet
000996d0 g     O .rwdata	00000002 OSFlagMax
00086ae0 g     F .text	000000b0 __ratio
0008c7ec g     F .text	00000100 OSIntExit
0009970a g     O .rwdata	00000002 OSTCBSize
0009b28d g     O .bss	00000001 OSPrioCur
00094990 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008110c g     F .text	00000034 _printf_r
0008a5ec g     F .text	00000008 __udivsi3
0008b014 g     F .text	000000c4 isatty
0009d304 g     O .bss	00008000 periodic_task_stk
000996f0 g     O .rwdata	00000002 OSStkWidth
00097874 g     O .rodata	000000c8 __mprec_tens
000996e4 g     O .rwdata	00000002 OSPtrSize
00085af0 g     F .text	00000008 __locale_charset
000996c4 g     O .rwdata	00000002 OSEventTblSize
00096220 g       .text	00000000 OSCtxSw
0009b250 g     O .bss	00000004 __malloc_top_pad
0009b290 g     O .bss	00000004 OSTCBList
0009b260 g     O .bss	00000004 alt_fd_list_lock
0009967c g     O .rwdata	00000004 __mb_cur_max
00085af8 g     F .text	0000000c _localeconv_r
00087468 g     F .text	0000003c __i2b
000854d4 g     F .text	0000049c __sfvwrite_r
000a78a0 g     O .bss	00000c30 OSMemTbl
0009b294 g     O .bss	00000001 OSTickStepState
00087e74 g     F .text	00000070 _sbrk_r
000996e8 g     O .rwdata	00000002 OSQMax
000a84d0 g     O .bss	00000800 OSTaskStatStk
0008fd04 g     F .text	0000010c OSMemNameGet
000996c8 g     O .rwdata	00000002 OSFlagEn
0008851c g     F .text	00000078 _read_r
0009970e g     O .rwdata	00000002 OSTimeTickHookEn
00090dbc g     F .text	00000180 OSQPost
0008f938 g     F .text	000000ac OS_FlagUnlink
0009801c g     O .rwdata	0000000c __lc_ctype
0009969c g     O .rwdata	00000004 alt_max_fd
0008d7c8 g     F .text	0000006c OS_MemCopy
0008d834 g     F .text	000000d4 OS_Sched
0008a990 g     F .text	00000138 __unpack_d
0008829c g     F .text	00000110 _fclose_r
0008fc00 g     F .text	00000104 OSMemGet
00093168 g     F .text	000001c4 OSTaskNameSet
00084d6c g     F .text	00000034 fflush
0009b254 g     O .bss	00000004 __malloc_max_sbrked_mem
0009b298 g     O .bss	00000004 OSCtxSwCtr
00096678 g     F .text	0000001c OSTimeTickHook
0008ae54 g     F .text	000001c0 alt_irq_register
000996d2 g     O .rwdata	00000002 OSFlagNameSize
0008d2a4 g     F .text	00000104 OS_EventTaskRemoveMulti
00089814 g     F .text	00000074 __adddf3
0008d098 g     F .text	00000154 OS_EventTaskWaitMulti
000869c0 g     F .text	00000120 __b2d
000996ea g     O .rwdata	00000002 OSQSize
00088d24 g     F .text	00000660 __umoddi3
0008b224 g     F .text	000000f4 lseek
00091998 g     F .text	0000027c OSSemPend
00099678 g     O .rwdata	00000004 _global_impure_ptr
000a5304 g     O .bss	00000010 PBSemaphore
00087810 g     F .text	000005f4 _realloc_r
000996d4 g     O .rwdata	00000002 OSLowestPrio
000aa9e4 g       *ABS*	00000000 __bss_end
00095b2c g     F .text	000000f8 alt_iic_isr_register
000966e8 g     F .text	00000020 OSTCBInitHook
0009971a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000960f0 g     F .text	00000110 alt_tick
000a5314 g     O .bss	0000006c custom_scheduler_tcb
000886b8 g     F .text	0000066c __udivdi3
000996bc g     O .rwdata	00000002 OSEventEn
0009793c g     O .rodata	00000028 __mprec_bigtens
000876f0 g     F .text	00000120 __s2b
00099716 g     O .rwdata	00000002 OSTmrCfgNameSize
0008a31c g     F .text	00000194 __floatunsidf
000868e0 g     F .text	00000060 __mcmp
00084ed4 g     F .text	00000018 __fp_lock_all
00095ae4 g     F .text	00000048 alt_ic_irq_enabled
0008f744 g     F .text	000000e4 OS_FlagInit
00096058 g     F .text	00000098 alt_alarm_stop
000996f8 g     O .rwdata	00000002 OSTaskIdleStkSize
0009b264 g     O .bss	00000004 alt_irq_active
00091524 g     F .text	000000c0 OSSemAccept
0008ff30 g     F .text	000000f0 OSMemPut
0008f9e4 g     F .text	0000021c OSMemCreate
0009b29c g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d0 alt_irq_handler
00098430 g     O .rwdata	00000028 alt_dev_null
0009970c g     O .rwdata	00000002 OSTicksPerSec
00080280 g     F .text	00000044 KEY2_Pressed
00095528 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00096220 g       .text	00000000 OSIntCtxSw
000956b0 g     F .text	0000001c alt_dcache_flush_all
000867ac g     F .text	00000070 __hi0bits
000a5380 g     O .bss	000001b0 periodic_task_tcb
0008a244 g     F .text	000000d8 __fixdfsi
0009b2a0 g     O .bss	00000004 OSTCBFreeList
00099730 g       *ABS*	00000000 __ram_rwdata_end
00091c14 g     F .text	0000017c OSSemPendAbort
00099694 g     O .rwdata	00000008 alt_dev_list
0008b990 g     F .text	00000124 write
00096af0 g     F .text	000000e8 _putc_r
00099710 g     O .rwdata	00000002 OSVersionNbr
00097c1c g       *ABS*	00000000 __ram_rodata_end
0008ad1c g     F .text	000000d8 fstat
00080f7c g     F .text	0000002c fprintf
000996b8 g     O .rwdata	00000004 OSEndiannessTest
000875d0 g     F .text	00000120 __pow5mult
0009b244 g     O .bss	00000004 __nlocale_changed
0008a5f4 g     F .text	00000008 __umodsi3
000996ca g     O .rwdata	00000002 OSFlagGrpSize
000aa9e4 g       *ABS*	00000000 end
00094318 g     F .text	00000138 altera_avalon_jtag_uart_init
0008daac g     F .text	000000c8 OS_TaskStat
000970e4 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
00094f9c g     F .text	00000090 alt_avalon_timer_sc_init
0008a5fc g     F .text	00000080 __clzsi2
00094c50 g     F .text	000002dc altera_avalon_jtag_uart_write
00084df8 g     F .text	00000004 __sfp_lock_acquire
00086488 g     F .text	000000e4 memchr
0008d774 g     F .text	00000054 OS_MemClr
00095150 g     F .text	00000078 alt_up_character_lcd_write
00081354 g     F .text	00001ec4 ___vfprintf_internal_r
000962f0 g     F .text	00000310 OSTaskStkInit
000851c0 g     F .text	00000314 _free_r
0008b440 g     F .text	00000258 alt_printf
0008cdf4 g     F .text	00000194 OS_EventTaskRdy
00096e5c g     F .text	000001b0 __call_exitprocs
0009b2a4 g     O .bss	00000001 OSCPUUsage
0009b248 g     O .bss	00000004 __mlocale_changed
00099688 g     O .rwdata	00000004 __malloc_sbrk_base
000801bc g     F .text	0000003c _start
0009b2d4 g     O .bss	00000004 _alt_tick_rate
00090920 g     F .text	00000320 OSQPend
00093b2c g     F .text	0000014c OSTimeDly
00081210 g     F .text	00000078 rand
000870c8 g     F .text	0000014c __lshift
0009b2d8 g     O .bss	00000004 _alt_nticks
0008b6d8 g     F .text	00000124 read
00094114 g     F .text	00000084 alt_sys_init
000953b4 g     F .text	000000b0 alt_up_character_lcd_shift_display
00096d24 g     F .text	00000134 __register_exitproc
0009b2a5 g     O .bss	00000001 OSTaskCtr
00080cd4 g     F .text	0000009c periodic_task1
00093c78 g     F .text	00000190 OSTimeDlyHMSM
00087214 g     F .text	00000254 __multiply
00095464 g     F .text	00000090 alt_up_character_lcd_erase_pos
00094828 g     F .text	00000074 altera_avalon_jtag_uart_close
00080f44 g     F .text	00000038 __mulsi3
00097c1c g       *ABS*	00000000 __ram_rwdata_start
000970e8 g       *ABS*	00000000 __ram_rodata_start
0009b2dc g     O .bss	00000028 __malloc_current_mallinfo
000996be g     O .rwdata	00000002 OSEventMax
00086dc0 g     F .text	0000017c __d2b
00091d90 g     F .text	00000128 OSSemPost
0008023c g     F .text	00000044 KEY1_Pressed
0008c978 g     F .text	000000e4 OSSchedUnlock
000941d0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00096828 g     F .text	00000104 alt_get_fd
0009b2a8 g     O .bss	00000004 OSMemFreeList
0008cacc g     F .text	000000ac OSStatInit
0008f4ac g     F .text	000000d4 OSFlagQuery
0008aac8 g     F .text	000000c8 __fpcmp_parts_d
000996f4 g     O .rwdata	00000002 OSTaskCreateExtEn
0008822c g     F .text	00000070 _close_r
00096978 g     F .text	00000074 memcmp
0008cdd8 g     F .text	0000001c OS_Dummy
00094280 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000aa9e4 g       *ABS*	00000000 __alt_stack_base
000942c8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00080fdc g     F .text	000000ac _fwrite_r
0008323c g     F .text	0000013c __swsetup_r
000a8cd0 g     O .bss	000001e0 OSQTbl
00089c4c g     F .text	00000258 __divdf3
00084fa4 g     F .text	000000f0 __sfp
00086c24 g     F .text	00000058 __copybits
00098028 g     O .rwdata	00000408 __malloc_av_
00084e04 g     F .text	00000004 __sinit_lock_release
0009b2ac g     O .bss	00000004 OSTCBHighRdy
00089888 g     F .text	000003c4 __muldf3
00087fd0 g     F .text	00000060 __sread
0009b2b0 g     O .bss	00000004 OSQFreeList
00096708 g     F .text	00000120 alt_find_file
000956cc g     F .text	000000b4 alt_dev_llist_insert
0008bc1c g     F .text	00000108 __malloc_lock
00080fa8 g     F .text	00000034 _fprintf_r
0008b8d4 g     F .text	000000bc sbrk
0008bf24 g     F .text	00000144 OSEventNameSet
00084b70 g     F .text	000001fc _fflush_r
00088164 g     F .text	000000c8 _calloc_r
0009b2b4 g     O .bss	00000001 OSRdyGrp
0009b244 g       *ABS*	00000000 __bss_start
000866ec g     F .text	00000098 memset
00080994 g     F .text	00000184 main
0009b270 g     O .bss	00000004 alt_envp
0009b258 g     O .bss	00000004 __malloc_max_total_mem
00094228 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00096d08 g     F .text	0000001c __swbuf
000811f4 g     F .text	0000001c srand
00097acc g     O .rodata	00000100 OSUnMapTbl
000996ee g     O .rwdata	00000002 OSSemEn
00095304 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0008f104 g     F .text	000003a8 OSFlagPost
00087ee4 g     F .text	00000008 __sclose
00080474 g     F .text	000004e4 alt_ucosii_simple_error_handler
00100000 g       *ABS*	00000000 __alt_heap_limit
000883ac g     F .text	00000014 fclose
0008cf88 g     F .text	00000110 OS_EventTaskWait
0008db74 g     F .text	000000c8 OS_TaskStatStkChk
000aa854 g     O .bss	00000190 _atexit0
00092e40 g     F .text	00000170 OSTaskDelReq
000835bc g     F .text	000015b4 _dtoa_r
00085d48 g     F .text	00000740 _malloc_r
000996a0 g     O .rwdata	00000004 alt_errno
0008ca5c g     F .text	00000070 OSStart
0008bbc0 g     F .text	0000005c __env_unlock
00085a38 g     F .text	000000b8 _fwalk
0009332c g     F .text	00000218 OSTaskResume
00090020 g     F .text	000000fc OSMemQuery
00099700 g     O .rwdata	00000002 OSTaskStatEn
000996da g     O .rwdata	00000002 OSMemMax
00090f3c g     F .text	00000188 OSQPostFront
000969ec g     F .text	00000104 putc
0008a52c g     F .text	00000060 __divsi3
0009b2b5 g     O .bss	00000003 OSRdyTbl
000996b4 g     O .rwdata	00000002 OSDebugEn
00097998 g     O .rodata	00000014 __thenan_df
00095110 g     F .text	00000040 alt_up_character_lcd_open_dev
00085094 g     F .text	0000012c _malloc_trim_r
000970e8 g       *ABS*	00000000 __CTOR_END__
000996cc g     O .rwdata	00000002 OSFlagNodeSize
00099714 g     O .rwdata	00000002 OSTmrCfgMax
000950dc g     F .text	00000034 alt_up_character_lcd_init
00088030 g     F .text	000000bc strcmp
00090344 g     F .text	00000214 OSQCreate
00092fb0 g     F .text	000001b8 OSTaskNameGet
000970e8 g       *ABS*	00000000 __flash_rodata_start
000910c4 g     F .text	00000234 OSQPostOpt
0008cb78 g     F .text	00000240 OSTimeTick
000996fc g     O .rwdata	00000002 OSTaskMax
000970e8 g       *ABS*	00000000 __DTOR_LIST__
000915e4 g     F .text	00000114 OSSemCreate
00099720 g     O .rwdata	00000002 OSTmrWheelSize
00089f2c g     F .text	00000088 __nedf2
000996f6 g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
00091eb8 g     F .text	00000130 OSSemQuery
00090558 g     F .text	00000300 OSQDel
00090c40 g     F .text	0000017c OSQPendAbort
000940e0 g     F .text	00000034 alt_irq_init
0008b85c g     F .text	00000078 alt_release_fd
000803dc g     F .text	00000054 init_button_irq
000954f4 g     F .text	00000034 alt_up_character_lcd_cursor_off
000979ac g     O .rodata	00000100 __clz_tab
0009b24c g     O .bss	00000004 _PathLocale
0009692c g     F .text	00000014 atexit
000880ec g     F .text	00000078 _write_r
0008c8ec g     F .text	0000008c OSSchedLock
00085b98 g     F .text	0000001c setlocale
0008e3dc g     F .text	0000013c OSFlagCreate
00080b9c g     F .text	0000008c init_create_tasks
00099674 g     O .rwdata	00000004 _impure_ptr
0009b268 g     O .bss	00000004 alt_argc
00095844 g     F .text	00000064 _do_dtors
000996c6 g     O .rwdata	00000002 OSEventMultiEn
0008e518 g     F .text	000002a8 OSFlagDel
0009b2b8 g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
00086940 g     F .text	00000080 __ulp
00087e04 g     F .text	00000040 __isinfd
0008ea58 g     F .text	00000644 OSFlagPend
00099712 g     O .rwdata	00000002 OSTmrEn
00084ebc g     F .text	00000018 __fp_unlock_all
0009968c g     O .rwdata	00000008 alt_fs_list
00080430 g     F .text	00000044 alt_ucosii_check_return_code
0008d978 g     F .text	00000080 OS_StrCopy
000996dc g     O .rwdata	00000002 OSMemNameSize
000966b0 g     F .text	0000001c OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
00099708 g     O .rwdata	00000002 OSTCBPrioTblMax
00085b04 g     F .text	00000010 localeconv
00099704 g     O .rwdata	00000002 OSTaskStatStkChkEn
00095958 g     F .text	00000050 alt_ic_isr_register
000996d8 g     O .rwdata	00000002 OSMemEn
00081088 g     F .text	00000040 fwrite
000996e2 g     O .rwdata	00000002 OSMutexEn
00099730 g       *ABS*	00000000 _edata
000801f8 g     F .text	00000044 KEY0_Pressed
000aa9e4 g       *ABS*	00000000 _end
0009b2bc g     O .bss	00000001 OSIntNesting
000801bc g       *ABS*	00000000 __ram_exceptions_end
0009489c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00093e08 g     F .text	00000210 OSTimeDlyResume
0008e904 g     F .text	00000154 OSFlagNameSet
00093544 g     F .text	000001fc OSTaskStkChk
00095a44 g     F .text	000000a0 alt_ic_irq_disable
000996de g     O .rwdata	00000002 OSMemSize
00087f54 g     F .text	0000007c __swrite
00099684 g     O .rwdata	00000004 __malloc_trim_threshold
00096200 g     F .text	00000020 altera_nios2_qsys_irq_init
0009b2c0 g     O .bss	00000004 OSTCBCur
00096940 g     F .text	00000038 exit
000996e0 g     O .rwdata	00000002 OSMemTblSize
00085970 g     F .text	000000c8 _fwalk_reent
00086f3c g     F .text	0000018c __mdiff
0008a58c g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084dfc g     F .text	00000004 __sfp_lock_release
0008c71c g     F .text	00000054 OSInit
0009396c g     F .text	00000144 OSTaskQuery
000951c8 g     F .text	00000078 alt_up_character_lcd_string
00091478 g     F .text	000000ac OS_QInit
0008d9f8 g     F .text	00000058 OS_StrLen
0008fe10 g     F .text	00000120 OSMemNameSet
00099670 g     O .rwdata	00000004 performance_name
000996fa g     O .rwdata	00000002 OSTaskProfileEn
0009b2c4 g     O .bss	00000004 OSTime
000a5530 g     O .bss	00002000 initialize_task_stk
000a8eb0 g     O .bss	00000800 OSTaskIdleStk
0009704c g     F .text	0000002c _exit
00087e44 g     F .text	00000030 __isnand
0009555c g     F .text	00000154 alt_alarm_start
0008e7c0 g     F .text	00000144 OSFlagNameGet
00094018 g     F .text	00000064 OSTimeGet
00088594 g     F .text	00000124 __muldi3
00085bb4 g     F .text	00000194 __smakebuf_r
00081288 g     F .text	00000074 strlen
00096640 g     F .text	0000001c OSTaskSwHook
00095e6c g     F .text	0000018c open
000a96b0 g     O .bss	00000b40 OSEventTbl
0008a03c g     F .text	00000088 __gedf2
0008b698 g     F .text	00000040 alt_putchar
000aa1f0 g     O .bss	00000510 OSTCBTbl
00091fe8 g     F .text	00000104 OSSemSet
0009593c g     F .text	0000001c alt_icache_flush_all
0009528c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
000996a4 g     O .rwdata	00000004 alt_priority_mask
000916f8 g     F .text	000002a0 OSSemDel
0009b2c8 g     O .bss	00000004 OSFlagFreeList
000959a8 g     F .text	0000009c alt_ic_irq_enable
000996c0 g     O .rwdata	00000002 OSEventNameSize
00083218 g     F .text	00000024 __vfprintf_internal
0009b2cc g     O .bss	00000001 OSStatRdy
000aa700 g     O .bss	00000054 OSTCBPrioTbl
0008bb14 g     F .text	000000ac __env_lock
00099706 g     O .rwdata	00000002 OSTaskSwHookEn
00089794 g     F .text	00000080 __subdf3
0008681c g     F .text	000000c4 __lo0bits
00099728 g     O .rwdata	00000008 alt_alarm_list
000996ce g     O .rwdata	00000002 OSFlagWidth
000957e0 g     F .text	00000064 _do_ctors
00080308 g     F .text	000000d4 handle_button_interrupts
0008ab90 g     F .text	00000100 close
0009b278 g     O .bss	00000004 alt_envsem
0009b2d0 g     O .bss	00000004 OSIdleCtrRun
0008cdb8 g     F .text	00000020 OSVersion
00099718 g     O .rwdata	00000002 OSTmrCfgWheelSize
0008b138 g     F .text	00000080 alt_load
00093ab0 g     F .text	0000007c OS_TaskStkClr
0008a67c g     F .text	00000314 __pack_d
000996f2 g     O .rwdata	00000002 OSTaskCreateEn
0008d3a8 g     F .text	00000068 OS_EventWaitListInit
000966cc g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00084e00 g     F .text	00000004 __sinit_lock_acquire
000874a4 g     F .text	0000012c __multadd
00080c28 g     F .text	000000ac periodic_task0
00093740 g     F .text	0000022c OSTaskSuspend
00086784 g     F .text	00000028 _Bfree
0008da50 g     F .text	0000005c OS_TaskIdle
0009971e g     O .rwdata	00000002 OSTmrTblSize
000912f8 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406f14 	ori	at,at,444
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	008c7700 	call	8c770 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0ffff17 	ldw	r3,-4(fp)
   80120:	e0bffe17 	ldw	r2,-8(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	1005003a 	cmpeq	r2,r2,zero
   8012c:	1000161e 	bne	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80130:	e0bffd17 	ldw	r2,-12(fp)
   80134:	00c002f4 	movhi	r3,11
   80138:	18e9d504 	addi	r3,r3,-22700
   8013c:	100490fa 	slli	r2,r2,3
   80140:	10c5883a 	add	r2,r2,r3
   80144:	11400017 	ldw	r5,0(r2)
   80148:	e0bffd17 	ldw	r2,-12(fp)
   8014c:	00c002f4 	movhi	r3,11
   80150:	18e9d504 	addi	r3,r3,-22700
   80154:	100490fa 	slli	r2,r2,3
   80158:	10c5883a 	add	r2,r2,r3
   8015c:	10800104 	addi	r2,r2,4
   80160:	11000017 	ldw	r4,0(r2)
   80164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80168:	0005313a 	rdctl	r2,ipending
   8016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80178:	e0bfff17 	ldw	r2,-4(fp)
   8017c:	1004c03a 	cmpne	r2,r2,zero
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffe17 	ldw	r2,-8(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	008c7ec0 	call	8c7ec <OSIntExit>
}
   801a8:	e037883a 	mov	sp,fp
   801ac:	dfc00117 	ldw	ra,4(sp)
   801b0:	df000017 	ldw	fp,0(sp)
   801b4:	dec00204 	addi	sp,sp,8
   801b8:	f800283a 	ret

Disassembly of section .text:

000801bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801bc:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801c4:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   801c8:	d6859c14 	ori	gp,gp,5744
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801cc:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801d0:	10ac9114 	ori	r2,r2,45636

    movhi r3, %hi(__bss_end)
   801d4:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   801d8:	18ea7914 	ori	r3,r3,43492

    beq r2, r3, 1f
   801dc:	10c00326 	beq	r2,r3,801ec <_start+0x30>

0:
    stw zero, (r2)
   801e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e8:	10fffd36 	bltu	r2,r3,801e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801ec:	008b1380 	call	8b138 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f0:	008b3780 	call	8b378 <alt_main>

000801f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f4:	003fff06 	br	801f4 <alt_after_alt_main>

000801f8 <KEY0_Pressed>:

// Semaphore from uCOS
extern OS_EVENT *PBSemaphore[];

// Function for post semaphore when PB0 is pressed
void KEY0_Pressed() {
   801f8:	defffd04 	addi	sp,sp,-12
   801fc:	dfc00215 	stw	ra,8(sp)
   80200:	df000115 	stw	fp,4(sp)
   80204:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80208:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[0]);
   8020c:	008002b4 	movhi	r2,10
   80210:	1094c104 	addi	r2,r2,21252
   80214:	11000017 	ldw	r4,0(r2)
   80218:	0091d900 	call	91d90 <OSSemPost>
   8021c:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   80220:	e13fff03 	ldbu	r4,-4(fp)
   80224:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   80228:	e037883a 	mov	sp,fp
   8022c:	dfc00117 	ldw	ra,4(sp)
   80230:	df000017 	ldw	fp,0(sp)
   80234:	dec00204 	addi	sp,sp,8
   80238:	f800283a 	ret

0008023c <KEY1_Pressed>:

// Function for post semaphore when PB1 is pressed
void KEY1_Pressed() {
   8023c:	defffd04 	addi	sp,sp,-12
   80240:	dfc00215 	stw	ra,8(sp)
   80244:	df000115 	stw	fp,4(sp)
   80248:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   8024c:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[1]);
   80250:	008002b4 	movhi	r2,10
   80254:	1094c104 	addi	r2,r2,21252
   80258:	11000117 	ldw	r4,4(r2)
   8025c:	0091d900 	call	91d90 <OSSemPost>
   80260:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   80264:	e13fff03 	ldbu	r4,-4(fp)
   80268:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   8026c:	e037883a 	mov	sp,fp
   80270:	dfc00117 	ldw	ra,4(sp)
   80274:	df000017 	ldw	fp,0(sp)
   80278:	dec00204 	addi	sp,sp,8
   8027c:	f800283a 	ret

00080280 <KEY2_Pressed>:

// Function for post semaphore when PB2 is pressed
void KEY2_Pressed() {
   80280:	defffd04 	addi	sp,sp,-12
   80284:	dfc00215 	stw	ra,8(sp)
   80288:	df000115 	stw	fp,4(sp)
   8028c:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80290:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[2]);
   80294:	008002b4 	movhi	r2,10
   80298:	1094c104 	addi	r2,r2,21252
   8029c:	11000217 	ldw	r4,8(r2)
   802a0:	0091d900 	call	91d90 <OSSemPost>
   802a4:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   802a8:	e13fff03 	ldbu	r4,-4(fp)
   802ac:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   802b0:	e037883a 	mov	sp,fp
   802b4:	dfc00117 	ldw	ra,4(sp)
   802b8:	df000017 	ldw	fp,0(sp)
   802bc:	dec00204 	addi	sp,sp,8
   802c0:	f800283a 	ret

000802c4 <KEY3_Pressed>:

// Function for post semaphore when PB3 is pressed
void KEY3_Pressed() {
   802c4:	defffd04 	addi	sp,sp,-12
   802c8:	dfc00215 	stw	ra,8(sp)
   802cc:	df000115 	stw	fp,4(sp)
   802d0:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   802d4:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[3]);
   802d8:	008002b4 	movhi	r2,10
   802dc:	1094c104 	addi	r2,r2,21252
   802e0:	11000317 	ldw	r4,12(r2)
   802e4:	0091d900 	call	91d90 <OSSemPost>
   802e8:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   802ec:	e13fff03 	ldbu	r4,-4(fp)
   802f0:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   802f4:	e037883a 	mov	sp,fp
   802f8:	dfc00117 	ldw	ra,4(sp)
   802fc:	df000017 	ldw	fp,0(sp)
   80300:	dec00204 	addi	sp,sp,8
   80304:	f800283a 	ret

00080308 <handle_button_interrupts>:
// ISR when any PB is pressed
void handle_button_interrupts()
{
   80308:	defffd04 	addi	sp,sp,-12
   8030c:	dfc00215 	stw	ra,8(sp)
   80310:	df000115 	stw	fp,4(sp)
   80314:	df000104 	addi	fp,sp,4
	OSIntEnter();
   80318:	008c7700 	call	8c770 <OSIntEnter>

    outport(LED_GREEN_O_BASE,get_pio_edge_cap(PUSH_BUTTON_I_BASE)*get_pio_edge_cap(PUSH_BUTTON_I_BASE));
   8031c:	00800434 	movhi	r2,16
   80320:	10841f04 	addi	r2,r2,4220
   80324:	11000037 	ldwio	r4,0(r2)
   80328:	00800434 	movhi	r2,16
   8032c:	10841f04 	addi	r2,r2,4220
   80330:	11400037 	ldwio	r5,0(r2)
   80334:	0080f440 	call	80f44 <__mulsi3>
   80338:	1007883a 	mov	r3,r2
   8033c:	00800434 	movhi	r2,16
   80340:	10842404 	addi	r2,r2,4240
   80344:	10c00035 	stwio	r3,0(r2)
    switch(get_pio_edge_cap(PUSH_BUTTON_I_BASE)) {
   80348:	00800434 	movhi	r2,16
   8034c:	10841f04 	addi	r2,r2,4220
   80350:	10800037 	ldwio	r2,0(r2)
   80354:	e0bfff15 	stw	r2,-4(fp)
   80358:	e0ffff17 	ldw	r3,-4(fp)
   8035c:	188000a0 	cmpeqi	r2,r3,2
   80360:	1000101e 	bne	r2,zero,803a4 <handle_button_interrupts+0x9c>
   80364:	e0ffff17 	ldw	r3,-4(fp)
   80368:	188000c8 	cmpgei	r2,r3,3
   8036c:	1000041e 	bne	r2,zero,80380 <handle_button_interrupts+0x78>
   80370:	e0ffff17 	ldw	r3,-4(fp)
   80374:	18800060 	cmpeqi	r2,r3,1
   80378:	1000081e 	bne	r2,zero,8039c <handle_button_interrupts+0x94>
   8037c:	00000e06 	br	803b8 <handle_button_interrupts+0xb0>
   80380:	e0ffff17 	ldw	r3,-4(fp)
   80384:	18800120 	cmpeqi	r2,r3,4
   80388:	1000081e 	bne	r2,zero,803ac <handle_button_interrupts+0xa4>
   8038c:	e0ffff17 	ldw	r3,-4(fp)
   80390:	18800220 	cmpeqi	r2,r3,8
   80394:	1000071e 	bne	r2,zero,803b4 <handle_button_interrupts+0xac>
   80398:	00000706 	br	803b8 <handle_button_interrupts+0xb0>
    case 1: KEY0_Pressed(); break;
   8039c:	00801f80 	call	801f8 <KEY0_Pressed>
   803a0:	00000506 	br	803b8 <handle_button_interrupts+0xb0>
    case 2: KEY1_Pressed(); break;
   803a4:	008023c0 	call	8023c <KEY1_Pressed>
   803a8:	00000306 	br	803b8 <handle_button_interrupts+0xb0>
    case 4: KEY2_Pressed(); break;
   803ac:	00802800 	call	80280 <KEY2_Pressed>
   803b0:	00000106 	br	803b8 <handle_button_interrupts+0xb0>
    case 8: KEY3_Pressed(); break;
   803b4:	00802c40 	call	802c4 <KEY3_Pressed>
    }
    set_pio_edge_cap(PUSH_BUTTON_I_BASE,0x0);
   803b8:	00800434 	movhi	r2,16
   803bc:	10841f04 	addi	r2,r2,4220
   803c0:	10000035 	stwio	zero,0(r2)

	OSIntExit();
   803c4:	008c7ec0 	call	8c7ec <OSIntExit>
}
   803c8:	e037883a 	mov	sp,fp
   803cc:	dfc00117 	ldw	ra,4(sp)
   803d0:	df000017 	ldw	fp,0(sp)
   803d4:	dec00204 	addi	sp,sp,8
   803d8:	f800283a 	ret

000803dc <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq() {
   803dc:	defffe04 	addi	sp,sp,-8
   803e0:	dfc00115 	stw	ra,4(sp)
   803e4:	df000015 	stw	fp,0(sp)
   803e8:	d839883a 	mov	fp,sp
  // Enable all 4 button interrupts
  set_pio_irq_mask(PUSH_BUTTON_I_BASE, BUTTON_INT_MASK);
   803ec:	00800434 	movhi	r2,16
   803f0:	10841e04 	addi	r2,r2,4216
   803f4:	00c003c4 	movi	r3,15
   803f8:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  set_pio_edge_cap(PUSH_BUTTON_I_BASE, 0x0);
   803fc:	00800434 	movhi	r2,16
   80400:	10841f04 	addi	r2,r2,4220
   80404:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register( PUSH_BUTTON_I_IRQ, NULL, (void*)handle_button_interrupts );
   80408:	01000084 	movi	r4,2
   8040c:	000b883a 	mov	r5,zero
   80410:	01800234 	movhi	r6,8
   80414:	3180c204 	addi	r6,r6,776
   80418:	008ae540 	call	8ae54 <alt_irq_register>
}
   8041c:	e037883a 	mov	sp,fp
   80420:	dfc00117 	ldw	ra,4(sp)
   80424:	df000017 	ldw	fp,0(sp)
   80428:	dec00204 	addi	sp,sp,8
   8042c:	f800283a 	ret

00080430 <alt_ucosii_check_return_code>:
 */
 

 
void alt_ucosii_check_return_code(INT8U return_code)
{
   80430:	defffd04 	addi	sp,sp,-12
   80434:	dfc00215 	stw	ra,8(sp)
   80438:	df000115 	stw	fp,4(sp)
   8043c:	df000104 	addi	fp,sp,4
   80440:	e13fff05 	stb	r4,-4(fp)
  if(return_code != OS_NO_ERR)
   80444:	e0bfff03 	ldbu	r2,-4(fp)
   80448:	1005003a 	cmpeq	r2,r2,zero
   8044c:	1000041e 	bne	r2,zero,80460 <alt_ucosii_check_return_code+0x30>
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
   80450:	008c8ec0 	call	8c8ec <OSSchedLock>
    alt_ucosii_simple_error_handler(return_code);
   80454:	e13fff03 	ldbu	r4,-4(fp)
   80458:	00804740 	call	80474 <alt_ucosii_simple_error_handler>
    OSSchedUnlock(); /* Enable Task Switching */
   8045c:	008c9780 	call	8c978 <OSSchedUnlock>
  }
}
   80460:	e037883a 	mov	sp,fp
   80464:	dfc00117 	ldw	ra,4(sp)
   80468:	df000017 	ldw	fp,0(sp)
   8046c:	dec00204 	addi	sp,sp,8
   80470:	f800283a 	ret

00080474 <alt_ucosii_simple_error_handler>:
 * controls the flow that is taken from different errors occurring at different 
 * locations in the application code.
 */

void alt_ucosii_simple_error_handler(INT8U return_code)
{
   80474:	defffc04 	addi	sp,sp,-16
   80478:	dfc00315 	stw	ra,12(sp)
   8047c:	df000215 	stw	fp,8(sp)
   80480:	df000204 	addi	fp,sp,8
   80484:	e13ffe05 	stb	r4,-8(fp)
  printf("[Program Error]: See STDERR\n");
   80488:	01000274 	movhi	r4,9
   8048c:	211c3a04 	addi	r4,r4,28904
   80490:	00811e00 	call	811e0 <puts>
  switch (return_code) {
   80494:	e0bffe03 	ldbu	r2,-8(fp)
   80498:	e0bfff15 	stw	r2,-4(fp)
   8049c:	e0ffff17 	ldw	r3,-4(fp)
   804a0:	18801968 	cmpgeui	r2,r3,101
   804a4:	10011e1e 	bne	r2,zero,80920 <alt_ucosii_simple_error_handler+0x4ac>
   804a8:	e13fff17 	ldw	r4,-4(fp)
   804ac:	e13fff17 	ldw	r4,-4(fp)
   804b0:	2105883a 	add	r2,r4,r4
   804b4:	1087883a 	add	r3,r2,r2
   804b8:	00800234 	movhi	r2,8
   804bc:	10813304 	addi	r2,r2,1228
   804c0:	1885883a 	add	r2,r3,r2
   804c4:	10800017 	ldw	r2,0(r2)
   804c8:	1000683a 	jmp	r2
   804cc:	00080920 	cmpeqi	zero,zero,8228
   804d0:	00080740 	call	8074 <OSCtxSw_SWITCH_PC+0x8034>
   804d4:	000807e0 	cmpeqi	zero,zero,8223
   804d8:	00080790 	cmplti	zero,zero,8222
   804dc:	00080768 	cmpgeui	zero,zero,8221
   804e0:	00080920 	cmpeqi	zero,zero,8228
   804e4:	00080920 	cmpeqi	zero,zero,8228
   804e8:	00080920 	cmpeqi	zero,zero,8228
   804ec:	00080920 	cmpeqi	zero,zero,8228
   804f0:	00080920 	cmpeqi	zero,zero,8228
   804f4:	000807b8 	rdprs	zero,zero,8222
   804f8:	00080920 	cmpeqi	zero,zero,8228
   804fc:	00080920 	cmpeqi	zero,zero,8228
   80500:	00080920 	cmpeqi	zero,zero,8228
   80504:	00080920 	cmpeqi	zero,zero,8228
   80508:	00080920 	cmpeqi	zero,zero,8228
   8050c:	00080920 	cmpeqi	zero,zero,8228
   80510:	00080920 	cmpeqi	zero,zero,8228
   80514:	00080920 	cmpeqi	zero,zero,8228
   80518:	00080920 	cmpeqi	zero,zero,8228
   8051c:	00080718 	cmpnei	zero,zero,8220
   80520:	00080920 	cmpeqi	zero,zero,8228
   80524:	00080920 	cmpeqi	zero,zero,8228
   80528:	00080920 	cmpeqi	zero,zero,8228
   8052c:	00080920 	cmpeqi	zero,zero,8228
   80530:	00080920 	cmpeqi	zero,zero,8228
   80534:	00080920 	cmpeqi	zero,zero,8228
   80538:	00080920 	cmpeqi	zero,zero,8228
   8053c:	00080920 	cmpeqi	zero,zero,8228
   80540:	00080920 	cmpeqi	zero,zero,8228
   80544:	00080880 	call	8088 <OSCtxSw_SWITCH_PC+0x8048>
   80548:	00080920 	cmpeqi	zero,zero,8228
   8054c:	00080920 	cmpeqi	zero,zero,8228
   80550:	00080920 	cmpeqi	zero,zero,8228
   80554:	00080920 	cmpeqi	zero,zero,8228
   80558:	00080920 	cmpeqi	zero,zero,8228
   8055c:	00080920 	cmpeqi	zero,zero,8228
   80560:	00080920 	cmpeqi	zero,zero,8228
   80564:	00080920 	cmpeqi	zero,zero,8228
   80568:	00080920 	cmpeqi	zero,zero,8228
   8056c:	00080660 	cmpeqi	zero,zero,8217
   80570:	00080920 	cmpeqi	zero,zero,8228
   80574:	00080688 	cmpgei	zero,zero,8218
   80578:	00080920 	cmpeqi	zero,zero,8228
   8057c:	00080920 	cmpeqi	zero,zero,8228
   80580:	00080920 	cmpeqi	zero,zero,8228
   80584:	00080920 	cmpeqi	zero,zero,8228
   80588:	00080920 	cmpeqi	zero,zero,8228
   8058c:	00080920 	cmpeqi	zero,zero,8228
   80590:	00080920 	cmpeqi	zero,zero,8228
   80594:	00080920 	cmpeqi	zero,zero,8228
   80598:	00080920 	cmpeqi	zero,zero,8228
   8059c:	00080920 	cmpeqi	zero,zero,8228
   805a0:	00080920 	cmpeqi	zero,zero,8228
   805a4:	00080920 	cmpeqi	zero,zero,8228
   805a8:	00080920 	cmpeqi	zero,zero,8228
   805ac:	00080920 	cmpeqi	zero,zero,8228
   805b0:	00080920 	cmpeqi	zero,zero,8228
   805b4:	00080920 	cmpeqi	zero,zero,8228
   805b8:	00080920 	cmpeqi	zero,zero,8228
   805bc:	00080920 	cmpeqi	zero,zero,8228
   805c0:	00080830 	cmpltui	zero,zero,8224
   805c4:	00080808 	cmpgei	zero,zero,8224
   805c8:	00080920 	cmpeqi	zero,zero,8228
   805cc:	00080858 	cmpnei	zero,zero,8225
   805d0:	00080920 	cmpeqi	zero,zero,8228
   805d4:	000806d0 	cmplti	zero,zero,8219
   805d8:	00080920 	cmpeqi	zero,zero,8228
   805dc:	00080920 	cmpeqi	zero,zero,8228
   805e0:	00080920 	cmpeqi	zero,zero,8228
   805e4:	00080920 	cmpeqi	zero,zero,8228
   805e8:	00080920 	cmpeqi	zero,zero,8228
   805ec:	00080920 	cmpeqi	zero,zero,8228
   805f0:	00080920 	cmpeqi	zero,zero,8228
   805f4:	00080920 	cmpeqi	zero,zero,8228
   805f8:	00080920 	cmpeqi	zero,zero,8228
   805fc:	00080920 	cmpeqi	zero,zero,8228
   80600:	00080920 	cmpeqi	zero,zero,8228
   80604:	00080920 	cmpeqi	zero,zero,8228
   80608:	00080920 	cmpeqi	zero,zero,8228
   8060c:	00080920 	cmpeqi	zero,zero,8228
   80610:	00080920 	cmpeqi	zero,zero,8228
   80614:	00080920 	cmpeqi	zero,zero,8228
   80618:	00080920 	cmpeqi	zero,zero,8228
   8061c:	00080920 	cmpeqi	zero,zero,8228
   80620:	00080920 	cmpeqi	zero,zero,8228
   80624:	00080920 	cmpeqi	zero,zero,8228
   80628:	00080920 	cmpeqi	zero,zero,8228
   8062c:	00080920 	cmpeqi	zero,zero,8228
   80630:	00080920 	cmpeqi	zero,zero,8228
   80634:	00080920 	cmpeqi	zero,zero,8228
   80638:	00080920 	cmpeqi	zero,zero,8228
   8063c:	00080920 	cmpeqi	zero,zero,8228
   80640:	000808d0 	cmplti	zero,zero,8227
   80644:	00080920 	cmpeqi	zero,zero,8228
   80648:	00080920 	cmpeqi	zero,zero,8228
   8064c:	000808f8 	rdprs	zero,zero,8227
   80650:	00080920 	cmpeqi	zero,zero,8228
   80654:	00080920 	cmpeqi	zero,zero,8228
   80658:	00080920 	cmpeqi	zero,zero,8228
   8065c:	000808a8 	cmpgeui	zero,zero,8226
    case OS_PRIO_EXIST:
      fprintf(stderr, "Attempted to assign a task priority that is aready in use.\n");
   80660:	008002b4 	movhi	r2,10
   80664:	10a59d04 	addi	r2,r2,-27020
   80668:	10800017 	ldw	r2,0(r2)
   8066c:	11c00317 	ldw	r7,12(r2)
   80670:	01000274 	movhi	r4,9
   80674:	211c4104 	addi	r4,r4,28932
   80678:	01400044 	movi	r5,1
   8067c:	01800ec4 	movi	r6,59
   80680:	00810880 	call	81088 <fwrite>
      break;
   80684:	0000af06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_PRIO_INVALID:
      fprintf(stderr, "Specified a task priority higher than the allowed maximum.\n");
   80688:	008002b4 	movhi	r2,10
   8068c:	10a59d04 	addi	r2,r2,-27020
   80690:	10800017 	ldw	r2,0(r2)
   80694:	11c00317 	ldw	r7,12(r2)
   80698:	01000274 	movhi	r4,9
   8069c:	211c5004 	addi	r4,r4,28992
   806a0:	01400044 	movi	r5,1
   806a4:	01800ec4 	movi	r6,59
   806a8:	00810880 	call	81088 <fwrite>
      fprintf(stderr, "Task can not be assigned a priority higher than %d\n",OS_LOWEST_PRIO);
   806ac:	008002b4 	movhi	r2,10
   806b0:	10a59d04 	addi	r2,r2,-27020
   806b4:	10800017 	ldw	r2,0(r2)
   806b8:	11000317 	ldw	r4,12(r2)
   806bc:	01400274 	movhi	r5,9
   806c0:	295c5f04 	addi	r5,r5,29052
   806c4:	01800504 	movi	r6,20
   806c8:	0080f7c0 	call	80f7c <fprintf>
      break;
   806cc:	00009d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_NO_MORE_TCB:
      fprintf(stderr, "Task Control Blocks have been exhausted\n");
   806d0:	008002b4 	movhi	r2,10
   806d4:	10a59d04 	addi	r2,r2,-27020
   806d8:	10800017 	ldw	r2,0(r2)
   806dc:	11c00317 	ldw	r7,12(r2)
   806e0:	01000274 	movhi	r4,9
   806e4:	211c6c04 	addi	r4,r4,29104
   806e8:	01400044 	movi	r5,1
   806ec:	01800a04 	movi	r6,40
   806f0:	00810880 	call	81088 <fwrite>
      fprintf(stderr, "The current max number of task is %d\n",OS_MAX_TASKS);
   806f4:	008002b4 	movhi	r2,10
   806f8:	10a59d04 	addi	r2,r2,-27020
   806fc:	10800017 	ldw	r2,0(r2)
   80700:	11000317 	ldw	r4,12(r2)
   80704:	01400274 	movhi	r5,9
   80708:	295c7704 	addi	r5,r5,29148
   8070c:	01800284 	movi	r6,10
   80710:	0080f7c0 	call	80f7c <fprintf>
      break;
   80714:	00008b06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MBOX_FULL:
      fprintf(stderr, "Attempted a Post to a Mailbox that already contains a message\n");
   80718:	008002b4 	movhi	r2,10
   8071c:	10a59d04 	addi	r2,r2,-27020
   80720:	10800017 	ldw	r2,0(r2)
   80724:	11c00317 	ldw	r7,12(r2)
   80728:	01000274 	movhi	r4,9
   8072c:	211c8104 	addi	r4,r4,29188
   80730:	01400044 	movi	r5,1
   80734:	01800f84 	movi	r6,62
   80738:	00810880 	call	81088 <fwrite>
      break;
   8073c:	00008106 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_EVENT_TYPE:
      fprintf(stderr, "Attempted to access a resource that doesn't match the required data type\n");
   80740:	008002b4 	movhi	r2,10
   80744:	10a59d04 	addi	r2,r2,-27020
   80748:	10800017 	ldw	r2,0(r2)
   8074c:	11c00317 	ldw	r7,12(r2)
   80750:	01000274 	movhi	r4,9
   80754:	211c9104 	addi	r4,r4,29252
   80758:	01400044 	movi	r5,1
   8075c:	01801244 	movi	r6,73
   80760:	00810880 	call	81088 <fwrite>
      break;
   80764:	00007706 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEVENT_NULL:
      fprintf(stderr, "Attempting access a resource that is pointing to NULL\n");
   80768:	008002b4 	movhi	r2,10
   8076c:	10a59d04 	addi	r2,r2,-27020
   80770:	10800017 	ldw	r2,0(r2)
   80774:	11c00317 	ldw	r7,12(r2)
   80778:	01000274 	movhi	r4,9
   8077c:	211ca404 	addi	r4,r4,29328
   80780:	01400044 	movi	r5,1
   80784:	01800d84 	movi	r6,54
   80788:	00810880 	call	81088 <fwrite>
      break;
   8078c:	00006d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_POST_NULL_PTR:
      fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
   80790:	008002b4 	movhi	r2,10
   80794:	10a59d04 	addi	r2,r2,-27020
   80798:	10800017 	ldw	r2,0(r2)
   8079c:	11c00317 	ldw	r7,12(r2)
   807a0:	01000274 	movhi	r4,9
   807a4:	211cb204 	addi	r4,r4,29384
   807a8:	01400044 	movi	r5,1
   807ac:	01800a44 	movi	r6,41
   807b0:	00810880 	call	81088 <fwrite>
      break;
   807b4:	00006306 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TIMEOUT:
      fprintf(stderr, "Resource not received in specified time\n");
   807b8:	008002b4 	movhi	r2,10
   807bc:	10a59d04 	addi	r2,r2,-27020
   807c0:	10800017 	ldw	r2,0(r2)
   807c4:	11c00317 	ldw	r7,12(r2)
   807c8:	01000274 	movhi	r4,9
   807cc:	211cbd04 	addi	r4,r4,29428
   807d0:	01400044 	movi	r5,1
   807d4:	01800a04 	movi	r6,40
   807d8:	00810880 	call	81088 <fwrite>
      break;
   807dc:	00005906 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEND_ISR:
      fprintf(stderr, "Attempting to pending for a resource in an ISR\n");
   807e0:	008002b4 	movhi	r2,10
   807e4:	10a59d04 	addi	r2,r2,-27020
   807e8:	10800017 	ldw	r2,0(r2)
   807ec:	11c00317 	ldw	r7,12(r2)
   807f0:	01000274 	movhi	r4,9
   807f4:	211cc804 	addi	r4,r4,29472
   807f8:	01400044 	movi	r5,1
   807fc:	01800bc4 	movi	r6,47
   80800:	00810880 	call	81088 <fwrite>
      break;
   80804:	00004f06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_IDLE:
      fprintf(stderr, "Attempted to delete the IDLE task\n");
   80808:	008002b4 	movhi	r2,10
   8080c:	10a59d04 	addi	r2,r2,-27020
   80810:	10800017 	ldw	r2,0(r2)
   80814:	11c00317 	ldw	r7,12(r2)
   80818:	01000274 	movhi	r4,9
   8081c:	211cd404 	addi	r4,r4,29520
   80820:	01400044 	movi	r5,1
   80824:	01800884 	movi	r6,34
   80828:	00810880 	call	81088 <fwrite>
      break;
   8082c:	00004506 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ERR:
      fprintf(stderr, "Attempted to delete a task that does not exist\n");
   80830:	008002b4 	movhi	r2,10
   80834:	10a59d04 	addi	r2,r2,-27020
   80838:	10800017 	ldw	r2,0(r2)
   8083c:	11c00317 	ldw	r7,12(r2)
   80840:	01000274 	movhi	r4,9
   80844:	211cdd04 	addi	r4,r4,29556
   80848:	01400044 	movi	r5,1
   8084c:	01800bc4 	movi	r6,47
   80850:	00810880 	call	81088 <fwrite>
      break;
   80854:	00003b06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ISR:
      fprintf(stderr, "Attempted to delete a task from an ISR\n");
   80858:	008002b4 	movhi	r2,10
   8085c:	10a59d04 	addi	r2,r2,-27020
   80860:	10800017 	ldw	r2,0(r2)
   80864:	11c00317 	ldw	r7,12(r2)
   80868:	01000274 	movhi	r4,9
   8086c:	211ce904 	addi	r4,r4,29604
   80870:	01400044 	movi	r5,1
   80874:	018009c4 	movi	r6,39
   80878:	00810880 	call	81088 <fwrite>
      break;
   8087c:	00003106 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_Q_FULL:
      fprintf(stderr, "Attempted to post to a full message queue\n");
   80880:	008002b4 	movhi	r2,10
   80884:	10a59d04 	addi	r2,r2,-27020
   80888:	10800017 	ldw	r2,0(r2)
   8088c:	11c00317 	ldw	r7,12(r2)
   80890:	01000274 	movhi	r4,9
   80894:	211cf304 	addi	r4,r4,29644
   80898:	01400044 	movi	r5,1
   8089c:	01800a84 	movi	r6,42
   808a0:	00810880 	call	81088 <fwrite>
      break;
   808a4:	00002706 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_NOT_MUTEX_OWNER:
      fprintf(stderr, "Attempted to post a mutex that is not owned by the task\n");
   808a8:	008002b4 	movhi	r2,10
   808ac:	10a59d04 	addi	r2,r2,-27020
   808b0:	10800017 	ldw	r2,0(r2)
   808b4:	11c00317 	ldw	r7,12(r2)
   808b8:	01000274 	movhi	r4,9
   808bc:	211cfe04 	addi	r4,r4,29688
   808c0:	01400044 	movi	r5,1
   808c4:	01800e04 	movi	r6,56
   808c8:	00810880 	call	81088 <fwrite>
      break;
   808cc:	00001d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_NO_FREE_BLKS:
      fprintf(stderr, "the memory partition doesnt contain any more memory blocks to allocate\n");
   808d0:	008002b4 	movhi	r2,10
   808d4:	10a59d04 	addi	r2,r2,-27020
   808d8:	10800017 	ldw	r2,0(r2)
   808dc:	11c00317 	ldw	r7,12(r2)
   808e0:	01000274 	movhi	r4,9
   808e4:	211d0d04 	addi	r4,r4,29748
   808e8:	01400044 	movi	r5,1
   808ec:	018011c4 	movi	r6,71
   808f0:	00810880 	call	81088 <fwrite>
      break;
   808f4:	00001306 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_INVALID_PMEM:
      fprintf(stderr, "pmem is a NULL pointer\n");
   808f8:	008002b4 	movhi	r2,10
   808fc:	10a59d04 	addi	r2,r2,-27020
   80900:	10800017 	ldw	r2,0(r2)
   80904:	11c00317 	ldw	r7,12(r2)
   80908:	01000274 	movhi	r4,9
   8090c:	211d1f04 	addi	r4,r4,29820
   80910:	01400044 	movi	r5,1
   80914:	018005c4 	movi	r6,23
   80918:	00810880 	call	81088 <fwrite>
      break;
   8091c:	00000906 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    default:
      fprintf(stderr, "Unknown Error\n");
   80920:	008002b4 	movhi	r2,10
   80924:	10a59d04 	addi	r2,r2,-27020
   80928:	10800017 	ldw	r2,0(r2)
   8092c:	11c00317 	ldw	r7,12(r2)
   80930:	01000274 	movhi	r4,9
   80934:	211d2504 	addi	r4,r4,29844
   80938:	01400044 	movi	r5,1
   8093c:	01800384 	movi	r6,14
   80940:	00810880 	call	81088 <fwrite>
      break;
  }
//  fprintf(stderr, "Program is terminating.\n");
//  exit(0);
}
   80944:	e037883a 	mov	sp,fp
   80948:	dfc00117 	ldw	ra,4(sp)
   8094c:	df000017 	ldw	fp,0(sp)
   80950:	dec00204 	addi	sp,sp,8
   80954:	f800283a 	ret

00080958 <initialize_task>:
// Local function prototypes
int init_OS_data_structs(void);
int init_create_tasks(void);

// Initialization task for uCOS
void initialize_task(void* pdata) {
   80958:	defffc04 	addi	sp,sp,-16
   8095c:	dfc00315 	stw	ra,12(sp)
   80960:	df000215 	stw	fp,8(sp)
   80964:	df000204 	addi	fp,sp,8
   80968:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   8096c:	e03ffe05 	stb	zero,-8(fp)

	// Initialize statistic counters in OS
	OSStatInit();
   80970:	008cacc0 	call	8cacc <OSStatInit>

	// create os data structures
	init_OS_data_structs();
   80974:	0080b180 	call	80b18 <init_OS_data_structs>

	// create the tasks
	init_create_tasks();
   80978:	0080b9c0 	call	80b9c <init_create_tasks>

	// This task is deleted because there is no need for it to run again
	return_code = OSTaskDel(OS_PRIO_SELF);
   8097c:	01003fc4 	movi	r4,255
   80980:	0092a340 	call	92a34 <OSTaskDel>
   80984:	e0bffe05 	stb	r2,-8(fp)
	alt_ucosii_check_return_code(return_code);
   80988:	e13ffe03 	ldbu	r4,-8(fp)
   8098c:	00804300 	call	80430 <alt_ucosii_check_return_code>

	while (1);
   80990:	003fff06 	br	80990 <initialize_task+0x38>

00080994 <main>:
}

// The main function, it initializes the hardware, and create the initialization task,
// then it starts uCOS, and never returns
int main(void) {
   80994:	defff704 	addi	sp,sp,-36
   80998:	dfc00815 	stw	ra,32(sp)
   8099c:	df000715 	stw	fp,28(sp)
   809a0:	df000704 	addi	fp,sp,28
  	INT8U return_code = OS_NO_ERR;
   809a4:	e03fff05 	stb	zero,-4(fp)
    alt_up_character_lcd_dev *lcd_0;

    printf("Starting Exercise1...\n");
   809a8:	01000274 	movhi	r4,9
   809ac:	211d2904 	addi	r4,r4,29860
   809b0:	00811e00 	call	811e0 <puts>
	printf("Start main...\n");
   809b4:	01000274 	movhi	r4,9
   809b8:	211d2f04 	addi	r4,r4,29884
   809bc:	00811e00 	call	811e0 <puts>

	init_button_irq();
   809c0:	00803dc0 	call	803dc <init_button_irq>
	printf("PB initialized...\n");
   809c4:	01000274 	movhi	r4,9
   809c8:	211d3304 	addi	r4,r4,29900
   809cc:	00811e00 	call	811e0 <puts>

	seg7_show(SEG7_DISPLAY_0_BASE,SEG7_VALUE);
   809d0:	00c00434 	movhi	r3,16
   809d4:	18c42a04 	addi	r3,r3,4264
   809d8:	00844474 	movhi	r2,4369
   809dc:	10844444 	addi	r2,r2,4369
   809e0:	18800035 	stwio	r2,0(r3)
	printf("SEG7 initialized...\n");
   809e4:	01000274 	movhi	r4,9
   809e8:	211d3804 	addi	r4,r4,29920
   809ec:	00811e00 	call	811e0 <puts>

   	lcd_0 = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
   809f0:	01000274 	movhi	r4,9
   809f4:	211d3d04 	addi	r4,r4,29940
   809f8:	00951100 	call	95110 <alt_up_character_lcd_open_dev>
   809fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (lcd_0 == NULL) alt_printf("Error opening LCD device\n");
   80a00:	e0bffe17 	ldw	r2,-8(fp)
   80a04:	1004c03a 	cmpne	r2,r2,zero
   80a08:	1000041e 	bne	r2,zero,80a1c <main+0x88>
   80a0c:	01000274 	movhi	r4,9
   80a10:	211d4304 	addi	r4,r4,29964
   80a14:	008b4400 	call	8b440 <alt_printf>
   80a18:	00000306 	br	80a28 <main+0x94>
    else alt_printf("LCD device opened.\n");
   80a1c:	01000274 	movhi	r4,9
   80a20:	211d4a04 	addi	r4,r4,29992
   80a24:	008b4400 	call	8b440 <alt_printf>
    
    alt_up_character_lcd_init(lcd_0);
   80a28:	e13ffe17 	ldw	r4,-8(fp)
   80a2c:	00950dc0 	call	950dc <alt_up_character_lcd_init>
    
    alt_up_character_lcd_string(lcd_0, "COE4DS4 Winter18");
   80a30:	e13ffe17 	ldw	r4,-8(fp)
   80a34:	01400274 	movhi	r5,9
   80a38:	295d4f04 	addi	r5,r5,30012
   80a3c:	00951c80 	call	951c8 <alt_up_character_lcd_string>
    
    alt_up_character_lcd_set_cursor_pos(lcd_0, 0, 1);
   80a40:	e13ffe17 	ldw	r4,-8(fp)
   80a44:	000b883a 	mov	r5,zero
   80a48:	01800044 	movi	r6,1
   80a4c:	009528c0 	call	9528c <alt_up_character_lcd_set_cursor_pos>
    
    alt_up_character_lcd_string(lcd_0, "Lab6      exp. 2");
   80a50:	e13ffe17 	ldw	r4,-8(fp)
   80a54:	01400274 	movhi	r5,9
   80a58:	295d5404 	addi	r5,r5,30032
   80a5c:	00951c80 	call	951c8 <alt_up_character_lcd_string>
    
    printf("Character LCD initialized...\n");
   80a60:	01000274 	movhi	r4,9
   80a64:	211d5904 	addi	r4,r4,30052
   80a68:	00811e00 	call	811e0 <puts>


	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   80a6c:	00c00434 	movhi	r3,16
   80a70:	18c40004 	addi	r3,r3,4096
   80a74:	00800044 	movi	r2,1
   80a78:	18800035 	stwio	r2,0(r3)
	printf("Reset performance counter...\n");
   80a7c:	01000274 	movhi	r4,9
   80a80:	211d6104 	addi	r4,r4,30084
   80a84:	00811e00 	call	811e0 <puts>

    srand(IORD(SWITCH_I_BASE, 0));
   80a88:	00800434 	movhi	r2,16
   80a8c:	10841804 	addi	r2,r2,4192
   80a90:	10800037 	ldwio	r2,0(r2)
   80a94:	1009883a 	mov	r4,r2
   80a98:	00811f40 	call	811f4 <srand>

	OSInit();
   80a9c:	008c71c0 	call	8c71c <OSInit>

	return_code = OSTaskCreateExt(initialize_task,
   80aa0:	018002b4 	movhi	r6,10
   80aa4:	319d4c04 	addi	r6,r6,30000
   80aa8:	00800184 	movi	r2,6
   80aac:	d8800015 	stw	r2,0(sp)
   80ab0:	008002b4 	movhi	r2,10
   80ab4:	10954c04 	addi	r2,r2,21808
   80ab8:	d8800115 	stw	r2,4(sp)
   80abc:	00820004 	movi	r2,2048
   80ac0:	d8800215 	stw	r2,8(sp)
   80ac4:	d8000315 	stw	zero,12(sp)
   80ac8:	008000c4 	movi	r2,3
   80acc:	d8800415 	stw	r2,16(sp)
   80ad0:	01000234 	movhi	r4,8
   80ad4:	21025604 	addi	r4,r4,2392
   80ad8:	000b883a 	mov	r5,zero
   80adc:	01c00184 	movi	r7,6
   80ae0:	00928340 	call	92834 <OSTaskCreateExt>
   80ae4:	e0bfff05 	stb	r2,-4(fp)
					INITIALIZE_TASK_PRIORITY,
					initialize_task_stk,
					TASK_STACKSIZE,
					NULL,
					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
	alt_ucosii_check_return_code(return_code);
   80ae8:	e13fff03 	ldbu	r4,-4(fp)
   80aec:	00804300 	call	80430 <alt_ucosii_check_return_code>
	printf("Starting uCOS...\n");
   80af0:	01000274 	movhi	r4,9
   80af4:	211d6904 	addi	r4,r4,30116
   80af8:	00811e00 	call	811e0 <puts>

	OSStart();
   80afc:	008ca5c0 	call	8ca5c <OSStart>
	return 0;
   80b00:	0005883a 	mov	r2,zero
}
   80b04:	e037883a 	mov	sp,fp
   80b08:	dfc00117 	ldw	ra,4(sp)
   80b0c:	df000017 	ldw	fp,0(sp)
   80b10:	dec00204 	addi	sp,sp,8
   80b14:	f800283a 	ret

00080b18 <init_OS_data_structs>:

// This function creates the data structures for uCOS
int init_OS_data_structs(void) {
   80b18:	defffc04 	addi	sp,sp,-16
   80b1c:	dfc00315 	stw	ra,12(sp)
   80b20:	df000215 	stw	fp,8(sp)
   80b24:	dc000115 	stw	r16,4(sp)
   80b28:	df000104 	addi	fp,sp,4
	int i;

	printf("Init data structs...\n");
   80b2c:	01000274 	movhi	r4,9
   80b30:	211d6e04 	addi	r4,r4,30136
   80b34:	00811e00 	call	811e0 <puts>

	for (i = 0; i < NUM_PB_BUTTON; i++)
   80b38:	e03fff15 	stw	zero,-4(fp)
   80b3c:	00000d06 	br	80b74 <init_OS_data_structs+0x5c>
		PBSemaphore[i] = OSSemCreate(0);
   80b40:	e43fff17 	ldw	r16,-4(fp)
   80b44:	0009883a 	mov	r4,zero
   80b48:	00915e40 	call	915e4 <OSSemCreate>
   80b4c:	1009883a 	mov	r4,r2
   80b50:	00c002b4 	movhi	r3,10
   80b54:	18d4c104 	addi	r3,r3,21252
   80b58:	8405883a 	add	r2,r16,r16
   80b5c:	1085883a 	add	r2,r2,r2
   80b60:	10c5883a 	add	r2,r2,r3
   80b64:	11000015 	stw	r4,0(r2)
int init_OS_data_structs(void) {
	int i;

	printf("Init data structs...\n");

	for (i = 0; i < NUM_PB_BUTTON; i++)
   80b68:	e0bfff17 	ldw	r2,-4(fp)
   80b6c:	10800044 	addi	r2,r2,1
   80b70:	e0bfff15 	stw	r2,-4(fp)
   80b74:	e0bfff17 	ldw	r2,-4(fp)
   80b78:	10800110 	cmplti	r2,r2,4
   80b7c:	103ff01e 	bne	r2,zero,80b40 <init_OS_data_structs+0x28>
		PBSemaphore[i] = OSSemCreate(0);

	return 0;
   80b80:	0005883a 	mov	r2,zero
}
   80b84:	e037883a 	mov	sp,fp
   80b88:	dfc00217 	ldw	ra,8(sp)
   80b8c:	df000117 	ldw	fp,4(sp)
   80b90:	dc000017 	ldw	r16,0(sp)
   80b94:	dec00304 	addi	sp,sp,12
   80b98:	f800283a 	ret

00080b9c <init_create_tasks>:

// This function creates the first task in uCOS
int init_create_tasks(void) {
   80b9c:	defff804 	addi	sp,sp,-32
   80ba0:	dfc00715 	stw	ra,28(sp)
   80ba4:	df000615 	stw	fp,24(sp)
   80ba8:	df000604 	addi	fp,sp,24
	INT8U return_code = OS_NO_ERR;
   80bac:	e03fff05 	stb	zero,-4(fp)

	printf("Creating custom_scheduler...\n");
   80bb0:	01000274 	movhi	r4,9
   80bb4:	211d7404 	addi	r4,r4,30160
   80bb8:	00811e00 	call	811e0 <puts>
	return_code = OSTaskCreateExt(custom_scheduler,
   80bbc:	018002b4 	movhi	r6,10
   80bc0:	31b4c104 	addi	r6,r6,-11516
   80bc4:	00800244 	movi	r2,9
   80bc8:	d8800015 	stw	r2,0(sp)
   80bcc:	008002b4 	movhi	r2,10
   80bd0:	10acc104 	addi	r2,r2,-19708
   80bd4:	d8800115 	stw	r2,4(sp)
   80bd8:	00820004 	movi	r2,2048
   80bdc:	d8800215 	stw	r2,8(sp)
   80be0:	008002b4 	movhi	r2,10
   80be4:	1094c504 	addi	r2,r2,21268
   80be8:	d8800315 	stw	r2,12(sp)
   80bec:	d8000415 	stw	zero,16(sp)
   80bf0:	01000234 	movhi	r4,8
   80bf4:	21035c04 	addi	r4,r4,3440
   80bf8:	000b883a 	mov	r5,zero
   80bfc:	01c00244 	movi	r7,9
   80c00:	00928340 	call	92834 <OSTaskCreateExt>
   80c04:	e0bfff05 	stb	r2,-4(fp)
					CUSTOM_SCHEDULER_PRIORITY,
					custom_scheduler_stk,
                    TASK_STACKSIZE,
					&custom_scheduler_tcb,
					0);
	alt_ucosii_check_return_code(return_code);
   80c08:	e13fff03 	ldbu	r4,-4(fp)
   80c0c:	00804300 	call	80430 <alt_ucosii_check_return_code>

	return 0;
   80c10:	0005883a 	mov	r2,zero
}
   80c14:	e037883a 	mov	sp,fp
   80c18:	dfc00117 	ldw	ra,4(sp)
   80c1c:	df000017 	ldw	fp,0(sp)
   80c20:	dec00204 	addi	sp,sp,8
   80c24:	f800283a 	ret

00080c28 <periodic_task0>:
//int custom_task_create(int [], int, scheduler_info_struct [], task_info_struct []);

// Periodic task 0
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task0(void* pdata) {
   80c28:	defffc04 	addi	sp,sp,-16
   80c2c:	dfc00315 	stw	ra,12(sp)
   80c30:	df000215 	stw	fp,8(sp)
   80c34:	df000204 	addi	fp,sp,8
   80c38:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80c3c:	e0bfff17 	ldw	r2,-4(fp)
   80c40:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		#if MY_NON_PREEMPTIVE_SCH == 1
			OSSchedLock();
		#endif
		printf("Task 1 has started at OSTick = %d\n", (int)OSTimeGet());
   80c44:	00940180 	call	94018 <OSTimeGet>
   80c48:	100b883a 	mov	r5,r2
   80c4c:	01000274 	movhi	r4,9
   80c50:	211d7c04 	addi	r4,r4,30192
   80c54:	00810c80 	call	810c8 <printf>
		printf("Start periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80c58:	e0bffe17 	ldw	r2,-8(fp)
   80c5c:	11400117 	ldw	r5,4(r2)
   80c60:	e0bffe17 	ldw	r2,-8(fp)
   80c64:	11800217 	ldw	r6,8(r2)
   80c68:	e0bffe17 	ldw	r2,-8(fp)
   80c6c:	11c00017 	ldw	r7,0(r2)
   80c70:	01000274 	movhi	r4,9
   80c74:	211d8504 	addi	r4,r4,30228
   80c78:	00810c80 	call	810c8 <printf>
		custom_delay(task_info_ptr->execution_time);
   80c7c:	e0bffe17 	ldw	r2,-8(fp)
   80c80:	11000117 	ldw	r4,4(r2)
   80c84:	0080ed40 	call	80ed4 <custom_delay>
		printf("End	  periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80c88:	e0bffe17 	ldw	r2,-8(fp)
   80c8c:	11400117 	ldw	r5,4(r2)
   80c90:	e0bffe17 	ldw	r2,-8(fp)
   80c94:	11800217 	ldw	r6,8(r2)
   80c98:	e0bffe17 	ldw	r2,-8(fp)
   80c9c:	11c00017 	ldw	r7,0(r2)
   80ca0:	01000274 	movhi	r4,9
   80ca4:	211d9304 	addi	r4,r4,30284
   80ca8:	00810c80 	call	810c8 <printf>
		printf("Task 1 has ended at OSTick = %d\n", (int)OSTimeGet());
   80cac:	00940180 	call	94018 <OSTimeGet>
   80cb0:	100b883a 	mov	r5,r2
   80cb4:	01000274 	movhi	r4,9
   80cb8:	211da104 	addi	r4,r4,30340
   80cbc:	00810c80 	call	810c8 <printf>
		#if MY_NON_PREEMPTIVE_SCH == 1
				OSSchedUnlock();
		#endif
		OSTimeDly(task_info_ptr->os_delay);
   80cc0:	e0bffe17 	ldw	r2,-8(fp)
   80cc4:	10800217 	ldw	r2,8(r2)
   80cc8:	113fffcc 	andi	r4,r2,65535
   80ccc:	0093b2c0 	call	93b2c <OSTimeDly>
	}
   80cd0:	003fdc06 	br	80c44 <periodic_task0+0x1c>

00080cd4 <periodic_task1>:
}

// Periodic task 1
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task1(void* pdata) {
   80cd4:	defffc04 	addi	sp,sp,-16
   80cd8:	dfc00315 	stw	ra,12(sp)
   80cdc:	df000215 	stw	fp,8(sp)
   80ce0:	df000204 	addi	fp,sp,8
   80ce4:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80ce8:	e0bfff17 	ldw	r2,-4(fp)
   80cec:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		#if MY_NON_PREEMPTIVE_SCH == 1
			OSSchedLock();
		#endif
		printf("Task 2 has started at OSTick = %d\n", (int)OSTimeGet());
   80cf0:	00940180 	call	94018 <OSTimeGet>
   80cf4:	100b883a 	mov	r5,r2
   80cf8:	01000274 	movhi	r4,9
   80cfc:	211daa04 	addi	r4,r4,30376
   80d00:	00810c80 	call	810c8 <printf>
		printf("Start periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80d04:	e0bffe17 	ldw	r2,-8(fp)
   80d08:	11400117 	ldw	r5,4(r2)
   80d0c:	e0bffe17 	ldw	r2,-8(fp)
   80d10:	11800217 	ldw	r6,8(r2)
   80d14:	e0bffe17 	ldw	r2,-8(fp)
   80d18:	11c00017 	ldw	r7,0(r2)
   80d1c:	01000274 	movhi	r4,9
   80d20:	211db304 	addi	r4,r4,30412
   80d24:	00810c80 	call	810c8 <printf>
		custom_delay(task_info_ptr->execution_time);
   80d28:	e0bffe17 	ldw	r2,-8(fp)
   80d2c:	11000117 	ldw	r4,4(r2)
   80d30:	0080ed40 	call	80ed4 <custom_delay>
		printf("End	  periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80d34:	e0bffe17 	ldw	r2,-8(fp)
   80d38:	11400117 	ldw	r5,4(r2)
   80d3c:	e0bffe17 	ldw	r2,-8(fp)
   80d40:	11800217 	ldw	r6,8(r2)
   80d44:	e0bffe17 	ldw	r2,-8(fp)
   80d48:	11c00017 	ldw	r7,0(r2)
   80d4c:	01000274 	movhi	r4,9
   80d50:	211dc104 	addi	r4,r4,30468
   80d54:	00810c80 	call	810c8 <printf>
		printf("Task 2 has ended at OSTick = %d\n", (int)OSTimeGet());
   80d58:	00940180 	call	94018 <OSTimeGet>
   80d5c:	100b883a 	mov	r5,r2
   80d60:	01000274 	movhi	r4,9
   80d64:	211dcf04 	addi	r4,r4,30524
   80d68:	00810c80 	call	810c8 <printf>
		#if MY_NON_PREEMPTIVE_SCH == 1
				OSSchedUnlock();
		#endif
	}
   80d6c:	003fe006 	br	80cf0 <periodic_task1+0x1c>

00080d70 <custom_scheduler>:
// The custom_scheduler
// It has the highest priority
// It checks the PBs every 500ms
// It a button has been pressed, it creates/deletes the corresponding task in the OS
// When creating a task, it will assign the new task with the lowest priority among the running tasks
void custom_scheduler(void *pdata) {
   80d70:	deffec04 	addi	sp,sp,-80
   80d74:	dfc01315 	stw	ra,76(sp)
   80d78:	df001215 	stw	fp,72(sp)
   80d7c:	df001204 	addi	fp,sp,72
   80d80:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   80d84:	e03ff805 	stb	zero,-32(fp)
	int PB_pressed[NUM_PB_BUTTON];
	int sem_value;
	int new_pressed;
	int num_active_task;
	*/
	int busy_moshiurTime = 7*200;
   80d88:	00815e04 	movi	r2,1400
   80d8c:	e0bff615 	stw	r2,-40(fp)
	int idle_ryanTime = 4*700;
   80d90:	0082bc04 	movi	r2,2800
   80d94:	e0bff515 	stw	r2,-44(fp)
	int busy_howladerTime = 8*200;
   80d98:	00819004 	movi	r2,1600
   80d9c:	e0bff415 	stw	r2,-48(fp)
	int idle_ganeshanTime = 8*700;
   80da0:	00857804 	movi	r2,5600
   80da4:	e0bff315 	stw	r2,-52(fp)
	
	// Array of task_info
	task_info_struct task_info[2]; //create two tasks
	task_info[0].priority = PERIODIC_TASK0_PRIORITY;
   80da8:	008002c4 	movi	r2,11
   80dac:	e0bff915 	stw	r2,-28(fp)
	task_info[0].execution_time = busy_moshiurTime;
   80db0:	e0bff617 	ldw	r2,-40(fp)
   80db4:	e0bffa15 	stw	r2,-24(fp)
	task_info[0].os_delay = idle_ryanTime;
   80db8:	e0bff517 	ldw	r2,-44(fp)
   80dbc:	e0bffb15 	stw	r2,-20(fp)

	task_info[1].priority = PERIODIC_TASK1_PRIORITY;
   80dc0:	00800304 	movi	r2,12
   80dc4:	e0bffc15 	stw	r2,-16(fp)
	task_info[1].execution_time = busy_howladerTime;
   80dc8:	e0bff417 	ldw	r2,-48(fp)
   80dcc:	e0bffd15 	stw	r2,-12(fp)
	task_info[1].os_delay = idle_ganeshanTime;
   80dd0:	e0bff317 	ldw	r2,-52(fp)
   80dd4:	e0bffe15 	stw	r2,-8(fp)

	//scheduler_info_struct scheduler_info[NUM_TASK];

	printf("Creating Task0...\n");
   80dd8:	01000274 	movhi	r4,9
   80ddc:	211dd804 	addi	r4,r4,30560
   80de0:	00811e00 	call	811e0 <puts>

	return_code = OSTaskCreateExt(periodic_task0,
   80de4:	008002b4 	movhi	r2,10
   80de8:	10b4c104 	addi	r2,r2,-11516
   80dec:	1187ff04 	addi	r6,r2,8188
   80df0:	00c002b4 	movhi	r3,10
   80df4:	18f4c104 	addi	r3,r3,-11516
   80df8:	e17ff904 	addi	r5,fp,-28
   80dfc:	008002c4 	movi	r2,11
   80e00:	d8800015 	stw	r2,0(sp)
   80e04:	d8c00115 	stw	r3,4(sp)
   80e08:	00820004 	movi	r2,2048
   80e0c:	d8800215 	stw	r2,8(sp)
   80e10:	008002b4 	movhi	r2,10
   80e14:	1094e004 	addi	r2,r2,21376
   80e18:	d8800315 	stw	r2,12(sp)
   80e1c:	d8000415 	stw	zero,16(sp)
   80e20:	01000234 	movhi	r4,8
   80e24:	21030a04 	addi	r4,r4,3112
   80e28:	01c002c4 	movi	r7,11
   80e2c:	00928340 	call	92834 <OSTaskCreateExt>
   80e30:	e0bff805 	stb	r2,-32(fp)
					 PERIODIC_TASK0_PRIORITY,
					 &periodic_task_stk[0][0],
					 TASK_STACKSIZE,
					 &periodic_task_tcb[0],
					 0);
	alt_ucosii_check_return_code(return_code);
   80e34:	e13ff803 	ldbu	r4,-32(fp)
   80e38:	00804300 	call	80430 <alt_ucosii_check_return_code>

	printf("Creating Task0...\n");
   80e3c:	01000274 	movhi	r4,9
   80e40:	211dd804 	addi	r4,r4,30560
   80e44:	00811e00 	call	811e0 <puts>
	return_code = OSTaskCreateExt(periodic_task1,
   80e48:	e0bff904 	addi	r2,fp,-28
   80e4c:	11400304 	addi	r5,r2,12
   80e50:	008002b4 	movhi	r2,10
   80e54:	10b4c104 	addi	r2,r2,-11516
   80e58:	118fff04 	addi	r6,r2,16380
   80e5c:	008002b4 	movhi	r2,10
   80e60:	10bcc104 	addi	r2,r2,-3324
   80e64:	1007883a 	mov	r3,r2
   80e68:	010002b4 	movhi	r4,10
   80e6c:	2114fb04 	addi	r4,r4,21484
   80e70:	00800304 	movi	r2,12
   80e74:	d8800015 	stw	r2,0(sp)
   80e78:	d8c00115 	stw	r3,4(sp)
   80e7c:	00820004 	movi	r2,2048
   80e80:	d8800215 	stw	r2,8(sp)
   80e84:	d9000315 	stw	r4,12(sp)
   80e88:	d8000415 	stw	zero,16(sp)
   80e8c:	01000234 	movhi	r4,8
   80e90:	21033504 	addi	r4,r4,3284
   80e94:	01c00304 	movi	r7,12
   80e98:	00928340 	call	92834 <OSTaskCreateExt>
   80e9c:	e0bff805 	stb	r2,-32(fp)
					 PERIODIC_TASK1_PRIORITY,
					 &periodic_task_stk[1][0],
					 TASK_STACKSIZE,
					 &periodic_task_tcb[1],
					 0);
	alt_ucosii_check_return_code(return_code);
   80ea0:	e13ff803 	ldbu	r4,-32(fp)
   80ea4:	00804300 	call	80430 <alt_ucosii_check_return_code>

	// Scheduler never returns
	while (1) {
		#if MY_NON_PREEMPTIVE_SCH == 0
			printf("Experiment for preemptive scheduling...\n");
   80ea8:	01000274 	movhi	r4,9
   80eac:	211ddd04 	addi	r4,r4,30580
   80eb0:	00811e00 	call	811e0 <puts>
		#else
			printf("Experiment for non-preemptive scheduling...\n");
		#endif

		return_code = OSTaskDel(OS_PRIO_SELF);
   80eb4:	01003fc4 	movi	r4,255
   80eb8:	0092a340 	call	92a34 <OSTaskDel>
   80ebc:	e0bff805 	stb	r2,-32(fp)
		alt_ucosii_check_return_code(return_code);
   80ec0:	e13ff803 	ldbu	r4,-32(fp)
   80ec4:	00804300 	call	80430 <alt_ucosii_check_return_code>
		OSTimeDly(500);
   80ec8:	01007d04 	movi	r4,500
   80ecc:	0093b2c0 	call	93b2c <OSTimeDly>
	}
   80ed0:	003ff506 	br	80ea8 <custom_scheduler+0x138>

00080ed4 <custom_delay>:



// Function for occupying the processor for the specified number of clock ticks
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
   80ed4:	defffc04 	addi	sp,sp,-16
   80ed8:	dfc00315 	stw	ra,12(sp)
   80edc:	df000215 	stw	fp,8(sp)
   80ee0:	df000204 	addi	fp,sp,8
   80ee4:	e13fff15 	stw	r4,-4(fp)
    INT32U cur_tick;
    ticks--;
   80ee8:	e0bfff17 	ldw	r2,-4(fp)
   80eec:	10bfffc4 	addi	r2,r2,-1
   80ef0:	e0bfff15 	stw	r2,-4(fp)
    cur_tick = OSTimeGet();
   80ef4:	00940180 	call	94018 <OSTimeGet>
   80ef8:	e0bffe15 	stw	r2,-8(fp)
    while (ticks > 0) {
   80efc:	00000906 	br	80f24 <custom_delay+0x50>
         if (OSTimeGet() > cur_tick) {
   80f00:	00940180 	call	94018 <OSTimeGet>
   80f04:	1007883a 	mov	r3,r2
   80f08:	e0bffe17 	ldw	r2,-8(fp)
   80f0c:	10c0052e 	bgeu	r2,r3,80f24 <custom_delay+0x50>
            ticks--;
   80f10:	e0bfff17 	ldw	r2,-4(fp)
   80f14:	10bfffc4 	addi	r2,r2,-1
   80f18:	e0bfff15 	stw	r2,-4(fp)
            cur_tick = OSTimeGet();
   80f1c:	00940180 	call	94018 <OSTimeGet>
   80f20:	e0bffe15 	stw	r2,-8(fp)
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
    INT32U cur_tick;
    ticks--;
    cur_tick = OSTimeGet();
    while (ticks > 0) {
   80f24:	e0bfff17 	ldw	r2,-4(fp)
   80f28:	10800048 	cmpgei	r2,r2,1
   80f2c:	103ff41e 	bne	r2,zero,80f00 <custom_delay+0x2c>
         if (OSTimeGet() > cur_tick) {
            ticks--;
            cur_tick = OSTimeGet();
         }  
    }
}
   80f30:	e037883a 	mov	sp,fp
   80f34:	dfc00117 	ldw	ra,4(sp)
   80f38:	df000017 	ldw	fp,0(sp)
   80f3c:	dec00204 	addi	sp,sp,8
   80f40:	f800283a 	ret

00080f44 <__mulsi3>:
   80f44:	20000a26 	beq	r4,zero,80f70 <__mulsi3+0x2c>
   80f48:	0007883a 	mov	r3,zero
   80f4c:	2080004c 	andi	r2,r4,1
   80f50:	1005003a 	cmpeq	r2,r2,zero
   80f54:	2008d07a 	srli	r4,r4,1
   80f58:	1000011e 	bne	r2,zero,80f60 <__mulsi3+0x1c>
   80f5c:	1947883a 	add	r3,r3,r5
   80f60:	294b883a 	add	r5,r5,r5
   80f64:	203ff91e 	bne	r4,zero,80f4c <__mulsi3+0x8>
   80f68:	1805883a 	mov	r2,r3
   80f6c:	f800283a 	ret
   80f70:	0007883a 	mov	r3,zero
   80f74:	1805883a 	mov	r2,r3
   80f78:	f800283a 	ret

00080f7c <fprintf>:
   80f7c:	defffc04 	addi	sp,sp,-16
   80f80:	dfc00115 	stw	ra,4(sp)
   80f84:	d9800215 	stw	r6,8(sp)
   80f88:	d9c00315 	stw	r7,12(sp)
   80f8c:	d8800204 	addi	r2,sp,8
   80f90:	100d883a 	mov	r6,r2
   80f94:	d8800015 	stw	r2,0(sp)
   80f98:	00832180 	call	83218 <__vfprintf_internal>
   80f9c:	dfc00117 	ldw	ra,4(sp)
   80fa0:	dec00404 	addi	sp,sp,16
   80fa4:	f800283a 	ret

00080fa8 <_fprintf_r>:
   80fa8:	defffd04 	addi	sp,sp,-12
   80fac:	2807883a 	mov	r3,r5
   80fb0:	dfc00115 	stw	ra,4(sp)
   80fb4:	d9c00215 	stw	r7,8(sp)
   80fb8:	d8800204 	addi	r2,sp,8
   80fbc:	300b883a 	mov	r5,r6
   80fc0:	1809883a 	mov	r4,r3
   80fc4:	100d883a 	mov	r6,r2
   80fc8:	d8800015 	stw	r2,0(sp)
   80fcc:	00832180 	call	83218 <__vfprintf_internal>
   80fd0:	dfc00117 	ldw	ra,4(sp)
   80fd4:	dec00304 	addi	sp,sp,12
   80fd8:	f800283a 	ret

00080fdc <_fwrite_r>:
   80fdc:	defff604 	addi	sp,sp,-40
   80fe0:	dc000515 	stw	r16,20(sp)
   80fe4:	d9400015 	stw	r5,0(sp)
   80fe8:	2021883a 	mov	r16,r4
   80fec:	300b883a 	mov	r5,r6
   80ff0:	3809883a 	mov	r4,r7
   80ff4:	dcc00815 	stw	r19,32(sp)
   80ff8:	dc800715 	stw	r18,28(sp)
   80ffc:	dc400615 	stw	r17,24(sp)
   81000:	dfc00915 	stw	ra,36(sp)
   81004:	3825883a 	mov	r18,r7
   81008:	3027883a 	mov	r19,r6
   8100c:	0080f440 	call	80f44 <__mulsi3>
   81010:	1023883a 	mov	r17,r2
   81014:	00800044 	movi	r2,1
   81018:	d8800315 	stw	r2,12(sp)
   8101c:	dc400115 	stw	r17,4(sp)
   81020:	dc400415 	stw	r17,16(sp)
   81024:	dec00215 	stw	sp,8(sp)
   81028:	80000326 	beq	r16,zero,81038 <_fwrite_r+0x5c>
   8102c:	80800e17 	ldw	r2,56(r16)
   81030:	8009883a 	mov	r4,r16
   81034:	10001226 	beq	r2,zero,81080 <_fwrite_r+0xa4>
   81038:	d9400a17 	ldw	r5,40(sp)
   8103c:	8009883a 	mov	r4,r16
   81040:	d9800204 	addi	r6,sp,8
   81044:	00854d40 	call	854d4 <__sfvwrite_r>
   81048:	980b883a 	mov	r5,r19
   8104c:	10000426 	beq	r2,zero,81060 <_fwrite_r+0x84>
   81050:	d9000417 	ldw	r4,16(sp)
   81054:	8909c83a 	sub	r4,r17,r4
   81058:	008a5ec0 	call	8a5ec <__udivsi3>
   8105c:	1025883a 	mov	r18,r2
   81060:	9005883a 	mov	r2,r18
   81064:	dfc00917 	ldw	ra,36(sp)
   81068:	dcc00817 	ldw	r19,32(sp)
   8106c:	dc800717 	ldw	r18,28(sp)
   81070:	dc400617 	ldw	r17,24(sp)
   81074:	dc000517 	ldw	r16,20(sp)
   81078:	dec00a04 	addi	sp,sp,40
   8107c:	f800283a 	ret
   81080:	0084e080 	call	84e08 <__sinit>
   81084:	003fec06 	br	81038 <_fwrite_r+0x5c>

00081088 <fwrite>:
   81088:	008002b4 	movhi	r2,10
   8108c:	10a59d04 	addi	r2,r2,-27020
   81090:	2017883a 	mov	r11,r4
   81094:	11000017 	ldw	r4,0(r2)
   81098:	defffe04 	addi	sp,sp,-8
   8109c:	3013883a 	mov	r9,r6
   810a0:	2805883a 	mov	r2,r5
   810a4:	d9c00015 	stw	r7,0(sp)
   810a8:	580b883a 	mov	r5,r11
   810ac:	100d883a 	mov	r6,r2
   810b0:	480f883a 	mov	r7,r9
   810b4:	dfc00115 	stw	ra,4(sp)
   810b8:	0080fdc0 	call	80fdc <_fwrite_r>
   810bc:	dfc00117 	ldw	ra,4(sp)
   810c0:	dec00204 	addi	sp,sp,8
   810c4:	f800283a 	ret

000810c8 <printf>:
   810c8:	defffb04 	addi	sp,sp,-20
   810cc:	dfc00115 	stw	ra,4(sp)
   810d0:	d9400215 	stw	r5,8(sp)
   810d4:	d9800315 	stw	r6,12(sp)
   810d8:	d9c00415 	stw	r7,16(sp)
   810dc:	008002b4 	movhi	r2,10
   810e0:	10a59d04 	addi	r2,r2,-27020
   810e4:	10c00017 	ldw	r3,0(r2)
   810e8:	200b883a 	mov	r5,r4
   810ec:	d8800204 	addi	r2,sp,8
   810f0:	19000217 	ldw	r4,8(r3)
   810f4:	100d883a 	mov	r6,r2
   810f8:	d8800015 	stw	r2,0(sp)
   810fc:	00832180 	call	83218 <__vfprintf_internal>
   81100:	dfc00117 	ldw	ra,4(sp)
   81104:	dec00504 	addi	sp,sp,20
   81108:	f800283a 	ret

0008110c <_printf_r>:
   8110c:	defffc04 	addi	sp,sp,-16
   81110:	dfc00115 	stw	ra,4(sp)
   81114:	d9800215 	stw	r6,8(sp)
   81118:	d9c00315 	stw	r7,12(sp)
   8111c:	280d883a 	mov	r6,r5
   81120:	21400217 	ldw	r5,8(r4)
   81124:	d8c00204 	addi	r3,sp,8
   81128:	180f883a 	mov	r7,r3
   8112c:	d8c00015 	stw	r3,0(sp)
   81130:	00813540 	call	81354 <___vfprintf_internal_r>
   81134:	dfc00117 	ldw	ra,4(sp)
   81138:	dec00404 	addi	sp,sp,16
   8113c:	f800283a 	ret

00081140 <_puts_r>:
   81140:	defff604 	addi	sp,sp,-40
   81144:	dc400715 	stw	r17,28(sp)
   81148:	2023883a 	mov	r17,r4
   8114c:	2809883a 	mov	r4,r5
   81150:	dfc00915 	stw	ra,36(sp)
   81154:	dcc00815 	stw	r19,32(sp)
   81158:	2827883a 	mov	r19,r5
   8115c:	00812880 	call	81288 <strlen>
   81160:	89400217 	ldw	r5,8(r17)
   81164:	00c00274 	movhi	r3,9
   81168:	18dde804 	addi	r3,r3,30624
   8116c:	01c00044 	movi	r7,1
   81170:	12000044 	addi	r8,r2,1
   81174:	d8c00515 	stw	r3,20(sp)
   81178:	d9c00615 	stw	r7,24(sp)
   8117c:	d8c00304 	addi	r3,sp,12
   81180:	01c00084 	movi	r7,2
   81184:	8809883a 	mov	r4,r17
   81188:	d80d883a 	mov	r6,sp
   8118c:	d8c00015 	stw	r3,0(sp)
   81190:	dcc00315 	stw	r19,12(sp)
   81194:	da000215 	stw	r8,8(sp)
   81198:	d9c00115 	stw	r7,4(sp)
   8119c:	d8800415 	stw	r2,16(sp)
   811a0:	00854d40 	call	854d4 <__sfvwrite_r>
   811a4:	00ffffc4 	movi	r3,-1
   811a8:	10000626 	beq	r2,zero,811c4 <_puts_r+0x84>
   811ac:	1805883a 	mov	r2,r3
   811b0:	dfc00917 	ldw	ra,36(sp)
   811b4:	dcc00817 	ldw	r19,32(sp)
   811b8:	dc400717 	ldw	r17,28(sp)
   811bc:	dec00a04 	addi	sp,sp,40
   811c0:	f800283a 	ret
   811c4:	00c00284 	movi	r3,10
   811c8:	1805883a 	mov	r2,r3
   811cc:	dfc00917 	ldw	ra,36(sp)
   811d0:	dcc00817 	ldw	r19,32(sp)
   811d4:	dc400717 	ldw	r17,28(sp)
   811d8:	dec00a04 	addi	sp,sp,40
   811dc:	f800283a 	ret

000811e0 <puts>:
   811e0:	008002b4 	movhi	r2,10
   811e4:	10a59d04 	addi	r2,r2,-27020
   811e8:	200b883a 	mov	r5,r4
   811ec:	11000017 	ldw	r4,0(r2)
   811f0:	00811401 	jmpi	81140 <_puts_r>

000811f4 <srand>:
   811f4:	008002b4 	movhi	r2,10
   811f8:	10a59d04 	addi	r2,r2,-27020
   811fc:	11400017 	ldw	r5,0(r2)
   81200:	0007883a 	mov	r3,zero
   81204:	28c02a15 	stw	r3,168(r5)
   81208:	29002915 	stw	r4,164(r5)
   8120c:	f800283a 	ret

00081210 <rand>:
   81210:	defffe04 	addi	sp,sp,-8
   81214:	008002b4 	movhi	r2,10
   81218:	10a59d04 	addi	r2,r2,-27020
   8121c:	dc000015 	stw	r16,0(sp)
   81220:	14000017 	ldw	r16,0(r2)
   81224:	dfc00115 	stw	ra,4(sp)
   81228:	00932574 	movhi	r2,19605
   8122c:	109fcb44 	addi	r2,r2,32557
   81230:	82002917 	ldw	r8,164(r16)
   81234:	82402a17 	ldw	r9,168(r16)
   81238:	00d614b4 	movhi	r3,22610
   8123c:	18fd0b44 	addi	r3,r3,-3027
   81240:	4009883a 	mov	r4,r8
   81244:	180f883a 	mov	r7,r3
   81248:	100d883a 	mov	r6,r2
   8124c:	480b883a 	mov	r5,r9
   81250:	00885940 	call	88594 <__muldi3>
   81254:	02000044 	movi	r8,1
   81258:	1209883a 	add	r4,r2,r8
   8125c:	2095803a 	cmpltu	r10,r4,r2
   81260:	50d5883a 	add	r10,r10,r3
   81264:	81002915 	stw	r4,164(r16)
   81268:	01200034 	movhi	r4,32768
   8126c:	213fffc4 	addi	r4,r4,-1
   81270:	2284703a 	and	r2,r4,r10
   81274:	82802a15 	stw	r10,168(r16)
   81278:	dfc00117 	ldw	ra,4(sp)
   8127c:	dc000017 	ldw	r16,0(sp)
   81280:	dec00204 	addi	sp,sp,8
   81284:	f800283a 	ret

00081288 <strlen>:
   81288:	208000cc 	andi	r2,r4,3
   8128c:	2011883a 	mov	r8,r4
   81290:	1000161e 	bne	r2,zero,812ec <strlen+0x64>
   81294:	20c00017 	ldw	r3,0(r4)
   81298:	017fbff4 	movhi	r5,65279
   8129c:	297fbfc4 	addi	r5,r5,-257
   812a0:	01e02074 	movhi	r7,32897
   812a4:	39e02004 	addi	r7,r7,-32640
   812a8:	1945883a 	add	r2,r3,r5
   812ac:	11c4703a 	and	r2,r2,r7
   812b0:	00c6303a 	nor	r3,zero,r3
   812b4:	1886703a 	and	r3,r3,r2
   812b8:	18000c1e 	bne	r3,zero,812ec <strlen+0x64>
   812bc:	280d883a 	mov	r6,r5
   812c0:	380b883a 	mov	r5,r7
   812c4:	21000104 	addi	r4,r4,4
   812c8:	20800017 	ldw	r2,0(r4)
   812cc:	1187883a 	add	r3,r2,r6
   812d0:	1946703a 	and	r3,r3,r5
   812d4:	0084303a 	nor	r2,zero,r2
   812d8:	10c4703a 	and	r2,r2,r3
   812dc:	103ff926 	beq	r2,zero,812c4 <strlen+0x3c>
   812e0:	20800007 	ldb	r2,0(r4)
   812e4:	10000326 	beq	r2,zero,812f4 <strlen+0x6c>
   812e8:	21000044 	addi	r4,r4,1
   812ec:	20800007 	ldb	r2,0(r4)
   812f0:	103ffd1e 	bne	r2,zero,812e8 <strlen+0x60>
   812f4:	2205c83a 	sub	r2,r4,r8
   812f8:	f800283a 	ret

000812fc <__sprint_r>:
   812fc:	30800217 	ldw	r2,8(r6)
   81300:	defffe04 	addi	sp,sp,-8
   81304:	dc000015 	stw	r16,0(sp)
   81308:	dfc00115 	stw	ra,4(sp)
   8130c:	3021883a 	mov	r16,r6
   81310:	0007883a 	mov	r3,zero
   81314:	1000061e 	bne	r2,zero,81330 <__sprint_r+0x34>
   81318:	1805883a 	mov	r2,r3
   8131c:	30000115 	stw	zero,4(r6)
   81320:	dfc00117 	ldw	ra,4(sp)
   81324:	dc000017 	ldw	r16,0(sp)
   81328:	dec00204 	addi	sp,sp,8
   8132c:	f800283a 	ret
   81330:	00854d40 	call	854d4 <__sfvwrite_r>
   81334:	1007883a 	mov	r3,r2
   81338:	1805883a 	mov	r2,r3
   8133c:	80000115 	stw	zero,4(r16)
   81340:	80000215 	stw	zero,8(r16)
   81344:	dfc00117 	ldw	ra,4(sp)
   81348:	dc000017 	ldw	r16,0(sp)
   8134c:	dec00204 	addi	sp,sp,8
   81350:	f800283a 	ret

00081354 <___vfprintf_internal_r>:
   81354:	defea404 	addi	sp,sp,-1392
   81358:	dd815815 	stw	r22,1376(sp)
   8135c:	dc015215 	stw	r16,1352(sp)
   81360:	d9c15115 	stw	r7,1348(sp)
   81364:	dfc15b15 	stw	ra,1388(sp)
   81368:	df015a15 	stw	fp,1384(sp)
   8136c:	ddc15915 	stw	r23,1380(sp)
   81370:	dd415715 	stw	r21,1372(sp)
   81374:	dd015615 	stw	r20,1368(sp)
   81378:	dcc15515 	stw	r19,1364(sp)
   8137c:	dc815415 	stw	r18,1360(sp)
   81380:	dc415315 	stw	r17,1356(sp)
   81384:	282d883a 	mov	r22,r5
   81388:	3021883a 	mov	r16,r6
   8138c:	d9014f15 	stw	r4,1340(sp)
   81390:	0085af80 	call	85af8 <_localeconv_r>
   81394:	10800017 	ldw	r2,0(r2)
   81398:	d9c15117 	ldw	r7,1348(sp)
   8139c:	d8814915 	stw	r2,1316(sp)
   813a0:	d8814f17 	ldw	r2,1340(sp)
   813a4:	10000226 	beq	r2,zero,813b0 <___vfprintf_internal_r+0x5c>
   813a8:	10800e17 	ldw	r2,56(r2)
   813ac:	10020d26 	beq	r2,zero,81be4 <___vfprintf_internal_r+0x890>
   813b0:	b080030b 	ldhu	r2,12(r22)
   813b4:	1080020c 	andi	r2,r2,8
   813b8:	10020e26 	beq	r2,zero,81bf4 <___vfprintf_internal_r+0x8a0>
   813bc:	b0800417 	ldw	r2,16(r22)
   813c0:	10020c26 	beq	r2,zero,81bf4 <___vfprintf_internal_r+0x8a0>
   813c4:	b200030b 	ldhu	r8,12(r22)
   813c8:	00800284 	movi	r2,10
   813cc:	40c0068c 	andi	r3,r8,26
   813d0:	18802f1e 	bne	r3,r2,81490 <___vfprintf_internal_r+0x13c>
   813d4:	b080038f 	ldh	r2,14(r22)
   813d8:	10002d16 	blt	r2,zero,81490 <___vfprintf_internal_r+0x13c>
   813dc:	b240038b 	ldhu	r9,14(r22)
   813e0:	b2800717 	ldw	r10,28(r22)
   813e4:	b2c00917 	ldw	r11,36(r22)
   813e8:	d9014f17 	ldw	r4,1340(sp)
   813ec:	dc402904 	addi	r17,sp,164
   813f0:	d8804004 	addi	r2,sp,256
   813f4:	00c10004 	movi	r3,1024
   813f8:	423fff4c 	andi	r8,r8,65533
   813fc:	800d883a 	mov	r6,r16
   81400:	880b883a 	mov	r5,r17
   81404:	da002c0d 	sth	r8,176(sp)
   81408:	da402c8d 	sth	r9,178(sp)
   8140c:	da803015 	stw	r10,192(sp)
   81410:	dac03215 	stw	r11,200(sp)
   81414:	d8802d15 	stw	r2,180(sp)
   81418:	d8c02e15 	stw	r3,184(sp)
   8141c:	d8802915 	stw	r2,164(sp)
   81420:	d8c02b15 	stw	r3,172(sp)
   81424:	d8002f15 	stw	zero,188(sp)
   81428:	00813540 	call	81354 <___vfprintf_internal_r>
   8142c:	d8814b15 	stw	r2,1324(sp)
   81430:	10000416 	blt	r2,zero,81444 <___vfprintf_internal_r+0xf0>
   81434:	d9014f17 	ldw	r4,1340(sp)
   81438:	880b883a 	mov	r5,r17
   8143c:	0084b700 	call	84b70 <_fflush_r>
   81440:	1002321e 	bne	r2,zero,81d0c <___vfprintf_internal_r+0x9b8>
   81444:	d8802c0b 	ldhu	r2,176(sp)
   81448:	1080100c 	andi	r2,r2,64
   8144c:	10000326 	beq	r2,zero,8145c <___vfprintf_internal_r+0x108>
   81450:	b080030b 	ldhu	r2,12(r22)
   81454:	10801014 	ori	r2,r2,64
   81458:	b080030d 	sth	r2,12(r22)
   8145c:	d8814b17 	ldw	r2,1324(sp)
   81460:	dfc15b17 	ldw	ra,1388(sp)
   81464:	df015a17 	ldw	fp,1384(sp)
   81468:	ddc15917 	ldw	r23,1380(sp)
   8146c:	dd815817 	ldw	r22,1376(sp)
   81470:	dd415717 	ldw	r21,1372(sp)
   81474:	dd015617 	ldw	r20,1368(sp)
   81478:	dcc15517 	ldw	r19,1364(sp)
   8147c:	dc815417 	ldw	r18,1360(sp)
   81480:	dc415317 	ldw	r17,1356(sp)
   81484:	dc015217 	ldw	r16,1352(sp)
   81488:	dec15c04 	addi	sp,sp,1392
   8148c:	f800283a 	ret
   81490:	0005883a 	mov	r2,zero
   81494:	0007883a 	mov	r3,zero
   81498:	dd401904 	addi	r21,sp,100
   8149c:	d8814215 	stw	r2,1288(sp)
   814a0:	802f883a 	mov	r23,r16
   814a4:	d8c14315 	stw	r3,1292(sp)
   814a8:	d8014b15 	stw	zero,1324(sp)
   814ac:	d8014815 	stw	zero,1312(sp)
   814b0:	d8014415 	stw	zero,1296(sp)
   814b4:	d8014715 	stw	zero,1308(sp)
   814b8:	dd400c15 	stw	r21,48(sp)
   814bc:	d8000e15 	stw	zero,56(sp)
   814c0:	d8000d15 	stw	zero,52(sp)
   814c4:	b8800007 	ldb	r2,0(r23)
   814c8:	10001926 	beq	r2,zero,81530 <___vfprintf_internal_r+0x1dc>
   814cc:	00c00944 	movi	r3,37
   814d0:	10c01726 	beq	r2,r3,81530 <___vfprintf_internal_r+0x1dc>
   814d4:	b821883a 	mov	r16,r23
   814d8:	00000106 	br	814e0 <___vfprintf_internal_r+0x18c>
   814dc:	10c00326 	beq	r2,r3,814ec <___vfprintf_internal_r+0x198>
   814e0:	84000044 	addi	r16,r16,1
   814e4:	80800007 	ldb	r2,0(r16)
   814e8:	103ffc1e 	bne	r2,zero,814dc <___vfprintf_internal_r+0x188>
   814ec:	85e7c83a 	sub	r19,r16,r23
   814f0:	98000e26 	beq	r19,zero,8152c <___vfprintf_internal_r+0x1d8>
   814f4:	dc800e17 	ldw	r18,56(sp)
   814f8:	dc400d17 	ldw	r17,52(sp)
   814fc:	008001c4 	movi	r2,7
   81500:	94e5883a 	add	r18,r18,r19
   81504:	8c400044 	addi	r17,r17,1
   81508:	adc00015 	stw	r23,0(r21)
   8150c:	dc800e15 	stw	r18,56(sp)
   81510:	acc00115 	stw	r19,4(r21)
   81514:	dc400d15 	stw	r17,52(sp)
   81518:	14428b16 	blt	r2,r17,81f48 <___vfprintf_internal_r+0xbf4>
   8151c:	ad400204 	addi	r21,r21,8
   81520:	d9014b17 	ldw	r4,1324(sp)
   81524:	24c9883a 	add	r4,r4,r19
   81528:	d9014b15 	stw	r4,1324(sp)
   8152c:	802f883a 	mov	r23,r16
   81530:	b8800007 	ldb	r2,0(r23)
   81534:	10013c26 	beq	r2,zero,81a28 <___vfprintf_internal_r+0x6d4>
   81538:	bdc00044 	addi	r23,r23,1
   8153c:	d8000405 	stb	zero,16(sp)
   81540:	b8c00007 	ldb	r3,0(r23)
   81544:	04ffffc4 	movi	r19,-1
   81548:	d8014c15 	stw	zero,1328(sp)
   8154c:	d8014a15 	stw	zero,1320(sp)
   81550:	d8c14d15 	stw	r3,1332(sp)
   81554:	bdc00044 	addi	r23,r23,1
   81558:	d9414d17 	ldw	r5,1332(sp)
   8155c:	00801604 	movi	r2,88
   81560:	28fff804 	addi	r3,r5,-32
   81564:	10c06036 	bltu	r2,r3,816e8 <___vfprintf_internal_r+0x394>
   81568:	18c5883a 	add	r2,r3,r3
   8156c:	1085883a 	add	r2,r2,r2
   81570:	00c00234 	movhi	r3,8
   81574:	18c56104 	addi	r3,r3,5508
   81578:	10c5883a 	add	r2,r2,r3
   8157c:	11000017 	ldw	r4,0(r2)
   81580:	2000683a 	jmp	r4
   81584:	000824f8 	rdprs	zero,zero,8339
   81588:	000816e8 	cmpgeui	zero,zero,8283
   8158c:	000816e8 	cmpgeui	zero,zero,8283
   81590:	000824e4 	muli	zero,zero,8339
   81594:	000816e8 	cmpgeui	zero,zero,8283
   81598:	000816e8 	cmpgeui	zero,zero,8283
   8159c:	000816e8 	cmpgeui	zero,zero,8283
   815a0:	000816e8 	cmpgeui	zero,zero,8283
   815a4:	000816e8 	cmpgeui	zero,zero,8283
   815a8:	000816e8 	cmpgeui	zero,zero,8283
   815ac:	000822c4 	movi	zero,8331
   815b0:	000824d4 	movui	zero,8339
   815b4:	000816e8 	cmpgeui	zero,zero,8283
   815b8:	000822dc 	xori	zero,zero,8331
   815bc:	0008257c 	xorhi	zero,zero,8341
   815c0:	000816e8 	cmpgeui	zero,zero,8283
   815c4:	00082568 	cmpgeui	zero,zero,8341
   815c8:	00082524 	muli	zero,zero,8340
   815cc:	00082524 	muli	zero,zero,8340
   815d0:	00082524 	muli	zero,zero,8340
   815d4:	00082524 	muli	zero,zero,8340
   815d8:	00082524 	muli	zero,zero,8340
   815dc:	00082524 	muli	zero,zero,8340
   815e0:	00082524 	muli	zero,zero,8340
   815e4:	00082524 	muli	zero,zero,8340
   815e8:	00082524 	muli	zero,zero,8340
   815ec:	000816e8 	cmpgeui	zero,zero,8283
   815f0:	000816e8 	cmpgeui	zero,zero,8283
   815f4:	000816e8 	cmpgeui	zero,zero,8283
   815f8:	000816e8 	cmpgeui	zero,zero,8283
   815fc:	000816e8 	cmpgeui	zero,zero,8283
   81600:	000816e8 	cmpgeui	zero,zero,8283
   81604:	000816e8 	cmpgeui	zero,zero,8283
   81608:	000816e8 	cmpgeui	zero,zero,8283
   8160c:	000816e8 	cmpgeui	zero,zero,8283
   81610:	000816e8 	cmpgeui	zero,zero,8283
   81614:	00081d40 	call	81d4 <OSCtxSw_SWITCH_PC+0x8194>
   81618:	000823ac 	andhi	zero,zero,8334
   8161c:	000816e8 	cmpgeui	zero,zero,8283
   81620:	000823ac 	andhi	zero,zero,8334
   81624:	000816e8 	cmpgeui	zero,zero,8283
   81628:	000816e8 	cmpgeui	zero,zero,8283
   8162c:	000816e8 	cmpgeui	zero,zero,8283
   81630:	000816e8 	cmpgeui	zero,zero,8283
   81634:	00082510 	cmplti	zero,zero,8340
   81638:	000816e8 	cmpgeui	zero,zero,8283
   8163c:	000816e8 	cmpgeui	zero,zero,8283
   81640:	00081df4 	movhi	zero,8311
   81644:	000816e8 	cmpgeui	zero,zero,8283
   81648:	000816e8 	cmpgeui	zero,zero,8283
   8164c:	000816e8 	cmpgeui	zero,zero,8283
   81650:	000816e8 	cmpgeui	zero,zero,8283
   81654:	000816e8 	cmpgeui	zero,zero,8283
   81658:	00081e40 	call	81e4 <OSCtxSw_SWITCH_PC+0x81a4>
   8165c:	000816e8 	cmpgeui	zero,zero,8283
   81660:	000816e8 	cmpgeui	zero,zero,8283
   81664:	00082460 	cmpeqi	zero,zero,8337
   81668:	000816e8 	cmpgeui	zero,zero,8283
   8166c:	000816e8 	cmpgeui	zero,zero,8283
   81670:	000816e8 	cmpgeui	zero,zero,8283
   81674:	000816e8 	cmpgeui	zero,zero,8283
   81678:	000816e8 	cmpgeui	zero,zero,8283
   8167c:	000816e8 	cmpgeui	zero,zero,8283
   81680:	000816e8 	cmpgeui	zero,zero,8283
   81684:	000816e8 	cmpgeui	zero,zero,8283
   81688:	000816e8 	cmpgeui	zero,zero,8283
   8168c:	000816e8 	cmpgeui	zero,zero,8283
   81690:	00082434 	movhi	zero,8336
   81694:	00081d4c 	andi	zero,zero,8309
   81698:	000823ac 	andhi	zero,zero,8334
   8169c:	000823ac 	andhi	zero,zero,8334
   816a0:	000823ac 	andhi	zero,zero,8334
   816a4:	00082398 	cmpnei	zero,zero,8334
   816a8:	00081d4c 	andi	zero,zero,8309
   816ac:	000816e8 	cmpgeui	zero,zero,8283
   816b0:	000816e8 	cmpgeui	zero,zero,8283
   816b4:	00082320 	cmpeqi	zero,zero,8332
   816b8:	000816e8 	cmpgeui	zero,zero,8283
   816bc:	000822f0 	cmpltui	zero,zero,8331
   816c0:	00081e00 	call	81e0 <OSCtxSw_SWITCH_PC+0x81a0>
   816c4:	00082350 	cmplti	zero,zero,8333
   816c8:	0008233c 	xorhi	zero,zero,8332
   816cc:	000816e8 	cmpgeui	zero,zero,8283
   816d0:	000825e4 	muli	zero,zero,8343
   816d4:	000816e8 	cmpgeui	zero,zero,8283
   816d8:	00081e4c 	andi	zero,zero,8313
   816dc:	000816e8 	cmpgeui	zero,zero,8283
   816e0:	000816e8 	cmpgeui	zero,zero,8283
   816e4:	000824c4 	movi	zero,8339
   816e8:	d9014d17 	ldw	r4,1332(sp)
   816ec:	2000ce26 	beq	r4,zero,81a28 <___vfprintf_internal_r+0x6d4>
   816f0:	01400044 	movi	r5,1
   816f4:	d9800f04 	addi	r6,sp,60
   816f8:	d9c14015 	stw	r7,1280(sp)
   816fc:	d9414515 	stw	r5,1300(sp)
   81700:	d9814115 	stw	r6,1284(sp)
   81704:	280f883a 	mov	r7,r5
   81708:	d9000f05 	stb	r4,60(sp)
   8170c:	d8000405 	stb	zero,16(sp)
   81710:	d8014615 	stw	zero,1304(sp)
   81714:	d8c14c17 	ldw	r3,1328(sp)
   81718:	1880008c 	andi	r2,r3,2
   8171c:	1005003a 	cmpeq	r2,r2,zero
   81720:	d8815015 	stw	r2,1344(sp)
   81724:	1000031e 	bne	r2,zero,81734 <___vfprintf_internal_r+0x3e0>
   81728:	d9014517 	ldw	r4,1300(sp)
   8172c:	21000084 	addi	r4,r4,2
   81730:	d9014515 	stw	r4,1300(sp)
   81734:	d9414c17 	ldw	r5,1328(sp)
   81738:	2940210c 	andi	r5,r5,132
   8173c:	d9414e15 	stw	r5,1336(sp)
   81740:	28002d1e 	bne	r5,zero,817f8 <___vfprintf_internal_r+0x4a4>
   81744:	d9814a17 	ldw	r6,1320(sp)
   81748:	d8814517 	ldw	r2,1300(sp)
   8174c:	30a1c83a 	sub	r16,r6,r2
   81750:	0400290e 	bge	zero,r16,817f8 <___vfprintf_internal_r+0x4a4>
   81754:	00800404 	movi	r2,16
   81758:	14045e0e 	bge	r2,r16,828d4 <___vfprintf_internal_r+0x1580>
   8175c:	dc800e17 	ldw	r18,56(sp)
   81760:	dc400d17 	ldw	r17,52(sp)
   81764:	1027883a 	mov	r19,r2
   81768:	07000274 	movhi	fp,9
   8176c:	e71e0484 	addi	fp,fp,30738
   81770:	050001c4 	movi	r20,7
   81774:	00000306 	br	81784 <___vfprintf_internal_r+0x430>
   81778:	843ffc04 	addi	r16,r16,-16
   8177c:	ad400204 	addi	r21,r21,8
   81780:	9c00130e 	bge	r19,r16,817d0 <___vfprintf_internal_r+0x47c>
   81784:	94800404 	addi	r18,r18,16
   81788:	8c400044 	addi	r17,r17,1
   8178c:	af000015 	stw	fp,0(r21)
   81790:	acc00115 	stw	r19,4(r21)
   81794:	dc800e15 	stw	r18,56(sp)
   81798:	dc400d15 	stw	r17,52(sp)
   8179c:	a47ff60e 	bge	r20,r17,81778 <___vfprintf_internal_r+0x424>
   817a0:	d9014f17 	ldw	r4,1340(sp)
   817a4:	b00b883a 	mov	r5,r22
   817a8:	d9800c04 	addi	r6,sp,48
   817ac:	d9c15115 	stw	r7,1348(sp)
   817b0:	00812fc0 	call	812fc <__sprint_r>
   817b4:	d9c15117 	ldw	r7,1348(sp)
   817b8:	10009e1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   817bc:	843ffc04 	addi	r16,r16,-16
   817c0:	dc800e17 	ldw	r18,56(sp)
   817c4:	dc400d17 	ldw	r17,52(sp)
   817c8:	dd401904 	addi	r21,sp,100
   817cc:	9c3fed16 	blt	r19,r16,81784 <___vfprintf_internal_r+0x430>
   817d0:	9425883a 	add	r18,r18,r16
   817d4:	8c400044 	addi	r17,r17,1
   817d8:	008001c4 	movi	r2,7
   817dc:	af000015 	stw	fp,0(r21)
   817e0:	ac000115 	stw	r16,4(r21)
   817e4:	dc800e15 	stw	r18,56(sp)
   817e8:	dc400d15 	stw	r17,52(sp)
   817ec:	1441f516 	blt	r2,r17,81fc4 <___vfprintf_internal_r+0xc70>
   817f0:	ad400204 	addi	r21,r21,8
   817f4:	00000206 	br	81800 <___vfprintf_internal_r+0x4ac>
   817f8:	dc800e17 	ldw	r18,56(sp)
   817fc:	dc400d17 	ldw	r17,52(sp)
   81800:	d8800407 	ldb	r2,16(sp)
   81804:	10000b26 	beq	r2,zero,81834 <___vfprintf_internal_r+0x4e0>
   81808:	00800044 	movi	r2,1
   8180c:	94800044 	addi	r18,r18,1
   81810:	8c400044 	addi	r17,r17,1
   81814:	a8800115 	stw	r2,4(r21)
   81818:	d8c00404 	addi	r3,sp,16
   8181c:	008001c4 	movi	r2,7
   81820:	a8c00015 	stw	r3,0(r21)
   81824:	dc800e15 	stw	r18,56(sp)
   81828:	dc400d15 	stw	r17,52(sp)
   8182c:	1441da16 	blt	r2,r17,81f98 <___vfprintf_internal_r+0xc44>
   81830:	ad400204 	addi	r21,r21,8
   81834:	d9015017 	ldw	r4,1344(sp)
   81838:	20000b1e 	bne	r4,zero,81868 <___vfprintf_internal_r+0x514>
   8183c:	d8800444 	addi	r2,sp,17
   81840:	94800084 	addi	r18,r18,2
   81844:	8c400044 	addi	r17,r17,1
   81848:	a8800015 	stw	r2,0(r21)
   8184c:	00c00084 	movi	r3,2
   81850:	008001c4 	movi	r2,7
   81854:	a8c00115 	stw	r3,4(r21)
   81858:	dc800e15 	stw	r18,56(sp)
   8185c:	dc400d15 	stw	r17,52(sp)
   81860:	1441c216 	blt	r2,r17,81f6c <___vfprintf_internal_r+0xc18>
   81864:	ad400204 	addi	r21,r21,8
   81868:	d9414e17 	ldw	r5,1336(sp)
   8186c:	00802004 	movi	r2,128
   81870:	2880b126 	beq	r5,r2,81b38 <___vfprintf_internal_r+0x7e4>
   81874:	d8c14617 	ldw	r3,1304(sp)
   81878:	19e1c83a 	sub	r16,r3,r7
   8187c:	0400260e 	bge	zero,r16,81918 <___vfprintf_internal_r+0x5c4>
   81880:	00800404 	movi	r2,16
   81884:	1403cf0e 	bge	r2,r16,827c4 <___vfprintf_internal_r+0x1470>
   81888:	1027883a 	mov	r19,r2
   8188c:	07000274 	movhi	fp,9
   81890:	e71e0084 	addi	fp,fp,30722
   81894:	050001c4 	movi	r20,7
   81898:	00000306 	br	818a8 <___vfprintf_internal_r+0x554>
   8189c:	843ffc04 	addi	r16,r16,-16
   818a0:	ad400204 	addi	r21,r21,8
   818a4:	9c00130e 	bge	r19,r16,818f4 <___vfprintf_internal_r+0x5a0>
   818a8:	94800404 	addi	r18,r18,16
   818ac:	8c400044 	addi	r17,r17,1
   818b0:	af000015 	stw	fp,0(r21)
   818b4:	acc00115 	stw	r19,4(r21)
   818b8:	dc800e15 	stw	r18,56(sp)
   818bc:	dc400d15 	stw	r17,52(sp)
   818c0:	a47ff60e 	bge	r20,r17,8189c <___vfprintf_internal_r+0x548>
   818c4:	d9014f17 	ldw	r4,1340(sp)
   818c8:	b00b883a 	mov	r5,r22
   818cc:	d9800c04 	addi	r6,sp,48
   818d0:	d9c15115 	stw	r7,1348(sp)
   818d4:	00812fc0 	call	812fc <__sprint_r>
   818d8:	d9c15117 	ldw	r7,1348(sp)
   818dc:	1000551e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   818e0:	843ffc04 	addi	r16,r16,-16
   818e4:	dc800e17 	ldw	r18,56(sp)
   818e8:	dc400d17 	ldw	r17,52(sp)
   818ec:	dd401904 	addi	r21,sp,100
   818f0:	9c3fed16 	blt	r19,r16,818a8 <___vfprintf_internal_r+0x554>
   818f4:	9425883a 	add	r18,r18,r16
   818f8:	8c400044 	addi	r17,r17,1
   818fc:	008001c4 	movi	r2,7
   81900:	af000015 	stw	fp,0(r21)
   81904:	ac000115 	stw	r16,4(r21)
   81908:	dc800e15 	stw	r18,56(sp)
   8190c:	dc400d15 	stw	r17,52(sp)
   81910:	14418216 	blt	r2,r17,81f1c <___vfprintf_internal_r+0xbc8>
   81914:	ad400204 	addi	r21,r21,8
   81918:	d9014c17 	ldw	r4,1328(sp)
   8191c:	2080400c 	andi	r2,r4,256
   81920:	10004a1e 	bne	r2,zero,81a4c <___vfprintf_internal_r+0x6f8>
   81924:	d9414117 	ldw	r5,1284(sp)
   81928:	91e5883a 	add	r18,r18,r7
   8192c:	8c400044 	addi	r17,r17,1
   81930:	008001c4 	movi	r2,7
   81934:	a9400015 	stw	r5,0(r21)
   81938:	a9c00115 	stw	r7,4(r21)
   8193c:	dc800e15 	stw	r18,56(sp)
   81940:	dc400d15 	stw	r17,52(sp)
   81944:	14416716 	blt	r2,r17,81ee4 <___vfprintf_internal_r+0xb90>
   81948:	a8c00204 	addi	r3,r21,8
   8194c:	d9814c17 	ldw	r6,1328(sp)
   81950:	3080010c 	andi	r2,r6,4
   81954:	10002826 	beq	r2,zero,819f8 <___vfprintf_internal_r+0x6a4>
   81958:	d8814a17 	ldw	r2,1320(sp)
   8195c:	d9014517 	ldw	r4,1300(sp)
   81960:	1121c83a 	sub	r16,r2,r4
   81964:	0400240e 	bge	zero,r16,819f8 <___vfprintf_internal_r+0x6a4>
   81968:	00800404 	movi	r2,16
   8196c:	1404550e 	bge	r2,r16,82ac4 <___vfprintf_internal_r+0x1770>
   81970:	dc400d17 	ldw	r17,52(sp)
   81974:	1027883a 	mov	r19,r2
   81978:	07000274 	movhi	fp,9
   8197c:	e71e0484 	addi	fp,fp,30738
   81980:	050001c4 	movi	r20,7
   81984:	00000306 	br	81994 <___vfprintf_internal_r+0x640>
   81988:	843ffc04 	addi	r16,r16,-16
   8198c:	18c00204 	addi	r3,r3,8
   81990:	9c00110e 	bge	r19,r16,819d8 <___vfprintf_internal_r+0x684>
   81994:	94800404 	addi	r18,r18,16
   81998:	8c400044 	addi	r17,r17,1
   8199c:	1f000015 	stw	fp,0(r3)
   819a0:	1cc00115 	stw	r19,4(r3)
   819a4:	dc800e15 	stw	r18,56(sp)
   819a8:	dc400d15 	stw	r17,52(sp)
   819ac:	a47ff60e 	bge	r20,r17,81988 <___vfprintf_internal_r+0x634>
   819b0:	d9014f17 	ldw	r4,1340(sp)
   819b4:	b00b883a 	mov	r5,r22
   819b8:	d9800c04 	addi	r6,sp,48
   819bc:	00812fc0 	call	812fc <__sprint_r>
   819c0:	10001c1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   819c4:	843ffc04 	addi	r16,r16,-16
   819c8:	dc800e17 	ldw	r18,56(sp)
   819cc:	dc400d17 	ldw	r17,52(sp)
   819d0:	d8c01904 	addi	r3,sp,100
   819d4:	9c3fef16 	blt	r19,r16,81994 <___vfprintf_internal_r+0x640>
   819d8:	9425883a 	add	r18,r18,r16
   819dc:	8c400044 	addi	r17,r17,1
   819e0:	008001c4 	movi	r2,7
   819e4:	1f000015 	stw	fp,0(r3)
   819e8:	1c000115 	stw	r16,4(r3)
   819ec:	dc800e15 	stw	r18,56(sp)
   819f0:	dc400d15 	stw	r17,52(sp)
   819f4:	1440cb16 	blt	r2,r17,81d24 <___vfprintf_internal_r+0x9d0>
   819f8:	d8814a17 	ldw	r2,1320(sp)
   819fc:	d9414517 	ldw	r5,1300(sp)
   81a00:	1140010e 	bge	r2,r5,81a08 <___vfprintf_internal_r+0x6b4>
   81a04:	2805883a 	mov	r2,r5
   81a08:	d9814b17 	ldw	r6,1324(sp)
   81a0c:	308d883a 	add	r6,r6,r2
   81a10:	d9814b15 	stw	r6,1324(sp)
   81a14:	90013b1e 	bne	r18,zero,81f04 <___vfprintf_internal_r+0xbb0>
   81a18:	d9c14017 	ldw	r7,1280(sp)
   81a1c:	dd401904 	addi	r21,sp,100
   81a20:	d8000d15 	stw	zero,52(sp)
   81a24:	003ea706 	br	814c4 <___vfprintf_internal_r+0x170>
   81a28:	d8800e17 	ldw	r2,56(sp)
   81a2c:	1005451e 	bne	r2,zero,82f44 <___vfprintf_internal_r+0x1bf0>
   81a30:	d8000d15 	stw	zero,52(sp)
   81a34:	b080030b 	ldhu	r2,12(r22)
   81a38:	1080100c 	andi	r2,r2,64
   81a3c:	103e8726 	beq	r2,zero,8145c <___vfprintf_internal_r+0x108>
   81a40:	00bfffc4 	movi	r2,-1
   81a44:	d8814b15 	stw	r2,1324(sp)
   81a48:	003e8406 	br	8145c <___vfprintf_internal_r+0x108>
   81a4c:	d9814d17 	ldw	r6,1332(sp)
   81a50:	00801944 	movi	r2,101
   81a54:	11806e16 	blt	r2,r6,81c10 <___vfprintf_internal_r+0x8bc>
   81a58:	d9414717 	ldw	r5,1308(sp)
   81a5c:	00c00044 	movi	r3,1
   81a60:	1943490e 	bge	r3,r5,82788 <___vfprintf_internal_r+0x1434>
   81a64:	d8814117 	ldw	r2,1284(sp)
   81a68:	94800044 	addi	r18,r18,1
   81a6c:	8c400044 	addi	r17,r17,1
   81a70:	a8800015 	stw	r2,0(r21)
   81a74:	008001c4 	movi	r2,7
   81a78:	a8c00115 	stw	r3,4(r21)
   81a7c:	dc800e15 	stw	r18,56(sp)
   81a80:	dc400d15 	stw	r17,52(sp)
   81a84:	1441ca16 	blt	r2,r17,821b0 <___vfprintf_internal_r+0xe5c>
   81a88:	a8c00204 	addi	r3,r21,8
   81a8c:	d9014917 	ldw	r4,1316(sp)
   81a90:	00800044 	movi	r2,1
   81a94:	94800044 	addi	r18,r18,1
   81a98:	8c400044 	addi	r17,r17,1
   81a9c:	18800115 	stw	r2,4(r3)
   81aa0:	008001c4 	movi	r2,7
   81aa4:	19000015 	stw	r4,0(r3)
   81aa8:	dc800e15 	stw	r18,56(sp)
   81aac:	dc400d15 	stw	r17,52(sp)
   81ab0:	1441b616 	blt	r2,r17,8218c <___vfprintf_internal_r+0xe38>
   81ab4:	1cc00204 	addi	r19,r3,8
   81ab8:	d9014217 	ldw	r4,1288(sp)
   81abc:	d9414317 	ldw	r5,1292(sp)
   81ac0:	000d883a 	mov	r6,zero
   81ac4:	000f883a 	mov	r7,zero
   81ac8:	0089f2c0 	call	89f2c <__nedf2>
   81acc:	10017426 	beq	r2,zero,820a0 <___vfprintf_internal_r+0xd4c>
   81ad0:	d9414717 	ldw	r5,1308(sp)
   81ad4:	d9814117 	ldw	r6,1284(sp)
   81ad8:	8c400044 	addi	r17,r17,1
   81adc:	2c85883a 	add	r2,r5,r18
   81ae0:	14bfffc4 	addi	r18,r2,-1
   81ae4:	28bfffc4 	addi	r2,r5,-1
   81ae8:	30c00044 	addi	r3,r6,1
   81aec:	98800115 	stw	r2,4(r19)
   81af0:	008001c4 	movi	r2,7
   81af4:	98c00015 	stw	r3,0(r19)
   81af8:	dc800e15 	stw	r18,56(sp)
   81afc:	dc400d15 	stw	r17,52(sp)
   81b00:	14418e16 	blt	r2,r17,8213c <___vfprintf_internal_r+0xde8>
   81b04:	9cc00204 	addi	r19,r19,8
   81b08:	d9414817 	ldw	r5,1312(sp)
   81b0c:	d8800804 	addi	r2,sp,32
   81b10:	8c400044 	addi	r17,r17,1
   81b14:	9165883a 	add	r18,r18,r5
   81b18:	98800015 	stw	r2,0(r19)
   81b1c:	008001c4 	movi	r2,7
   81b20:	99400115 	stw	r5,4(r19)
   81b24:	dc800e15 	stw	r18,56(sp)
   81b28:	dc400d15 	stw	r17,52(sp)
   81b2c:	1440ed16 	blt	r2,r17,81ee4 <___vfprintf_internal_r+0xb90>
   81b30:	98c00204 	addi	r3,r19,8
   81b34:	003f8506 	br	8194c <___vfprintf_internal_r+0x5f8>
   81b38:	d9814a17 	ldw	r6,1320(sp)
   81b3c:	d8814517 	ldw	r2,1300(sp)
   81b40:	30a1c83a 	sub	r16,r6,r2
   81b44:	043f4b0e 	bge	zero,r16,81874 <___vfprintf_internal_r+0x520>
   81b48:	00800404 	movi	r2,16
   81b4c:	14043a0e 	bge	r2,r16,82c38 <___vfprintf_internal_r+0x18e4>
   81b50:	1027883a 	mov	r19,r2
   81b54:	07000274 	movhi	fp,9
   81b58:	e71e0084 	addi	fp,fp,30722
   81b5c:	050001c4 	movi	r20,7
   81b60:	00000306 	br	81b70 <___vfprintf_internal_r+0x81c>
   81b64:	843ffc04 	addi	r16,r16,-16
   81b68:	ad400204 	addi	r21,r21,8
   81b6c:	9c00130e 	bge	r19,r16,81bbc <___vfprintf_internal_r+0x868>
   81b70:	94800404 	addi	r18,r18,16
   81b74:	8c400044 	addi	r17,r17,1
   81b78:	af000015 	stw	fp,0(r21)
   81b7c:	acc00115 	stw	r19,4(r21)
   81b80:	dc800e15 	stw	r18,56(sp)
   81b84:	dc400d15 	stw	r17,52(sp)
   81b88:	a47ff60e 	bge	r20,r17,81b64 <___vfprintf_internal_r+0x810>
   81b8c:	d9014f17 	ldw	r4,1340(sp)
   81b90:	b00b883a 	mov	r5,r22
   81b94:	d9800c04 	addi	r6,sp,48
   81b98:	d9c15115 	stw	r7,1348(sp)
   81b9c:	00812fc0 	call	812fc <__sprint_r>
   81ba0:	d9c15117 	ldw	r7,1348(sp)
   81ba4:	103fa31e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81ba8:	843ffc04 	addi	r16,r16,-16
   81bac:	dc800e17 	ldw	r18,56(sp)
   81bb0:	dc400d17 	ldw	r17,52(sp)
   81bb4:	dd401904 	addi	r21,sp,100
   81bb8:	9c3fed16 	blt	r19,r16,81b70 <___vfprintf_internal_r+0x81c>
   81bbc:	9425883a 	add	r18,r18,r16
   81bc0:	8c400044 	addi	r17,r17,1
   81bc4:	008001c4 	movi	r2,7
   81bc8:	af000015 	stw	fp,0(r21)
   81bcc:	ac000115 	stw	r16,4(r21)
   81bd0:	dc800e15 	stw	r18,56(sp)
   81bd4:	dc400d15 	stw	r17,52(sp)
   81bd8:	14416116 	blt	r2,r17,82160 <___vfprintf_internal_r+0xe0c>
   81bdc:	ad400204 	addi	r21,r21,8
   81be0:	003f2406 	br	81874 <___vfprintf_internal_r+0x520>
   81be4:	d9014f17 	ldw	r4,1340(sp)
   81be8:	0084e080 	call	84e08 <__sinit>
   81bec:	d9c15117 	ldw	r7,1348(sp)
   81bf0:	003def06 	br	813b0 <___vfprintf_internal_r+0x5c>
   81bf4:	d9014f17 	ldw	r4,1340(sp)
   81bf8:	b00b883a 	mov	r5,r22
   81bfc:	d9c15115 	stw	r7,1348(sp)
   81c00:	008323c0 	call	8323c <__swsetup_r>
   81c04:	d9c15117 	ldw	r7,1348(sp)
   81c08:	103dee26 	beq	r2,zero,813c4 <___vfprintf_internal_r+0x70>
   81c0c:	003f8c06 	br	81a40 <___vfprintf_internal_r+0x6ec>
   81c10:	d9014217 	ldw	r4,1288(sp)
   81c14:	d9414317 	ldw	r5,1292(sp)
   81c18:	000d883a 	mov	r6,zero
   81c1c:	000f883a 	mov	r7,zero
   81c20:	0089ea40 	call	89ea4 <__eqdf2>
   81c24:	1000f21e 	bne	r2,zero,81ff0 <___vfprintf_internal_r+0xc9c>
   81c28:	00800274 	movhi	r2,9
   81c2c:	109e0004 	addi	r2,r2,30720
   81c30:	94800044 	addi	r18,r18,1
   81c34:	8c400044 	addi	r17,r17,1
   81c38:	a8800015 	stw	r2,0(r21)
   81c3c:	00c00044 	movi	r3,1
   81c40:	008001c4 	movi	r2,7
   81c44:	a8c00115 	stw	r3,4(r21)
   81c48:	dc800e15 	stw	r18,56(sp)
   81c4c:	dc400d15 	stw	r17,52(sp)
   81c50:	14430016 	blt	r2,r17,82854 <___vfprintf_internal_r+0x1500>
   81c54:	a8c00204 	addi	r3,r21,8
   81c58:	d8800517 	ldw	r2,20(sp)
   81c5c:	d9014717 	ldw	r4,1308(sp)
   81c60:	11015c0e 	bge	r2,r4,821d4 <___vfprintf_internal_r+0xe80>
   81c64:	dc400d17 	ldw	r17,52(sp)
   81c68:	d9814917 	ldw	r6,1316(sp)
   81c6c:	00800044 	movi	r2,1
   81c70:	94800044 	addi	r18,r18,1
   81c74:	8c400044 	addi	r17,r17,1
   81c78:	18800115 	stw	r2,4(r3)
   81c7c:	008001c4 	movi	r2,7
   81c80:	19800015 	stw	r6,0(r3)
   81c84:	dc800e15 	stw	r18,56(sp)
   81c88:	dc400d15 	stw	r17,52(sp)
   81c8c:	14431616 	blt	r2,r17,828e8 <___vfprintf_internal_r+0x1594>
   81c90:	18c00204 	addi	r3,r3,8
   81c94:	d8814717 	ldw	r2,1308(sp)
   81c98:	143fffc4 	addi	r16,r2,-1
   81c9c:	043f2b0e 	bge	zero,r16,8194c <___vfprintf_internal_r+0x5f8>
   81ca0:	00800404 	movi	r2,16
   81ca4:	1402a80e 	bge	r2,r16,82748 <___vfprintf_internal_r+0x13f4>
   81ca8:	dc400d17 	ldw	r17,52(sp)
   81cac:	1027883a 	mov	r19,r2
   81cb0:	07000274 	movhi	fp,9
   81cb4:	e71e0084 	addi	fp,fp,30722
   81cb8:	050001c4 	movi	r20,7
   81cbc:	00000306 	br	81ccc <___vfprintf_internal_r+0x978>
   81cc0:	18c00204 	addi	r3,r3,8
   81cc4:	843ffc04 	addi	r16,r16,-16
   81cc8:	9c02a20e 	bge	r19,r16,82754 <___vfprintf_internal_r+0x1400>
   81ccc:	94800404 	addi	r18,r18,16
   81cd0:	8c400044 	addi	r17,r17,1
   81cd4:	1f000015 	stw	fp,0(r3)
   81cd8:	1cc00115 	stw	r19,4(r3)
   81cdc:	dc800e15 	stw	r18,56(sp)
   81ce0:	dc400d15 	stw	r17,52(sp)
   81ce4:	a47ff60e 	bge	r20,r17,81cc0 <___vfprintf_internal_r+0x96c>
   81ce8:	d9014f17 	ldw	r4,1340(sp)
   81cec:	b00b883a 	mov	r5,r22
   81cf0:	d9800c04 	addi	r6,sp,48
   81cf4:	00812fc0 	call	812fc <__sprint_r>
   81cf8:	103f4e1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81cfc:	dc800e17 	ldw	r18,56(sp)
   81d00:	dc400d17 	ldw	r17,52(sp)
   81d04:	d8c01904 	addi	r3,sp,100
   81d08:	003fee06 	br	81cc4 <___vfprintf_internal_r+0x970>
   81d0c:	d8802c0b 	ldhu	r2,176(sp)
   81d10:	00ffffc4 	movi	r3,-1
   81d14:	d8c14b15 	stw	r3,1324(sp)
   81d18:	1080100c 	andi	r2,r2,64
   81d1c:	103dcc1e 	bne	r2,zero,81450 <___vfprintf_internal_r+0xfc>
   81d20:	003dce06 	br	8145c <___vfprintf_internal_r+0x108>
   81d24:	d9014f17 	ldw	r4,1340(sp)
   81d28:	b00b883a 	mov	r5,r22
   81d2c:	d9800c04 	addi	r6,sp,48
   81d30:	00812fc0 	call	812fc <__sprint_r>
   81d34:	103f3f1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81d38:	dc800e17 	ldw	r18,56(sp)
   81d3c:	003f2e06 	br	819f8 <___vfprintf_internal_r+0x6a4>
   81d40:	d9414c17 	ldw	r5,1328(sp)
   81d44:	29400414 	ori	r5,r5,16
   81d48:	d9414c15 	stw	r5,1328(sp)
   81d4c:	d9814c17 	ldw	r6,1328(sp)
   81d50:	3080080c 	andi	r2,r6,32
   81d54:	10014f1e 	bne	r2,zero,82294 <___vfprintf_internal_r+0xf40>
   81d58:	d8c14c17 	ldw	r3,1328(sp)
   81d5c:	1880040c 	andi	r2,r3,16
   81d60:	1002f01e 	bne	r2,zero,82924 <___vfprintf_internal_r+0x15d0>
   81d64:	d9014c17 	ldw	r4,1328(sp)
   81d68:	2080100c 	andi	r2,r4,64
   81d6c:	1002ed26 	beq	r2,zero,82924 <___vfprintf_internal_r+0x15d0>
   81d70:	3880000f 	ldh	r2,0(r7)
   81d74:	39c00104 	addi	r7,r7,4
   81d78:	d9c14015 	stw	r7,1280(sp)
   81d7c:	1023d7fa 	srai	r17,r2,31
   81d80:	1021883a 	mov	r16,r2
   81d84:	88037816 	blt	r17,zero,82b68 <___vfprintf_internal_r+0x1814>
   81d88:	01000044 	movi	r4,1
   81d8c:	98000416 	blt	r19,zero,81da0 <___vfprintf_internal_r+0xa4c>
   81d90:	d8c14c17 	ldw	r3,1328(sp)
   81d94:	00bfdfc4 	movi	r2,-129
   81d98:	1886703a 	and	r3,r3,r2
   81d9c:	d8c14c15 	stw	r3,1328(sp)
   81da0:	8444b03a 	or	r2,r16,r17
   81da4:	10022c1e 	bne	r2,zero,82658 <___vfprintf_internal_r+0x1304>
   81da8:	98022b1e 	bne	r19,zero,82658 <___vfprintf_internal_r+0x1304>
   81dac:	20803fcc 	andi	r2,r4,255
   81db0:	1002a126 	beq	r2,zero,82838 <___vfprintf_internal_r+0x14e4>
   81db4:	d8c01904 	addi	r3,sp,100
   81db8:	dd000f04 	addi	r20,sp,60
   81dbc:	d8c14115 	stw	r3,1284(sp)
   81dc0:	d8c14117 	ldw	r3,1284(sp)
   81dc4:	dcc14515 	stw	r19,1300(sp)
   81dc8:	a0c5c83a 	sub	r2,r20,r3
   81dcc:	11c00a04 	addi	r7,r2,40
   81dd0:	99c0010e 	bge	r19,r7,81dd8 <___vfprintf_internal_r+0xa84>
   81dd4:	d9c14515 	stw	r7,1300(sp)
   81dd8:	dcc14615 	stw	r19,1304(sp)
   81ddc:	d8800407 	ldb	r2,16(sp)
   81de0:	103e4c26 	beq	r2,zero,81714 <___vfprintf_internal_r+0x3c0>
   81de4:	d8814517 	ldw	r2,1300(sp)
   81de8:	10800044 	addi	r2,r2,1
   81dec:	d8814515 	stw	r2,1300(sp)
   81df0:	003e4806 	br	81714 <___vfprintf_internal_r+0x3c0>
   81df4:	d9814c17 	ldw	r6,1328(sp)
   81df8:	31800414 	ori	r6,r6,16
   81dfc:	d9814c15 	stw	r6,1328(sp)
   81e00:	d8c14c17 	ldw	r3,1328(sp)
   81e04:	1880080c 	andi	r2,r3,32
   81e08:	1001271e 	bne	r2,zero,822a8 <___vfprintf_internal_r+0xf54>
   81e0c:	d9414c17 	ldw	r5,1328(sp)
   81e10:	2880040c 	andi	r2,r5,16
   81e14:	1002bc1e 	bne	r2,zero,82908 <___vfprintf_internal_r+0x15b4>
   81e18:	d9814c17 	ldw	r6,1328(sp)
   81e1c:	3080100c 	andi	r2,r6,64
   81e20:	1002b926 	beq	r2,zero,82908 <___vfprintf_internal_r+0x15b4>
   81e24:	3c00000b 	ldhu	r16,0(r7)
   81e28:	0009883a 	mov	r4,zero
   81e2c:	39c00104 	addi	r7,r7,4
   81e30:	0023883a 	mov	r17,zero
   81e34:	d9c14015 	stw	r7,1280(sp)
   81e38:	d8000405 	stb	zero,16(sp)
   81e3c:	003fd306 	br	81d8c <___vfprintf_internal_r+0xa38>
   81e40:	d9014c17 	ldw	r4,1328(sp)
   81e44:	21000414 	ori	r4,r4,16
   81e48:	d9014c15 	stw	r4,1328(sp)
   81e4c:	d9414c17 	ldw	r5,1328(sp)
   81e50:	2880080c 	andi	r2,r5,32
   81e54:	1001081e 	bne	r2,zero,82278 <___vfprintf_internal_r+0xf24>
   81e58:	d8c14c17 	ldw	r3,1328(sp)
   81e5c:	1880040c 	andi	r2,r3,16
   81e60:	1002b61e 	bne	r2,zero,8293c <___vfprintf_internal_r+0x15e8>
   81e64:	d9014c17 	ldw	r4,1328(sp)
   81e68:	2080100c 	andi	r2,r4,64
   81e6c:	1002b326 	beq	r2,zero,8293c <___vfprintf_internal_r+0x15e8>
   81e70:	3c00000b 	ldhu	r16,0(r7)
   81e74:	01000044 	movi	r4,1
   81e78:	39c00104 	addi	r7,r7,4
   81e7c:	0023883a 	mov	r17,zero
   81e80:	d9c14015 	stw	r7,1280(sp)
   81e84:	d8000405 	stb	zero,16(sp)
   81e88:	003fc006 	br	81d8c <___vfprintf_internal_r+0xa38>
   81e8c:	d9014f17 	ldw	r4,1340(sp)
   81e90:	b00b883a 	mov	r5,r22
   81e94:	d9800c04 	addi	r6,sp,48
   81e98:	00812fc0 	call	812fc <__sprint_r>
   81e9c:	103ee51e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81ea0:	dc800e17 	ldw	r18,56(sp)
   81ea4:	d8c01904 	addi	r3,sp,100
   81ea8:	d9814c17 	ldw	r6,1328(sp)
   81eac:	3080004c 	andi	r2,r6,1
   81eb0:	1005003a 	cmpeq	r2,r2,zero
   81eb4:	103ea51e 	bne	r2,zero,8194c <___vfprintf_internal_r+0x5f8>
   81eb8:	00800044 	movi	r2,1
   81ebc:	dc400d17 	ldw	r17,52(sp)
   81ec0:	18800115 	stw	r2,4(r3)
   81ec4:	d8814917 	ldw	r2,1316(sp)
   81ec8:	94800044 	addi	r18,r18,1
   81ecc:	8c400044 	addi	r17,r17,1
   81ed0:	18800015 	stw	r2,0(r3)
   81ed4:	008001c4 	movi	r2,7
   81ed8:	dc800e15 	stw	r18,56(sp)
   81edc:	dc400d15 	stw	r17,52(sp)
   81ee0:	1442240e 	bge	r2,r17,82774 <___vfprintf_internal_r+0x1420>
   81ee4:	d9014f17 	ldw	r4,1340(sp)
   81ee8:	b00b883a 	mov	r5,r22
   81eec:	d9800c04 	addi	r6,sp,48
   81ef0:	00812fc0 	call	812fc <__sprint_r>
   81ef4:	103ecf1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81ef8:	dc800e17 	ldw	r18,56(sp)
   81efc:	d8c01904 	addi	r3,sp,100
   81f00:	003e9206 	br	8194c <___vfprintf_internal_r+0x5f8>
   81f04:	d9014f17 	ldw	r4,1340(sp)
   81f08:	b00b883a 	mov	r5,r22
   81f0c:	d9800c04 	addi	r6,sp,48
   81f10:	00812fc0 	call	812fc <__sprint_r>
   81f14:	103ec026 	beq	r2,zero,81a18 <___vfprintf_internal_r+0x6c4>
   81f18:	003ec606 	br	81a34 <___vfprintf_internal_r+0x6e0>
   81f1c:	d9014f17 	ldw	r4,1340(sp)
   81f20:	b00b883a 	mov	r5,r22
   81f24:	d9800c04 	addi	r6,sp,48
   81f28:	d9c15115 	stw	r7,1348(sp)
   81f2c:	00812fc0 	call	812fc <__sprint_r>
   81f30:	d9c15117 	ldw	r7,1348(sp)
   81f34:	103ebf1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81f38:	dc800e17 	ldw	r18,56(sp)
   81f3c:	dc400d17 	ldw	r17,52(sp)
   81f40:	dd401904 	addi	r21,sp,100
   81f44:	003e7406 	br	81918 <___vfprintf_internal_r+0x5c4>
   81f48:	d9014f17 	ldw	r4,1340(sp)
   81f4c:	b00b883a 	mov	r5,r22
   81f50:	d9800c04 	addi	r6,sp,48
   81f54:	d9c15115 	stw	r7,1348(sp)
   81f58:	00812fc0 	call	812fc <__sprint_r>
   81f5c:	d9c15117 	ldw	r7,1348(sp)
   81f60:	103eb41e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81f64:	dd401904 	addi	r21,sp,100
   81f68:	003d6d06 	br	81520 <___vfprintf_internal_r+0x1cc>
   81f6c:	d9014f17 	ldw	r4,1340(sp)
   81f70:	b00b883a 	mov	r5,r22
   81f74:	d9800c04 	addi	r6,sp,48
   81f78:	d9c15115 	stw	r7,1348(sp)
   81f7c:	00812fc0 	call	812fc <__sprint_r>
   81f80:	d9c15117 	ldw	r7,1348(sp)
   81f84:	103eab1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81f88:	dc800e17 	ldw	r18,56(sp)
   81f8c:	dc400d17 	ldw	r17,52(sp)
   81f90:	dd401904 	addi	r21,sp,100
   81f94:	003e3406 	br	81868 <___vfprintf_internal_r+0x514>
   81f98:	d9014f17 	ldw	r4,1340(sp)
   81f9c:	b00b883a 	mov	r5,r22
   81fa0:	d9800c04 	addi	r6,sp,48
   81fa4:	d9c15115 	stw	r7,1348(sp)
   81fa8:	00812fc0 	call	812fc <__sprint_r>
   81fac:	d9c15117 	ldw	r7,1348(sp)
   81fb0:	103ea01e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81fb4:	dc800e17 	ldw	r18,56(sp)
   81fb8:	dc400d17 	ldw	r17,52(sp)
   81fbc:	dd401904 	addi	r21,sp,100
   81fc0:	003e1c06 	br	81834 <___vfprintf_internal_r+0x4e0>
   81fc4:	d9014f17 	ldw	r4,1340(sp)
   81fc8:	b00b883a 	mov	r5,r22
   81fcc:	d9800c04 	addi	r6,sp,48
   81fd0:	d9c15115 	stw	r7,1348(sp)
   81fd4:	00812fc0 	call	812fc <__sprint_r>
   81fd8:	d9c15117 	ldw	r7,1348(sp)
   81fdc:	103e951e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   81fe0:	dc800e17 	ldw	r18,56(sp)
   81fe4:	dc400d17 	ldw	r17,52(sp)
   81fe8:	dd401904 	addi	r21,sp,100
   81fec:	003e0406 	br	81800 <___vfprintf_internal_r+0x4ac>
   81ff0:	d9000517 	ldw	r4,20(sp)
   81ff4:	0102580e 	bge	zero,r4,82958 <___vfprintf_internal_r+0x1604>
   81ff8:	d9814717 	ldw	r6,1308(sp)
   81ffc:	21807a16 	blt	r4,r6,821e8 <___vfprintf_internal_r+0xe94>
   82000:	d8814117 	ldw	r2,1284(sp)
   82004:	91a5883a 	add	r18,r18,r6
   82008:	8c400044 	addi	r17,r17,1
   8200c:	a8800015 	stw	r2,0(r21)
   82010:	008001c4 	movi	r2,7
   82014:	a9800115 	stw	r6,4(r21)
   82018:	dc800e15 	stw	r18,56(sp)
   8201c:	dc400d15 	stw	r17,52(sp)
   82020:	1442fc16 	blt	r2,r17,82c14 <___vfprintf_internal_r+0x18c0>
   82024:	a8c00204 	addi	r3,r21,8
   82028:	d9414717 	ldw	r5,1308(sp)
   8202c:	2161c83a 	sub	r16,r4,r5
   82030:	043f9d0e 	bge	zero,r16,81ea8 <___vfprintf_internal_r+0xb54>
   82034:	00800404 	movi	r2,16
   82038:	1402190e 	bge	r2,r16,828a0 <___vfprintf_internal_r+0x154c>
   8203c:	dc400d17 	ldw	r17,52(sp)
   82040:	1027883a 	mov	r19,r2
   82044:	07000274 	movhi	fp,9
   82048:	e71e0084 	addi	fp,fp,30722
   8204c:	050001c4 	movi	r20,7
   82050:	00000306 	br	82060 <___vfprintf_internal_r+0xd0c>
   82054:	18c00204 	addi	r3,r3,8
   82058:	843ffc04 	addi	r16,r16,-16
   8205c:	9c02130e 	bge	r19,r16,828ac <___vfprintf_internal_r+0x1558>
   82060:	94800404 	addi	r18,r18,16
   82064:	8c400044 	addi	r17,r17,1
   82068:	1f000015 	stw	fp,0(r3)
   8206c:	1cc00115 	stw	r19,4(r3)
   82070:	dc800e15 	stw	r18,56(sp)
   82074:	dc400d15 	stw	r17,52(sp)
   82078:	a47ff60e 	bge	r20,r17,82054 <___vfprintf_internal_r+0xd00>
   8207c:	d9014f17 	ldw	r4,1340(sp)
   82080:	b00b883a 	mov	r5,r22
   82084:	d9800c04 	addi	r6,sp,48
   82088:	00812fc0 	call	812fc <__sprint_r>
   8208c:	103e691e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82090:	dc800e17 	ldw	r18,56(sp)
   82094:	dc400d17 	ldw	r17,52(sp)
   82098:	d8c01904 	addi	r3,sp,100
   8209c:	003fee06 	br	82058 <___vfprintf_internal_r+0xd04>
   820a0:	d8814717 	ldw	r2,1308(sp)
   820a4:	143fffc4 	addi	r16,r2,-1
   820a8:	043e970e 	bge	zero,r16,81b08 <___vfprintf_internal_r+0x7b4>
   820ac:	00800404 	movi	r2,16
   820b0:	1400180e 	bge	r2,r16,82114 <___vfprintf_internal_r+0xdc0>
   820b4:	1029883a 	mov	r20,r2
   820b8:	07000274 	movhi	fp,9
   820bc:	e71e0084 	addi	fp,fp,30722
   820c0:	054001c4 	movi	r21,7
   820c4:	00000306 	br	820d4 <___vfprintf_internal_r+0xd80>
   820c8:	9cc00204 	addi	r19,r19,8
   820cc:	843ffc04 	addi	r16,r16,-16
   820d0:	a400120e 	bge	r20,r16,8211c <___vfprintf_internal_r+0xdc8>
   820d4:	94800404 	addi	r18,r18,16
   820d8:	8c400044 	addi	r17,r17,1
   820dc:	9f000015 	stw	fp,0(r19)
   820e0:	9d000115 	stw	r20,4(r19)
   820e4:	dc800e15 	stw	r18,56(sp)
   820e8:	dc400d15 	stw	r17,52(sp)
   820ec:	ac7ff60e 	bge	r21,r17,820c8 <___vfprintf_internal_r+0xd74>
   820f0:	d9014f17 	ldw	r4,1340(sp)
   820f4:	b00b883a 	mov	r5,r22
   820f8:	d9800c04 	addi	r6,sp,48
   820fc:	00812fc0 	call	812fc <__sprint_r>
   82100:	103e4c1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82104:	dc800e17 	ldw	r18,56(sp)
   82108:	dc400d17 	ldw	r17,52(sp)
   8210c:	dcc01904 	addi	r19,sp,100
   82110:	003fee06 	br	820cc <___vfprintf_internal_r+0xd78>
   82114:	07000274 	movhi	fp,9
   82118:	e71e0084 	addi	fp,fp,30722
   8211c:	9425883a 	add	r18,r18,r16
   82120:	8c400044 	addi	r17,r17,1
   82124:	008001c4 	movi	r2,7
   82128:	9f000015 	stw	fp,0(r19)
   8212c:	9c000115 	stw	r16,4(r19)
   82130:	dc800e15 	stw	r18,56(sp)
   82134:	dc400d15 	stw	r17,52(sp)
   82138:	147e720e 	bge	r2,r17,81b04 <___vfprintf_internal_r+0x7b0>
   8213c:	d9014f17 	ldw	r4,1340(sp)
   82140:	b00b883a 	mov	r5,r22
   82144:	d9800c04 	addi	r6,sp,48
   82148:	00812fc0 	call	812fc <__sprint_r>
   8214c:	103e391e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82150:	dc800e17 	ldw	r18,56(sp)
   82154:	dc400d17 	ldw	r17,52(sp)
   82158:	dcc01904 	addi	r19,sp,100
   8215c:	003e6a06 	br	81b08 <___vfprintf_internal_r+0x7b4>
   82160:	d9014f17 	ldw	r4,1340(sp)
   82164:	b00b883a 	mov	r5,r22
   82168:	d9800c04 	addi	r6,sp,48
   8216c:	d9c15115 	stw	r7,1348(sp)
   82170:	00812fc0 	call	812fc <__sprint_r>
   82174:	d9c15117 	ldw	r7,1348(sp)
   82178:	103e2e1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   8217c:	dc800e17 	ldw	r18,56(sp)
   82180:	dc400d17 	ldw	r17,52(sp)
   82184:	dd401904 	addi	r21,sp,100
   82188:	003dba06 	br	81874 <___vfprintf_internal_r+0x520>
   8218c:	d9014f17 	ldw	r4,1340(sp)
   82190:	b00b883a 	mov	r5,r22
   82194:	d9800c04 	addi	r6,sp,48
   82198:	00812fc0 	call	812fc <__sprint_r>
   8219c:	103e251e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   821a0:	dc800e17 	ldw	r18,56(sp)
   821a4:	dc400d17 	ldw	r17,52(sp)
   821a8:	dcc01904 	addi	r19,sp,100
   821ac:	003e4206 	br	81ab8 <___vfprintf_internal_r+0x764>
   821b0:	d9014f17 	ldw	r4,1340(sp)
   821b4:	b00b883a 	mov	r5,r22
   821b8:	d9800c04 	addi	r6,sp,48
   821bc:	00812fc0 	call	812fc <__sprint_r>
   821c0:	103e1c1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   821c4:	dc800e17 	ldw	r18,56(sp)
   821c8:	dc400d17 	ldw	r17,52(sp)
   821cc:	d8c01904 	addi	r3,sp,100
   821d0:	003e2e06 	br	81a8c <___vfprintf_internal_r+0x738>
   821d4:	d9414c17 	ldw	r5,1328(sp)
   821d8:	2880004c 	andi	r2,r5,1
   821dc:	1005003a 	cmpeq	r2,r2,zero
   821e0:	103dda1e 	bne	r2,zero,8194c <___vfprintf_internal_r+0x5f8>
   821e4:	003e9f06 	br	81c64 <___vfprintf_internal_r+0x910>
   821e8:	d8c14117 	ldw	r3,1284(sp)
   821ec:	9125883a 	add	r18,r18,r4
   821f0:	8c400044 	addi	r17,r17,1
   821f4:	008001c4 	movi	r2,7
   821f8:	a8c00015 	stw	r3,0(r21)
   821fc:	a9000115 	stw	r4,4(r21)
   82200:	dc800e15 	stw	r18,56(sp)
   82204:	dc400d15 	stw	r17,52(sp)
   82208:	14426c16 	blt	r2,r17,82bbc <___vfprintf_internal_r+0x1868>
   8220c:	a8c00204 	addi	r3,r21,8
   82210:	d9414917 	ldw	r5,1316(sp)
   82214:	00800044 	movi	r2,1
   82218:	94800044 	addi	r18,r18,1
   8221c:	8c400044 	addi	r17,r17,1
   82220:	18800115 	stw	r2,4(r3)
   82224:	008001c4 	movi	r2,7
   82228:	19400015 	stw	r5,0(r3)
   8222c:	dc800e15 	stw	r18,56(sp)
   82230:	dc400d15 	stw	r17,52(sp)
   82234:	2021883a 	mov	r16,r4
   82238:	14425616 	blt	r2,r17,82b94 <___vfprintf_internal_r+0x1840>
   8223c:	19400204 	addi	r5,r3,8
   82240:	d9814717 	ldw	r6,1308(sp)
   82244:	8c400044 	addi	r17,r17,1
   82248:	dc400d15 	stw	r17,52(sp)
   8224c:	3107c83a 	sub	r3,r6,r4
   82250:	d9014117 	ldw	r4,1284(sp)
   82254:	90e5883a 	add	r18,r18,r3
   82258:	28c00115 	stw	r3,4(r5)
   8225c:	8105883a 	add	r2,r16,r4
   82260:	28800015 	stw	r2,0(r5)
   82264:	008001c4 	movi	r2,7
   82268:	dc800e15 	stw	r18,56(sp)
   8226c:	147f1d16 	blt	r2,r17,81ee4 <___vfprintf_internal_r+0xb90>
   82270:	28c00204 	addi	r3,r5,8
   82274:	003db506 	br	8194c <___vfprintf_internal_r+0x5f8>
   82278:	3c000017 	ldw	r16,0(r7)
   8227c:	3c400117 	ldw	r17,4(r7)
   82280:	39800204 	addi	r6,r7,8
   82284:	01000044 	movi	r4,1
   82288:	d9814015 	stw	r6,1280(sp)
   8228c:	d8000405 	stb	zero,16(sp)
   82290:	003ebe06 	br	81d8c <___vfprintf_internal_r+0xa38>
   82294:	3c000017 	ldw	r16,0(r7)
   82298:	3c400117 	ldw	r17,4(r7)
   8229c:	38800204 	addi	r2,r7,8
   822a0:	d8814015 	stw	r2,1280(sp)
   822a4:	003eb706 	br	81d84 <___vfprintf_internal_r+0xa30>
   822a8:	3c000017 	ldw	r16,0(r7)
   822ac:	3c400117 	ldw	r17,4(r7)
   822b0:	39000204 	addi	r4,r7,8
   822b4:	d9014015 	stw	r4,1280(sp)
   822b8:	0009883a 	mov	r4,zero
   822bc:	d8000405 	stb	zero,16(sp)
   822c0:	003eb206 	br	81d8c <___vfprintf_internal_r+0xa38>
   822c4:	38c00017 	ldw	r3,0(r7)
   822c8:	39c00104 	addi	r7,r7,4
   822cc:	d8c14a15 	stw	r3,1320(sp)
   822d0:	1800d70e 	bge	r3,zero,82630 <___vfprintf_internal_r+0x12dc>
   822d4:	00c7c83a 	sub	r3,zero,r3
   822d8:	d8c14a15 	stw	r3,1320(sp)
   822dc:	d9014c17 	ldw	r4,1328(sp)
   822e0:	b8c00007 	ldb	r3,0(r23)
   822e4:	21000114 	ori	r4,r4,4
   822e8:	d9014c15 	stw	r4,1328(sp)
   822ec:	003c9806 	br	81550 <___vfprintf_internal_r+0x1fc>
   822f0:	d9814c17 	ldw	r6,1328(sp)
   822f4:	3080080c 	andi	r2,r6,32
   822f8:	1001f626 	beq	r2,zero,82ad4 <___vfprintf_internal_r+0x1780>
   822fc:	d9014b17 	ldw	r4,1324(sp)
   82300:	38800017 	ldw	r2,0(r7)
   82304:	39c00104 	addi	r7,r7,4
   82308:	d9c14015 	stw	r7,1280(sp)
   8230c:	2007d7fa 	srai	r3,r4,31
   82310:	d9c14017 	ldw	r7,1280(sp)
   82314:	11000015 	stw	r4,0(r2)
   82318:	10c00115 	stw	r3,4(r2)
   8231c:	003c6906 	br	814c4 <___vfprintf_internal_r+0x170>
   82320:	b8c00007 	ldb	r3,0(r23)
   82324:	00801b04 	movi	r2,108
   82328:	18825526 	beq	r3,r2,82c80 <___vfprintf_internal_r+0x192c>
   8232c:	d9414c17 	ldw	r5,1328(sp)
   82330:	29400414 	ori	r5,r5,16
   82334:	d9414c15 	stw	r5,1328(sp)
   82338:	003c8506 	br	81550 <___vfprintf_internal_r+0x1fc>
   8233c:	d9814c17 	ldw	r6,1328(sp)
   82340:	b8c00007 	ldb	r3,0(r23)
   82344:	31800814 	ori	r6,r6,32
   82348:	d9814c15 	stw	r6,1328(sp)
   8234c:	003c8006 	br	81550 <___vfprintf_internal_r+0x1fc>
   82350:	d8814c17 	ldw	r2,1328(sp)
   82354:	3c000017 	ldw	r16,0(r7)
   82358:	00c01e04 	movi	r3,120
   8235c:	10800094 	ori	r2,r2,2
   82360:	d8814c15 	stw	r2,1328(sp)
   82364:	39c00104 	addi	r7,r7,4
   82368:	01400274 	movhi	r5,9
   8236c:	295de904 	addi	r5,r5,30628
   82370:	00800c04 	movi	r2,48
   82374:	0023883a 	mov	r17,zero
   82378:	01000084 	movi	r4,2
   8237c:	d9c14015 	stw	r7,1280(sp)
   82380:	d8c14d15 	stw	r3,1332(sp)
   82384:	d9414415 	stw	r5,1296(sp)
   82388:	d8800445 	stb	r2,17(sp)
   8238c:	d8c00485 	stb	r3,18(sp)
   82390:	d8000405 	stb	zero,16(sp)
   82394:	003e7d06 	br	81d8c <___vfprintf_internal_r+0xa38>
   82398:	d8814c17 	ldw	r2,1328(sp)
   8239c:	b8c00007 	ldb	r3,0(r23)
   823a0:	10801014 	ori	r2,r2,64
   823a4:	d8814c15 	stw	r2,1328(sp)
   823a8:	003c6906 	br	81550 <___vfprintf_internal_r+0x1fc>
   823ac:	d9414c17 	ldw	r5,1328(sp)
   823b0:	2880020c 	andi	r2,r5,8
   823b4:	1001e526 	beq	r2,zero,82b4c <___vfprintf_internal_r+0x17f8>
   823b8:	39800017 	ldw	r6,0(r7)
   823bc:	38800204 	addi	r2,r7,8
   823c0:	d8814015 	stw	r2,1280(sp)
   823c4:	d9814215 	stw	r6,1288(sp)
   823c8:	39c00117 	ldw	r7,4(r7)
   823cc:	d9c14315 	stw	r7,1292(sp)
   823d0:	d9014217 	ldw	r4,1288(sp)
   823d4:	d9414317 	ldw	r5,1292(sp)
   823d8:	0087e040 	call	87e04 <__isinfd>
   823dc:	10021d26 	beq	r2,zero,82c54 <___vfprintf_internal_r+0x1900>
   823e0:	d9014217 	ldw	r4,1288(sp)
   823e4:	d9414317 	ldw	r5,1292(sp)
   823e8:	000d883a 	mov	r6,zero
   823ec:	000f883a 	mov	r7,zero
   823f0:	008a0c40 	call	8a0c4 <__ltdf2>
   823f4:	1002d016 	blt	r2,zero,82f38 <___vfprintf_internal_r+0x1be4>
   823f8:	d9414d17 	ldw	r5,1332(sp)
   823fc:	008011c4 	movi	r2,71
   82400:	11421016 	blt	r2,r5,82c44 <___vfprintf_internal_r+0x18f0>
   82404:	01800274 	movhi	r6,9
   82408:	319dee04 	addi	r6,r6,30648
   8240c:	d9814115 	stw	r6,1284(sp)
   82410:	d9014c17 	ldw	r4,1328(sp)
   82414:	00c000c4 	movi	r3,3
   82418:	00bfdfc4 	movi	r2,-129
   8241c:	2088703a 	and	r4,r4,r2
   82420:	180f883a 	mov	r7,r3
   82424:	d8c14515 	stw	r3,1300(sp)
   82428:	d9014c15 	stw	r4,1328(sp)
   8242c:	d8014615 	stw	zero,1304(sp)
   82430:	003e6a06 	br	81ddc <___vfprintf_internal_r+0xa88>
   82434:	38800017 	ldw	r2,0(r7)
   82438:	00c00044 	movi	r3,1
   8243c:	39c00104 	addi	r7,r7,4
   82440:	d9c14015 	stw	r7,1280(sp)
   82444:	d9000f04 	addi	r4,sp,60
   82448:	180f883a 	mov	r7,r3
   8244c:	d8c14515 	stw	r3,1300(sp)
   82450:	d9014115 	stw	r4,1284(sp)
   82454:	d8800f05 	stb	r2,60(sp)
   82458:	d8000405 	stb	zero,16(sp)
   8245c:	003cac06 	br	81710 <___vfprintf_internal_r+0x3bc>
   82460:	01400274 	movhi	r5,9
   82464:	295df404 	addi	r5,r5,30672
   82468:	d9414415 	stw	r5,1296(sp)
   8246c:	d9814c17 	ldw	r6,1328(sp)
   82470:	3080080c 	andi	r2,r6,32
   82474:	1000ff26 	beq	r2,zero,82874 <___vfprintf_internal_r+0x1520>
   82478:	3c000017 	ldw	r16,0(r7)
   8247c:	3c400117 	ldw	r17,4(r7)
   82480:	38800204 	addi	r2,r7,8
   82484:	d8814015 	stw	r2,1280(sp)
   82488:	d9414c17 	ldw	r5,1328(sp)
   8248c:	2880004c 	andi	r2,r5,1
   82490:	1005003a 	cmpeq	r2,r2,zero
   82494:	1000b91e 	bne	r2,zero,8277c <___vfprintf_internal_r+0x1428>
   82498:	8444b03a 	or	r2,r16,r17
   8249c:	1000b726 	beq	r2,zero,8277c <___vfprintf_internal_r+0x1428>
   824a0:	d9814d17 	ldw	r6,1332(sp)
   824a4:	29400094 	ori	r5,r5,2
   824a8:	00800c04 	movi	r2,48
   824ac:	01000084 	movi	r4,2
   824b0:	d9414c15 	stw	r5,1328(sp)
   824b4:	d8800445 	stb	r2,17(sp)
   824b8:	d9800485 	stb	r6,18(sp)
   824bc:	d8000405 	stb	zero,16(sp)
   824c0:	003e3206 	br	81d8c <___vfprintf_internal_r+0xa38>
   824c4:	01800274 	movhi	r6,9
   824c8:	319de904 	addi	r6,r6,30628
   824cc:	d9814415 	stw	r6,1296(sp)
   824d0:	003fe606 	br	8246c <___vfprintf_internal_r+0x1118>
   824d4:	00800ac4 	movi	r2,43
   824d8:	d8800405 	stb	r2,16(sp)
   824dc:	b8c00007 	ldb	r3,0(r23)
   824e0:	003c1b06 	br	81550 <___vfprintf_internal_r+0x1fc>
   824e4:	d8814c17 	ldw	r2,1328(sp)
   824e8:	b8c00007 	ldb	r3,0(r23)
   824ec:	10800054 	ori	r2,r2,1
   824f0:	d8814c15 	stw	r2,1328(sp)
   824f4:	003c1606 	br	81550 <___vfprintf_internal_r+0x1fc>
   824f8:	d8800407 	ldb	r2,16(sp)
   824fc:	10004c1e 	bne	r2,zero,82630 <___vfprintf_internal_r+0x12dc>
   82500:	00800804 	movi	r2,32
   82504:	d8800405 	stb	r2,16(sp)
   82508:	b8c00007 	ldb	r3,0(r23)
   8250c:	003c1006 	br	81550 <___vfprintf_internal_r+0x1fc>
   82510:	d9814c17 	ldw	r6,1328(sp)
   82514:	b8c00007 	ldb	r3,0(r23)
   82518:	31800214 	ori	r6,r6,8
   8251c:	d9814c15 	stw	r6,1328(sp)
   82520:	003c0b06 	br	81550 <___vfprintf_internal_r+0x1fc>
   82524:	0009883a 	mov	r4,zero
   82528:	04000244 	movi	r16,9
   8252c:	01400284 	movi	r5,10
   82530:	d9c15115 	stw	r7,1348(sp)
   82534:	0080f440 	call	80f44 <__mulsi3>
   82538:	b9000007 	ldb	r4,0(r23)
   8253c:	d8c14d17 	ldw	r3,1332(sp)
   82540:	bdc00044 	addi	r23,r23,1
   82544:	d9014d15 	stw	r4,1332(sp)
   82548:	d9414d17 	ldw	r5,1332(sp)
   8254c:	1885883a 	add	r2,r3,r2
   82550:	113ff404 	addi	r4,r2,-48
   82554:	28bff404 	addi	r2,r5,-48
   82558:	d9c15117 	ldw	r7,1348(sp)
   8255c:	80bff32e 	bgeu	r16,r2,8252c <___vfprintf_internal_r+0x11d8>
   82560:	d9014a15 	stw	r4,1320(sp)
   82564:	003bfc06 	br	81558 <___vfprintf_internal_r+0x204>
   82568:	d8814c17 	ldw	r2,1328(sp)
   8256c:	b8c00007 	ldb	r3,0(r23)
   82570:	10802014 	ori	r2,r2,128
   82574:	d8814c15 	stw	r2,1328(sp)
   82578:	003bf506 	br	81550 <___vfprintf_internal_r+0x1fc>
   8257c:	b8c00007 	ldb	r3,0(r23)
   82580:	00800a84 	movi	r2,42
   82584:	bdc00044 	addi	r23,r23,1
   82588:	18831826 	beq	r3,r2,831ec <___vfprintf_internal_r+0x1e98>
   8258c:	d8c14d15 	stw	r3,1332(sp)
   82590:	18bff404 	addi	r2,r3,-48
   82594:	00c00244 	movi	r3,9
   82598:	18827b36 	bltu	r3,r2,82f88 <___vfprintf_internal_r+0x1c34>
   8259c:	1821883a 	mov	r16,r3
   825a0:	0009883a 	mov	r4,zero
   825a4:	01400284 	movi	r5,10
   825a8:	d9c15115 	stw	r7,1348(sp)
   825ac:	0080f440 	call	80f44 <__mulsi3>
   825b0:	d9414d17 	ldw	r5,1332(sp)
   825b4:	b9800007 	ldb	r6,0(r23)
   825b8:	d9c15117 	ldw	r7,1348(sp)
   825bc:	1145883a 	add	r2,r2,r5
   825c0:	113ff404 	addi	r4,r2,-48
   825c4:	30bff404 	addi	r2,r6,-48
   825c8:	d9814d15 	stw	r6,1332(sp)
   825cc:	bdc00044 	addi	r23,r23,1
   825d0:	80bff42e 	bgeu	r16,r2,825a4 <___vfprintf_internal_r+0x1250>
   825d4:	2027883a 	mov	r19,r4
   825d8:	203bdf0e 	bge	r4,zero,81558 <___vfprintf_internal_r+0x204>
   825dc:	04ffffc4 	movi	r19,-1
   825e0:	003bdd06 	br	81558 <___vfprintf_internal_r+0x204>
   825e4:	d8000405 	stb	zero,16(sp)
   825e8:	39800017 	ldw	r6,0(r7)
   825ec:	39c00104 	addi	r7,r7,4
   825f0:	d9c14015 	stw	r7,1280(sp)
   825f4:	d9814115 	stw	r6,1284(sp)
   825f8:	3001c926 	beq	r6,zero,82d20 <___vfprintf_internal_r+0x19cc>
   825fc:	98000e16 	blt	r19,zero,82638 <___vfprintf_internal_r+0x12e4>
   82600:	d9014117 	ldw	r4,1284(sp)
   82604:	000b883a 	mov	r5,zero
   82608:	980d883a 	mov	r6,r19
   8260c:	00864880 	call	86488 <memchr>
   82610:	10025926 	beq	r2,zero,82f78 <___vfprintf_internal_r+0x1c24>
   82614:	d8c14117 	ldw	r3,1284(sp)
   82618:	10cfc83a 	sub	r7,r2,r3
   8261c:	99c19e16 	blt	r19,r7,82c98 <___vfprintf_internal_r+0x1944>
   82620:	d9c14515 	stw	r7,1300(sp)
   82624:	38000916 	blt	r7,zero,8264c <___vfprintf_internal_r+0x12f8>
   82628:	d8014615 	stw	zero,1304(sp)
   8262c:	003deb06 	br	81ddc <___vfprintf_internal_r+0xa88>
   82630:	b8c00007 	ldb	r3,0(r23)
   82634:	003bc606 	br	81550 <___vfprintf_internal_r+0x1fc>
   82638:	d9014117 	ldw	r4,1284(sp)
   8263c:	00812880 	call	81288 <strlen>
   82640:	d8814515 	stw	r2,1300(sp)
   82644:	100f883a 	mov	r7,r2
   82648:	103ff70e 	bge	r2,zero,82628 <___vfprintf_internal_r+0x12d4>
   8264c:	d8014515 	stw	zero,1300(sp)
   82650:	d8014615 	stw	zero,1304(sp)
   82654:	003de106 	br	81ddc <___vfprintf_internal_r+0xa88>
   82658:	20c03fcc 	andi	r3,r4,255
   8265c:	00800044 	movi	r2,1
   82660:	18802d26 	beq	r3,r2,82718 <___vfprintf_internal_r+0x13c4>
   82664:	18800e36 	bltu	r3,r2,826a0 <___vfprintf_internal_r+0x134c>
   82668:	00800084 	movi	r2,2
   8266c:	1880fa26 	beq	r3,r2,82a58 <___vfprintf_internal_r+0x1704>
   82670:	01000274 	movhi	r4,9
   82674:	211df904 	addi	r4,r4,30692
   82678:	00812880 	call	81288 <strlen>
   8267c:	100f883a 	mov	r7,r2
   82680:	dcc14515 	stw	r19,1300(sp)
   82684:	9880010e 	bge	r19,r2,8268c <___vfprintf_internal_r+0x1338>
   82688:	d8814515 	stw	r2,1300(sp)
   8268c:	00800274 	movhi	r2,9
   82690:	109df904 	addi	r2,r2,30692
   82694:	dcc14615 	stw	r19,1304(sp)
   82698:	d8814115 	stw	r2,1284(sp)
   8269c:	003dcf06 	br	81ddc <___vfprintf_internal_r+0xa88>
   826a0:	d9401904 	addi	r5,sp,100
   826a4:	dd000f04 	addi	r20,sp,60
   826a8:	d9414115 	stw	r5,1284(sp)
   826ac:	880a977a 	slli	r5,r17,29
   826b0:	d9814117 	ldw	r6,1284(sp)
   826b4:	8004d0fa 	srli	r2,r16,3
   826b8:	8806d0fa 	srli	r3,r17,3
   826bc:	810001cc 	andi	r4,r16,7
   826c0:	2884b03a 	or	r2,r5,r2
   826c4:	31bfffc4 	addi	r6,r6,-1
   826c8:	21000c04 	addi	r4,r4,48
   826cc:	d9814115 	stw	r6,1284(sp)
   826d0:	10cab03a 	or	r5,r2,r3
   826d4:	31000005 	stb	r4,0(r6)
   826d8:	1021883a 	mov	r16,r2
   826dc:	1823883a 	mov	r17,r3
   826e0:	283ff21e 	bne	r5,zero,826ac <___vfprintf_internal_r+0x1358>
   826e4:	d8c14c17 	ldw	r3,1328(sp)
   826e8:	1880004c 	andi	r2,r3,1
   826ec:	1005003a 	cmpeq	r2,r2,zero
   826f0:	103db31e 	bne	r2,zero,81dc0 <___vfprintf_internal_r+0xa6c>
   826f4:	20803fcc 	andi	r2,r4,255
   826f8:	1080201c 	xori	r2,r2,128
   826fc:	10bfe004 	addi	r2,r2,-128
   82700:	00c00c04 	movi	r3,48
   82704:	10fdae26 	beq	r2,r3,81dc0 <___vfprintf_internal_r+0xa6c>
   82708:	31bfffc4 	addi	r6,r6,-1
   8270c:	d9814115 	stw	r6,1284(sp)
   82710:	30c00005 	stb	r3,0(r6)
   82714:	003daa06 	br	81dc0 <___vfprintf_internal_r+0xa6c>
   82718:	88800068 	cmpgeui	r2,r17,1
   8271c:	10002c1e 	bne	r2,zero,827d0 <___vfprintf_internal_r+0x147c>
   82720:	8800021e 	bne	r17,zero,8272c <___vfprintf_internal_r+0x13d8>
   82724:	00800244 	movi	r2,9
   82728:	14002936 	bltu	r2,r16,827d0 <___vfprintf_internal_r+0x147c>
   8272c:	d90018c4 	addi	r4,sp,99
   82730:	dd000f04 	addi	r20,sp,60
   82734:	d9014115 	stw	r4,1284(sp)
   82738:	d9014117 	ldw	r4,1284(sp)
   8273c:	80800c04 	addi	r2,r16,48
   82740:	20800005 	stb	r2,0(r4)
   82744:	003d9e06 	br	81dc0 <___vfprintf_internal_r+0xa6c>
   82748:	dc400d17 	ldw	r17,52(sp)
   8274c:	07000274 	movhi	fp,9
   82750:	e71e0084 	addi	fp,fp,30722
   82754:	9425883a 	add	r18,r18,r16
   82758:	8c400044 	addi	r17,r17,1
   8275c:	008001c4 	movi	r2,7
   82760:	1f000015 	stw	fp,0(r3)
   82764:	1c000115 	stw	r16,4(r3)
   82768:	dc800e15 	stw	r18,56(sp)
   8276c:	dc400d15 	stw	r17,52(sp)
   82770:	147ddc16 	blt	r2,r17,81ee4 <___vfprintf_internal_r+0xb90>
   82774:	18c00204 	addi	r3,r3,8
   82778:	003c7406 	br	8194c <___vfprintf_internal_r+0x5f8>
   8277c:	01000084 	movi	r4,2
   82780:	d8000405 	stb	zero,16(sp)
   82784:	003d8106 	br	81d8c <___vfprintf_internal_r+0xa38>
   82788:	d9814c17 	ldw	r6,1328(sp)
   8278c:	30c4703a 	and	r2,r6,r3
   82790:	1005003a 	cmpeq	r2,r2,zero
   82794:	103cb326 	beq	r2,zero,81a64 <___vfprintf_internal_r+0x710>
   82798:	d9014117 	ldw	r4,1284(sp)
   8279c:	94800044 	addi	r18,r18,1
   827a0:	8c400044 	addi	r17,r17,1
   827a4:	008001c4 	movi	r2,7
   827a8:	a9000015 	stw	r4,0(r21)
   827ac:	a8c00115 	stw	r3,4(r21)
   827b0:	dc800e15 	stw	r18,56(sp)
   827b4:	dc400d15 	stw	r17,52(sp)
   827b8:	147e6016 	blt	r2,r17,8213c <___vfprintf_internal_r+0xde8>
   827bc:	acc00204 	addi	r19,r21,8
   827c0:	003cd106 	br	81b08 <___vfprintf_internal_r+0x7b4>
   827c4:	07000274 	movhi	fp,9
   827c8:	e71e0084 	addi	fp,fp,30722
   827cc:	003c4906 	br	818f4 <___vfprintf_internal_r+0x5a0>
   827d0:	dd000f04 	addi	r20,sp,60
   827d4:	dc801904 	addi	r18,sp,100
   827d8:	8009883a 	mov	r4,r16
   827dc:	880b883a 	mov	r5,r17
   827e0:	01800284 	movi	r6,10
   827e4:	000f883a 	mov	r7,zero
   827e8:	0088d240 	call	88d24 <__umoddi3>
   827ec:	12000c04 	addi	r8,r2,48
   827f0:	94bfffc4 	addi	r18,r18,-1
   827f4:	8009883a 	mov	r4,r16
   827f8:	880b883a 	mov	r5,r17
   827fc:	01800284 	movi	r6,10
   82800:	000f883a 	mov	r7,zero
   82804:	92000005 	stb	r8,0(r18)
   82808:	00886b80 	call	886b8 <__udivdi3>
   8280c:	1009883a 	mov	r4,r2
   82810:	1021883a 	mov	r16,r2
   82814:	18800068 	cmpgeui	r2,r3,1
   82818:	1823883a 	mov	r17,r3
   8281c:	103fee1e 	bne	r2,zero,827d8 <___vfprintf_internal_r+0x1484>
   82820:	1800021e 	bne	r3,zero,8282c <___vfprintf_internal_r+0x14d8>
   82824:	00800244 	movi	r2,9
   82828:	113feb36 	bltu	r2,r4,827d8 <___vfprintf_internal_r+0x1484>
   8282c:	94bfffc4 	addi	r18,r18,-1
   82830:	dc814115 	stw	r18,1284(sp)
   82834:	003fc006 	br	82738 <___vfprintf_internal_r+0x13e4>
   82838:	d9014c17 	ldw	r4,1328(sp)
   8283c:	2080004c 	andi	r2,r4,1
   82840:	10009a1e 	bne	r2,zero,82aac <___vfprintf_internal_r+0x1758>
   82844:	d9401904 	addi	r5,sp,100
   82848:	dd000f04 	addi	r20,sp,60
   8284c:	d9414115 	stw	r5,1284(sp)
   82850:	003d5b06 	br	81dc0 <___vfprintf_internal_r+0xa6c>
   82854:	d9014f17 	ldw	r4,1340(sp)
   82858:	b00b883a 	mov	r5,r22
   8285c:	d9800c04 	addi	r6,sp,48
   82860:	00812fc0 	call	812fc <__sprint_r>
   82864:	103c731e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82868:	dc800e17 	ldw	r18,56(sp)
   8286c:	d8c01904 	addi	r3,sp,100
   82870:	003cf906 	br	81c58 <___vfprintf_internal_r+0x904>
   82874:	d8c14c17 	ldw	r3,1328(sp)
   82878:	1880040c 	andi	r2,r3,16
   8287c:	1000711e 	bne	r2,zero,82a44 <___vfprintf_internal_r+0x16f0>
   82880:	d9014c17 	ldw	r4,1328(sp)
   82884:	2080100c 	andi	r2,r4,64
   82888:	10006e26 	beq	r2,zero,82a44 <___vfprintf_internal_r+0x16f0>
   8288c:	3c00000b 	ldhu	r16,0(r7)
   82890:	0023883a 	mov	r17,zero
   82894:	39c00104 	addi	r7,r7,4
   82898:	d9c14015 	stw	r7,1280(sp)
   8289c:	003efa06 	br	82488 <___vfprintf_internal_r+0x1134>
   828a0:	dc400d17 	ldw	r17,52(sp)
   828a4:	07000274 	movhi	fp,9
   828a8:	e71e0084 	addi	fp,fp,30722
   828ac:	9425883a 	add	r18,r18,r16
   828b0:	8c400044 	addi	r17,r17,1
   828b4:	008001c4 	movi	r2,7
   828b8:	1f000015 	stw	fp,0(r3)
   828bc:	1c000115 	stw	r16,4(r3)
   828c0:	dc800e15 	stw	r18,56(sp)
   828c4:	dc400d15 	stw	r17,52(sp)
   828c8:	147d7016 	blt	r2,r17,81e8c <___vfprintf_internal_r+0xb38>
   828cc:	18c00204 	addi	r3,r3,8
   828d0:	003d7506 	br	81ea8 <___vfprintf_internal_r+0xb54>
   828d4:	dc800e17 	ldw	r18,56(sp)
   828d8:	dc400d17 	ldw	r17,52(sp)
   828dc:	07000274 	movhi	fp,9
   828e0:	e71e0484 	addi	fp,fp,30738
   828e4:	003bba06 	br	817d0 <___vfprintf_internal_r+0x47c>
   828e8:	d9014f17 	ldw	r4,1340(sp)
   828ec:	b00b883a 	mov	r5,r22
   828f0:	d9800c04 	addi	r6,sp,48
   828f4:	00812fc0 	call	812fc <__sprint_r>
   828f8:	103c4e1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   828fc:	dc800e17 	ldw	r18,56(sp)
   82900:	d8c01904 	addi	r3,sp,100
   82904:	003ce306 	br	81c94 <___vfprintf_internal_r+0x940>
   82908:	3c000017 	ldw	r16,0(r7)
   8290c:	0009883a 	mov	r4,zero
   82910:	39c00104 	addi	r7,r7,4
   82914:	0023883a 	mov	r17,zero
   82918:	d9c14015 	stw	r7,1280(sp)
   8291c:	d8000405 	stb	zero,16(sp)
   82920:	003d1a06 	br	81d8c <___vfprintf_internal_r+0xa38>
   82924:	38800017 	ldw	r2,0(r7)
   82928:	39c00104 	addi	r7,r7,4
   8292c:	d9c14015 	stw	r7,1280(sp)
   82930:	1023d7fa 	srai	r17,r2,31
   82934:	1021883a 	mov	r16,r2
   82938:	003d1206 	br	81d84 <___vfprintf_internal_r+0xa30>
   8293c:	3c000017 	ldw	r16,0(r7)
   82940:	01000044 	movi	r4,1
   82944:	39c00104 	addi	r7,r7,4
   82948:	0023883a 	mov	r17,zero
   8294c:	d9c14015 	stw	r7,1280(sp)
   82950:	d8000405 	stb	zero,16(sp)
   82954:	003d0d06 	br	81d8c <___vfprintf_internal_r+0xa38>
   82958:	00800274 	movhi	r2,9
   8295c:	109e0004 	addi	r2,r2,30720
   82960:	94800044 	addi	r18,r18,1
   82964:	8c400044 	addi	r17,r17,1
   82968:	a8800015 	stw	r2,0(r21)
   8296c:	00c00044 	movi	r3,1
   82970:	008001c4 	movi	r2,7
   82974:	a8c00115 	stw	r3,4(r21)
   82978:	dc800e15 	stw	r18,56(sp)
   8297c:	dc400d15 	stw	r17,52(sp)
   82980:	1440ca16 	blt	r2,r17,82cac <___vfprintf_internal_r+0x1958>
   82984:	a8c00204 	addi	r3,r21,8
   82988:	2000061e 	bne	r4,zero,829a4 <___vfprintf_internal_r+0x1650>
   8298c:	d9414717 	ldw	r5,1308(sp)
   82990:	2800041e 	bne	r5,zero,829a4 <___vfprintf_internal_r+0x1650>
   82994:	d9814c17 	ldw	r6,1328(sp)
   82998:	3080004c 	andi	r2,r6,1
   8299c:	1005003a 	cmpeq	r2,r2,zero
   829a0:	103bea1e 	bne	r2,zero,8194c <___vfprintf_internal_r+0x5f8>
   829a4:	00800044 	movi	r2,1
   829a8:	dc400d17 	ldw	r17,52(sp)
   829ac:	18800115 	stw	r2,4(r3)
   829b0:	d8814917 	ldw	r2,1316(sp)
   829b4:	94800044 	addi	r18,r18,1
   829b8:	8c400044 	addi	r17,r17,1
   829bc:	18800015 	stw	r2,0(r3)
   829c0:	008001c4 	movi	r2,7
   829c4:	dc800e15 	stw	r18,56(sp)
   829c8:	dc400d15 	stw	r17,52(sp)
   829cc:	1440ca16 	blt	r2,r17,82cf8 <___vfprintf_internal_r+0x19a4>
   829d0:	18c00204 	addi	r3,r3,8
   829d4:	0121c83a 	sub	r16,zero,r4
   829d8:	0400500e 	bge	zero,r16,82b1c <___vfprintf_internal_r+0x17c8>
   829dc:	00800404 	movi	r2,16
   829e0:	1400800e 	bge	r2,r16,82be4 <___vfprintf_internal_r+0x1890>
   829e4:	1027883a 	mov	r19,r2
   829e8:	07000274 	movhi	fp,9
   829ec:	e71e0084 	addi	fp,fp,30722
   829f0:	050001c4 	movi	r20,7
   829f4:	00000306 	br	82a04 <___vfprintf_internal_r+0x16b0>
   829f8:	18c00204 	addi	r3,r3,8
   829fc:	843ffc04 	addi	r16,r16,-16
   82a00:	9c007a0e 	bge	r19,r16,82bec <___vfprintf_internal_r+0x1898>
   82a04:	94800404 	addi	r18,r18,16
   82a08:	8c400044 	addi	r17,r17,1
   82a0c:	1f000015 	stw	fp,0(r3)
   82a10:	1cc00115 	stw	r19,4(r3)
   82a14:	dc800e15 	stw	r18,56(sp)
   82a18:	dc400d15 	stw	r17,52(sp)
   82a1c:	a47ff60e 	bge	r20,r17,829f8 <___vfprintf_internal_r+0x16a4>
   82a20:	d9014f17 	ldw	r4,1340(sp)
   82a24:	b00b883a 	mov	r5,r22
   82a28:	d9800c04 	addi	r6,sp,48
   82a2c:	00812fc0 	call	812fc <__sprint_r>
   82a30:	103c001e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82a34:	dc800e17 	ldw	r18,56(sp)
   82a38:	dc400d17 	ldw	r17,52(sp)
   82a3c:	d8c01904 	addi	r3,sp,100
   82a40:	003fee06 	br	829fc <___vfprintf_internal_r+0x16a8>
   82a44:	3c000017 	ldw	r16,0(r7)
   82a48:	0023883a 	mov	r17,zero
   82a4c:	39c00104 	addi	r7,r7,4
   82a50:	d9c14015 	stw	r7,1280(sp)
   82a54:	003e8c06 	br	82488 <___vfprintf_internal_r+0x1134>
   82a58:	d9401904 	addi	r5,sp,100
   82a5c:	dd000f04 	addi	r20,sp,60
   82a60:	d9414115 	stw	r5,1284(sp)
   82a64:	d9814417 	ldw	r6,1296(sp)
   82a68:	880a973a 	slli	r5,r17,28
   82a6c:	8004d13a 	srli	r2,r16,4
   82a70:	810003cc 	andi	r4,r16,15
   82a74:	3109883a 	add	r4,r6,r4
   82a78:	2884b03a 	or	r2,r5,r2
   82a7c:	21400003 	ldbu	r5,0(r4)
   82a80:	d9014117 	ldw	r4,1284(sp)
   82a84:	8806d13a 	srli	r3,r17,4
   82a88:	1021883a 	mov	r16,r2
   82a8c:	213fffc4 	addi	r4,r4,-1
   82a90:	d9014115 	stw	r4,1284(sp)
   82a94:	d9814117 	ldw	r6,1284(sp)
   82a98:	10c8b03a 	or	r4,r2,r3
   82a9c:	1823883a 	mov	r17,r3
   82aa0:	31400005 	stb	r5,0(r6)
   82aa4:	203fef1e 	bne	r4,zero,82a64 <___vfprintf_internal_r+0x1710>
   82aa8:	003cc506 	br	81dc0 <___vfprintf_internal_r+0xa6c>
   82aac:	00800c04 	movi	r2,48
   82ab0:	d98018c4 	addi	r6,sp,99
   82ab4:	dd000f04 	addi	r20,sp,60
   82ab8:	d88018c5 	stb	r2,99(sp)
   82abc:	d9814115 	stw	r6,1284(sp)
   82ac0:	003cbf06 	br	81dc0 <___vfprintf_internal_r+0xa6c>
   82ac4:	dc400d17 	ldw	r17,52(sp)
   82ac8:	07000274 	movhi	fp,9
   82acc:	e71e0484 	addi	fp,fp,30738
   82ad0:	003bc106 	br	819d8 <___vfprintf_internal_r+0x684>
   82ad4:	d9414c17 	ldw	r5,1328(sp)
   82ad8:	2880040c 	andi	r2,r5,16
   82adc:	10007c26 	beq	r2,zero,82cd0 <___vfprintf_internal_r+0x197c>
   82ae0:	38800017 	ldw	r2,0(r7)
   82ae4:	39c00104 	addi	r7,r7,4
   82ae8:	d9c14015 	stw	r7,1280(sp)
   82aec:	d9814b17 	ldw	r6,1324(sp)
   82af0:	d9c14017 	ldw	r7,1280(sp)
   82af4:	11800015 	stw	r6,0(r2)
   82af8:	003a7206 	br	814c4 <___vfprintf_internal_r+0x170>
   82afc:	d9014f17 	ldw	r4,1340(sp)
   82b00:	b00b883a 	mov	r5,r22
   82b04:	d9800c04 	addi	r6,sp,48
   82b08:	00812fc0 	call	812fc <__sprint_r>
   82b0c:	103bc91e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82b10:	dc800e17 	ldw	r18,56(sp)
   82b14:	dc400d17 	ldw	r17,52(sp)
   82b18:	d8c01904 	addi	r3,sp,100
   82b1c:	d9014717 	ldw	r4,1308(sp)
   82b20:	d9414117 	ldw	r5,1284(sp)
   82b24:	8c400044 	addi	r17,r17,1
   82b28:	9125883a 	add	r18,r18,r4
   82b2c:	008001c4 	movi	r2,7
   82b30:	19400015 	stw	r5,0(r3)
   82b34:	19000115 	stw	r4,4(r3)
   82b38:	dc800e15 	stw	r18,56(sp)
   82b3c:	dc400d15 	stw	r17,52(sp)
   82b40:	147ce816 	blt	r2,r17,81ee4 <___vfprintf_internal_r+0xb90>
   82b44:	18c00204 	addi	r3,r3,8
   82b48:	003b8006 	br	8194c <___vfprintf_internal_r+0x5f8>
   82b4c:	38c00017 	ldw	r3,0(r7)
   82b50:	39000204 	addi	r4,r7,8
   82b54:	d9014015 	stw	r4,1280(sp)
   82b58:	d8c14215 	stw	r3,1288(sp)
   82b5c:	39c00117 	ldw	r7,4(r7)
   82b60:	d9c14315 	stw	r7,1292(sp)
   82b64:	003e1a06 	br	823d0 <___vfprintf_internal_r+0x107c>
   82b68:	0005883a 	mov	r2,zero
   82b6c:	1409c83a 	sub	r4,r2,r16
   82b70:	1105803a 	cmpltu	r2,r2,r4
   82b74:	044bc83a 	sub	r5,zero,r17
   82b78:	2885c83a 	sub	r2,r5,r2
   82b7c:	2021883a 	mov	r16,r4
   82b80:	1023883a 	mov	r17,r2
   82b84:	01000044 	movi	r4,1
   82b88:	00800b44 	movi	r2,45
   82b8c:	d8800405 	stb	r2,16(sp)
   82b90:	003c7e06 	br	81d8c <___vfprintf_internal_r+0xa38>
   82b94:	d9014f17 	ldw	r4,1340(sp)
   82b98:	b00b883a 	mov	r5,r22
   82b9c:	d9800c04 	addi	r6,sp,48
   82ba0:	00812fc0 	call	812fc <__sprint_r>
   82ba4:	103ba31e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82ba8:	dc800e17 	ldw	r18,56(sp)
   82bac:	dc400d17 	ldw	r17,52(sp)
   82bb0:	d9000517 	ldw	r4,20(sp)
   82bb4:	d9401904 	addi	r5,sp,100
   82bb8:	003da106 	br	82240 <___vfprintf_internal_r+0xeec>
   82bbc:	d9014f17 	ldw	r4,1340(sp)
   82bc0:	b00b883a 	mov	r5,r22
   82bc4:	d9800c04 	addi	r6,sp,48
   82bc8:	00812fc0 	call	812fc <__sprint_r>
   82bcc:	103b991e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82bd0:	dc800e17 	ldw	r18,56(sp)
   82bd4:	dc400d17 	ldw	r17,52(sp)
   82bd8:	d9000517 	ldw	r4,20(sp)
   82bdc:	d8c01904 	addi	r3,sp,100
   82be0:	003d8b06 	br	82210 <___vfprintf_internal_r+0xebc>
   82be4:	07000274 	movhi	fp,9
   82be8:	e71e0084 	addi	fp,fp,30722
   82bec:	9425883a 	add	r18,r18,r16
   82bf0:	8c400044 	addi	r17,r17,1
   82bf4:	008001c4 	movi	r2,7
   82bf8:	1f000015 	stw	fp,0(r3)
   82bfc:	1c000115 	stw	r16,4(r3)
   82c00:	dc800e15 	stw	r18,56(sp)
   82c04:	dc400d15 	stw	r17,52(sp)
   82c08:	147fbc16 	blt	r2,r17,82afc <___vfprintf_internal_r+0x17a8>
   82c0c:	18c00204 	addi	r3,r3,8
   82c10:	003fc206 	br	82b1c <___vfprintf_internal_r+0x17c8>
   82c14:	d9014f17 	ldw	r4,1340(sp)
   82c18:	b00b883a 	mov	r5,r22
   82c1c:	d9800c04 	addi	r6,sp,48
   82c20:	00812fc0 	call	812fc <__sprint_r>
   82c24:	103b831e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82c28:	dc800e17 	ldw	r18,56(sp)
   82c2c:	d9000517 	ldw	r4,20(sp)
   82c30:	d8c01904 	addi	r3,sp,100
   82c34:	003cfc06 	br	82028 <___vfprintf_internal_r+0xcd4>
   82c38:	07000274 	movhi	fp,9
   82c3c:	e71e0084 	addi	fp,fp,30722
   82c40:	003bde06 	br	81bbc <___vfprintf_internal_r+0x868>
   82c44:	00800274 	movhi	r2,9
   82c48:	109def04 	addi	r2,r2,30652
   82c4c:	d8814115 	stw	r2,1284(sp)
   82c50:	003def06 	br	82410 <___vfprintf_internal_r+0x10bc>
   82c54:	d9014217 	ldw	r4,1288(sp)
   82c58:	d9414317 	ldw	r5,1292(sp)
   82c5c:	0087e440 	call	87e44 <__isnand>
   82c60:	10003926 	beq	r2,zero,82d48 <___vfprintf_internal_r+0x19f4>
   82c64:	d9414d17 	ldw	r5,1332(sp)
   82c68:	008011c4 	movi	r2,71
   82c6c:	1140ce16 	blt	r2,r5,82fa8 <___vfprintf_internal_r+0x1c54>
   82c70:	01800274 	movhi	r6,9
   82c74:	319df004 	addi	r6,r6,30656
   82c78:	d9814115 	stw	r6,1284(sp)
   82c7c:	003de406 	br	82410 <___vfprintf_internal_r+0x10bc>
   82c80:	d9014c17 	ldw	r4,1328(sp)
   82c84:	bdc00044 	addi	r23,r23,1
   82c88:	b8c00007 	ldb	r3,0(r23)
   82c8c:	21000814 	ori	r4,r4,32
   82c90:	d9014c15 	stw	r4,1328(sp)
   82c94:	003a2e06 	br	81550 <___vfprintf_internal_r+0x1fc>
   82c98:	dcc14515 	stw	r19,1300(sp)
   82c9c:	98011016 	blt	r19,zero,830e0 <___vfprintf_internal_r+0x1d8c>
   82ca0:	980f883a 	mov	r7,r19
   82ca4:	d8014615 	stw	zero,1304(sp)
   82ca8:	003c4c06 	br	81ddc <___vfprintf_internal_r+0xa88>
   82cac:	d9014f17 	ldw	r4,1340(sp)
   82cb0:	b00b883a 	mov	r5,r22
   82cb4:	d9800c04 	addi	r6,sp,48
   82cb8:	00812fc0 	call	812fc <__sprint_r>
   82cbc:	103b5d1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82cc0:	dc800e17 	ldw	r18,56(sp)
   82cc4:	d9000517 	ldw	r4,20(sp)
   82cc8:	d8c01904 	addi	r3,sp,100
   82ccc:	003f2e06 	br	82988 <___vfprintf_internal_r+0x1634>
   82cd0:	d8c14c17 	ldw	r3,1328(sp)
   82cd4:	1880100c 	andi	r2,r3,64
   82cd8:	1000a026 	beq	r2,zero,82f5c <___vfprintf_internal_r+0x1c08>
   82cdc:	38800017 	ldw	r2,0(r7)
   82ce0:	39c00104 	addi	r7,r7,4
   82ce4:	d9c14015 	stw	r7,1280(sp)
   82ce8:	d9014b17 	ldw	r4,1324(sp)
   82cec:	d9c14017 	ldw	r7,1280(sp)
   82cf0:	1100000d 	sth	r4,0(r2)
   82cf4:	0039f306 	br	814c4 <___vfprintf_internal_r+0x170>
   82cf8:	d9014f17 	ldw	r4,1340(sp)
   82cfc:	b00b883a 	mov	r5,r22
   82d00:	d9800c04 	addi	r6,sp,48
   82d04:	00812fc0 	call	812fc <__sprint_r>
   82d08:	103b4a1e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82d0c:	dc800e17 	ldw	r18,56(sp)
   82d10:	dc400d17 	ldw	r17,52(sp)
   82d14:	d9000517 	ldw	r4,20(sp)
   82d18:	d8c01904 	addi	r3,sp,100
   82d1c:	003f2d06 	br	829d4 <___vfprintf_internal_r+0x1680>
   82d20:	00800184 	movi	r2,6
   82d24:	14c09a36 	bltu	r2,r19,82f90 <___vfprintf_internal_r+0x1c3c>
   82d28:	dcc14515 	stw	r19,1300(sp)
   82d2c:	9800010e 	bge	r19,zero,82d34 <___vfprintf_internal_r+0x19e0>
   82d30:	d8014515 	stw	zero,1300(sp)
   82d34:	00800274 	movhi	r2,9
   82d38:	109df204 	addi	r2,r2,30664
   82d3c:	980f883a 	mov	r7,r19
   82d40:	d8814115 	stw	r2,1284(sp)
   82d44:	003a7206 	br	81710 <___vfprintf_internal_r+0x3bc>
   82d48:	00bfffc4 	movi	r2,-1
   82d4c:	9880e226 	beq	r19,r2,830d8 <___vfprintf_internal_r+0x1d84>
   82d50:	d9414d17 	ldw	r5,1332(sp)
   82d54:	008019c4 	movi	r2,103
   82d58:	2880dc26 	beq	r5,r2,830cc <___vfprintf_internal_r+0x1d78>
   82d5c:	008011c4 	movi	r2,71
   82d60:	2880da26 	beq	r5,r2,830cc <___vfprintf_internal_r+0x1d78>
   82d64:	d9414c17 	ldw	r5,1328(sp)
   82d68:	d9014317 	ldw	r4,1292(sp)
   82d6c:	d9814217 	ldw	r6,1288(sp)
   82d70:	29404014 	ori	r5,r5,256
   82d74:	d9414c15 	stw	r5,1328(sp)
   82d78:	2000cc16 	blt	r4,zero,830ac <___vfprintf_internal_r+0x1d58>
   82d7c:	3021883a 	mov	r16,r6
   82d80:	2023883a 	mov	r17,r4
   82d84:	0039883a 	mov	fp,zero
   82d88:	d9414d17 	ldw	r5,1332(sp)
   82d8c:	00801984 	movi	r2,102
   82d90:	2880b726 	beq	r5,r2,83070 <___vfprintf_internal_r+0x1d1c>
   82d94:	00801184 	movi	r2,70
   82d98:	2880b526 	beq	r5,r2,83070 <___vfprintf_internal_r+0x1d1c>
   82d9c:	00801944 	movi	r2,101
   82da0:	2880c826 	beq	r5,r2,830c4 <___vfprintf_internal_r+0x1d70>
   82da4:	00801144 	movi	r2,69
   82da8:	2880c626 	beq	r5,r2,830c4 <___vfprintf_internal_r+0x1d70>
   82dac:	9829883a 	mov	r20,r19
   82db0:	d9014f17 	ldw	r4,1340(sp)
   82db4:	d8800504 	addi	r2,sp,20
   82db8:	880d883a 	mov	r6,r17
   82dbc:	d8800115 	stw	r2,4(sp)
   82dc0:	d8c00604 	addi	r3,sp,24
   82dc4:	d8800704 	addi	r2,sp,28
   82dc8:	800b883a 	mov	r5,r16
   82dcc:	01c00084 	movi	r7,2
   82dd0:	d8c00215 	stw	r3,8(sp)
   82dd4:	d8800315 	stw	r2,12(sp)
   82dd8:	dd000015 	stw	r20,0(sp)
   82ddc:	00835bc0 	call	835bc <_dtoa_r>
   82de0:	d9814d17 	ldw	r6,1332(sp)
   82de4:	d8814115 	stw	r2,1284(sp)
   82de8:	008019c4 	movi	r2,103
   82dec:	30809526 	beq	r6,r2,83044 <___vfprintf_internal_r+0x1cf0>
   82df0:	d8c14d17 	ldw	r3,1332(sp)
   82df4:	008011c4 	movi	r2,71
   82df8:	18809226 	beq	r3,r2,83044 <___vfprintf_internal_r+0x1cf0>
   82dfc:	d9414117 	ldw	r5,1284(sp)
   82e00:	d9814d17 	ldw	r6,1332(sp)
   82e04:	00801984 	movi	r2,102
   82e08:	2d25883a 	add	r18,r5,r20
   82e0c:	30808626 	beq	r6,r2,83028 <___vfprintf_internal_r+0x1cd4>
   82e10:	00801184 	movi	r2,70
   82e14:	30808426 	beq	r6,r2,83028 <___vfprintf_internal_r+0x1cd4>
   82e18:	000d883a 	mov	r6,zero
   82e1c:	000f883a 	mov	r7,zero
   82e20:	880b883a 	mov	r5,r17
   82e24:	8009883a 	mov	r4,r16
   82e28:	0089ea40 	call	89ea4 <__eqdf2>
   82e2c:	1000751e 	bne	r2,zero,83004 <___vfprintf_internal_r+0x1cb0>
   82e30:	9005883a 	mov	r2,r18
   82e34:	dc800715 	stw	r18,28(sp)
   82e38:	d9014117 	ldw	r4,1284(sp)
   82e3c:	d9414d17 	ldw	r5,1332(sp)
   82e40:	00c019c4 	movi	r3,103
   82e44:	1125c83a 	sub	r18,r2,r4
   82e48:	28c06826 	beq	r5,r3,82fec <___vfprintf_internal_r+0x1c98>
   82e4c:	008011c4 	movi	r2,71
   82e50:	28806626 	beq	r5,r2,82fec <___vfprintf_internal_r+0x1c98>
   82e54:	d9000517 	ldw	r4,20(sp)
   82e58:	d8c14d17 	ldw	r3,1332(sp)
   82e5c:	00801944 	movi	r2,101
   82e60:	10c05516 	blt	r2,r3,82fb8 <___vfprintf_internal_r+0x1c64>
   82e64:	213fffc4 	addi	r4,r4,-1
   82e68:	d9000515 	stw	r4,20(sp)
   82e6c:	d8c00805 	stb	r3,32(sp)
   82e70:	2021883a 	mov	r16,r4
   82e74:	2000c116 	blt	r4,zero,8317c <___vfprintf_internal_r+0x1e28>
   82e78:	00800ac4 	movi	r2,43
   82e7c:	d8800845 	stb	r2,33(sp)
   82e80:	00800244 	movi	r2,9
   82e84:	1400af0e 	bge	r2,r16,83144 <___vfprintf_internal_r+0x1df0>
   82e88:	1027883a 	mov	r19,r2
   82e8c:	dc400b84 	addi	r17,sp,46
   82e90:	8009883a 	mov	r4,r16
   82e94:	01400284 	movi	r5,10
   82e98:	008a58c0 	call	8a58c <__modsi3>
   82e9c:	10800c04 	addi	r2,r2,48
   82ea0:	8c7fffc4 	addi	r17,r17,-1
   82ea4:	8009883a 	mov	r4,r16
   82ea8:	01400284 	movi	r5,10
   82eac:	88800005 	stb	r2,0(r17)
   82eb0:	008a52c0 	call	8a52c <__divsi3>
   82eb4:	1021883a 	mov	r16,r2
   82eb8:	98bff516 	blt	r19,r2,82e90 <___vfprintf_internal_r+0x1b3c>
   82ebc:	10c00c04 	addi	r3,r2,48
   82ec0:	d88009c4 	addi	r2,sp,39
   82ec4:	108001c4 	addi	r2,r2,7
   82ec8:	897fffc4 	addi	r5,r17,-1
   82ecc:	88ffffc5 	stb	r3,-1(r17)
   82ed0:	2880a72e 	bgeu	r5,r2,83170 <___vfprintf_internal_r+0x1e1c>
   82ed4:	1009883a 	mov	r4,r2
   82ed8:	d9800804 	addi	r6,sp,32
   82edc:	d8c00884 	addi	r3,sp,34
   82ee0:	28800003 	ldbu	r2,0(r5)
   82ee4:	29400044 	addi	r5,r5,1
   82ee8:	18800005 	stb	r2,0(r3)
   82eec:	18c00044 	addi	r3,r3,1
   82ef0:	293ffb36 	bltu	r5,r4,82ee0 <___vfprintf_internal_r+0x1b8c>
   82ef4:	1987c83a 	sub	r3,r3,r6
   82ef8:	00800044 	movi	r2,1
   82efc:	d8c14815 	stw	r3,1312(sp)
   82f00:	90cf883a 	add	r7,r18,r3
   82f04:	1480960e 	bge	r2,r18,83160 <___vfprintf_internal_r+0x1e0c>
   82f08:	39c00044 	addi	r7,r7,1
   82f0c:	d9c14515 	stw	r7,1300(sp)
   82f10:	38003416 	blt	r7,zero,82fe4 <___vfprintf_internal_r+0x1c90>
   82f14:	e0803fcc 	andi	r2,fp,255
   82f18:	1080201c 	xori	r2,r2,128
   82f1c:	10bfe004 	addi	r2,r2,-128
   82f20:	10004e26 	beq	r2,zero,8305c <___vfprintf_internal_r+0x1d08>
   82f24:	00800b44 	movi	r2,45
   82f28:	dc814715 	stw	r18,1308(sp)
   82f2c:	d8014615 	stw	zero,1304(sp)
   82f30:	d8800405 	stb	r2,16(sp)
   82f34:	003bab06 	br	81de4 <___vfprintf_internal_r+0xa90>
   82f38:	00800b44 	movi	r2,45
   82f3c:	d8800405 	stb	r2,16(sp)
   82f40:	003d2d06 	br	823f8 <___vfprintf_internal_r+0x10a4>
   82f44:	d9014f17 	ldw	r4,1340(sp)
   82f48:	b00b883a 	mov	r5,r22
   82f4c:	d9800c04 	addi	r6,sp,48
   82f50:	00812fc0 	call	812fc <__sprint_r>
   82f54:	103ab71e 	bne	r2,zero,81a34 <___vfprintf_internal_r+0x6e0>
   82f58:	003ab506 	br	81a30 <___vfprintf_internal_r+0x6dc>
   82f5c:	38800017 	ldw	r2,0(r7)
   82f60:	39c00104 	addi	r7,r7,4
   82f64:	d9c14015 	stw	r7,1280(sp)
   82f68:	d9414b17 	ldw	r5,1324(sp)
   82f6c:	d9c14017 	ldw	r7,1280(sp)
   82f70:	11400015 	stw	r5,0(r2)
   82f74:	00395306 	br	814c4 <___vfprintf_internal_r+0x170>
   82f78:	980f883a 	mov	r7,r19
   82f7c:	dcc14515 	stw	r19,1300(sp)
   82f80:	d8014615 	stw	zero,1304(sp)
   82f84:	003b9506 	br	81ddc <___vfprintf_internal_r+0xa88>
   82f88:	0027883a 	mov	r19,zero
   82f8c:	00397206 	br	81558 <___vfprintf_internal_r+0x204>
   82f90:	00c00274 	movhi	r3,9
   82f94:	18ddf204 	addi	r3,r3,30664
   82f98:	100f883a 	mov	r7,r2
   82f9c:	d8814515 	stw	r2,1300(sp)
   82fa0:	d8c14115 	stw	r3,1284(sp)
   82fa4:	0039da06 	br	81710 <___vfprintf_internal_r+0x3bc>
   82fa8:	00800274 	movhi	r2,9
   82fac:	109df104 	addi	r2,r2,30660
   82fb0:	d8814115 	stw	r2,1284(sp)
   82fb4:	003d1606 	br	82410 <___vfprintf_internal_r+0x10bc>
   82fb8:	d9414d17 	ldw	r5,1332(sp)
   82fbc:	00801984 	movi	r2,102
   82fc0:	28804926 	beq	r5,r2,830e8 <___vfprintf_internal_r+0x1d94>
   82fc4:	200f883a 	mov	r7,r4
   82fc8:	24805716 	blt	r4,r18,83128 <___vfprintf_internal_r+0x1dd4>
   82fcc:	d9414c17 	ldw	r5,1328(sp)
   82fd0:	2880004c 	andi	r2,r5,1
   82fd4:	10000126 	beq	r2,zero,82fdc <___vfprintf_internal_r+0x1c88>
   82fd8:	21c00044 	addi	r7,r4,1
   82fdc:	d9c14515 	stw	r7,1300(sp)
   82fe0:	383fcc0e 	bge	r7,zero,82f14 <___vfprintf_internal_r+0x1bc0>
   82fe4:	d8014515 	stw	zero,1300(sp)
   82fe8:	003fca06 	br	82f14 <___vfprintf_internal_r+0x1bc0>
   82fec:	d9000517 	ldw	r4,20(sp)
   82ff0:	00bfff04 	movi	r2,-4
   82ff4:	1100480e 	bge	r2,r4,83118 <___vfprintf_internal_r+0x1dc4>
   82ff8:	99004716 	blt	r19,r4,83118 <___vfprintf_internal_r+0x1dc4>
   82ffc:	d8c14d15 	stw	r3,1332(sp)
   83000:	003ff006 	br	82fc4 <___vfprintf_internal_r+0x1c70>
   83004:	d8800717 	ldw	r2,28(sp)
   83008:	14bf8b2e 	bgeu	r2,r18,82e38 <___vfprintf_internal_r+0x1ae4>
   8300c:	9007883a 	mov	r3,r18
   83010:	01000c04 	movi	r4,48
   83014:	11000005 	stb	r4,0(r2)
   83018:	10800044 	addi	r2,r2,1
   8301c:	d8800715 	stw	r2,28(sp)
   83020:	18bffc1e 	bne	r3,r2,83014 <___vfprintf_internal_r+0x1cc0>
   83024:	003f8406 	br	82e38 <___vfprintf_internal_r+0x1ae4>
   83028:	d8814117 	ldw	r2,1284(sp)
   8302c:	10c00007 	ldb	r3,0(r2)
   83030:	00800c04 	movi	r2,48
   83034:	18805b26 	beq	r3,r2,831a4 <___vfprintf_internal_r+0x1e50>
   83038:	d9000517 	ldw	r4,20(sp)
   8303c:	9125883a 	add	r18,r18,r4
   83040:	003f7506 	br	82e18 <___vfprintf_internal_r+0x1ac4>
   83044:	d9014c17 	ldw	r4,1328(sp)
   83048:	2080004c 	andi	r2,r4,1
   8304c:	1005003a 	cmpeq	r2,r2,zero
   83050:	103f6a26 	beq	r2,zero,82dfc <___vfprintf_internal_r+0x1aa8>
   83054:	d8800717 	ldw	r2,28(sp)
   83058:	003f7706 	br	82e38 <___vfprintf_internal_r+0x1ae4>
   8305c:	d9c14515 	stw	r7,1300(sp)
   83060:	38004d16 	blt	r7,zero,83198 <___vfprintf_internal_r+0x1e44>
   83064:	dc814715 	stw	r18,1308(sp)
   83068:	d8014615 	stw	zero,1304(sp)
   8306c:	003b5b06 	br	81ddc <___vfprintf_internal_r+0xa88>
   83070:	d9014f17 	ldw	r4,1340(sp)
   83074:	d8800504 	addi	r2,sp,20
   83078:	d8800115 	stw	r2,4(sp)
   8307c:	d8c00604 	addi	r3,sp,24
   83080:	d8800704 	addi	r2,sp,28
   83084:	800b883a 	mov	r5,r16
   83088:	880d883a 	mov	r6,r17
   8308c:	01c000c4 	movi	r7,3
   83090:	d8c00215 	stw	r3,8(sp)
   83094:	d8800315 	stw	r2,12(sp)
   83098:	dcc00015 	stw	r19,0(sp)
   8309c:	9829883a 	mov	r20,r19
   830a0:	00835bc0 	call	835bc <_dtoa_r>
   830a4:	d8814115 	stw	r2,1284(sp)
   830a8:	003f5106 	br	82df0 <___vfprintf_internal_r+0x1a9c>
   830ac:	d8c14217 	ldw	r3,1288(sp)
   830b0:	d9014317 	ldw	r4,1292(sp)
   830b4:	07000b44 	movi	fp,45
   830b8:	1821883a 	mov	r16,r3
   830bc:	2460003c 	xorhi	r17,r4,32768
   830c0:	003f3106 	br	82d88 <___vfprintf_internal_r+0x1a34>
   830c4:	9d000044 	addi	r20,r19,1
   830c8:	003f3906 	br	82db0 <___vfprintf_internal_r+0x1a5c>
   830cc:	983f251e 	bne	r19,zero,82d64 <___vfprintf_internal_r+0x1a10>
   830d0:	04c00044 	movi	r19,1
   830d4:	003f2306 	br	82d64 <___vfprintf_internal_r+0x1a10>
   830d8:	04c00184 	movi	r19,6
   830dc:	003f2106 	br	82d64 <___vfprintf_internal_r+0x1a10>
   830e0:	d8014515 	stw	zero,1300(sp)
   830e4:	003eee06 	br	82ca0 <___vfprintf_internal_r+0x194c>
   830e8:	200f883a 	mov	r7,r4
   830ec:	0100370e 	bge	zero,r4,831cc <___vfprintf_internal_r+0x1e78>
   830f0:	9800031e 	bne	r19,zero,83100 <___vfprintf_internal_r+0x1dac>
   830f4:	d9814c17 	ldw	r6,1328(sp)
   830f8:	3080004c 	andi	r2,r6,1
   830fc:	103fb726 	beq	r2,zero,82fdc <___vfprintf_internal_r+0x1c88>
   83100:	20800044 	addi	r2,r4,1
   83104:	98a7883a 	add	r19,r19,r2
   83108:	dcc14515 	stw	r19,1300(sp)
   8310c:	980f883a 	mov	r7,r19
   83110:	983f800e 	bge	r19,zero,82f14 <___vfprintf_internal_r+0x1bc0>
   83114:	003fb306 	br	82fe4 <___vfprintf_internal_r+0x1c90>
   83118:	d9814d17 	ldw	r6,1332(sp)
   8311c:	31bfff84 	addi	r6,r6,-2
   83120:	d9814d15 	stw	r6,1332(sp)
   83124:	003f4c06 	br	82e58 <___vfprintf_internal_r+0x1b04>
   83128:	0100180e 	bge	zero,r4,8318c <___vfprintf_internal_r+0x1e38>
   8312c:	00800044 	movi	r2,1
   83130:	1485883a 	add	r2,r2,r18
   83134:	d8814515 	stw	r2,1300(sp)
   83138:	100f883a 	mov	r7,r2
   8313c:	103f750e 	bge	r2,zero,82f14 <___vfprintf_internal_r+0x1bc0>
   83140:	003fa806 	br	82fe4 <___vfprintf_internal_r+0x1c90>
   83144:	80c00c04 	addi	r3,r16,48
   83148:	00800c04 	movi	r2,48
   8314c:	d8c008c5 	stb	r3,35(sp)
   83150:	d9800804 	addi	r6,sp,32
   83154:	d8c00904 	addi	r3,sp,36
   83158:	d8800885 	stb	r2,34(sp)
   8315c:	003f6506 	br	82ef4 <___vfprintf_internal_r+0x1ba0>
   83160:	d9014c17 	ldw	r4,1328(sp)
   83164:	2084703a 	and	r2,r4,r2
   83168:	103f9c26 	beq	r2,zero,82fdc <___vfprintf_internal_r+0x1c88>
   8316c:	003f6606 	br	82f08 <___vfprintf_internal_r+0x1bb4>
   83170:	d9800804 	addi	r6,sp,32
   83174:	d8c00884 	addi	r3,sp,34
   83178:	003f5e06 	br	82ef4 <___vfprintf_internal_r+0x1ba0>
   8317c:	00800b44 	movi	r2,45
   83180:	0121c83a 	sub	r16,zero,r4
   83184:	d8800845 	stb	r2,33(sp)
   83188:	003f3d06 	br	82e80 <___vfprintf_internal_r+0x1b2c>
   8318c:	00800084 	movi	r2,2
   83190:	1105c83a 	sub	r2,r2,r4
   83194:	003fe606 	br	83130 <___vfprintf_internal_r+0x1ddc>
   83198:	d8014515 	stw	zero,1300(sp)
   8319c:	dc814715 	stw	r18,1308(sp)
   831a0:	003fb106 	br	83068 <___vfprintf_internal_r+0x1d14>
   831a4:	000d883a 	mov	r6,zero
   831a8:	000f883a 	mov	r7,zero
   831ac:	8009883a 	mov	r4,r16
   831b0:	880b883a 	mov	r5,r17
   831b4:	0089f2c0 	call	89f2c <__nedf2>
   831b8:	103f9f26 	beq	r2,zero,83038 <___vfprintf_internal_r+0x1ce4>
   831bc:	00800044 	movi	r2,1
   831c0:	1509c83a 	sub	r4,r2,r20
   831c4:	d9000515 	stw	r4,20(sp)
   831c8:	003f9b06 	br	83038 <___vfprintf_internal_r+0x1ce4>
   831cc:	98000d1e 	bne	r19,zero,83204 <___vfprintf_internal_r+0x1eb0>
   831d0:	d8c14c17 	ldw	r3,1328(sp)
   831d4:	1880004c 	andi	r2,r3,1
   831d8:	10000a1e 	bne	r2,zero,83204 <___vfprintf_internal_r+0x1eb0>
   831dc:	01000044 	movi	r4,1
   831e0:	200f883a 	mov	r7,r4
   831e4:	d9014515 	stw	r4,1300(sp)
   831e8:	003f4a06 	br	82f14 <___vfprintf_internal_r+0x1bc0>
   831ec:	3cc00017 	ldw	r19,0(r7)
   831f0:	39c00104 	addi	r7,r7,4
   831f4:	983d0e0e 	bge	r19,zero,82630 <___vfprintf_internal_r+0x12dc>
   831f8:	b8c00007 	ldb	r3,0(r23)
   831fc:	04ffffc4 	movi	r19,-1
   83200:	0038d306 	br	81550 <___vfprintf_internal_r+0x1fc>
   83204:	9cc00084 	addi	r19,r19,2
   83208:	dcc14515 	stw	r19,1300(sp)
   8320c:	980f883a 	mov	r7,r19
   83210:	983f400e 	bge	r19,zero,82f14 <___vfprintf_internal_r+0x1bc0>
   83214:	003f7306 	br	82fe4 <___vfprintf_internal_r+0x1c90>

00083218 <__vfprintf_internal>:
   83218:	008002b4 	movhi	r2,10
   8321c:	10a59d04 	addi	r2,r2,-27020
   83220:	2013883a 	mov	r9,r4
   83224:	11000017 	ldw	r4,0(r2)
   83228:	2805883a 	mov	r2,r5
   8322c:	300f883a 	mov	r7,r6
   83230:	480b883a 	mov	r5,r9
   83234:	100d883a 	mov	r6,r2
   83238:	00813541 	jmpi	81354 <___vfprintf_internal_r>

0008323c <__swsetup_r>:
   8323c:	008002b4 	movhi	r2,10
   83240:	10a59d04 	addi	r2,r2,-27020
   83244:	10c00017 	ldw	r3,0(r2)
   83248:	defffd04 	addi	sp,sp,-12
   8324c:	dc400115 	stw	r17,4(sp)
   83250:	dc000015 	stw	r16,0(sp)
   83254:	dfc00215 	stw	ra,8(sp)
   83258:	2023883a 	mov	r17,r4
   8325c:	2821883a 	mov	r16,r5
   83260:	18000226 	beq	r3,zero,8326c <__swsetup_r+0x30>
   83264:	18800e17 	ldw	r2,56(r3)
   83268:	10001f26 	beq	r2,zero,832e8 <__swsetup_r+0xac>
   8326c:	8100030b 	ldhu	r4,12(r16)
   83270:	2080020c 	andi	r2,r4,8
   83274:	10002826 	beq	r2,zero,83318 <__swsetup_r+0xdc>
   83278:	81400417 	ldw	r5,16(r16)
   8327c:	28001d26 	beq	r5,zero,832f4 <__swsetup_r+0xb8>
   83280:	2080004c 	andi	r2,r4,1
   83284:	1005003a 	cmpeq	r2,r2,zero
   83288:	10000b26 	beq	r2,zero,832b8 <__swsetup_r+0x7c>
   8328c:	2080008c 	andi	r2,r4,2
   83290:	10001226 	beq	r2,zero,832dc <__swsetup_r+0xa0>
   83294:	0005883a 	mov	r2,zero
   83298:	80800215 	stw	r2,8(r16)
   8329c:	28000b26 	beq	r5,zero,832cc <__swsetup_r+0x90>
   832a0:	0005883a 	mov	r2,zero
   832a4:	dfc00217 	ldw	ra,8(sp)
   832a8:	dc400117 	ldw	r17,4(sp)
   832ac:	dc000017 	ldw	r16,0(sp)
   832b0:	dec00304 	addi	sp,sp,12
   832b4:	f800283a 	ret
   832b8:	80800517 	ldw	r2,20(r16)
   832bc:	80000215 	stw	zero,8(r16)
   832c0:	0085c83a 	sub	r2,zero,r2
   832c4:	80800615 	stw	r2,24(r16)
   832c8:	283ff51e 	bne	r5,zero,832a0 <__swsetup_r+0x64>
   832cc:	2080200c 	andi	r2,r4,128
   832d0:	103ff326 	beq	r2,zero,832a0 <__swsetup_r+0x64>
   832d4:	00bfffc4 	movi	r2,-1
   832d8:	003ff206 	br	832a4 <__swsetup_r+0x68>
   832dc:	80800517 	ldw	r2,20(r16)
   832e0:	80800215 	stw	r2,8(r16)
   832e4:	003fed06 	br	8329c <__swsetup_r+0x60>
   832e8:	1809883a 	mov	r4,r3
   832ec:	0084e080 	call	84e08 <__sinit>
   832f0:	003fde06 	br	8326c <__swsetup_r+0x30>
   832f4:	20c0a00c 	andi	r3,r4,640
   832f8:	00808004 	movi	r2,512
   832fc:	18bfe026 	beq	r3,r2,83280 <__swsetup_r+0x44>
   83300:	8809883a 	mov	r4,r17
   83304:	800b883a 	mov	r5,r16
   83308:	0085bb40 	call	85bb4 <__smakebuf_r>
   8330c:	8100030b 	ldhu	r4,12(r16)
   83310:	81400417 	ldw	r5,16(r16)
   83314:	003fda06 	br	83280 <__swsetup_r+0x44>
   83318:	2080040c 	andi	r2,r4,16
   8331c:	103fed26 	beq	r2,zero,832d4 <__swsetup_r+0x98>
   83320:	2080010c 	andi	r2,r4,4
   83324:	10001226 	beq	r2,zero,83370 <__swsetup_r+0x134>
   83328:	81400c17 	ldw	r5,48(r16)
   8332c:	28000526 	beq	r5,zero,83344 <__swsetup_r+0x108>
   83330:	80801004 	addi	r2,r16,64
   83334:	28800226 	beq	r5,r2,83340 <__swsetup_r+0x104>
   83338:	8809883a 	mov	r4,r17
   8333c:	00851c00 	call	851c0 <_free_r>
   83340:	80000c15 	stw	zero,48(r16)
   83344:	8080030b 	ldhu	r2,12(r16)
   83348:	81400417 	ldw	r5,16(r16)
   8334c:	80000115 	stw	zero,4(r16)
   83350:	10bff6cc 	andi	r2,r2,65499
   83354:	8080030d 	sth	r2,12(r16)
   83358:	81400015 	stw	r5,0(r16)
   8335c:	8080030b 	ldhu	r2,12(r16)
   83360:	10800214 	ori	r2,r2,8
   83364:	113fffcc 	andi	r4,r2,65535
   83368:	8080030d 	sth	r2,12(r16)
   8336c:	003fc306 	br	8327c <__swsetup_r+0x40>
   83370:	81400417 	ldw	r5,16(r16)
   83374:	003ff906 	br	8335c <__swsetup_r+0x120>

00083378 <quorem>:
   83378:	28c00417 	ldw	r3,16(r5)
   8337c:	20800417 	ldw	r2,16(r4)
   83380:	defff104 	addi	sp,sp,-60
   83384:	dfc00e15 	stw	ra,56(sp)
   83388:	df000d15 	stw	fp,52(sp)
   8338c:	ddc00c15 	stw	r23,48(sp)
   83390:	dd800b15 	stw	r22,44(sp)
   83394:	dd400a15 	stw	r21,40(sp)
   83398:	dd000915 	stw	r20,36(sp)
   8339c:	dcc00815 	stw	r19,32(sp)
   833a0:	dc800715 	stw	r18,28(sp)
   833a4:	dc400615 	stw	r17,24(sp)
   833a8:	dc000515 	stw	r16,20(sp)
   833ac:	d9000315 	stw	r4,12(sp)
   833b0:	d9400415 	stw	r5,16(sp)
   833b4:	10c07f16 	blt	r2,r3,835b4 <quorem+0x23c>
   833b8:	1d3fffc4 	addi	r20,r3,-1
   833bc:	d8c00417 	ldw	r3,16(sp)
   833c0:	d9000317 	ldw	r4,12(sp)
   833c4:	a505883a 	add	r2,r20,r20
   833c8:	1085883a 	add	r2,r2,r2
   833cc:	1cc00504 	addi	r19,r3,20
   833d0:	25c00504 	addi	r23,r4,20
   833d4:	98ad883a 	add	r22,r19,r2
   833d8:	15c7883a 	add	r3,r2,r23
   833dc:	b1400017 	ldw	r5,0(r22)
   833e0:	19000017 	ldw	r4,0(r3)
   833e4:	d8c00015 	stw	r3,0(sp)
   833e8:	29400044 	addi	r5,r5,1
   833ec:	d9000215 	stw	r4,8(sp)
   833f0:	008a5ec0 	call	8a5ec <__udivsi3>
   833f4:	1039883a 	mov	fp,r2
   833f8:	10003d1e 	bne	r2,zero,834f0 <quorem+0x178>
   833fc:	d9400417 	ldw	r5,16(sp)
   83400:	d9000317 	ldw	r4,12(sp)
   83404:	00868e00 	call	868e0 <__mcmp>
   83408:	10002c16 	blt	r2,zero,834bc <quorem+0x144>
   8340c:	e7000044 	addi	fp,fp,1
   83410:	b80f883a 	mov	r7,r23
   83414:	0011883a 	mov	r8,zero
   83418:	0009883a 	mov	r4,zero
   8341c:	99400017 	ldw	r5,0(r19)
   83420:	38c00017 	ldw	r3,0(r7)
   83424:	9cc00104 	addi	r19,r19,4
   83428:	28bfffcc 	andi	r2,r5,65535
   8342c:	2085883a 	add	r2,r4,r2
   83430:	11bfffcc 	andi	r6,r2,65535
   83434:	193fffcc 	andi	r4,r3,65535
   83438:	1004d43a 	srli	r2,r2,16
   8343c:	280ad43a 	srli	r5,r5,16
   83440:	2189c83a 	sub	r4,r4,r6
   83444:	2209883a 	add	r4,r4,r8
   83448:	1806d43a 	srli	r3,r3,16
   8344c:	288b883a 	add	r5,r5,r2
   83450:	200dd43a 	srai	r6,r4,16
   83454:	28bfffcc 	andi	r2,r5,65535
   83458:	1887c83a 	sub	r3,r3,r2
   8345c:	1987883a 	add	r3,r3,r6
   83460:	3900000d 	sth	r4,0(r7)
   83464:	38c0008d 	sth	r3,2(r7)
   83468:	2808d43a 	srli	r4,r5,16
   8346c:	39c00104 	addi	r7,r7,4
   83470:	1811d43a 	srai	r8,r3,16
   83474:	b4ffe92e 	bgeu	r22,r19,8341c <quorem+0xa4>
   83478:	a505883a 	add	r2,r20,r20
   8347c:	1085883a 	add	r2,r2,r2
   83480:	b885883a 	add	r2,r23,r2
   83484:	10c00017 	ldw	r3,0(r2)
   83488:	18000c1e 	bne	r3,zero,834bc <quorem+0x144>
   8348c:	113fff04 	addi	r4,r2,-4
   83490:	b900082e 	bgeu	r23,r4,834b4 <quorem+0x13c>
   83494:	10bfff17 	ldw	r2,-4(r2)
   83498:	10000326 	beq	r2,zero,834a8 <quorem+0x130>
   8349c:	00000506 	br	834b4 <quorem+0x13c>
   834a0:	20800017 	ldw	r2,0(r4)
   834a4:	1000031e 	bne	r2,zero,834b4 <quorem+0x13c>
   834a8:	213fff04 	addi	r4,r4,-4
   834ac:	a53fffc4 	addi	r20,r20,-1
   834b0:	b93ffb36 	bltu	r23,r4,834a0 <quorem+0x128>
   834b4:	d9000317 	ldw	r4,12(sp)
   834b8:	25000415 	stw	r20,16(r4)
   834bc:	e005883a 	mov	r2,fp
   834c0:	dfc00e17 	ldw	ra,56(sp)
   834c4:	df000d17 	ldw	fp,52(sp)
   834c8:	ddc00c17 	ldw	r23,48(sp)
   834cc:	dd800b17 	ldw	r22,44(sp)
   834d0:	dd400a17 	ldw	r21,40(sp)
   834d4:	dd000917 	ldw	r20,36(sp)
   834d8:	dcc00817 	ldw	r19,32(sp)
   834dc:	dc800717 	ldw	r18,28(sp)
   834e0:	dc400617 	ldw	r17,24(sp)
   834e4:	dc000517 	ldw	r16,20(sp)
   834e8:	dec00f04 	addi	sp,sp,60
   834ec:	f800283a 	ret
   834f0:	b823883a 	mov	r17,r23
   834f4:	9825883a 	mov	r18,r19
   834f8:	d8000115 	stw	zero,4(sp)
   834fc:	002b883a 	mov	r21,zero
   83500:	94000017 	ldw	r16,0(r18)
   83504:	e009883a 	mov	r4,fp
   83508:	94800104 	addi	r18,r18,4
   8350c:	817fffcc 	andi	r5,r16,65535
   83510:	0080f440 	call	80f44 <__mulsi3>
   83514:	800ad43a 	srli	r5,r16,16
   83518:	e009883a 	mov	r4,fp
   8351c:	a8a1883a 	add	r16,r21,r2
   83520:	0080f440 	call	80f44 <__mulsi3>
   83524:	89000017 	ldw	r4,0(r17)
   83528:	80ffffcc 	andi	r3,r16,65535
   8352c:	8020d43a 	srli	r16,r16,16
   83530:	217fffcc 	andi	r5,r4,65535
   83534:	28cbc83a 	sub	r5,r5,r3
   83538:	d8c00117 	ldw	r3,4(sp)
   8353c:	2008d43a 	srli	r4,r4,16
   83540:	1405883a 	add	r2,r2,r16
   83544:	28cb883a 	add	r5,r5,r3
   83548:	280dd43a 	srai	r6,r5,16
   8354c:	10ffffcc 	andi	r3,r2,65535
   83550:	20c9c83a 	sub	r4,r4,r3
   83554:	2189883a 	add	r4,r4,r6
   83558:	8900008d 	sth	r4,2(r17)
   8355c:	2009d43a 	srai	r4,r4,16
   83560:	8940000d 	sth	r5,0(r17)
   83564:	102ad43a 	srli	r21,r2,16
   83568:	8c400104 	addi	r17,r17,4
   8356c:	d9000115 	stw	r4,4(sp)
   83570:	b4bfe32e 	bgeu	r22,r18,83500 <quorem+0x188>
   83574:	d9000217 	ldw	r4,8(sp)
   83578:	203fa01e 	bne	r4,zero,833fc <quorem+0x84>
   8357c:	d8800017 	ldw	r2,0(sp)
   83580:	10ffff04 	addi	r3,r2,-4
   83584:	b8c0082e 	bgeu	r23,r3,835a8 <quorem+0x230>
   83588:	10bfff17 	ldw	r2,-4(r2)
   8358c:	10000326 	beq	r2,zero,8359c <quorem+0x224>
   83590:	00000506 	br	835a8 <quorem+0x230>
   83594:	18800017 	ldw	r2,0(r3)
   83598:	1000031e 	bne	r2,zero,835a8 <quorem+0x230>
   8359c:	18ffff04 	addi	r3,r3,-4
   835a0:	a53fffc4 	addi	r20,r20,-1
   835a4:	b8fffb36 	bltu	r23,r3,83594 <quorem+0x21c>
   835a8:	d8c00317 	ldw	r3,12(sp)
   835ac:	1d000415 	stw	r20,16(r3)
   835b0:	003f9206 	br	833fc <quorem+0x84>
   835b4:	0005883a 	mov	r2,zero
   835b8:	003fc106 	br	834c0 <quorem+0x148>

000835bc <_dtoa_r>:
   835bc:	22001017 	ldw	r8,64(r4)
   835c0:	deffda04 	addi	sp,sp,-152
   835c4:	dd402115 	stw	r21,132(sp)
   835c8:	dd002015 	stw	r20,128(sp)
   835cc:	dc801e15 	stw	r18,120(sp)
   835d0:	dc401d15 	stw	r17,116(sp)
   835d4:	dfc02515 	stw	ra,148(sp)
   835d8:	df002415 	stw	fp,144(sp)
   835dc:	ddc02315 	stw	r23,140(sp)
   835e0:	dd802215 	stw	r22,136(sp)
   835e4:	dcc01f15 	stw	r19,124(sp)
   835e8:	dc001c15 	stw	r16,112(sp)
   835ec:	d9001615 	stw	r4,88(sp)
   835f0:	3023883a 	mov	r17,r6
   835f4:	2829883a 	mov	r20,r5
   835f8:	d9c01715 	stw	r7,92(sp)
   835fc:	dc802817 	ldw	r18,160(sp)
   83600:	302b883a 	mov	r21,r6
   83604:	40000a26 	beq	r8,zero,83630 <_dtoa_r+0x74>
   83608:	20801117 	ldw	r2,68(r4)
   8360c:	400b883a 	mov	r5,r8
   83610:	40800115 	stw	r2,4(r8)
   83614:	20c01117 	ldw	r3,68(r4)
   83618:	00800044 	movi	r2,1
   8361c:	10c4983a 	sll	r2,r2,r3
   83620:	40800215 	stw	r2,8(r8)
   83624:	00867840 	call	86784 <_Bfree>
   83628:	d8c01617 	ldw	r3,88(sp)
   8362c:	18001015 	stw	zero,64(r3)
   83630:	8800a316 	blt	r17,zero,838c0 <_dtoa_r+0x304>
   83634:	90000015 	stw	zero,0(r18)
   83638:	a8dffc2c 	andhi	r3,r21,32752
   8363c:	009ffc34 	movhi	r2,32752
   83640:	18809126 	beq	r3,r2,83888 <_dtoa_r+0x2cc>
   83644:	000d883a 	mov	r6,zero
   83648:	000f883a 	mov	r7,zero
   8364c:	a009883a 	mov	r4,r20
   83650:	a80b883a 	mov	r5,r21
   83654:	dd001215 	stw	r20,72(sp)
   83658:	dd401315 	stw	r21,76(sp)
   8365c:	0089f2c0 	call	89f2c <__nedf2>
   83660:	1000171e 	bne	r2,zero,836c0 <_dtoa_r+0x104>
   83664:	d9802717 	ldw	r6,156(sp)
   83668:	00800044 	movi	r2,1
   8366c:	30800015 	stw	r2,0(r6)
   83670:	d8802917 	ldw	r2,164(sp)
   83674:	10029b26 	beq	r2,zero,840e4 <_dtoa_r+0xb28>
   83678:	d9002917 	ldw	r4,164(sp)
   8367c:	00800274 	movhi	r2,9
   83680:	109e0044 	addi	r2,r2,30721
   83684:	10ffffc4 	addi	r3,r2,-1
   83688:	20800015 	stw	r2,0(r4)
   8368c:	1805883a 	mov	r2,r3
   83690:	dfc02517 	ldw	ra,148(sp)
   83694:	df002417 	ldw	fp,144(sp)
   83698:	ddc02317 	ldw	r23,140(sp)
   8369c:	dd802217 	ldw	r22,136(sp)
   836a0:	dd402117 	ldw	r21,132(sp)
   836a4:	dd002017 	ldw	r20,128(sp)
   836a8:	dcc01f17 	ldw	r19,124(sp)
   836ac:	dc801e17 	ldw	r18,120(sp)
   836b0:	dc401d17 	ldw	r17,116(sp)
   836b4:	dc001c17 	ldw	r16,112(sp)
   836b8:	dec02604 	addi	sp,sp,152
   836bc:	f800283a 	ret
   836c0:	d9001617 	ldw	r4,88(sp)
   836c4:	d9401217 	ldw	r5,72(sp)
   836c8:	d8800104 	addi	r2,sp,4
   836cc:	a80d883a 	mov	r6,r21
   836d0:	d9c00204 	addi	r7,sp,8
   836d4:	d8800015 	stw	r2,0(sp)
   836d8:	0086dc00 	call	86dc0 <__d2b>
   836dc:	d8800715 	stw	r2,28(sp)
   836e0:	a804d53a 	srli	r2,r21,20
   836e4:	1101ffcc 	andi	r4,r2,2047
   836e8:	20008626 	beq	r4,zero,83904 <_dtoa_r+0x348>
   836ec:	d8c01217 	ldw	r3,72(sp)
   836f0:	00800434 	movhi	r2,16
   836f4:	10bfffc4 	addi	r2,r2,-1
   836f8:	ddc00117 	ldw	r23,4(sp)
   836fc:	a884703a 	and	r2,r21,r2
   83700:	1811883a 	mov	r8,r3
   83704:	124ffc34 	orhi	r9,r2,16368
   83708:	25bf0044 	addi	r22,r4,-1023
   8370c:	d8000815 	stw	zero,32(sp)
   83710:	0005883a 	mov	r2,zero
   83714:	00cffe34 	movhi	r3,16376
   83718:	480b883a 	mov	r5,r9
   8371c:	4009883a 	mov	r4,r8
   83720:	180f883a 	mov	r7,r3
   83724:	100d883a 	mov	r6,r2
   83728:	00897940 	call	89794 <__subdf3>
   8372c:	0218dbf4 	movhi	r8,25455
   83730:	4210d844 	addi	r8,r8,17249
   83734:	024ff4f4 	movhi	r9,16339
   83738:	4a61e9c4 	addi	r9,r9,-30809
   8373c:	480f883a 	mov	r7,r9
   83740:	400d883a 	mov	r6,r8
   83744:	180b883a 	mov	r5,r3
   83748:	1009883a 	mov	r4,r2
   8374c:	00898880 	call	89888 <__muldf3>
   83750:	0222d874 	movhi	r8,35681
   83754:	42322cc4 	addi	r8,r8,-14157
   83758:	024ff1f4 	movhi	r9,16327
   8375c:	4a628a04 	addi	r9,r9,-30168
   83760:	480f883a 	mov	r7,r9
   83764:	400d883a 	mov	r6,r8
   83768:	180b883a 	mov	r5,r3
   8376c:	1009883a 	mov	r4,r2
   83770:	00898140 	call	89814 <__adddf3>
   83774:	b009883a 	mov	r4,r22
   83778:	1021883a 	mov	r16,r2
   8377c:	1823883a 	mov	r17,r3
   83780:	008a14c0 	call	8a14c <__floatsidf>
   83784:	021427f4 	movhi	r8,20639
   83788:	421e7ec4 	addi	r8,r8,31227
   8378c:	024ff4f4 	movhi	r9,16339
   83790:	4a5104c4 	addi	r9,r9,17427
   83794:	480f883a 	mov	r7,r9
   83798:	400d883a 	mov	r6,r8
   8379c:	180b883a 	mov	r5,r3
   837a0:	1009883a 	mov	r4,r2
   837a4:	00898880 	call	89888 <__muldf3>
   837a8:	180f883a 	mov	r7,r3
   837ac:	880b883a 	mov	r5,r17
   837b0:	100d883a 	mov	r6,r2
   837b4:	8009883a 	mov	r4,r16
   837b8:	00898140 	call	89814 <__adddf3>
   837bc:	1009883a 	mov	r4,r2
   837c0:	180b883a 	mov	r5,r3
   837c4:	1021883a 	mov	r16,r2
   837c8:	1823883a 	mov	r17,r3
   837cc:	008a2440 	call	8a244 <__fixdfsi>
   837d0:	000d883a 	mov	r6,zero
   837d4:	000f883a 	mov	r7,zero
   837d8:	8009883a 	mov	r4,r16
   837dc:	880b883a 	mov	r5,r17
   837e0:	d8800d15 	stw	r2,52(sp)
   837e4:	008a0c40 	call	8a0c4 <__ltdf2>
   837e8:	10031716 	blt	r2,zero,84448 <_dtoa_r+0xe8c>
   837ec:	d8c00d17 	ldw	r3,52(sp)
   837f0:	00800584 	movi	r2,22
   837f4:	10c1482e 	bgeu	r2,r3,83d18 <_dtoa_r+0x75c>
   837f8:	01000044 	movi	r4,1
   837fc:	d9000c15 	stw	r4,48(sp)
   83800:	bd85c83a 	sub	r2,r23,r22
   83804:	11bfffc4 	addi	r6,r2,-1
   83808:	30030b16 	blt	r6,zero,84438 <_dtoa_r+0xe7c>
   8380c:	d9800a15 	stw	r6,40(sp)
   83810:	d8001115 	stw	zero,68(sp)
   83814:	d8c00d17 	ldw	r3,52(sp)
   83818:	1802ff16 	blt	r3,zero,84418 <_dtoa_r+0xe5c>
   8381c:	d9000a17 	ldw	r4,40(sp)
   83820:	d8c00915 	stw	r3,36(sp)
   83824:	d8001015 	stw	zero,64(sp)
   83828:	20c9883a 	add	r4,r4,r3
   8382c:	d9000a15 	stw	r4,40(sp)
   83830:	d9001717 	ldw	r4,92(sp)
   83834:	00800244 	movi	r2,9
   83838:	11004636 	bltu	r2,r4,83954 <_dtoa_r+0x398>
   8383c:	00800144 	movi	r2,5
   83840:	11020416 	blt	r2,r4,84054 <_dtoa_r+0xa98>
   83844:	04400044 	movi	r17,1
   83848:	d8c01717 	ldw	r3,92(sp)
   8384c:	00800144 	movi	r2,5
   83850:	10c1ed36 	bltu	r2,r3,84008 <_dtoa_r+0xa4c>
   83854:	18c5883a 	add	r2,r3,r3
   83858:	1085883a 	add	r2,r2,r2
   8385c:	00c00234 	movhi	r3,8
   83860:	18ce1c04 	addi	r3,r3,14448
   83864:	10c5883a 	add	r2,r2,r3
   83868:	11000017 	ldw	r4,0(r2)
   8386c:	2000683a 	jmp	r4
   83870:	0008395c 	xori	zero,zero,8421
   83874:	0008395c 	xori	zero,zero,8421
   83878:	0008435c 	xori	zero,zero,8461
   8387c:	00084334 	movhi	zero,8460
   83880:	00084378 	rdprs	zero,zero,8461
   83884:	00084384 	movi	zero,8462
   83888:	d9002717 	ldw	r4,156(sp)
   8388c:	0089c3c4 	movi	r2,9999
   83890:	20800015 	stw	r2,0(r4)
   83894:	a0001026 	beq	r20,zero,838d8 <_dtoa_r+0x31c>
   83898:	00c00274 	movhi	r3,9
   8389c:	18de0c04 	addi	r3,r3,30768
   838a0:	d9802917 	ldw	r6,164(sp)
   838a4:	303f7926 	beq	r6,zero,8368c <_dtoa_r+0xd0>
   838a8:	188000c7 	ldb	r2,3(r3)
   838ac:	190000c4 	addi	r4,r3,3
   838b0:	1000101e 	bne	r2,zero,838f4 <_dtoa_r+0x338>
   838b4:	d8802917 	ldw	r2,164(sp)
   838b8:	11000015 	stw	r4,0(r2)
   838bc:	003f7306 	br	8368c <_dtoa_r+0xd0>
   838c0:	00a00034 	movhi	r2,32768
   838c4:	10bfffc4 	addi	r2,r2,-1
   838c8:	00c00044 	movi	r3,1
   838cc:	88aa703a 	and	r21,r17,r2
   838d0:	90c00015 	stw	r3,0(r18)
   838d4:	003f5806 	br	83638 <_dtoa_r+0x7c>
   838d8:	00800434 	movhi	r2,16
   838dc:	10bfffc4 	addi	r2,r2,-1
   838e0:	a884703a 	and	r2,r21,r2
   838e4:	103fec1e 	bne	r2,zero,83898 <_dtoa_r+0x2dc>
   838e8:	00c00274 	movhi	r3,9
   838ec:	18de0904 	addi	r3,r3,30756
   838f0:	003feb06 	br	838a0 <_dtoa_r+0x2e4>
   838f4:	d8802917 	ldw	r2,164(sp)
   838f8:	19000204 	addi	r4,r3,8
   838fc:	11000015 	stw	r4,0(r2)
   83900:	003f6206 	br	8368c <_dtoa_r+0xd0>
   83904:	ddc00117 	ldw	r23,4(sp)
   83908:	d8800217 	ldw	r2,8(sp)
   8390c:	01000804 	movi	r4,32
   83910:	b8c10c84 	addi	r3,r23,1074
   83914:	18a3883a 	add	r17,r3,r2
   83918:	2441b80e 	bge	r4,r17,83ffc <_dtoa_r+0xa40>
   8391c:	00c01004 	movi	r3,64
   83920:	1c47c83a 	sub	r3,r3,r17
   83924:	88bff804 	addi	r2,r17,-32
   83928:	a8c6983a 	sll	r3,r21,r3
   8392c:	a084d83a 	srl	r2,r20,r2
   83930:	1888b03a 	or	r4,r3,r2
   83934:	008a31c0 	call	8a31c <__floatunsidf>
   83938:	1011883a 	mov	r8,r2
   8393c:	00bf8434 	movhi	r2,65040
   83940:	01000044 	movi	r4,1
   83944:	10d3883a 	add	r9,r2,r3
   83948:	8dbef344 	addi	r22,r17,-1075
   8394c:	d9000815 	stw	r4,32(sp)
   83950:	003f6f06 	br	83710 <_dtoa_r+0x154>
   83954:	d8001715 	stw	zero,92(sp)
   83958:	04400044 	movi	r17,1
   8395c:	00bfffc4 	movi	r2,-1
   83960:	00c00044 	movi	r3,1
   83964:	d8800e15 	stw	r2,56(sp)
   83968:	d8002615 	stw	zero,152(sp)
   8396c:	d8800f15 	stw	r2,60(sp)
   83970:	d8c00b15 	stw	r3,44(sp)
   83974:	1021883a 	mov	r16,r2
   83978:	d8801617 	ldw	r2,88(sp)
   8397c:	10001115 	stw	zero,68(r2)
   83980:	d8801617 	ldw	r2,88(sp)
   83984:	11401117 	ldw	r5,68(r2)
   83988:	1009883a 	mov	r4,r2
   8398c:	0086d040 	call	86d04 <_Balloc>
   83990:	d8c01617 	ldw	r3,88(sp)
   83994:	d8800515 	stw	r2,20(sp)
   83998:	18801015 	stw	r2,64(r3)
   8399c:	00800384 	movi	r2,14
   839a0:	14006836 	bltu	r2,r16,83b44 <_dtoa_r+0x588>
   839a4:	8805003a 	cmpeq	r2,r17,zero
   839a8:	1000661e 	bne	r2,zero,83b44 <_dtoa_r+0x588>
   839ac:	d9000d17 	ldw	r4,52(sp)
   839b0:	0102300e 	bge	zero,r4,84274 <_dtoa_r+0xcb8>
   839b4:	208003cc 	andi	r2,r4,15
   839b8:	100490fa 	slli	r2,r2,3
   839bc:	2025d13a 	srai	r18,r4,4
   839c0:	00c00274 	movhi	r3,9
   839c4:	18de1d04 	addi	r3,r3,30836
   839c8:	10c5883a 	add	r2,r2,r3
   839cc:	90c0040c 	andi	r3,r18,16
   839d0:	14000017 	ldw	r16,0(r2)
   839d4:	14400117 	ldw	r17,4(r2)
   839d8:	18036a1e 	bne	r3,zero,84784 <_dtoa_r+0x11c8>
   839dc:	05800084 	movi	r22,2
   839e0:	90001026 	beq	r18,zero,83a24 <_dtoa_r+0x468>
   839e4:	04c00274 	movhi	r19,9
   839e8:	9cde4f04 	addi	r19,r19,31036
   839ec:	9080004c 	andi	r2,r18,1
   839f0:	1005003a 	cmpeq	r2,r2,zero
   839f4:	1000081e 	bne	r2,zero,83a18 <_dtoa_r+0x45c>
   839f8:	99800017 	ldw	r6,0(r19)
   839fc:	99c00117 	ldw	r7,4(r19)
   83a00:	880b883a 	mov	r5,r17
   83a04:	8009883a 	mov	r4,r16
   83a08:	00898880 	call	89888 <__muldf3>
   83a0c:	1021883a 	mov	r16,r2
   83a10:	b5800044 	addi	r22,r22,1
   83a14:	1823883a 	mov	r17,r3
   83a18:	9025d07a 	srai	r18,r18,1
   83a1c:	9cc00204 	addi	r19,r19,8
   83a20:	903ff21e 	bne	r18,zero,839ec <_dtoa_r+0x430>
   83a24:	a80b883a 	mov	r5,r21
   83a28:	a009883a 	mov	r4,r20
   83a2c:	880f883a 	mov	r7,r17
   83a30:	800d883a 	mov	r6,r16
   83a34:	0089c4c0 	call	89c4c <__divdf3>
   83a38:	1029883a 	mov	r20,r2
   83a3c:	182b883a 	mov	r21,r3
   83a40:	d8c00c17 	ldw	r3,48(sp)
   83a44:	1805003a 	cmpeq	r2,r3,zero
   83a48:	1000081e 	bne	r2,zero,83a6c <_dtoa_r+0x4b0>
   83a4c:	0005883a 	mov	r2,zero
   83a50:	00cffc34 	movhi	r3,16368
   83a54:	180f883a 	mov	r7,r3
   83a58:	a009883a 	mov	r4,r20
   83a5c:	a80b883a 	mov	r5,r21
   83a60:	100d883a 	mov	r6,r2
   83a64:	008a0c40 	call	8a0c4 <__ltdf2>
   83a68:	1003fe16 	blt	r2,zero,84a64 <_dtoa_r+0x14a8>
   83a6c:	b009883a 	mov	r4,r22
   83a70:	008a14c0 	call	8a14c <__floatsidf>
   83a74:	180b883a 	mov	r5,r3
   83a78:	1009883a 	mov	r4,r2
   83a7c:	a00d883a 	mov	r6,r20
   83a80:	a80f883a 	mov	r7,r21
   83a84:	00898880 	call	89888 <__muldf3>
   83a88:	0011883a 	mov	r8,zero
   83a8c:	02500734 	movhi	r9,16412
   83a90:	1009883a 	mov	r4,r2
   83a94:	180b883a 	mov	r5,r3
   83a98:	480f883a 	mov	r7,r9
   83a9c:	400d883a 	mov	r6,r8
   83aa0:	00898140 	call	89814 <__adddf3>
   83aa4:	d9000f17 	ldw	r4,60(sp)
   83aa8:	102d883a 	mov	r22,r2
   83aac:	00bf3034 	movhi	r2,64704
   83ab0:	18b9883a 	add	fp,r3,r2
   83ab4:	e02f883a 	mov	r23,fp
   83ab8:	20028f1e 	bne	r4,zero,844f8 <_dtoa_r+0xf3c>
   83abc:	0005883a 	mov	r2,zero
   83ac0:	00d00534 	movhi	r3,16404
   83ac4:	a009883a 	mov	r4,r20
   83ac8:	a80b883a 	mov	r5,r21
   83acc:	180f883a 	mov	r7,r3
   83ad0:	100d883a 	mov	r6,r2
   83ad4:	00897940 	call	89794 <__subdf3>
   83ad8:	1009883a 	mov	r4,r2
   83adc:	e00f883a 	mov	r7,fp
   83ae0:	180b883a 	mov	r5,r3
   83ae4:	b00d883a 	mov	r6,r22
   83ae8:	1025883a 	mov	r18,r2
   83aec:	1827883a 	mov	r19,r3
   83af0:	0089fb40 	call	89fb4 <__gtdf2>
   83af4:	00834f16 	blt	zero,r2,84834 <_dtoa_r+0x1278>
   83af8:	e0e0003c 	xorhi	r3,fp,32768
   83afc:	9009883a 	mov	r4,r18
   83b00:	980b883a 	mov	r5,r19
   83b04:	180f883a 	mov	r7,r3
   83b08:	b00d883a 	mov	r6,r22
   83b0c:	008a0c40 	call	8a0c4 <__ltdf2>
   83b10:	1000080e 	bge	r2,zero,83b34 <_dtoa_r+0x578>
   83b14:	0027883a 	mov	r19,zero
   83b18:	0025883a 	mov	r18,zero
   83b1c:	d8802617 	ldw	r2,152(sp)
   83b20:	df000517 	ldw	fp,20(sp)
   83b24:	d8000615 	stw	zero,24(sp)
   83b28:	0084303a 	nor	r2,zero,r2
   83b2c:	d8800d15 	stw	r2,52(sp)
   83b30:	00019b06 	br	841a0 <_dtoa_r+0xbe4>
   83b34:	d9801217 	ldw	r6,72(sp)
   83b38:	d8801317 	ldw	r2,76(sp)
   83b3c:	3029883a 	mov	r20,r6
   83b40:	102b883a 	mov	r21,r2
   83b44:	d8c00217 	ldw	r3,8(sp)
   83b48:	18008516 	blt	r3,zero,83d60 <_dtoa_r+0x7a4>
   83b4c:	d9000d17 	ldw	r4,52(sp)
   83b50:	00800384 	movi	r2,14
   83b54:	11008216 	blt	r2,r4,83d60 <_dtoa_r+0x7a4>
   83b58:	200490fa 	slli	r2,r4,3
   83b5c:	d9802617 	ldw	r6,152(sp)
   83b60:	00c00274 	movhi	r3,9
   83b64:	18de1d04 	addi	r3,r3,30836
   83b68:	10c5883a 	add	r2,r2,r3
   83b6c:	14800017 	ldw	r18,0(r2)
   83b70:	14c00117 	ldw	r19,4(r2)
   83b74:	30031e16 	blt	r6,zero,847f0 <_dtoa_r+0x1234>
   83b78:	d9000517 	ldw	r4,20(sp)
   83b7c:	d8c00f17 	ldw	r3,60(sp)
   83b80:	a823883a 	mov	r17,r21
   83b84:	a021883a 	mov	r16,r20
   83b88:	192b883a 	add	r21,r3,r4
   83b8c:	2039883a 	mov	fp,r4
   83b90:	00000f06 	br	83bd0 <_dtoa_r+0x614>
   83b94:	0005883a 	mov	r2,zero
   83b98:	00d00934 	movhi	r3,16420
   83b9c:	5009883a 	mov	r4,r10
   83ba0:	580b883a 	mov	r5,r11
   83ba4:	180f883a 	mov	r7,r3
   83ba8:	100d883a 	mov	r6,r2
   83bac:	00898880 	call	89888 <__muldf3>
   83bb0:	180b883a 	mov	r5,r3
   83bb4:	000d883a 	mov	r6,zero
   83bb8:	000f883a 	mov	r7,zero
   83bbc:	1009883a 	mov	r4,r2
   83bc0:	1021883a 	mov	r16,r2
   83bc4:	1823883a 	mov	r17,r3
   83bc8:	0089f2c0 	call	89f2c <__nedf2>
   83bcc:	10004526 	beq	r2,zero,83ce4 <_dtoa_r+0x728>
   83bd0:	900d883a 	mov	r6,r18
   83bd4:	980f883a 	mov	r7,r19
   83bd8:	8009883a 	mov	r4,r16
   83bdc:	880b883a 	mov	r5,r17
   83be0:	0089c4c0 	call	89c4c <__divdf3>
   83be4:	180b883a 	mov	r5,r3
   83be8:	1009883a 	mov	r4,r2
   83bec:	008a2440 	call	8a244 <__fixdfsi>
   83bf0:	1009883a 	mov	r4,r2
   83bf4:	1029883a 	mov	r20,r2
   83bf8:	008a14c0 	call	8a14c <__floatsidf>
   83bfc:	180f883a 	mov	r7,r3
   83c00:	9009883a 	mov	r4,r18
   83c04:	980b883a 	mov	r5,r19
   83c08:	100d883a 	mov	r6,r2
   83c0c:	00898880 	call	89888 <__muldf3>
   83c10:	180f883a 	mov	r7,r3
   83c14:	880b883a 	mov	r5,r17
   83c18:	8009883a 	mov	r4,r16
   83c1c:	100d883a 	mov	r6,r2
   83c20:	00897940 	call	89794 <__subdf3>
   83c24:	1015883a 	mov	r10,r2
   83c28:	a0800c04 	addi	r2,r20,48
   83c2c:	e0800005 	stb	r2,0(fp)
   83c30:	e7000044 	addi	fp,fp,1
   83c34:	1817883a 	mov	r11,r3
   83c38:	e57fd61e 	bne	fp,r21,83b94 <_dtoa_r+0x5d8>
   83c3c:	500d883a 	mov	r6,r10
   83c40:	180f883a 	mov	r7,r3
   83c44:	5009883a 	mov	r4,r10
   83c48:	180b883a 	mov	r5,r3
   83c4c:	00898140 	call	89814 <__adddf3>
   83c50:	100d883a 	mov	r6,r2
   83c54:	9009883a 	mov	r4,r18
   83c58:	980b883a 	mov	r5,r19
   83c5c:	180f883a 	mov	r7,r3
   83c60:	1021883a 	mov	r16,r2
   83c64:	1823883a 	mov	r17,r3
   83c68:	008a0c40 	call	8a0c4 <__ltdf2>
   83c6c:	10000816 	blt	r2,zero,83c90 <_dtoa_r+0x6d4>
   83c70:	980b883a 	mov	r5,r19
   83c74:	800d883a 	mov	r6,r16
   83c78:	880f883a 	mov	r7,r17
   83c7c:	9009883a 	mov	r4,r18
   83c80:	0089ea40 	call	89ea4 <__eqdf2>
   83c84:	1000171e 	bne	r2,zero,83ce4 <_dtoa_r+0x728>
   83c88:	a080004c 	andi	r2,r20,1
   83c8c:	10001526 	beq	r2,zero,83ce4 <_dtoa_r+0x728>
   83c90:	d8800d17 	ldw	r2,52(sp)
   83c94:	d8800415 	stw	r2,16(sp)
   83c98:	e009883a 	mov	r4,fp
   83c9c:	213fffc4 	addi	r4,r4,-1
   83ca0:	20c00007 	ldb	r3,0(r4)
   83ca4:	00800e44 	movi	r2,57
   83ca8:	1880081e 	bne	r3,r2,83ccc <_dtoa_r+0x710>
   83cac:	d8800517 	ldw	r2,20(sp)
   83cb0:	113ffa1e 	bne	r2,r4,83c9c <_dtoa_r+0x6e0>
   83cb4:	d8c00417 	ldw	r3,16(sp)
   83cb8:	d9800517 	ldw	r6,20(sp)
   83cbc:	00800c04 	movi	r2,48
   83cc0:	18c00044 	addi	r3,r3,1
   83cc4:	d8c00415 	stw	r3,16(sp)
   83cc8:	30800005 	stb	r2,0(r6)
   83ccc:	20800003 	ldbu	r2,0(r4)
   83cd0:	d8c00417 	ldw	r3,16(sp)
   83cd4:	27000044 	addi	fp,r4,1
   83cd8:	10800044 	addi	r2,r2,1
   83cdc:	d8c00d15 	stw	r3,52(sp)
   83ce0:	20800005 	stb	r2,0(r4)
   83ce4:	d9001617 	ldw	r4,88(sp)
   83ce8:	d9400717 	ldw	r5,28(sp)
   83cec:	00867840 	call	86784 <_Bfree>
   83cf0:	e0000005 	stb	zero,0(fp)
   83cf4:	d9800d17 	ldw	r6,52(sp)
   83cf8:	d8c02717 	ldw	r3,156(sp)
   83cfc:	d9002917 	ldw	r4,164(sp)
   83d00:	30800044 	addi	r2,r6,1
   83d04:	18800015 	stw	r2,0(r3)
   83d08:	20029c26 	beq	r4,zero,8477c <_dtoa_r+0x11c0>
   83d0c:	d8c00517 	ldw	r3,20(sp)
   83d10:	27000015 	stw	fp,0(r4)
   83d14:	003e5d06 	br	8368c <_dtoa_r+0xd0>
   83d18:	d9800d17 	ldw	r6,52(sp)
   83d1c:	00c00274 	movhi	r3,9
   83d20:	18de1d04 	addi	r3,r3,30836
   83d24:	d9001217 	ldw	r4,72(sp)
   83d28:	300490fa 	slli	r2,r6,3
   83d2c:	d9401317 	ldw	r5,76(sp)
   83d30:	10c5883a 	add	r2,r2,r3
   83d34:	12000017 	ldw	r8,0(r2)
   83d38:	12400117 	ldw	r9,4(r2)
   83d3c:	400d883a 	mov	r6,r8
   83d40:	480f883a 	mov	r7,r9
   83d44:	008a0c40 	call	8a0c4 <__ltdf2>
   83d48:	1000030e 	bge	r2,zero,83d58 <_dtoa_r+0x79c>
   83d4c:	d8800d17 	ldw	r2,52(sp)
   83d50:	10bfffc4 	addi	r2,r2,-1
   83d54:	d8800d15 	stw	r2,52(sp)
   83d58:	d8000c15 	stw	zero,48(sp)
   83d5c:	003ea806 	br	83800 <_dtoa_r+0x244>
   83d60:	d9000b17 	ldw	r4,44(sp)
   83d64:	202cc03a 	cmpne	r22,r4,zero
   83d68:	b000c71e 	bne	r22,zero,84088 <_dtoa_r+0xacc>
   83d6c:	dc001117 	ldw	r16,68(sp)
   83d70:	dc801017 	ldw	r18,64(sp)
   83d74:	0027883a 	mov	r19,zero
   83d78:	04000b0e 	bge	zero,r16,83da8 <_dtoa_r+0x7ec>
   83d7c:	d8c00a17 	ldw	r3,40(sp)
   83d80:	00c0090e 	bge	zero,r3,83da8 <_dtoa_r+0x7ec>
   83d84:	8005883a 	mov	r2,r16
   83d88:	1c011316 	blt	r3,r16,841d8 <_dtoa_r+0xc1c>
   83d8c:	d9000a17 	ldw	r4,40(sp)
   83d90:	d9801117 	ldw	r6,68(sp)
   83d94:	80a1c83a 	sub	r16,r16,r2
   83d98:	2089c83a 	sub	r4,r4,r2
   83d9c:	308dc83a 	sub	r6,r6,r2
   83da0:	d9000a15 	stw	r4,40(sp)
   83da4:	d9801115 	stw	r6,68(sp)
   83da8:	d8801017 	ldw	r2,64(sp)
   83dac:	0080150e 	bge	zero,r2,83e04 <_dtoa_r+0x848>
   83db0:	d8c00b17 	ldw	r3,44(sp)
   83db4:	1805003a 	cmpeq	r2,r3,zero
   83db8:	1001c91e 	bne	r2,zero,844e0 <_dtoa_r+0xf24>
   83dbc:	04800e0e 	bge	zero,r18,83df8 <_dtoa_r+0x83c>
   83dc0:	d9001617 	ldw	r4,88(sp)
   83dc4:	980b883a 	mov	r5,r19
   83dc8:	900d883a 	mov	r6,r18
   83dcc:	00875d00 	call	875d0 <__pow5mult>
   83dd0:	d9001617 	ldw	r4,88(sp)
   83dd4:	d9800717 	ldw	r6,28(sp)
   83dd8:	100b883a 	mov	r5,r2
   83ddc:	1027883a 	mov	r19,r2
   83de0:	00872140 	call	87214 <__multiply>
   83de4:	d9001617 	ldw	r4,88(sp)
   83de8:	d9400717 	ldw	r5,28(sp)
   83dec:	1023883a 	mov	r17,r2
   83df0:	00867840 	call	86784 <_Bfree>
   83df4:	dc400715 	stw	r17,28(sp)
   83df8:	d9001017 	ldw	r4,64(sp)
   83dfc:	248dc83a 	sub	r6,r4,r18
   83e00:	30010e1e 	bne	r6,zero,8423c <_dtoa_r+0xc80>
   83e04:	d9001617 	ldw	r4,88(sp)
   83e08:	04400044 	movi	r17,1
   83e0c:	880b883a 	mov	r5,r17
   83e10:	00874680 	call	87468 <__i2b>
   83e14:	d9800917 	ldw	r6,36(sp)
   83e18:	1025883a 	mov	r18,r2
   83e1c:	0180040e 	bge	zero,r6,83e30 <_dtoa_r+0x874>
   83e20:	d9001617 	ldw	r4,88(sp)
   83e24:	100b883a 	mov	r5,r2
   83e28:	00875d00 	call	875d0 <__pow5mult>
   83e2c:	1025883a 	mov	r18,r2
   83e30:	d8801717 	ldw	r2,92(sp)
   83e34:	8880f30e 	bge	r17,r2,84204 <_dtoa_r+0xc48>
   83e38:	0023883a 	mov	r17,zero
   83e3c:	d9800917 	ldw	r6,36(sp)
   83e40:	30019e1e 	bne	r6,zero,844bc <_dtoa_r+0xf00>
   83e44:	00c00044 	movi	r3,1
   83e48:	d9000a17 	ldw	r4,40(sp)
   83e4c:	20c5883a 	add	r2,r4,r3
   83e50:	10c007cc 	andi	r3,r2,31
   83e54:	1800841e 	bne	r3,zero,84068 <_dtoa_r+0xaac>
   83e58:	00800704 	movi	r2,28
   83e5c:	d9000a17 	ldw	r4,40(sp)
   83e60:	d9801117 	ldw	r6,68(sp)
   83e64:	80a1883a 	add	r16,r16,r2
   83e68:	2089883a 	add	r4,r4,r2
   83e6c:	308d883a 	add	r6,r6,r2
   83e70:	d9000a15 	stw	r4,40(sp)
   83e74:	d9801115 	stw	r6,68(sp)
   83e78:	d8801117 	ldw	r2,68(sp)
   83e7c:	0080050e 	bge	zero,r2,83e94 <_dtoa_r+0x8d8>
   83e80:	d9400717 	ldw	r5,28(sp)
   83e84:	d9001617 	ldw	r4,88(sp)
   83e88:	100d883a 	mov	r6,r2
   83e8c:	00870c80 	call	870c8 <__lshift>
   83e90:	d8800715 	stw	r2,28(sp)
   83e94:	d8c00a17 	ldw	r3,40(sp)
   83e98:	00c0050e 	bge	zero,r3,83eb0 <_dtoa_r+0x8f4>
   83e9c:	d9001617 	ldw	r4,88(sp)
   83ea0:	900b883a 	mov	r5,r18
   83ea4:	180d883a 	mov	r6,r3
   83ea8:	00870c80 	call	870c8 <__lshift>
   83eac:	1025883a 	mov	r18,r2
   83eb0:	d9000c17 	ldw	r4,48(sp)
   83eb4:	2005003a 	cmpeq	r2,r4,zero
   83eb8:	10016f26 	beq	r2,zero,84478 <_dtoa_r+0xebc>
   83ebc:	d9000f17 	ldw	r4,60(sp)
   83ec0:	0102170e 	bge	zero,r4,84720 <_dtoa_r+0x1164>
   83ec4:	d9800b17 	ldw	r6,44(sp)
   83ec8:	3005003a 	cmpeq	r2,r6,zero
   83ecc:	1000881e 	bne	r2,zero,840f0 <_dtoa_r+0xb34>
   83ed0:	0400050e 	bge	zero,r16,83ee8 <_dtoa_r+0x92c>
   83ed4:	d9001617 	ldw	r4,88(sp)
   83ed8:	980b883a 	mov	r5,r19
   83edc:	800d883a 	mov	r6,r16
   83ee0:	00870c80 	call	870c8 <__lshift>
   83ee4:	1027883a 	mov	r19,r2
   83ee8:	8804c03a 	cmpne	r2,r17,zero
   83eec:	1002541e 	bne	r2,zero,84840 <_dtoa_r+0x1284>
   83ef0:	980b883a 	mov	r5,r19
   83ef4:	dd800517 	ldw	r22,20(sp)
   83ef8:	dcc00615 	stw	r19,24(sp)
   83efc:	a700004c 	andi	fp,r20,1
   83f00:	2827883a 	mov	r19,r5
   83f04:	d9000717 	ldw	r4,28(sp)
   83f08:	900b883a 	mov	r5,r18
   83f0c:	00833780 	call	83378 <quorem>
   83f10:	d9000717 	ldw	r4,28(sp)
   83f14:	d9400617 	ldw	r5,24(sp)
   83f18:	1023883a 	mov	r17,r2
   83f1c:	8dc00c04 	addi	r23,r17,48
   83f20:	00868e00 	call	868e0 <__mcmp>
   83f24:	d9001617 	ldw	r4,88(sp)
   83f28:	900b883a 	mov	r5,r18
   83f2c:	980d883a 	mov	r6,r19
   83f30:	1029883a 	mov	r20,r2
   83f34:	0086f3c0 	call	86f3c <__mdiff>
   83f38:	102b883a 	mov	r21,r2
   83f3c:	10800317 	ldw	r2,12(r2)
   83f40:	1001281e 	bne	r2,zero,843e4 <_dtoa_r+0xe28>
   83f44:	d9000717 	ldw	r4,28(sp)
   83f48:	a80b883a 	mov	r5,r21
   83f4c:	00868e00 	call	868e0 <__mcmp>
   83f50:	d9001617 	ldw	r4,88(sp)
   83f54:	1021883a 	mov	r16,r2
   83f58:	a80b883a 	mov	r5,r21
   83f5c:	00867840 	call	86784 <_Bfree>
   83f60:	8000041e 	bne	r16,zero,83f74 <_dtoa_r+0x9b8>
   83f64:	d8801717 	ldw	r2,92(sp)
   83f68:	1000021e 	bne	r2,zero,83f74 <_dtoa_r+0x9b8>
   83f6c:	e004c03a 	cmpne	r2,fp,zero
   83f70:	10011726 	beq	r2,zero,843d0 <_dtoa_r+0xe14>
   83f74:	a0010616 	blt	r20,zero,84390 <_dtoa_r+0xdd4>
   83f78:	a000041e 	bne	r20,zero,83f8c <_dtoa_r+0x9d0>
   83f7c:	d8c01717 	ldw	r3,92(sp)
   83f80:	1800021e 	bne	r3,zero,83f8c <_dtoa_r+0x9d0>
   83f84:	e004c03a 	cmpne	r2,fp,zero
   83f88:	10010126 	beq	r2,zero,84390 <_dtoa_r+0xdd4>
   83f8c:	04023d16 	blt	zero,r16,84884 <_dtoa_r+0x12c8>
   83f90:	b5c00005 	stb	r23,0(r22)
   83f94:	d9800517 	ldw	r6,20(sp)
   83f98:	d9000f17 	ldw	r4,60(sp)
   83f9c:	b5800044 	addi	r22,r22,1
   83fa0:	3105883a 	add	r2,r6,r4
   83fa4:	b0806526 	beq	r22,r2,8413c <_dtoa_r+0xb80>
   83fa8:	d9400717 	ldw	r5,28(sp)
   83fac:	d9001617 	ldw	r4,88(sp)
   83fb0:	01800284 	movi	r6,10
   83fb4:	000f883a 	mov	r7,zero
   83fb8:	00874a40 	call	874a4 <__multadd>
   83fbc:	d8800715 	stw	r2,28(sp)
   83fc0:	d8800617 	ldw	r2,24(sp)
   83fc4:	14c10c26 	beq	r2,r19,843f8 <_dtoa_r+0xe3c>
   83fc8:	d9400617 	ldw	r5,24(sp)
   83fcc:	d9001617 	ldw	r4,88(sp)
   83fd0:	01800284 	movi	r6,10
   83fd4:	000f883a 	mov	r7,zero
   83fd8:	00874a40 	call	874a4 <__multadd>
   83fdc:	d9001617 	ldw	r4,88(sp)
   83fe0:	980b883a 	mov	r5,r19
   83fe4:	01800284 	movi	r6,10
   83fe8:	000f883a 	mov	r7,zero
   83fec:	d8800615 	stw	r2,24(sp)
   83ff0:	00874a40 	call	874a4 <__multadd>
   83ff4:	1027883a 	mov	r19,r2
   83ff8:	003fc206 	br	83f04 <_dtoa_r+0x948>
   83ffc:	2445c83a 	sub	r2,r4,r17
   84000:	a088983a 	sll	r4,r20,r2
   84004:	003e4b06 	br	83934 <_dtoa_r+0x378>
   84008:	01bfffc4 	movi	r6,-1
   8400c:	00800044 	movi	r2,1
   84010:	d9800e15 	stw	r6,56(sp)
   84014:	d9800f15 	stw	r6,60(sp)
   84018:	d8800b15 	stw	r2,44(sp)
   8401c:	d8c01617 	ldw	r3,88(sp)
   84020:	008005c4 	movi	r2,23
   84024:	18001115 	stw	zero,68(r3)
   84028:	1580082e 	bgeu	r2,r22,8404c <_dtoa_r+0xa90>
   8402c:	00c00104 	movi	r3,4
   84030:	0009883a 	mov	r4,zero
   84034:	18c7883a 	add	r3,r3,r3
   84038:	18800504 	addi	r2,r3,20
   8403c:	21000044 	addi	r4,r4,1
   84040:	b0bffc2e 	bgeu	r22,r2,84034 <_dtoa_r+0xa78>
   84044:	d9801617 	ldw	r6,88(sp)
   84048:	31001115 	stw	r4,68(r6)
   8404c:	dc000f17 	ldw	r16,60(sp)
   84050:	003e4b06 	br	83980 <_dtoa_r+0x3c4>
   84054:	d9801717 	ldw	r6,92(sp)
   84058:	0023883a 	mov	r17,zero
   8405c:	31bfff04 	addi	r6,r6,-4
   84060:	d9801715 	stw	r6,92(sp)
   84064:	003df806 	br	83848 <_dtoa_r+0x28c>
   84068:	00800804 	movi	r2,32
   8406c:	10c9c83a 	sub	r4,r2,r3
   84070:	00c00104 	movi	r3,4
   84074:	19005a16 	blt	r3,r4,841e0 <_dtoa_r+0xc24>
   84078:	008000c4 	movi	r2,3
   8407c:	113f7e16 	blt	r2,r4,83e78 <_dtoa_r+0x8bc>
   84080:	20800704 	addi	r2,r4,28
   84084:	003f7506 	br	83e5c <_dtoa_r+0x8a0>
   84088:	d9801717 	ldw	r6,92(sp)
   8408c:	00800044 	movi	r2,1
   84090:	1180a10e 	bge	r2,r6,84318 <_dtoa_r+0xd5c>
   84094:	d9800f17 	ldw	r6,60(sp)
   84098:	d8c01017 	ldw	r3,64(sp)
   8409c:	30bfffc4 	addi	r2,r6,-1
   840a0:	1881c616 	blt	r3,r2,847bc <_dtoa_r+0x1200>
   840a4:	18a5c83a 	sub	r18,r3,r2
   840a8:	d8800f17 	ldw	r2,60(sp)
   840ac:	10026216 	blt	r2,zero,84a38 <_dtoa_r+0x147c>
   840b0:	dc001117 	ldw	r16,68(sp)
   840b4:	1007883a 	mov	r3,r2
   840b8:	d9800a17 	ldw	r6,40(sp)
   840bc:	d8801117 	ldw	r2,68(sp)
   840c0:	d9001617 	ldw	r4,88(sp)
   840c4:	30cd883a 	add	r6,r6,r3
   840c8:	10c5883a 	add	r2,r2,r3
   840cc:	01400044 	movi	r5,1
   840d0:	d9800a15 	stw	r6,40(sp)
   840d4:	d8801115 	stw	r2,68(sp)
   840d8:	00874680 	call	87468 <__i2b>
   840dc:	1027883a 	mov	r19,r2
   840e0:	003f2506 	br	83d78 <_dtoa_r+0x7bc>
   840e4:	00c00274 	movhi	r3,9
   840e8:	18de0004 	addi	r3,r3,30720
   840ec:	003d6706 	br	8368c <_dtoa_r+0xd0>
   840f0:	dd800517 	ldw	r22,20(sp)
   840f4:	04000044 	movi	r16,1
   840f8:	00000706 	br	84118 <_dtoa_r+0xb5c>
   840fc:	d9400717 	ldw	r5,28(sp)
   84100:	d9001617 	ldw	r4,88(sp)
   84104:	01800284 	movi	r6,10
   84108:	000f883a 	mov	r7,zero
   8410c:	00874a40 	call	874a4 <__multadd>
   84110:	d8800715 	stw	r2,28(sp)
   84114:	84000044 	addi	r16,r16,1
   84118:	d9000717 	ldw	r4,28(sp)
   8411c:	900b883a 	mov	r5,r18
   84120:	00833780 	call	83378 <quorem>
   84124:	15c00c04 	addi	r23,r2,48
   84128:	b5c00005 	stb	r23,0(r22)
   8412c:	d8c00f17 	ldw	r3,60(sp)
   84130:	b5800044 	addi	r22,r22,1
   84134:	80fff116 	blt	r16,r3,840fc <_dtoa_r+0xb40>
   84138:	d8000615 	stw	zero,24(sp)
   8413c:	d9400717 	ldw	r5,28(sp)
   84140:	d9001617 	ldw	r4,88(sp)
   84144:	01800044 	movi	r6,1
   84148:	00870c80 	call	870c8 <__lshift>
   8414c:	1009883a 	mov	r4,r2
   84150:	900b883a 	mov	r5,r18
   84154:	d8800715 	stw	r2,28(sp)
   84158:	00868e00 	call	868e0 <__mcmp>
   8415c:	00803c0e 	bge	zero,r2,84250 <_dtoa_r+0xc94>
   84160:	b009883a 	mov	r4,r22
   84164:	213fffc4 	addi	r4,r4,-1
   84168:	21400003 	ldbu	r5,0(r4)
   8416c:	00800e44 	movi	r2,57
   84170:	28c03fcc 	andi	r3,r5,255
   84174:	18c0201c 	xori	r3,r3,128
   84178:	18ffe004 	addi	r3,r3,-128
   8417c:	1881981e 	bne	r3,r2,847e0 <_dtoa_r+0x1224>
   84180:	d9800517 	ldw	r6,20(sp)
   84184:	21bff71e 	bne	r4,r6,84164 <_dtoa_r+0xba8>
   84188:	d8800d17 	ldw	r2,52(sp)
   8418c:	37000044 	addi	fp,r6,1
   84190:	10800044 	addi	r2,r2,1
   84194:	d8800d15 	stw	r2,52(sp)
   84198:	00800c44 	movi	r2,49
   8419c:	30800005 	stb	r2,0(r6)
   841a0:	d9001617 	ldw	r4,88(sp)
   841a4:	900b883a 	mov	r5,r18
   841a8:	00867840 	call	86784 <_Bfree>
   841ac:	983ecd26 	beq	r19,zero,83ce4 <_dtoa_r+0x728>
   841b0:	d8c00617 	ldw	r3,24(sp)
   841b4:	18000426 	beq	r3,zero,841c8 <_dtoa_r+0xc0c>
   841b8:	1cc00326 	beq	r3,r19,841c8 <_dtoa_r+0xc0c>
   841bc:	d9001617 	ldw	r4,88(sp)
   841c0:	180b883a 	mov	r5,r3
   841c4:	00867840 	call	86784 <_Bfree>
   841c8:	d9001617 	ldw	r4,88(sp)
   841cc:	980b883a 	mov	r5,r19
   841d0:	00867840 	call	86784 <_Bfree>
   841d4:	003ec306 	br	83ce4 <_dtoa_r+0x728>
   841d8:	1805883a 	mov	r2,r3
   841dc:	003eeb06 	br	83d8c <_dtoa_r+0x7d0>
   841e0:	d9800a17 	ldw	r6,40(sp)
   841e4:	d8c01117 	ldw	r3,68(sp)
   841e8:	20bfff04 	addi	r2,r4,-4
   841ec:	308d883a 	add	r6,r6,r2
   841f0:	1887883a 	add	r3,r3,r2
   841f4:	80a1883a 	add	r16,r16,r2
   841f8:	d9800a15 	stw	r6,40(sp)
   841fc:	d8c01115 	stw	r3,68(sp)
   84200:	003f1d06 	br	83e78 <_dtoa_r+0x8bc>
   84204:	a03f0c1e 	bne	r20,zero,83e38 <_dtoa_r+0x87c>
   84208:	00800434 	movhi	r2,16
   8420c:	10bfffc4 	addi	r2,r2,-1
   84210:	a884703a 	and	r2,r21,r2
   84214:	103f081e 	bne	r2,zero,83e38 <_dtoa_r+0x87c>
   84218:	a89ffc2c 	andhi	r2,r21,32752
   8421c:	103f0626 	beq	r2,zero,83e38 <_dtoa_r+0x87c>
   84220:	d8c01117 	ldw	r3,68(sp)
   84224:	d9000a17 	ldw	r4,40(sp)
   84228:	18c00044 	addi	r3,r3,1
   8422c:	21000044 	addi	r4,r4,1
   84230:	d8c01115 	stw	r3,68(sp)
   84234:	d9000a15 	stw	r4,40(sp)
   84238:	003f0006 	br	83e3c <_dtoa_r+0x880>
   8423c:	d9400717 	ldw	r5,28(sp)
   84240:	d9001617 	ldw	r4,88(sp)
   84244:	00875d00 	call	875d0 <__pow5mult>
   84248:	d8800715 	stw	r2,28(sp)
   8424c:	003eed06 	br	83e04 <_dtoa_r+0x848>
   84250:	1000021e 	bne	r2,zero,8425c <_dtoa_r+0xca0>
   84254:	b880004c 	andi	r2,r23,1
   84258:	103fc11e 	bne	r2,zero,84160 <_dtoa_r+0xba4>
   8425c:	b5bfffc4 	addi	r22,r22,-1
   84260:	b0c00007 	ldb	r3,0(r22)
   84264:	00800c04 	movi	r2,48
   84268:	18bffc26 	beq	r3,r2,8425c <_dtoa_r+0xca0>
   8426c:	b7000044 	addi	fp,r22,1
   84270:	003fcb06 	br	841a0 <_dtoa_r+0xbe4>
   84274:	d9800d17 	ldw	r6,52(sp)
   84278:	018fc83a 	sub	r7,zero,r6
   8427c:	3801f726 	beq	r7,zero,84a5c <_dtoa_r+0x14a0>
   84280:	398003cc 	andi	r6,r7,15
   84284:	300c90fa 	slli	r6,r6,3
   84288:	01400274 	movhi	r5,9
   8428c:	295e1d04 	addi	r5,r5,30836
   84290:	d9001217 	ldw	r4,72(sp)
   84294:	314d883a 	add	r6,r6,r5
   84298:	30c00117 	ldw	r3,4(r6)
   8429c:	30800017 	ldw	r2,0(r6)
   842a0:	d9401317 	ldw	r5,76(sp)
   842a4:	3821d13a 	srai	r16,r7,4
   842a8:	100d883a 	mov	r6,r2
   842ac:	180f883a 	mov	r7,r3
   842b0:	00898880 	call	89888 <__muldf3>
   842b4:	1011883a 	mov	r8,r2
   842b8:	1813883a 	mov	r9,r3
   842bc:	1029883a 	mov	r20,r2
   842c0:	182b883a 	mov	r21,r3
   842c4:	8001e526 	beq	r16,zero,84a5c <_dtoa_r+0x14a0>
   842c8:	05800084 	movi	r22,2
   842cc:	04400274 	movhi	r17,9
   842d0:	8c5e4f04 	addi	r17,r17,31036
   842d4:	8080004c 	andi	r2,r16,1
   842d8:	1005003a 	cmpeq	r2,r2,zero
   842dc:	1000081e 	bne	r2,zero,84300 <_dtoa_r+0xd44>
   842e0:	89800017 	ldw	r6,0(r17)
   842e4:	89c00117 	ldw	r7,4(r17)
   842e8:	480b883a 	mov	r5,r9
   842ec:	4009883a 	mov	r4,r8
   842f0:	00898880 	call	89888 <__muldf3>
   842f4:	1011883a 	mov	r8,r2
   842f8:	b5800044 	addi	r22,r22,1
   842fc:	1813883a 	mov	r9,r3
   84300:	8021d07a 	srai	r16,r16,1
   84304:	8c400204 	addi	r17,r17,8
   84308:	803ff21e 	bne	r16,zero,842d4 <_dtoa_r+0xd18>
   8430c:	4029883a 	mov	r20,r8
   84310:	482b883a 	mov	r21,r9
   84314:	003dca06 	br	83a40 <_dtoa_r+0x484>
   84318:	d9000817 	ldw	r4,32(sp)
   8431c:	2005003a 	cmpeq	r2,r4,zero
   84320:	1001f61e 	bne	r2,zero,84afc <_dtoa_r+0x1540>
   84324:	dc001117 	ldw	r16,68(sp)
   84328:	dc801017 	ldw	r18,64(sp)
   8432c:	18c10cc4 	addi	r3,r3,1075
   84330:	003f6106 	br	840b8 <_dtoa_r+0xafc>
   84334:	d8000b15 	stw	zero,44(sp)
   84338:	d9802617 	ldw	r6,152(sp)
   8433c:	d8c00d17 	ldw	r3,52(sp)
   84340:	30800044 	addi	r2,r6,1
   84344:	18ad883a 	add	r22,r3,r2
   84348:	b13fffc4 	addi	r4,r22,-1
   8434c:	d9000e15 	stw	r4,56(sp)
   84350:	0581f60e 	bge	zero,r22,84b2c <_dtoa_r+0x1570>
   84354:	dd800f15 	stw	r22,60(sp)
   84358:	003f3006 	br	8401c <_dtoa_r+0xa60>
   8435c:	d8000b15 	stw	zero,44(sp)
   84360:	d9002617 	ldw	r4,152(sp)
   84364:	0101eb0e 	bge	zero,r4,84b14 <_dtoa_r+0x1558>
   84368:	202d883a 	mov	r22,r4
   8436c:	d9000e15 	stw	r4,56(sp)
   84370:	d9000f15 	stw	r4,60(sp)
   84374:	003f2906 	br	8401c <_dtoa_r+0xa60>
   84378:	01800044 	movi	r6,1
   8437c:	d9800b15 	stw	r6,44(sp)
   84380:	003ff706 	br	84360 <_dtoa_r+0xda4>
   84384:	01000044 	movi	r4,1
   84388:	d9000b15 	stw	r4,44(sp)
   8438c:	003fea06 	br	84338 <_dtoa_r+0xd7c>
   84390:	04000c0e 	bge	zero,r16,843c4 <_dtoa_r+0xe08>
   84394:	d9400717 	ldw	r5,28(sp)
   84398:	d9001617 	ldw	r4,88(sp)
   8439c:	01800044 	movi	r6,1
   843a0:	00870c80 	call	870c8 <__lshift>
   843a4:	1009883a 	mov	r4,r2
   843a8:	900b883a 	mov	r5,r18
   843ac:	d8800715 	stw	r2,28(sp)
   843b0:	00868e00 	call	868e0 <__mcmp>
   843b4:	0081e00e 	bge	zero,r2,84b38 <_dtoa_r+0x157c>
   843b8:	bdc00044 	addi	r23,r23,1
   843bc:	00800e84 	movi	r2,58
   843c0:	b881a226 	beq	r23,r2,84a4c <_dtoa_r+0x1490>
   843c4:	b7000044 	addi	fp,r22,1
   843c8:	b5c00005 	stb	r23,0(r22)
   843cc:	003f7406 	br	841a0 <_dtoa_r+0xbe4>
   843d0:	00800e44 	movi	r2,57
   843d4:	b8819d26 	beq	r23,r2,84a4c <_dtoa_r+0x1490>
   843d8:	053ffa0e 	bge	zero,r20,843c4 <_dtoa_r+0xe08>
   843dc:	8dc00c44 	addi	r23,r17,49
   843e0:	003ff806 	br	843c4 <_dtoa_r+0xe08>
   843e4:	d9001617 	ldw	r4,88(sp)
   843e8:	a80b883a 	mov	r5,r21
   843ec:	04000044 	movi	r16,1
   843f0:	00867840 	call	86784 <_Bfree>
   843f4:	003edf06 	br	83f74 <_dtoa_r+0x9b8>
   843f8:	d9001617 	ldw	r4,88(sp)
   843fc:	980b883a 	mov	r5,r19
   84400:	01800284 	movi	r6,10
   84404:	000f883a 	mov	r7,zero
   84408:	00874a40 	call	874a4 <__multadd>
   8440c:	1027883a 	mov	r19,r2
   84410:	d8800615 	stw	r2,24(sp)
   84414:	003ebb06 	br	83f04 <_dtoa_r+0x948>
   84418:	d9801117 	ldw	r6,68(sp)
   8441c:	d8800d17 	ldw	r2,52(sp)
   84420:	d8000915 	stw	zero,36(sp)
   84424:	308dc83a 	sub	r6,r6,r2
   84428:	0087c83a 	sub	r3,zero,r2
   8442c:	d9801115 	stw	r6,68(sp)
   84430:	d8c01015 	stw	r3,64(sp)
   84434:	003cfe06 	br	83830 <_dtoa_r+0x274>
   84438:	018dc83a 	sub	r6,zero,r6
   8443c:	d9801115 	stw	r6,68(sp)
   84440:	d8000a15 	stw	zero,40(sp)
   84444:	003cf306 	br	83814 <_dtoa_r+0x258>
   84448:	d9000d17 	ldw	r4,52(sp)
   8444c:	008a14c0 	call	8a14c <__floatsidf>
   84450:	880b883a 	mov	r5,r17
   84454:	8009883a 	mov	r4,r16
   84458:	180f883a 	mov	r7,r3
   8445c:	100d883a 	mov	r6,r2
   84460:	0089f2c0 	call	89f2c <__nedf2>
   84464:	103ce126 	beq	r2,zero,837ec <_dtoa_r+0x230>
   84468:	d9800d17 	ldw	r6,52(sp)
   8446c:	31bfffc4 	addi	r6,r6,-1
   84470:	d9800d15 	stw	r6,52(sp)
   84474:	003cdd06 	br	837ec <_dtoa_r+0x230>
   84478:	d9000717 	ldw	r4,28(sp)
   8447c:	900b883a 	mov	r5,r18
   84480:	00868e00 	call	868e0 <__mcmp>
   84484:	103e8d0e 	bge	r2,zero,83ebc <_dtoa_r+0x900>
   84488:	d9400717 	ldw	r5,28(sp)
   8448c:	d9001617 	ldw	r4,88(sp)
   84490:	01800284 	movi	r6,10
   84494:	000f883a 	mov	r7,zero
   84498:	00874a40 	call	874a4 <__multadd>
   8449c:	d9800d17 	ldw	r6,52(sp)
   844a0:	d8800715 	stw	r2,28(sp)
   844a4:	31bfffc4 	addi	r6,r6,-1
   844a8:	d9800d15 	stw	r6,52(sp)
   844ac:	b001a71e 	bne	r22,zero,84b4c <_dtoa_r+0x1590>
   844b0:	d8800e17 	ldw	r2,56(sp)
   844b4:	d8800f15 	stw	r2,60(sp)
   844b8:	003e8006 	br	83ebc <_dtoa_r+0x900>
   844bc:	90800417 	ldw	r2,16(r18)
   844c0:	1085883a 	add	r2,r2,r2
   844c4:	1085883a 	add	r2,r2,r2
   844c8:	1485883a 	add	r2,r2,r18
   844cc:	11000417 	ldw	r4,16(r2)
   844d0:	00867ac0 	call	867ac <__hi0bits>
   844d4:	00c00804 	movi	r3,32
   844d8:	1887c83a 	sub	r3,r3,r2
   844dc:	003e5a06 	br	83e48 <_dtoa_r+0x88c>
   844e0:	d9400717 	ldw	r5,28(sp)
   844e4:	d9801017 	ldw	r6,64(sp)
   844e8:	d9001617 	ldw	r4,88(sp)
   844ec:	00875d00 	call	875d0 <__pow5mult>
   844f0:	d8800715 	stw	r2,28(sp)
   844f4:	003e4306 	br	83e04 <_dtoa_r+0x848>
   844f8:	d9800f17 	ldw	r6,60(sp)
   844fc:	d8800d17 	ldw	r2,52(sp)
   84500:	d9800315 	stw	r6,12(sp)
   84504:	d8800415 	stw	r2,16(sp)
   84508:	d8c00b17 	ldw	r3,44(sp)
   8450c:	1805003a 	cmpeq	r2,r3,zero
   84510:	1000e21e 	bne	r2,zero,8489c <_dtoa_r+0x12e0>
   84514:	d9000317 	ldw	r4,12(sp)
   84518:	0005883a 	mov	r2,zero
   8451c:	00cff834 	movhi	r3,16352
   84520:	200c90fa 	slli	r6,r4,3
   84524:	01000274 	movhi	r4,9
   84528:	211e1d04 	addi	r4,r4,30836
   8452c:	180b883a 	mov	r5,r3
   84530:	310d883a 	add	r6,r6,r4
   84534:	327fff17 	ldw	r9,-4(r6)
   84538:	323ffe17 	ldw	r8,-8(r6)
   8453c:	1009883a 	mov	r4,r2
   84540:	480f883a 	mov	r7,r9
   84544:	400d883a 	mov	r6,r8
   84548:	0089c4c0 	call	89c4c <__divdf3>
   8454c:	180b883a 	mov	r5,r3
   84550:	b00d883a 	mov	r6,r22
   84554:	b80f883a 	mov	r7,r23
   84558:	1009883a 	mov	r4,r2
   8455c:	00897940 	call	89794 <__subdf3>
   84560:	a80b883a 	mov	r5,r21
   84564:	a009883a 	mov	r4,r20
   84568:	d8c01915 	stw	r3,100(sp)
   8456c:	d8801815 	stw	r2,96(sp)
   84570:	008a2440 	call	8a244 <__fixdfsi>
   84574:	1009883a 	mov	r4,r2
   84578:	1027883a 	mov	r19,r2
   8457c:	008a14c0 	call	8a14c <__floatsidf>
   84580:	a80b883a 	mov	r5,r21
   84584:	a009883a 	mov	r4,r20
   84588:	180f883a 	mov	r7,r3
   8458c:	100d883a 	mov	r6,r2
   84590:	00897940 	call	89794 <__subdf3>
   84594:	d9801817 	ldw	r6,96(sp)
   84598:	1823883a 	mov	r17,r3
   8459c:	d8801415 	stw	r2,80(sp)
   845a0:	302d883a 	mov	r22,r6
   845a4:	d9800517 	ldw	r6,20(sp)
   845a8:	9cc00c04 	addi	r19,r19,48
   845ac:	dc401515 	stw	r17,84(sp)
   845b0:	d8c01917 	ldw	r3,100(sp)
   845b4:	34c00005 	stb	r19,0(r6)
   845b8:	d8800517 	ldw	r2,20(sp)
   845bc:	d9401917 	ldw	r5,100(sp)
   845c0:	d9801417 	ldw	r6,80(sp)
   845c4:	b009883a 	mov	r4,r22
   845c8:	880f883a 	mov	r7,r17
   845cc:	182f883a 	mov	r23,r3
   845d0:	17000044 	addi	fp,r2,1
   845d4:	0089fb40 	call	89fb4 <__gtdf2>
   845d8:	00804e16 	blt	zero,r2,84714 <_dtoa_r+0x1158>
   845dc:	d9801417 	ldw	r6,80(sp)
   845e0:	0005883a 	mov	r2,zero
   845e4:	00cffc34 	movhi	r3,16368
   845e8:	180b883a 	mov	r5,r3
   845ec:	880f883a 	mov	r7,r17
   845f0:	1009883a 	mov	r4,r2
   845f4:	00897940 	call	89794 <__subdf3>
   845f8:	d9401917 	ldw	r5,100(sp)
   845fc:	180f883a 	mov	r7,r3
   84600:	b009883a 	mov	r4,r22
   84604:	100d883a 	mov	r6,r2
   84608:	0089fb40 	call	89fb4 <__gtdf2>
   8460c:	00bda216 	blt	zero,r2,83c98 <_dtoa_r+0x6dc>
   84610:	d8c00317 	ldw	r3,12(sp)
   84614:	00800044 	movi	r2,1
   84618:	10c01216 	blt	r2,r3,84664 <_dtoa_r+0x10a8>
   8461c:	003d4506 	br	83b34 <_dtoa_r+0x578>
   84620:	d9801417 	ldw	r6,80(sp)
   84624:	0005883a 	mov	r2,zero
   84628:	00cffc34 	movhi	r3,16368
   8462c:	180b883a 	mov	r5,r3
   84630:	880f883a 	mov	r7,r17
   84634:	1009883a 	mov	r4,r2
   84638:	00897940 	call	89794 <__subdf3>
   8463c:	d9c01b17 	ldw	r7,108(sp)
   84640:	180b883a 	mov	r5,r3
   84644:	1009883a 	mov	r4,r2
   84648:	b00d883a 	mov	r6,r22
   8464c:	008a0c40 	call	8a0c4 <__ltdf2>
   84650:	103d9116 	blt	r2,zero,83c98 <_dtoa_r+0x6dc>
   84654:	d9800517 	ldw	r6,20(sp)
   84658:	d9000317 	ldw	r4,12(sp)
   8465c:	3105883a 	add	r2,r6,r4
   84660:	e0bd3426 	beq	fp,r2,83b34 <_dtoa_r+0x578>
   84664:	04500934 	movhi	r17,16420
   84668:	0021883a 	mov	r16,zero
   8466c:	b80b883a 	mov	r5,r23
   84670:	b009883a 	mov	r4,r22
   84674:	800d883a 	mov	r6,r16
   84678:	880f883a 	mov	r7,r17
   8467c:	00898880 	call	89888 <__muldf3>
   84680:	d9401517 	ldw	r5,84(sp)
   84684:	d9001417 	ldw	r4,80(sp)
   84688:	880f883a 	mov	r7,r17
   8468c:	000d883a 	mov	r6,zero
   84690:	d8801a15 	stw	r2,104(sp)
   84694:	d8c01b15 	stw	r3,108(sp)
   84698:	00898880 	call	89888 <__muldf3>
   8469c:	180b883a 	mov	r5,r3
   846a0:	1009883a 	mov	r4,r2
   846a4:	1823883a 	mov	r17,r3
   846a8:	1021883a 	mov	r16,r2
   846ac:	008a2440 	call	8a244 <__fixdfsi>
   846b0:	1009883a 	mov	r4,r2
   846b4:	102b883a 	mov	r21,r2
   846b8:	008a14c0 	call	8a14c <__floatsidf>
   846bc:	880b883a 	mov	r5,r17
   846c0:	8009883a 	mov	r4,r16
   846c4:	180f883a 	mov	r7,r3
   846c8:	100d883a 	mov	r6,r2
   846cc:	00897940 	call	89794 <__subdf3>
   846d0:	1021883a 	mov	r16,r2
   846d4:	d9001b17 	ldw	r4,108(sp)
   846d8:	1823883a 	mov	r17,r3
   846dc:	dc001415 	stw	r16,80(sp)
   846e0:	ad400c04 	addi	r21,r21,48
   846e4:	dc401515 	stw	r17,84(sp)
   846e8:	d8801a17 	ldw	r2,104(sp)
   846ec:	e5400005 	stb	r21,0(fp)
   846f0:	202f883a 	mov	r23,r4
   846f4:	d9c01b17 	ldw	r7,108(sp)
   846f8:	d9001417 	ldw	r4,80(sp)
   846fc:	880b883a 	mov	r5,r17
   84700:	100d883a 	mov	r6,r2
   84704:	102d883a 	mov	r22,r2
   84708:	e7000044 	addi	fp,fp,1
   8470c:	008a0c40 	call	8a0c4 <__ltdf2>
   84710:	103fc30e 	bge	r2,zero,84620 <_dtoa_r+0x1064>
   84714:	d9000417 	ldw	r4,16(sp)
   84718:	d9000d15 	stw	r4,52(sp)
   8471c:	003d7106 	br	83ce4 <_dtoa_r+0x728>
   84720:	d9801717 	ldw	r6,92(sp)
   84724:	00800084 	movi	r2,2
   84728:	11bde60e 	bge	r2,r6,83ec4 <_dtoa_r+0x908>
   8472c:	203cfb1e 	bne	r4,zero,83b1c <_dtoa_r+0x560>
   84730:	d9001617 	ldw	r4,88(sp)
   84734:	900b883a 	mov	r5,r18
   84738:	01800144 	movi	r6,5
   8473c:	000f883a 	mov	r7,zero
   84740:	00874a40 	call	874a4 <__multadd>
   84744:	d9000717 	ldw	r4,28(sp)
   84748:	100b883a 	mov	r5,r2
   8474c:	1025883a 	mov	r18,r2
   84750:	00868e00 	call	868e0 <__mcmp>
   84754:	00bcf10e 	bge	zero,r2,83b1c <_dtoa_r+0x560>
   84758:	d8c00d17 	ldw	r3,52(sp)
   8475c:	d9000517 	ldw	r4,20(sp)
   84760:	d8000615 	stw	zero,24(sp)
   84764:	18c00044 	addi	r3,r3,1
   84768:	d8c00d15 	stw	r3,52(sp)
   8476c:	00800c44 	movi	r2,49
   84770:	27000044 	addi	fp,r4,1
   84774:	20800005 	stb	r2,0(r4)
   84778:	003e8906 	br	841a0 <_dtoa_r+0xbe4>
   8477c:	d8c00517 	ldw	r3,20(sp)
   84780:	003bc206 	br	8368c <_dtoa_r+0xd0>
   84784:	01800274 	movhi	r6,9
   84788:	319e4f04 	addi	r6,r6,31036
   8478c:	30c00917 	ldw	r3,36(r6)
   84790:	30800817 	ldw	r2,32(r6)
   84794:	d9001217 	ldw	r4,72(sp)
   84798:	d9401317 	ldw	r5,76(sp)
   8479c:	180f883a 	mov	r7,r3
   847a0:	100d883a 	mov	r6,r2
   847a4:	0089c4c0 	call	89c4c <__divdf3>
   847a8:	948003cc 	andi	r18,r18,15
   847ac:	058000c4 	movi	r22,3
   847b0:	1029883a 	mov	r20,r2
   847b4:	182b883a 	mov	r21,r3
   847b8:	003c8906 	br	839e0 <_dtoa_r+0x424>
   847bc:	d9001017 	ldw	r4,64(sp)
   847c0:	d9800917 	ldw	r6,36(sp)
   847c4:	0025883a 	mov	r18,zero
   847c8:	1105c83a 	sub	r2,r2,r4
   847cc:	2089883a 	add	r4,r4,r2
   847d0:	308d883a 	add	r6,r6,r2
   847d4:	d9001015 	stw	r4,64(sp)
   847d8:	d9800915 	stw	r6,36(sp)
   847dc:	003e3206 	br	840a8 <_dtoa_r+0xaec>
   847e0:	28800044 	addi	r2,r5,1
   847e4:	27000044 	addi	fp,r4,1
   847e8:	20800005 	stb	r2,0(r4)
   847ec:	003e6c06 	br	841a0 <_dtoa_r+0xbe4>
   847f0:	d8800f17 	ldw	r2,60(sp)
   847f4:	00bce016 	blt	zero,r2,83b78 <_dtoa_r+0x5bc>
   847f8:	d9800f17 	ldw	r6,60(sp)
   847fc:	303cc51e 	bne	r6,zero,83b14 <_dtoa_r+0x558>
   84800:	0005883a 	mov	r2,zero
   84804:	00d00534 	movhi	r3,16404
   84808:	980b883a 	mov	r5,r19
   8480c:	180f883a 	mov	r7,r3
   84810:	9009883a 	mov	r4,r18
   84814:	100d883a 	mov	r6,r2
   84818:	00898880 	call	89888 <__muldf3>
   8481c:	180b883a 	mov	r5,r3
   84820:	a80f883a 	mov	r7,r21
   84824:	1009883a 	mov	r4,r2
   84828:	a00d883a 	mov	r6,r20
   8482c:	008a03c0 	call	8a03c <__gedf2>
   84830:	103cb80e 	bge	r2,zero,83b14 <_dtoa_r+0x558>
   84834:	0027883a 	mov	r19,zero
   84838:	0025883a 	mov	r18,zero
   8483c:	003fc606 	br	84758 <_dtoa_r+0x119c>
   84840:	99400117 	ldw	r5,4(r19)
   84844:	d9001617 	ldw	r4,88(sp)
   84848:	0086d040 	call	86d04 <_Balloc>
   8484c:	99800417 	ldw	r6,16(r19)
   84850:	11000304 	addi	r4,r2,12
   84854:	99400304 	addi	r5,r19,12
   84858:	318d883a 	add	r6,r6,r6
   8485c:	318d883a 	add	r6,r6,r6
   84860:	31800204 	addi	r6,r6,8
   84864:	1023883a 	mov	r17,r2
   84868:	008656c0 	call	8656c <memcpy>
   8486c:	d9001617 	ldw	r4,88(sp)
   84870:	880b883a 	mov	r5,r17
   84874:	01800044 	movi	r6,1
   84878:	00870c80 	call	870c8 <__lshift>
   8487c:	100b883a 	mov	r5,r2
   84880:	003d9c06 	br	83ef4 <_dtoa_r+0x938>
   84884:	00800e44 	movi	r2,57
   84888:	b8807026 	beq	r23,r2,84a4c <_dtoa_r+0x1490>
   8488c:	b8800044 	addi	r2,r23,1
   84890:	b7000044 	addi	fp,r22,1
   84894:	b0800005 	stb	r2,0(r22)
   84898:	003e4106 	br	841a0 <_dtoa_r+0xbe4>
   8489c:	d8800317 	ldw	r2,12(sp)
   848a0:	01800274 	movhi	r6,9
   848a4:	319e1d04 	addi	r6,r6,30836
   848a8:	b009883a 	mov	r4,r22
   848ac:	100e90fa 	slli	r7,r2,3
   848b0:	b80b883a 	mov	r5,r23
   848b4:	398f883a 	add	r7,r7,r6
   848b8:	38bffe17 	ldw	r2,-8(r7)
   848bc:	d9800517 	ldw	r6,20(sp)
   848c0:	38ffff17 	ldw	r3,-4(r7)
   848c4:	37000044 	addi	fp,r6,1
   848c8:	180f883a 	mov	r7,r3
   848cc:	100d883a 	mov	r6,r2
   848d0:	00898880 	call	89888 <__muldf3>
   848d4:	a80b883a 	mov	r5,r21
   848d8:	a009883a 	mov	r4,r20
   848dc:	182f883a 	mov	r23,r3
   848e0:	102d883a 	mov	r22,r2
   848e4:	008a2440 	call	8a244 <__fixdfsi>
   848e8:	1009883a 	mov	r4,r2
   848ec:	1027883a 	mov	r19,r2
   848f0:	008a14c0 	call	8a14c <__floatsidf>
   848f4:	a80b883a 	mov	r5,r21
   848f8:	a009883a 	mov	r4,r20
   848fc:	180f883a 	mov	r7,r3
   84900:	100d883a 	mov	r6,r2
   84904:	00897940 	call	89794 <__subdf3>
   84908:	180b883a 	mov	r5,r3
   8490c:	d8c00517 	ldw	r3,20(sp)
   84910:	9cc00c04 	addi	r19,r19,48
   84914:	1009883a 	mov	r4,r2
   84918:	1cc00005 	stb	r19,0(r3)
   8491c:	2021883a 	mov	r16,r4
   84920:	d9000317 	ldw	r4,12(sp)
   84924:	00800044 	movi	r2,1
   84928:	2823883a 	mov	r17,r5
   8492c:	20802226 	beq	r4,r2,849b8 <_dtoa_r+0x13fc>
   84930:	1029883a 	mov	r20,r2
   84934:	0005883a 	mov	r2,zero
   84938:	00d00934 	movhi	r3,16420
   8493c:	180f883a 	mov	r7,r3
   84940:	100d883a 	mov	r6,r2
   84944:	880b883a 	mov	r5,r17
   84948:	8009883a 	mov	r4,r16
   8494c:	00898880 	call	89888 <__muldf3>
   84950:	180b883a 	mov	r5,r3
   84954:	1009883a 	mov	r4,r2
   84958:	1823883a 	mov	r17,r3
   8495c:	1021883a 	mov	r16,r2
   84960:	008a2440 	call	8a244 <__fixdfsi>
   84964:	1009883a 	mov	r4,r2
   84968:	102b883a 	mov	r21,r2
   8496c:	008a14c0 	call	8a14c <__floatsidf>
   84970:	880b883a 	mov	r5,r17
   84974:	8009883a 	mov	r4,r16
   84978:	180f883a 	mov	r7,r3
   8497c:	100d883a 	mov	r6,r2
   84980:	00897940 	call	89794 <__subdf3>
   84984:	180b883a 	mov	r5,r3
   84988:	d8c00517 	ldw	r3,20(sp)
   8498c:	1009883a 	mov	r4,r2
   84990:	ad400c04 	addi	r21,r21,48
   84994:	1d05883a 	add	r2,r3,r20
   84998:	15400005 	stb	r21,0(r2)
   8499c:	2021883a 	mov	r16,r4
   849a0:	d9000317 	ldw	r4,12(sp)
   849a4:	a5000044 	addi	r20,r20,1
   849a8:	2823883a 	mov	r17,r5
   849ac:	a13fe11e 	bne	r20,r4,84934 <_dtoa_r+0x1378>
   849b0:	e505883a 	add	r2,fp,r20
   849b4:	173fffc4 	addi	fp,r2,-1
   849b8:	0025883a 	mov	r18,zero
   849bc:	04cff834 	movhi	r19,16352
   849c0:	b009883a 	mov	r4,r22
   849c4:	b80b883a 	mov	r5,r23
   849c8:	900d883a 	mov	r6,r18
   849cc:	980f883a 	mov	r7,r19
   849d0:	00898140 	call	89814 <__adddf3>
   849d4:	180b883a 	mov	r5,r3
   849d8:	1009883a 	mov	r4,r2
   849dc:	800d883a 	mov	r6,r16
   849e0:	880f883a 	mov	r7,r17
   849e4:	008a0c40 	call	8a0c4 <__ltdf2>
   849e8:	103cab16 	blt	r2,zero,83c98 <_dtoa_r+0x6dc>
   849ec:	0009883a 	mov	r4,zero
   849f0:	980b883a 	mov	r5,r19
   849f4:	b80f883a 	mov	r7,r23
   849f8:	b00d883a 	mov	r6,r22
   849fc:	00897940 	call	89794 <__subdf3>
   84a00:	180b883a 	mov	r5,r3
   84a04:	880f883a 	mov	r7,r17
   84a08:	1009883a 	mov	r4,r2
   84a0c:	800d883a 	mov	r6,r16
   84a10:	0089fb40 	call	89fb4 <__gtdf2>
   84a14:	00bc470e 	bge	zero,r2,83b34 <_dtoa_r+0x578>
   84a18:	00c00c04 	movi	r3,48
   84a1c:	e73fffc4 	addi	fp,fp,-1
   84a20:	e0800007 	ldb	r2,0(fp)
   84a24:	10fffd26 	beq	r2,r3,84a1c <_dtoa_r+0x1460>
   84a28:	d9800417 	ldw	r6,16(sp)
   84a2c:	e7000044 	addi	fp,fp,1
   84a30:	d9800d15 	stw	r6,52(sp)
   84a34:	003cab06 	br	83ce4 <_dtoa_r+0x728>
   84a38:	d8c00f17 	ldw	r3,60(sp)
   84a3c:	d9001117 	ldw	r4,68(sp)
   84a40:	20e1c83a 	sub	r16,r4,r3
   84a44:	0007883a 	mov	r3,zero
   84a48:	003d9b06 	br	840b8 <_dtoa_r+0xafc>
   84a4c:	00800e44 	movi	r2,57
   84a50:	b0800005 	stb	r2,0(r22)
   84a54:	b5800044 	addi	r22,r22,1
   84a58:	003dc106 	br	84160 <_dtoa_r+0xba4>
   84a5c:	05800084 	movi	r22,2
   84a60:	003bf706 	br	83a40 <_dtoa_r+0x484>
   84a64:	d9000f17 	ldw	r4,60(sp)
   84a68:	013c000e 	bge	zero,r4,83a6c <_dtoa_r+0x4b0>
   84a6c:	d9800e17 	ldw	r6,56(sp)
   84a70:	01bc300e 	bge	zero,r6,83b34 <_dtoa_r+0x578>
   84a74:	0005883a 	mov	r2,zero
   84a78:	00d00934 	movhi	r3,16420
   84a7c:	a80b883a 	mov	r5,r21
   84a80:	180f883a 	mov	r7,r3
   84a84:	a009883a 	mov	r4,r20
   84a88:	100d883a 	mov	r6,r2
   84a8c:	00898880 	call	89888 <__muldf3>
   84a90:	b1000044 	addi	r4,r22,1
   84a94:	1021883a 	mov	r16,r2
   84a98:	1823883a 	mov	r17,r3
   84a9c:	008a14c0 	call	8a14c <__floatsidf>
   84aa0:	880b883a 	mov	r5,r17
   84aa4:	8009883a 	mov	r4,r16
   84aa8:	180f883a 	mov	r7,r3
   84aac:	100d883a 	mov	r6,r2
   84ab0:	00898880 	call	89888 <__muldf3>
   84ab4:	0011883a 	mov	r8,zero
   84ab8:	02500734 	movhi	r9,16412
   84abc:	180b883a 	mov	r5,r3
   84ac0:	480f883a 	mov	r7,r9
   84ac4:	1009883a 	mov	r4,r2
   84ac8:	400d883a 	mov	r6,r8
   84acc:	00898140 	call	89814 <__adddf3>
   84ad0:	102d883a 	mov	r22,r2
   84ad4:	00bf3034 	movhi	r2,64704
   84ad8:	10ef883a 	add	r23,r2,r3
   84adc:	d8800d17 	ldw	r2,52(sp)
   84ae0:	d8c00e17 	ldw	r3,56(sp)
   84ae4:	8029883a 	mov	r20,r16
   84ae8:	10bfffc4 	addi	r2,r2,-1
   84aec:	882b883a 	mov	r21,r17
   84af0:	d8800415 	stw	r2,16(sp)
   84af4:	d8c00315 	stw	r3,12(sp)
   84af8:	003e8306 	br	84508 <_dtoa_r+0xf4c>
   84afc:	d8800117 	ldw	r2,4(sp)
   84b00:	dc001117 	ldw	r16,68(sp)
   84b04:	dc801017 	ldw	r18,64(sp)
   84b08:	00c00d84 	movi	r3,54
   84b0c:	1887c83a 	sub	r3,r3,r2
   84b10:	003d6906 	br	840b8 <_dtoa_r+0xafc>
   84b14:	01800044 	movi	r6,1
   84b18:	3021883a 	mov	r16,r6
   84b1c:	d9800f15 	stw	r6,60(sp)
   84b20:	d9802615 	stw	r6,152(sp)
   84b24:	d9800e15 	stw	r6,56(sp)
   84b28:	003b9306 	br	83978 <_dtoa_r+0x3bc>
   84b2c:	b021883a 	mov	r16,r22
   84b30:	dd800f15 	stw	r22,60(sp)
   84b34:	003b9006 	br	83978 <_dtoa_r+0x3bc>
   84b38:	103e221e 	bne	r2,zero,843c4 <_dtoa_r+0xe08>
   84b3c:	b880004c 	andi	r2,r23,1
   84b40:	1005003a 	cmpeq	r2,r2,zero
   84b44:	103e1f1e 	bne	r2,zero,843c4 <_dtoa_r+0xe08>
   84b48:	003e1b06 	br	843b8 <_dtoa_r+0xdfc>
   84b4c:	d9001617 	ldw	r4,88(sp)
   84b50:	980b883a 	mov	r5,r19
   84b54:	01800284 	movi	r6,10
   84b58:	000f883a 	mov	r7,zero
   84b5c:	00874a40 	call	874a4 <__multadd>
   84b60:	d8c00e17 	ldw	r3,56(sp)
   84b64:	1027883a 	mov	r19,r2
   84b68:	d8c00f15 	stw	r3,60(sp)
   84b6c:	003cd306 	br	83ebc <_dtoa_r+0x900>

00084b70 <_fflush_r>:
   84b70:	defffb04 	addi	sp,sp,-20
   84b74:	dcc00315 	stw	r19,12(sp)
   84b78:	dc800215 	stw	r18,8(sp)
   84b7c:	dfc00415 	stw	ra,16(sp)
   84b80:	dc400115 	stw	r17,4(sp)
   84b84:	dc000015 	stw	r16,0(sp)
   84b88:	2027883a 	mov	r19,r4
   84b8c:	2825883a 	mov	r18,r5
   84b90:	20000226 	beq	r4,zero,84b9c <_fflush_r+0x2c>
   84b94:	20800e17 	ldw	r2,56(r4)
   84b98:	10005626 	beq	r2,zero,84cf4 <_fflush_r+0x184>
   84b9c:	9100030b 	ldhu	r4,12(r18)
   84ba0:	20ffffcc 	andi	r3,r4,65535
   84ba4:	18e0001c 	xori	r3,r3,32768
   84ba8:	18e00004 	addi	r3,r3,-32768
   84bac:	1880020c 	andi	r2,r3,8
   84bb0:	1000261e 	bne	r2,zero,84c4c <_fflush_r+0xdc>
   84bb4:	90c00117 	ldw	r3,4(r18)
   84bb8:	20820014 	ori	r2,r4,2048
   84bbc:	9080030d 	sth	r2,12(r18)
   84bc0:	1009883a 	mov	r4,r2
   84bc4:	00c0400e 	bge	zero,r3,84cc8 <_fflush_r+0x158>
   84bc8:	92000a17 	ldw	r8,40(r18)
   84bcc:	40004026 	beq	r8,zero,84cd0 <_fflush_r+0x160>
   84bd0:	2084000c 	andi	r2,r4,4096
   84bd4:	10005326 	beq	r2,zero,84d24 <_fflush_r+0x1b4>
   84bd8:	94001417 	ldw	r16,80(r18)
   84bdc:	9080030b 	ldhu	r2,12(r18)
   84be0:	1080010c 	andi	r2,r2,4
   84be4:	1000481e 	bne	r2,zero,84d08 <_fflush_r+0x198>
   84be8:	91400717 	ldw	r5,28(r18)
   84bec:	9809883a 	mov	r4,r19
   84bf0:	800d883a 	mov	r6,r16
   84bf4:	000f883a 	mov	r7,zero
   84bf8:	403ee83a 	callr	r8
   84bfc:	8080261e 	bne	r16,r2,84c98 <_fflush_r+0x128>
   84c00:	9080030b 	ldhu	r2,12(r18)
   84c04:	91000417 	ldw	r4,16(r18)
   84c08:	90000115 	stw	zero,4(r18)
   84c0c:	10bdffcc 	andi	r2,r2,63487
   84c10:	10ffffcc 	andi	r3,r2,65535
   84c14:	18c4000c 	andi	r3,r3,4096
   84c18:	9080030d 	sth	r2,12(r18)
   84c1c:	91000015 	stw	r4,0(r18)
   84c20:	18002b26 	beq	r3,zero,84cd0 <_fflush_r+0x160>
   84c24:	0007883a 	mov	r3,zero
   84c28:	1805883a 	mov	r2,r3
   84c2c:	94001415 	stw	r16,80(r18)
   84c30:	dfc00417 	ldw	ra,16(sp)
   84c34:	dcc00317 	ldw	r19,12(sp)
   84c38:	dc800217 	ldw	r18,8(sp)
   84c3c:	dc400117 	ldw	r17,4(sp)
   84c40:	dc000017 	ldw	r16,0(sp)
   84c44:	dec00504 	addi	sp,sp,20
   84c48:	f800283a 	ret
   84c4c:	94400417 	ldw	r17,16(r18)
   84c50:	88001f26 	beq	r17,zero,84cd0 <_fflush_r+0x160>
   84c54:	90800017 	ldw	r2,0(r18)
   84c58:	18c000cc 	andi	r3,r3,3
   84c5c:	94400015 	stw	r17,0(r18)
   84c60:	1461c83a 	sub	r16,r2,r17
   84c64:	18002526 	beq	r3,zero,84cfc <_fflush_r+0x18c>
   84c68:	0005883a 	mov	r2,zero
   84c6c:	90800215 	stw	r2,8(r18)
   84c70:	0400170e 	bge	zero,r16,84cd0 <_fflush_r+0x160>
   84c74:	90c00917 	ldw	r3,36(r18)
   84c78:	91400717 	ldw	r5,28(r18)
   84c7c:	880d883a 	mov	r6,r17
   84c80:	800f883a 	mov	r7,r16
   84c84:	9809883a 	mov	r4,r19
   84c88:	183ee83a 	callr	r3
   84c8c:	88a3883a 	add	r17,r17,r2
   84c90:	80a1c83a 	sub	r16,r16,r2
   84c94:	00bff616 	blt	zero,r2,84c70 <_fflush_r+0x100>
   84c98:	9080030b 	ldhu	r2,12(r18)
   84c9c:	00ffffc4 	movi	r3,-1
   84ca0:	10801014 	ori	r2,r2,64
   84ca4:	9080030d 	sth	r2,12(r18)
   84ca8:	1805883a 	mov	r2,r3
   84cac:	dfc00417 	ldw	ra,16(sp)
   84cb0:	dcc00317 	ldw	r19,12(sp)
   84cb4:	dc800217 	ldw	r18,8(sp)
   84cb8:	dc400117 	ldw	r17,4(sp)
   84cbc:	dc000017 	ldw	r16,0(sp)
   84cc0:	dec00504 	addi	sp,sp,20
   84cc4:	f800283a 	ret
   84cc8:	90800f17 	ldw	r2,60(r18)
   84ccc:	00bfbe16 	blt	zero,r2,84bc8 <_fflush_r+0x58>
   84cd0:	0007883a 	mov	r3,zero
   84cd4:	1805883a 	mov	r2,r3
   84cd8:	dfc00417 	ldw	ra,16(sp)
   84cdc:	dcc00317 	ldw	r19,12(sp)
   84ce0:	dc800217 	ldw	r18,8(sp)
   84ce4:	dc400117 	ldw	r17,4(sp)
   84ce8:	dc000017 	ldw	r16,0(sp)
   84cec:	dec00504 	addi	sp,sp,20
   84cf0:	f800283a 	ret
   84cf4:	0084e080 	call	84e08 <__sinit>
   84cf8:	003fa806 	br	84b9c <_fflush_r+0x2c>
   84cfc:	90800517 	ldw	r2,20(r18)
   84d00:	90800215 	stw	r2,8(r18)
   84d04:	003fda06 	br	84c70 <_fflush_r+0x100>
   84d08:	90800117 	ldw	r2,4(r18)
   84d0c:	90c00c17 	ldw	r3,48(r18)
   84d10:	80a1c83a 	sub	r16,r16,r2
   84d14:	183fb426 	beq	r3,zero,84be8 <_fflush_r+0x78>
   84d18:	90800f17 	ldw	r2,60(r18)
   84d1c:	80a1c83a 	sub	r16,r16,r2
   84d20:	003fb106 	br	84be8 <_fflush_r+0x78>
   84d24:	91400717 	ldw	r5,28(r18)
   84d28:	9809883a 	mov	r4,r19
   84d2c:	000d883a 	mov	r6,zero
   84d30:	01c00044 	movi	r7,1
   84d34:	403ee83a 	callr	r8
   84d38:	1021883a 	mov	r16,r2
   84d3c:	00bfffc4 	movi	r2,-1
   84d40:	80800226 	beq	r16,r2,84d4c <_fflush_r+0x1dc>
   84d44:	92000a17 	ldw	r8,40(r18)
   84d48:	003fa406 	br	84bdc <_fflush_r+0x6c>
   84d4c:	98c00017 	ldw	r3,0(r19)
   84d50:	00800744 	movi	r2,29
   84d54:	18bfde26 	beq	r3,r2,84cd0 <_fflush_r+0x160>
   84d58:	9080030b 	ldhu	r2,12(r18)
   84d5c:	8007883a 	mov	r3,r16
   84d60:	10801014 	ori	r2,r2,64
   84d64:	9080030d 	sth	r2,12(r18)
   84d68:	003fcf06 	br	84ca8 <_fflush_r+0x138>

00084d6c <fflush>:
   84d6c:	01400234 	movhi	r5,8
   84d70:	2952dc04 	addi	r5,r5,19312
   84d74:	2007883a 	mov	r3,r4
   84d78:	20000526 	beq	r4,zero,84d90 <fflush+0x24>
   84d7c:	008002b4 	movhi	r2,10
   84d80:	10a59d04 	addi	r2,r2,-27020
   84d84:	11000017 	ldw	r4,0(r2)
   84d88:	180b883a 	mov	r5,r3
   84d8c:	0084b701 	jmpi	84b70 <_fflush_r>
   84d90:	008002b4 	movhi	r2,10
   84d94:	10a59e04 	addi	r2,r2,-27016
   84d98:	11000017 	ldw	r4,0(r2)
   84d9c:	00859701 	jmpi	85970 <_fwalk_reent>

00084da0 <std>:
   84da0:	00800234 	movhi	r2,8
   84da4:	109fb904 	addi	r2,r2,32484
   84da8:	20800b15 	stw	r2,44(r4)
   84dac:	00800234 	movhi	r2,8
   84db0:	109ff404 	addi	r2,r2,32720
   84db4:	20800815 	stw	r2,32(r4)
   84db8:	00c00234 	movhi	r3,8
   84dbc:	18dfd504 	addi	r3,r3,32596
   84dc0:	00800234 	movhi	r2,8
   84dc4:	109fbb04 	addi	r2,r2,32492
   84dc8:	2140030d 	sth	r5,12(r4)
   84dcc:	2180038d 	sth	r6,14(r4)
   84dd0:	20c00915 	stw	r3,36(r4)
   84dd4:	20800a15 	stw	r2,40(r4)
   84dd8:	20000015 	stw	zero,0(r4)
   84ddc:	20000115 	stw	zero,4(r4)
   84de0:	20000215 	stw	zero,8(r4)
   84de4:	20000415 	stw	zero,16(r4)
   84de8:	20000515 	stw	zero,20(r4)
   84dec:	20000615 	stw	zero,24(r4)
   84df0:	21000715 	stw	r4,28(r4)
   84df4:	f800283a 	ret

00084df8 <__sfp_lock_acquire>:
   84df8:	f800283a 	ret

00084dfc <__sfp_lock_release>:
   84dfc:	f800283a 	ret

00084e00 <__sinit_lock_acquire>:
   84e00:	f800283a 	ret

00084e04 <__sinit_lock_release>:
   84e04:	f800283a 	ret

00084e08 <__sinit>:
   84e08:	20800e17 	ldw	r2,56(r4)
   84e0c:	defffd04 	addi	sp,sp,-12
   84e10:	dc400115 	stw	r17,4(sp)
   84e14:	dc000015 	stw	r16,0(sp)
   84e18:	dfc00215 	stw	ra,8(sp)
   84e1c:	04400044 	movi	r17,1
   84e20:	01400104 	movi	r5,4
   84e24:	000d883a 	mov	r6,zero
   84e28:	2021883a 	mov	r16,r4
   84e2c:	2200bb04 	addi	r8,r4,748
   84e30:	200f883a 	mov	r7,r4
   84e34:	10000526 	beq	r2,zero,84e4c <__sinit+0x44>
   84e38:	dfc00217 	ldw	ra,8(sp)
   84e3c:	dc400117 	ldw	r17,4(sp)
   84e40:	dc000017 	ldw	r16,0(sp)
   84e44:	dec00304 	addi	sp,sp,12
   84e48:	f800283a 	ret
   84e4c:	21000117 	ldw	r4,4(r4)
   84e50:	00800234 	movhi	r2,8
   84e54:	1093bb04 	addi	r2,r2,20204
   84e58:	00c000c4 	movi	r3,3
   84e5c:	80800f15 	stw	r2,60(r16)
   84e60:	80c0b915 	stw	r3,740(r16)
   84e64:	8200ba15 	stw	r8,744(r16)
   84e68:	84400e15 	stw	r17,56(r16)
   84e6c:	8000b815 	stw	zero,736(r16)
   84e70:	0084da00 	call	84da0 <std>
   84e74:	81000217 	ldw	r4,8(r16)
   84e78:	880d883a 	mov	r6,r17
   84e7c:	800f883a 	mov	r7,r16
   84e80:	01400284 	movi	r5,10
   84e84:	0084da00 	call	84da0 <std>
   84e88:	81000317 	ldw	r4,12(r16)
   84e8c:	800f883a 	mov	r7,r16
   84e90:	01400484 	movi	r5,18
   84e94:	01800084 	movi	r6,2
   84e98:	dfc00217 	ldw	ra,8(sp)
   84e9c:	dc400117 	ldw	r17,4(sp)
   84ea0:	dc000017 	ldw	r16,0(sp)
   84ea4:	dec00304 	addi	sp,sp,12
   84ea8:	0084da01 	jmpi	84da0 <std>

00084eac <__fp_lock>:
   84eac:	0005883a 	mov	r2,zero
   84eb0:	f800283a 	ret

00084eb4 <__fp_unlock>:
   84eb4:	0005883a 	mov	r2,zero
   84eb8:	f800283a 	ret

00084ebc <__fp_unlock_all>:
   84ebc:	008002b4 	movhi	r2,10
   84ec0:	10a59d04 	addi	r2,r2,-27020
   84ec4:	11000017 	ldw	r4,0(r2)
   84ec8:	01400234 	movhi	r5,8
   84ecc:	2953ad04 	addi	r5,r5,20148
   84ed0:	0085a381 	jmpi	85a38 <_fwalk>

00084ed4 <__fp_lock_all>:
   84ed4:	008002b4 	movhi	r2,10
   84ed8:	10a59d04 	addi	r2,r2,-27020
   84edc:	11000017 	ldw	r4,0(r2)
   84ee0:	01400234 	movhi	r5,8
   84ee4:	2953ab04 	addi	r5,r5,20140
   84ee8:	0085a381 	jmpi	85a38 <_fwalk>

00084eec <_cleanup_r>:
   84eec:	01400274 	movhi	r5,9
   84ef0:	2960eb04 	addi	r5,r5,-31828
   84ef4:	0085a381 	jmpi	85a38 <_fwalk>

00084ef8 <_cleanup>:
   84ef8:	008002b4 	movhi	r2,10
   84efc:	10a59e04 	addi	r2,r2,-27016
   84f00:	11000017 	ldw	r4,0(r2)
   84f04:	0084eec1 	jmpi	84eec <_cleanup_r>

00084f08 <__sfmoreglue>:
   84f08:	defffc04 	addi	sp,sp,-16
   84f0c:	dc000015 	stw	r16,0(sp)
   84f10:	2821883a 	mov	r16,r5
   84f14:	dc400115 	stw	r17,4(sp)
   84f18:	01401704 	movi	r5,92
   84f1c:	2023883a 	mov	r17,r4
   84f20:	8009883a 	mov	r4,r16
   84f24:	dfc00315 	stw	ra,12(sp)
   84f28:	dcc00215 	stw	r19,8(sp)
   84f2c:	0080f440 	call	80f44 <__mulsi3>
   84f30:	11400304 	addi	r5,r2,12
   84f34:	8809883a 	mov	r4,r17
   84f38:	1027883a 	mov	r19,r2
   84f3c:	0085d480 	call	85d48 <_malloc_r>
   84f40:	10c00304 	addi	r3,r2,12
   84f44:	1023883a 	mov	r17,r2
   84f48:	1809883a 	mov	r4,r3
   84f4c:	980d883a 	mov	r6,r19
   84f50:	000b883a 	mov	r5,zero
   84f54:	10000b26 	beq	r2,zero,84f84 <__sfmoreglue+0x7c>
   84f58:	14000115 	stw	r16,4(r2)
   84f5c:	10c00215 	stw	r3,8(r2)
   84f60:	10000015 	stw	zero,0(r2)
   84f64:	00866ec0 	call	866ec <memset>
   84f68:	8805883a 	mov	r2,r17
   84f6c:	dfc00317 	ldw	ra,12(sp)
   84f70:	dcc00217 	ldw	r19,8(sp)
   84f74:	dc400117 	ldw	r17,4(sp)
   84f78:	dc000017 	ldw	r16,0(sp)
   84f7c:	dec00404 	addi	sp,sp,16
   84f80:	f800283a 	ret
   84f84:	0023883a 	mov	r17,zero
   84f88:	8805883a 	mov	r2,r17
   84f8c:	dfc00317 	ldw	ra,12(sp)
   84f90:	dcc00217 	ldw	r19,8(sp)
   84f94:	dc400117 	ldw	r17,4(sp)
   84f98:	dc000017 	ldw	r16,0(sp)
   84f9c:	dec00404 	addi	sp,sp,16
   84fa0:	f800283a 	ret

00084fa4 <__sfp>:
   84fa4:	defffd04 	addi	sp,sp,-12
   84fa8:	008002b4 	movhi	r2,10
   84fac:	10a59e04 	addi	r2,r2,-27016
   84fb0:	dc000015 	stw	r16,0(sp)
   84fb4:	14000017 	ldw	r16,0(r2)
   84fb8:	dc400115 	stw	r17,4(sp)
   84fbc:	dfc00215 	stw	ra,8(sp)
   84fc0:	80800e17 	ldw	r2,56(r16)
   84fc4:	2023883a 	mov	r17,r4
   84fc8:	10002626 	beq	r2,zero,85064 <__sfp+0xc0>
   84fcc:	8400b804 	addi	r16,r16,736
   84fd0:	80800117 	ldw	r2,4(r16)
   84fd4:	81000217 	ldw	r4,8(r16)
   84fd8:	10ffffc4 	addi	r3,r2,-1
   84fdc:	18000916 	blt	r3,zero,85004 <__sfp+0x60>
   84fe0:	2080030f 	ldh	r2,12(r4)
   84fe4:	10000b26 	beq	r2,zero,85014 <__sfp+0x70>
   84fe8:	017fffc4 	movi	r5,-1
   84fec:	00000206 	br	84ff8 <__sfp+0x54>
   84ff0:	2080030f 	ldh	r2,12(r4)
   84ff4:	10000726 	beq	r2,zero,85014 <__sfp+0x70>
   84ff8:	18ffffc4 	addi	r3,r3,-1
   84ffc:	21001704 	addi	r4,r4,92
   85000:	197ffb1e 	bne	r3,r5,84ff0 <__sfp+0x4c>
   85004:	80800017 	ldw	r2,0(r16)
   85008:	10001926 	beq	r2,zero,85070 <__sfp+0xcc>
   8500c:	1021883a 	mov	r16,r2
   85010:	003fef06 	br	84fd0 <__sfp+0x2c>
   85014:	00bfffc4 	movi	r2,-1
   85018:	00c00044 	movi	r3,1
   8501c:	2080038d 	sth	r2,14(r4)
   85020:	20c0030d 	sth	r3,12(r4)
   85024:	20000015 	stw	zero,0(r4)
   85028:	20000215 	stw	zero,8(r4)
   8502c:	20000115 	stw	zero,4(r4)
   85030:	20000415 	stw	zero,16(r4)
   85034:	20000515 	stw	zero,20(r4)
   85038:	20000615 	stw	zero,24(r4)
   8503c:	20000c15 	stw	zero,48(r4)
   85040:	20000d15 	stw	zero,52(r4)
   85044:	20001115 	stw	zero,68(r4)
   85048:	20001215 	stw	zero,72(r4)
   8504c:	2005883a 	mov	r2,r4
   85050:	dfc00217 	ldw	ra,8(sp)
   85054:	dc400117 	ldw	r17,4(sp)
   85058:	dc000017 	ldw	r16,0(sp)
   8505c:	dec00304 	addi	sp,sp,12
   85060:	f800283a 	ret
   85064:	8009883a 	mov	r4,r16
   85068:	0084e080 	call	84e08 <__sinit>
   8506c:	003fd706 	br	84fcc <__sfp+0x28>
   85070:	8809883a 	mov	r4,r17
   85074:	01400104 	movi	r5,4
   85078:	0084f080 	call	84f08 <__sfmoreglue>
   8507c:	80800015 	stw	r2,0(r16)
   85080:	103fe21e 	bne	r2,zero,8500c <__sfp+0x68>
   85084:	00800304 	movi	r2,12
   85088:	0009883a 	mov	r4,zero
   8508c:	88800015 	stw	r2,0(r17)
   85090:	003fee06 	br	8504c <__sfp+0xa8>

00085094 <_malloc_trim_r>:
   85094:	defffb04 	addi	sp,sp,-20
   85098:	dcc00315 	stw	r19,12(sp)
   8509c:	04c002b4 	movhi	r19,10
   850a0:	9ce00a04 	addi	r19,r19,-32728
   850a4:	dc800215 	stw	r18,8(sp)
   850a8:	dc400115 	stw	r17,4(sp)
   850ac:	dc000015 	stw	r16,0(sp)
   850b0:	2823883a 	mov	r17,r5
   850b4:	2025883a 	mov	r18,r4
   850b8:	dfc00415 	stw	ra,16(sp)
   850bc:	008bc1c0 	call	8bc1c <__malloc_lock>
   850c0:	98800217 	ldw	r2,8(r19)
   850c4:	9009883a 	mov	r4,r18
   850c8:	000b883a 	mov	r5,zero
   850cc:	10c00117 	ldw	r3,4(r2)
   850d0:	00bfff04 	movi	r2,-4
   850d4:	18a0703a 	and	r16,r3,r2
   850d8:	8463c83a 	sub	r17,r16,r17
   850dc:	8c43fbc4 	addi	r17,r17,4079
   850e0:	8822d33a 	srli	r17,r17,12
   850e4:	0083ffc4 	movi	r2,4095
   850e8:	8c7fffc4 	addi	r17,r17,-1
   850ec:	8822933a 	slli	r17,r17,12
   850f0:	1440060e 	bge	r2,r17,8510c <_malloc_trim_r+0x78>
   850f4:	0087e740 	call	87e74 <_sbrk_r>
   850f8:	98c00217 	ldw	r3,8(r19)
   850fc:	9009883a 	mov	r4,r18
   85100:	044bc83a 	sub	r5,zero,r17
   85104:	80c7883a 	add	r3,r16,r3
   85108:	10c00926 	beq	r2,r3,85130 <_malloc_trim_r+0x9c>
   8510c:	008bd240 	call	8bd24 <__malloc_unlock>
   85110:	0005883a 	mov	r2,zero
   85114:	dfc00417 	ldw	ra,16(sp)
   85118:	dcc00317 	ldw	r19,12(sp)
   8511c:	dc800217 	ldw	r18,8(sp)
   85120:	dc400117 	ldw	r17,4(sp)
   85124:	dc000017 	ldw	r16,0(sp)
   85128:	dec00504 	addi	sp,sp,20
   8512c:	f800283a 	ret
   85130:	9009883a 	mov	r4,r18
   85134:	0087e740 	call	87e74 <_sbrk_r>
   85138:	844dc83a 	sub	r6,r16,r17
   8513c:	00ffffc4 	movi	r3,-1
   85140:	9009883a 	mov	r4,r18
   85144:	000b883a 	mov	r5,zero
   85148:	01c002b4 	movhi	r7,10
   8514c:	39ecb704 	addi	r7,r7,-19748
   85150:	31800054 	ori	r6,r6,1
   85154:	10c00926 	beq	r2,r3,8517c <_malloc_trim_r+0xe8>
   85158:	38800017 	ldw	r2,0(r7)
   8515c:	98c00217 	ldw	r3,8(r19)
   85160:	9009883a 	mov	r4,r18
   85164:	1445c83a 	sub	r2,r2,r17
   85168:	38800015 	stw	r2,0(r7)
   8516c:	19800115 	stw	r6,4(r3)
   85170:	008bd240 	call	8bd24 <__malloc_unlock>
   85174:	00800044 	movi	r2,1
   85178:	003fe606 	br	85114 <_malloc_trim_r+0x80>
   8517c:	0087e740 	call	87e74 <_sbrk_r>
   85180:	99800217 	ldw	r6,8(r19)
   85184:	100f883a 	mov	r7,r2
   85188:	9009883a 	mov	r4,r18
   8518c:	1187c83a 	sub	r3,r2,r6
   85190:	008003c4 	movi	r2,15
   85194:	19400054 	ori	r5,r3,1
   85198:	10ffdc0e 	bge	r2,r3,8510c <_malloc_trim_r+0x78>
   8519c:	008002b4 	movhi	r2,10
   851a0:	10a5a204 	addi	r2,r2,-27000
   851a4:	10c00017 	ldw	r3,0(r2)
   851a8:	008002b4 	movhi	r2,10
   851ac:	10acb704 	addi	r2,r2,-19748
   851b0:	31400115 	stw	r5,4(r6)
   851b4:	38c7c83a 	sub	r3,r7,r3
   851b8:	10c00015 	stw	r3,0(r2)
   851bc:	003fd306 	br	8510c <_malloc_trim_r+0x78>

000851c0 <_free_r>:
   851c0:	defffd04 	addi	sp,sp,-12
   851c4:	dc400115 	stw	r17,4(sp)
   851c8:	dc000015 	stw	r16,0(sp)
   851cc:	dfc00215 	stw	ra,8(sp)
   851d0:	2821883a 	mov	r16,r5
   851d4:	2023883a 	mov	r17,r4
   851d8:	28005a26 	beq	r5,zero,85344 <_free_r+0x184>
   851dc:	008bc1c0 	call	8bc1c <__malloc_lock>
   851e0:	823ffe04 	addi	r8,r16,-8
   851e4:	41400117 	ldw	r5,4(r8)
   851e8:	00bfff84 	movi	r2,-2
   851ec:	028002b4 	movhi	r10,10
   851f0:	52a00a04 	addi	r10,r10,-32728
   851f4:	288e703a 	and	r7,r5,r2
   851f8:	41cd883a 	add	r6,r8,r7
   851fc:	30c00117 	ldw	r3,4(r6)
   85200:	51000217 	ldw	r4,8(r10)
   85204:	00bfff04 	movi	r2,-4
   85208:	1892703a 	and	r9,r3,r2
   8520c:	5017883a 	mov	r11,r10
   85210:	31006726 	beq	r6,r4,853b0 <_free_r+0x1f0>
   85214:	2880004c 	andi	r2,r5,1
   85218:	1005003a 	cmpeq	r2,r2,zero
   8521c:	32400115 	stw	r9,4(r6)
   85220:	10001a1e 	bne	r2,zero,8528c <_free_r+0xcc>
   85224:	000b883a 	mov	r5,zero
   85228:	3247883a 	add	r3,r6,r9
   8522c:	18800117 	ldw	r2,4(r3)
   85230:	1080004c 	andi	r2,r2,1
   85234:	1000231e 	bne	r2,zero,852c4 <_free_r+0x104>
   85238:	280ac03a 	cmpne	r5,r5,zero
   8523c:	3a4f883a 	add	r7,r7,r9
   85240:	2800451e 	bne	r5,zero,85358 <_free_r+0x198>
   85244:	31000217 	ldw	r4,8(r6)
   85248:	008002b4 	movhi	r2,10
   8524c:	10a00c04 	addi	r2,r2,-32720
   85250:	20807b26 	beq	r4,r2,85440 <_free_r+0x280>
   85254:	30800317 	ldw	r2,12(r6)
   85258:	3a07883a 	add	r3,r7,r8
   8525c:	19c00015 	stw	r7,0(r3)
   85260:	11000215 	stw	r4,8(r2)
   85264:	20800315 	stw	r2,12(r4)
   85268:	38800054 	ori	r2,r7,1
   8526c:	40800115 	stw	r2,4(r8)
   85270:	28001a26 	beq	r5,zero,852dc <_free_r+0x11c>
   85274:	8809883a 	mov	r4,r17
   85278:	dfc00217 	ldw	ra,8(sp)
   8527c:	dc400117 	ldw	r17,4(sp)
   85280:	dc000017 	ldw	r16,0(sp)
   85284:	dec00304 	addi	sp,sp,12
   85288:	008bd241 	jmpi	8bd24 <__malloc_unlock>
   8528c:	80bffe17 	ldw	r2,-8(r16)
   85290:	50c00204 	addi	r3,r10,8
   85294:	4091c83a 	sub	r8,r8,r2
   85298:	41000217 	ldw	r4,8(r8)
   8529c:	388f883a 	add	r7,r7,r2
   852a0:	20c06126 	beq	r4,r3,85428 <_free_r+0x268>
   852a4:	40800317 	ldw	r2,12(r8)
   852a8:	3247883a 	add	r3,r6,r9
   852ac:	000b883a 	mov	r5,zero
   852b0:	11000215 	stw	r4,8(r2)
   852b4:	20800315 	stw	r2,12(r4)
   852b8:	18800117 	ldw	r2,4(r3)
   852bc:	1080004c 	andi	r2,r2,1
   852c0:	103fdd26 	beq	r2,zero,85238 <_free_r+0x78>
   852c4:	38800054 	ori	r2,r7,1
   852c8:	3a07883a 	add	r3,r7,r8
   852cc:	280ac03a 	cmpne	r5,r5,zero
   852d0:	40800115 	stw	r2,4(r8)
   852d4:	19c00015 	stw	r7,0(r3)
   852d8:	283fe61e 	bne	r5,zero,85274 <_free_r+0xb4>
   852dc:	00807fc4 	movi	r2,511
   852e0:	11c01f2e 	bgeu	r2,r7,85360 <_free_r+0x1a0>
   852e4:	3806d27a 	srli	r3,r7,9
   852e8:	1800481e 	bne	r3,zero,8540c <_free_r+0x24c>
   852ec:	3804d0fa 	srli	r2,r7,3
   852f0:	100690fa 	slli	r3,r2,3
   852f4:	1acd883a 	add	r6,r3,r11
   852f8:	31400217 	ldw	r5,8(r6)
   852fc:	31405926 	beq	r6,r5,85464 <_free_r+0x2a4>
   85300:	28800117 	ldw	r2,4(r5)
   85304:	00ffff04 	movi	r3,-4
   85308:	10c4703a 	and	r2,r2,r3
   8530c:	3880022e 	bgeu	r7,r2,85318 <_free_r+0x158>
   85310:	29400217 	ldw	r5,8(r5)
   85314:	317ffa1e 	bne	r6,r5,85300 <_free_r+0x140>
   85318:	29800317 	ldw	r6,12(r5)
   8531c:	41800315 	stw	r6,12(r8)
   85320:	41400215 	stw	r5,8(r8)
   85324:	8809883a 	mov	r4,r17
   85328:	2a000315 	stw	r8,12(r5)
   8532c:	32000215 	stw	r8,8(r6)
   85330:	dfc00217 	ldw	ra,8(sp)
   85334:	dc400117 	ldw	r17,4(sp)
   85338:	dc000017 	ldw	r16,0(sp)
   8533c:	dec00304 	addi	sp,sp,12
   85340:	008bd241 	jmpi	8bd24 <__malloc_unlock>
   85344:	dfc00217 	ldw	ra,8(sp)
   85348:	dc400117 	ldw	r17,4(sp)
   8534c:	dc000017 	ldw	r16,0(sp)
   85350:	dec00304 	addi	sp,sp,12
   85354:	f800283a 	ret
   85358:	31000217 	ldw	r4,8(r6)
   8535c:	003fbd06 	br	85254 <_free_r+0x94>
   85360:	3806d0fa 	srli	r3,r7,3
   85364:	00800044 	movi	r2,1
   85368:	51400117 	ldw	r5,4(r10)
   8536c:	180890fa 	slli	r4,r3,3
   85370:	1807d0ba 	srai	r3,r3,2
   85374:	22c9883a 	add	r4,r4,r11
   85378:	21800217 	ldw	r6,8(r4)
   8537c:	10c4983a 	sll	r2,r2,r3
   85380:	41000315 	stw	r4,12(r8)
   85384:	41800215 	stw	r6,8(r8)
   85388:	288ab03a 	or	r5,r5,r2
   8538c:	22000215 	stw	r8,8(r4)
   85390:	8809883a 	mov	r4,r17
   85394:	51400115 	stw	r5,4(r10)
   85398:	32000315 	stw	r8,12(r6)
   8539c:	dfc00217 	ldw	ra,8(sp)
   853a0:	dc400117 	ldw	r17,4(sp)
   853a4:	dc000017 	ldw	r16,0(sp)
   853a8:	dec00304 	addi	sp,sp,12
   853ac:	008bd241 	jmpi	8bd24 <__malloc_unlock>
   853b0:	2880004c 	andi	r2,r5,1
   853b4:	3a4d883a 	add	r6,r7,r9
   853b8:	1000071e 	bne	r2,zero,853d8 <_free_r+0x218>
   853bc:	80bffe17 	ldw	r2,-8(r16)
   853c0:	4091c83a 	sub	r8,r8,r2
   853c4:	41000317 	ldw	r4,12(r8)
   853c8:	40c00217 	ldw	r3,8(r8)
   853cc:	308d883a 	add	r6,r6,r2
   853d0:	20c00215 	stw	r3,8(r4)
   853d4:	19000315 	stw	r4,12(r3)
   853d8:	008002b4 	movhi	r2,10
   853dc:	10a5a104 	addi	r2,r2,-27004
   853e0:	11000017 	ldw	r4,0(r2)
   853e4:	30c00054 	ori	r3,r6,1
   853e8:	52000215 	stw	r8,8(r10)
   853ec:	40c00115 	stw	r3,4(r8)
   853f0:	313fa036 	bltu	r6,r4,85274 <_free_r+0xb4>
   853f4:	008002b4 	movhi	r2,10
   853f8:	10ac9404 	addi	r2,r2,-19888
   853fc:	11400017 	ldw	r5,0(r2)
   85400:	8809883a 	mov	r4,r17
   85404:	00850940 	call	85094 <_malloc_trim_r>
   85408:	003f9a06 	br	85274 <_free_r+0xb4>
   8540c:	00800104 	movi	r2,4
   85410:	10c0072e 	bgeu	r2,r3,85430 <_free_r+0x270>
   85414:	00800504 	movi	r2,20
   85418:	10c01936 	bltu	r2,r3,85480 <_free_r+0x2c0>
   8541c:	188016c4 	addi	r2,r3,91
   85420:	100690fa 	slli	r3,r2,3
   85424:	003fb306 	br	852f4 <_free_r+0x134>
   85428:	01400044 	movi	r5,1
   8542c:	003f7e06 	br	85228 <_free_r+0x68>
   85430:	3804d1ba 	srli	r2,r7,6
   85434:	10800e04 	addi	r2,r2,56
   85438:	100690fa 	slli	r3,r2,3
   8543c:	003fad06 	br	852f4 <_free_r+0x134>
   85440:	22000315 	stw	r8,12(r4)
   85444:	22000215 	stw	r8,8(r4)
   85448:	3a05883a 	add	r2,r7,r8
   8544c:	38c00054 	ori	r3,r7,1
   85450:	11c00015 	stw	r7,0(r2)
   85454:	41000215 	stw	r4,8(r8)
   85458:	40c00115 	stw	r3,4(r8)
   8545c:	41000315 	stw	r4,12(r8)
   85460:	003f8406 	br	85274 <_free_r+0xb4>
   85464:	1005d0ba 	srai	r2,r2,2
   85468:	00c00044 	movi	r3,1
   8546c:	51000117 	ldw	r4,4(r10)
   85470:	1886983a 	sll	r3,r3,r2
   85474:	20c8b03a 	or	r4,r4,r3
   85478:	51000115 	stw	r4,4(r10)
   8547c:	003fa706 	br	8531c <_free_r+0x15c>
   85480:	00801504 	movi	r2,84
   85484:	10c00436 	bltu	r2,r3,85498 <_free_r+0x2d8>
   85488:	3804d33a 	srli	r2,r7,12
   8548c:	10801b84 	addi	r2,r2,110
   85490:	100690fa 	slli	r3,r2,3
   85494:	003f9706 	br	852f4 <_free_r+0x134>
   85498:	00805504 	movi	r2,340
   8549c:	10c00436 	bltu	r2,r3,854b0 <_free_r+0x2f0>
   854a0:	3804d3fa 	srli	r2,r7,15
   854a4:	10801dc4 	addi	r2,r2,119
   854a8:	100690fa 	slli	r3,r2,3
   854ac:	003f9106 	br	852f4 <_free_r+0x134>
   854b0:	00815504 	movi	r2,1364
   854b4:	10c0032e 	bgeu	r2,r3,854c4 <_free_r+0x304>
   854b8:	00801f84 	movi	r2,126
   854bc:	00c0fc04 	movi	r3,1008
   854c0:	003f8c06 	br	852f4 <_free_r+0x134>
   854c4:	3804d4ba 	srli	r2,r7,18
   854c8:	10801f04 	addi	r2,r2,124
   854cc:	100690fa 	slli	r3,r2,3
   854d0:	003f8806 	br	852f4 <_free_r+0x134>

000854d4 <__sfvwrite_r>:
   854d4:	30800217 	ldw	r2,8(r6)
   854d8:	defff504 	addi	sp,sp,-44
   854dc:	df000915 	stw	fp,36(sp)
   854e0:	dd800715 	stw	r22,28(sp)
   854e4:	dc800315 	stw	r18,12(sp)
   854e8:	dfc00a15 	stw	ra,40(sp)
   854ec:	ddc00815 	stw	r23,32(sp)
   854f0:	dd400615 	stw	r21,24(sp)
   854f4:	dd000515 	stw	r20,20(sp)
   854f8:	dcc00415 	stw	r19,16(sp)
   854fc:	dc400215 	stw	r17,8(sp)
   85500:	dc000115 	stw	r16,4(sp)
   85504:	302d883a 	mov	r22,r6
   85508:	2039883a 	mov	fp,r4
   8550c:	2825883a 	mov	r18,r5
   85510:	10001c26 	beq	r2,zero,85584 <__sfvwrite_r+0xb0>
   85514:	29c0030b 	ldhu	r7,12(r5)
   85518:	3880020c 	andi	r2,r7,8
   8551c:	10002726 	beq	r2,zero,855bc <__sfvwrite_r+0xe8>
   85520:	28800417 	ldw	r2,16(r5)
   85524:	10002526 	beq	r2,zero,855bc <__sfvwrite_r+0xe8>
   85528:	3880008c 	andi	r2,r7,2
   8552c:	b5400017 	ldw	r21,0(r22)
   85530:	10002826 	beq	r2,zero,855d4 <__sfvwrite_r+0x100>
   85534:	0021883a 	mov	r16,zero
   85538:	0023883a 	mov	r17,zero
   8553c:	880d883a 	mov	r6,r17
   85540:	e009883a 	mov	r4,fp
   85544:	00810004 	movi	r2,1024
   85548:	80006e26 	beq	r16,zero,85704 <__sfvwrite_r+0x230>
   8554c:	800f883a 	mov	r7,r16
   85550:	91400717 	ldw	r5,28(r18)
   85554:	1400012e 	bgeu	r2,r16,8555c <__sfvwrite_r+0x88>
   85558:	100f883a 	mov	r7,r2
   8555c:	90c00917 	ldw	r3,36(r18)
   85560:	183ee83a 	callr	r3
   85564:	1007883a 	mov	r3,r2
   85568:	80a1c83a 	sub	r16,r16,r2
   8556c:	88a3883a 	add	r17,r17,r2
   85570:	00806d0e 	bge	zero,r2,85728 <__sfvwrite_r+0x254>
   85574:	b0800217 	ldw	r2,8(r22)
   85578:	10c5c83a 	sub	r2,r2,r3
   8557c:	b0800215 	stw	r2,8(r22)
   85580:	103fee1e 	bne	r2,zero,8553c <__sfvwrite_r+0x68>
   85584:	0009883a 	mov	r4,zero
   85588:	2005883a 	mov	r2,r4
   8558c:	dfc00a17 	ldw	ra,40(sp)
   85590:	df000917 	ldw	fp,36(sp)
   85594:	ddc00817 	ldw	r23,32(sp)
   85598:	dd800717 	ldw	r22,28(sp)
   8559c:	dd400617 	ldw	r21,24(sp)
   855a0:	dd000517 	ldw	r20,20(sp)
   855a4:	dcc00417 	ldw	r19,16(sp)
   855a8:	dc800317 	ldw	r18,12(sp)
   855ac:	dc400217 	ldw	r17,8(sp)
   855b0:	dc000117 	ldw	r16,4(sp)
   855b4:	dec00b04 	addi	sp,sp,44
   855b8:	f800283a 	ret
   855bc:	008323c0 	call	8323c <__swsetup_r>
   855c0:	1000e41e 	bne	r2,zero,85954 <__sfvwrite_r+0x480>
   855c4:	91c0030b 	ldhu	r7,12(r18)
   855c8:	b5400017 	ldw	r21,0(r22)
   855cc:	3880008c 	andi	r2,r7,2
   855d0:	103fd81e 	bne	r2,zero,85534 <__sfvwrite_r+0x60>
   855d4:	3880004c 	andi	r2,r7,1
   855d8:	1005003a 	cmpeq	r2,r2,zero
   855dc:	10005726 	beq	r2,zero,8573c <__sfvwrite_r+0x268>
   855e0:	0029883a 	mov	r20,zero
   855e4:	002f883a 	mov	r23,zero
   855e8:	a0004226 	beq	r20,zero,856f4 <__sfvwrite_r+0x220>
   855ec:	3880800c 	andi	r2,r7,512
   855f0:	94000217 	ldw	r16,8(r18)
   855f4:	10008b26 	beq	r2,zero,85824 <__sfvwrite_r+0x350>
   855f8:	800d883a 	mov	r6,r16
   855fc:	a400a536 	bltu	r20,r16,85894 <__sfvwrite_r+0x3c0>
   85600:	3881200c 	andi	r2,r7,1152
   85604:	10002726 	beq	r2,zero,856a4 <__sfvwrite_r+0x1d0>
   85608:	90800517 	ldw	r2,20(r18)
   8560c:	92000417 	ldw	r8,16(r18)
   85610:	91400017 	ldw	r5,0(r18)
   85614:	1087883a 	add	r3,r2,r2
   85618:	1887883a 	add	r3,r3,r2
   8561c:	1808d7fa 	srli	r4,r3,31
   85620:	2a21c83a 	sub	r16,r5,r8
   85624:	80800044 	addi	r2,r16,1
   85628:	20c9883a 	add	r4,r4,r3
   8562c:	2027d07a 	srai	r19,r4,1
   85630:	a085883a 	add	r2,r20,r2
   85634:	980d883a 	mov	r6,r19
   85638:	9880022e 	bgeu	r19,r2,85644 <__sfvwrite_r+0x170>
   8563c:	1027883a 	mov	r19,r2
   85640:	100d883a 	mov	r6,r2
   85644:	3881000c 	andi	r2,r7,1024
   85648:	1000b826 	beq	r2,zero,8592c <__sfvwrite_r+0x458>
   8564c:	300b883a 	mov	r5,r6
   85650:	e009883a 	mov	r4,fp
   85654:	0085d480 	call	85d48 <_malloc_r>
   85658:	10003126 	beq	r2,zero,85720 <__sfvwrite_r+0x24c>
   8565c:	91400417 	ldw	r5,16(r18)
   85660:	1009883a 	mov	r4,r2
   85664:	800d883a 	mov	r6,r16
   85668:	1023883a 	mov	r17,r2
   8566c:	008656c0 	call	8656c <memcpy>
   85670:	90c0030b 	ldhu	r3,12(r18)
   85674:	00beffc4 	movi	r2,-1025
   85678:	1886703a 	and	r3,r3,r2
   8567c:	18c02014 	ori	r3,r3,128
   85680:	90c0030d 	sth	r3,12(r18)
   85684:	9c07c83a 	sub	r3,r19,r16
   85688:	8c05883a 	add	r2,r17,r16
   8568c:	a00d883a 	mov	r6,r20
   85690:	a021883a 	mov	r16,r20
   85694:	90800015 	stw	r2,0(r18)
   85698:	90c00215 	stw	r3,8(r18)
   8569c:	94400415 	stw	r17,16(r18)
   856a0:	94c00515 	stw	r19,20(r18)
   856a4:	91000017 	ldw	r4,0(r18)
   856a8:	b80b883a 	mov	r5,r23
   856ac:	a023883a 	mov	r17,r20
   856b0:	008660c0 	call	8660c <memmove>
   856b4:	90c00217 	ldw	r3,8(r18)
   856b8:	90800017 	ldw	r2,0(r18)
   856bc:	a027883a 	mov	r19,r20
   856c0:	1c07c83a 	sub	r3,r3,r16
   856c4:	1405883a 	add	r2,r2,r16
   856c8:	90c00215 	stw	r3,8(r18)
   856cc:	a021883a 	mov	r16,r20
   856d0:	90800015 	stw	r2,0(r18)
   856d4:	b0800217 	ldw	r2,8(r22)
   856d8:	1405c83a 	sub	r2,r2,r16
   856dc:	b0800215 	stw	r2,8(r22)
   856e0:	103fa826 	beq	r2,zero,85584 <__sfvwrite_r+0xb0>
   856e4:	a469c83a 	sub	r20,r20,r17
   856e8:	91c0030b 	ldhu	r7,12(r18)
   856ec:	bcef883a 	add	r23,r23,r19
   856f0:	a03fbe1e 	bne	r20,zero,855ec <__sfvwrite_r+0x118>
   856f4:	adc00017 	ldw	r23,0(r21)
   856f8:	ad000117 	ldw	r20,4(r21)
   856fc:	ad400204 	addi	r21,r21,8
   85700:	003fb906 	br	855e8 <__sfvwrite_r+0x114>
   85704:	ac400017 	ldw	r17,0(r21)
   85708:	ac000117 	ldw	r16,4(r21)
   8570c:	ad400204 	addi	r21,r21,8
   85710:	003f8a06 	br	8553c <__sfvwrite_r+0x68>
   85714:	91400417 	ldw	r5,16(r18)
   85718:	e009883a 	mov	r4,fp
   8571c:	00851c00 	call	851c0 <_free_r>
   85720:	00800304 	movi	r2,12
   85724:	e0800015 	stw	r2,0(fp)
   85728:	9080030b 	ldhu	r2,12(r18)
   8572c:	013fffc4 	movi	r4,-1
   85730:	10801014 	ori	r2,r2,64
   85734:	9080030d 	sth	r2,12(r18)
   85738:	003f9306 	br	85588 <__sfvwrite_r+0xb4>
   8573c:	0027883a 	mov	r19,zero
   85740:	002f883a 	mov	r23,zero
   85744:	d8000015 	stw	zero,0(sp)
   85748:	0029883a 	mov	r20,zero
   8574c:	98001e26 	beq	r19,zero,857c8 <__sfvwrite_r+0x2f4>
   85750:	d8c00017 	ldw	r3,0(sp)
   85754:	1804c03a 	cmpne	r2,r3,zero
   85758:	10005e26 	beq	r2,zero,858d4 <__sfvwrite_r+0x400>
   8575c:	9821883a 	mov	r16,r19
   85760:	a4c0012e 	bgeu	r20,r19,85768 <__sfvwrite_r+0x294>
   85764:	a021883a 	mov	r16,r20
   85768:	91000017 	ldw	r4,0(r18)
   8576c:	90800417 	ldw	r2,16(r18)
   85770:	91800217 	ldw	r6,8(r18)
   85774:	91c00517 	ldw	r7,20(r18)
   85778:	1100022e 	bgeu	r2,r4,85784 <__sfvwrite_r+0x2b0>
   8577c:	31e3883a 	add	r17,r6,r7
   85780:	8c001616 	blt	r17,r16,857dc <__sfvwrite_r+0x308>
   85784:	81c03816 	blt	r16,r7,85868 <__sfvwrite_r+0x394>
   85788:	90c00917 	ldw	r3,36(r18)
   8578c:	91400717 	ldw	r5,28(r18)
   85790:	e009883a 	mov	r4,fp
   85794:	b80d883a 	mov	r6,r23
   85798:	183ee83a 	callr	r3
   8579c:	1023883a 	mov	r17,r2
   857a0:	00bfe10e 	bge	zero,r2,85728 <__sfvwrite_r+0x254>
   857a4:	a469c83a 	sub	r20,r20,r17
   857a8:	a0001826 	beq	r20,zero,8580c <__sfvwrite_r+0x338>
   857ac:	b0800217 	ldw	r2,8(r22)
   857b0:	1445c83a 	sub	r2,r2,r17
   857b4:	b0800215 	stw	r2,8(r22)
   857b8:	103f7226 	beq	r2,zero,85584 <__sfvwrite_r+0xb0>
   857bc:	9c67c83a 	sub	r19,r19,r17
   857c0:	bc6f883a 	add	r23,r23,r17
   857c4:	983fe21e 	bne	r19,zero,85750 <__sfvwrite_r+0x27c>
   857c8:	adc00017 	ldw	r23,0(r21)
   857cc:	acc00117 	ldw	r19,4(r21)
   857d0:	ad400204 	addi	r21,r21,8
   857d4:	d8000015 	stw	zero,0(sp)
   857d8:	003fdc06 	br	8574c <__sfvwrite_r+0x278>
   857dc:	b80b883a 	mov	r5,r23
   857e0:	880d883a 	mov	r6,r17
   857e4:	008660c0 	call	8660c <memmove>
   857e8:	90c00017 	ldw	r3,0(r18)
   857ec:	e009883a 	mov	r4,fp
   857f0:	900b883a 	mov	r5,r18
   857f4:	1c47883a 	add	r3,r3,r17
   857f8:	90c00015 	stw	r3,0(r18)
   857fc:	0084b700 	call	84b70 <_fflush_r>
   85800:	103fc91e 	bne	r2,zero,85728 <__sfvwrite_r+0x254>
   85804:	a469c83a 	sub	r20,r20,r17
   85808:	a03fe81e 	bne	r20,zero,857ac <__sfvwrite_r+0x2d8>
   8580c:	e009883a 	mov	r4,fp
   85810:	900b883a 	mov	r5,r18
   85814:	0084b700 	call	84b70 <_fflush_r>
   85818:	103fc31e 	bne	r2,zero,85728 <__sfvwrite_r+0x254>
   8581c:	d8000015 	stw	zero,0(sp)
   85820:	003fe206 	br	857ac <__sfvwrite_r+0x2d8>
   85824:	91000017 	ldw	r4,0(r18)
   85828:	90800417 	ldw	r2,16(r18)
   8582c:	1100022e 	bgeu	r2,r4,85838 <__sfvwrite_r+0x364>
   85830:	8023883a 	mov	r17,r16
   85834:	85003136 	bltu	r16,r20,858fc <__sfvwrite_r+0x428>
   85838:	91c00517 	ldw	r7,20(r18)
   8583c:	a1c01836 	bltu	r20,r7,858a0 <__sfvwrite_r+0x3cc>
   85840:	90c00917 	ldw	r3,36(r18)
   85844:	91400717 	ldw	r5,28(r18)
   85848:	e009883a 	mov	r4,fp
   8584c:	b80d883a 	mov	r6,r23
   85850:	183ee83a 	callr	r3
   85854:	1021883a 	mov	r16,r2
   85858:	00bfb30e 	bge	zero,r2,85728 <__sfvwrite_r+0x254>
   8585c:	1023883a 	mov	r17,r2
   85860:	1027883a 	mov	r19,r2
   85864:	003f9b06 	br	856d4 <__sfvwrite_r+0x200>
   85868:	b80b883a 	mov	r5,r23
   8586c:	800d883a 	mov	r6,r16
   85870:	008660c0 	call	8660c <memmove>
   85874:	90c00217 	ldw	r3,8(r18)
   85878:	90800017 	ldw	r2,0(r18)
   8587c:	8023883a 	mov	r17,r16
   85880:	1c07c83a 	sub	r3,r3,r16
   85884:	1405883a 	add	r2,r2,r16
   85888:	90c00215 	stw	r3,8(r18)
   8588c:	90800015 	stw	r2,0(r18)
   85890:	003fc406 	br	857a4 <__sfvwrite_r+0x2d0>
   85894:	a00d883a 	mov	r6,r20
   85898:	a021883a 	mov	r16,r20
   8589c:	003f8106 	br	856a4 <__sfvwrite_r+0x1d0>
   858a0:	b80b883a 	mov	r5,r23
   858a4:	a00d883a 	mov	r6,r20
   858a8:	008660c0 	call	8660c <memmove>
   858ac:	90c00217 	ldw	r3,8(r18)
   858b0:	90800017 	ldw	r2,0(r18)
   858b4:	a021883a 	mov	r16,r20
   858b8:	1d07c83a 	sub	r3,r3,r20
   858bc:	1505883a 	add	r2,r2,r20
   858c0:	a023883a 	mov	r17,r20
   858c4:	a027883a 	mov	r19,r20
   858c8:	90c00215 	stw	r3,8(r18)
   858cc:	90800015 	stw	r2,0(r18)
   858d0:	003f8006 	br	856d4 <__sfvwrite_r+0x200>
   858d4:	b809883a 	mov	r4,r23
   858d8:	01400284 	movi	r5,10
   858dc:	980d883a 	mov	r6,r19
   858e0:	00864880 	call	86488 <memchr>
   858e4:	10001726 	beq	r2,zero,85944 <__sfvwrite_r+0x470>
   858e8:	15c5c83a 	sub	r2,r2,r23
   858ec:	15000044 	addi	r20,r2,1
   858f0:	00800044 	movi	r2,1
   858f4:	d8800015 	stw	r2,0(sp)
   858f8:	003f9806 	br	8575c <__sfvwrite_r+0x288>
   858fc:	b80b883a 	mov	r5,r23
   85900:	800d883a 	mov	r6,r16
   85904:	008660c0 	call	8660c <memmove>
   85908:	90c00017 	ldw	r3,0(r18)
   8590c:	e009883a 	mov	r4,fp
   85910:	900b883a 	mov	r5,r18
   85914:	1c07883a 	add	r3,r3,r16
   85918:	90c00015 	stw	r3,0(r18)
   8591c:	8027883a 	mov	r19,r16
   85920:	0084b700 	call	84b70 <_fflush_r>
   85924:	103f6b26 	beq	r2,zero,856d4 <__sfvwrite_r+0x200>
   85928:	003f7f06 	br	85728 <__sfvwrite_r+0x254>
   8592c:	400b883a 	mov	r5,r8
   85930:	e009883a 	mov	r4,fp
   85934:	00878100 	call	87810 <_realloc_r>
   85938:	103f7626 	beq	r2,zero,85714 <__sfvwrite_r+0x240>
   8593c:	1023883a 	mov	r17,r2
   85940:	003f5006 	br	85684 <__sfvwrite_r+0x1b0>
   85944:	00c00044 	movi	r3,1
   85948:	9d000044 	addi	r20,r19,1
   8594c:	d8c00015 	stw	r3,0(sp)
   85950:	003f8206 	br	8575c <__sfvwrite_r+0x288>
   85954:	9080030b 	ldhu	r2,12(r18)
   85958:	00c00244 	movi	r3,9
   8595c:	013fffc4 	movi	r4,-1
   85960:	10801014 	ori	r2,r2,64
   85964:	9080030d 	sth	r2,12(r18)
   85968:	e0c00015 	stw	r3,0(fp)
   8596c:	003f0606 	br	85588 <__sfvwrite_r+0xb4>

00085970 <_fwalk_reent>:
   85970:	defff704 	addi	sp,sp,-36
   85974:	dcc00315 	stw	r19,12(sp)
   85978:	24c0b804 	addi	r19,r4,736
   8597c:	dd800615 	stw	r22,24(sp)
   85980:	dd400515 	stw	r21,20(sp)
   85984:	dfc00815 	stw	ra,32(sp)
   85988:	ddc00715 	stw	r23,28(sp)
   8598c:	dd000415 	stw	r20,16(sp)
   85990:	dc800215 	stw	r18,8(sp)
   85994:	dc400115 	stw	r17,4(sp)
   85998:	dc000015 	stw	r16,0(sp)
   8599c:	202b883a 	mov	r21,r4
   859a0:	282d883a 	mov	r22,r5
   859a4:	0084df80 	call	84df8 <__sfp_lock_acquire>
   859a8:	98002126 	beq	r19,zero,85a30 <_fwalk_reent+0xc0>
   859ac:	002f883a 	mov	r23,zero
   859b0:	9c800117 	ldw	r18,4(r19)
   859b4:	9c000217 	ldw	r16,8(r19)
   859b8:	90bfffc4 	addi	r2,r18,-1
   859bc:	10000d16 	blt	r2,zero,859f4 <_fwalk_reent+0x84>
   859c0:	0023883a 	mov	r17,zero
   859c4:	053fffc4 	movi	r20,-1
   859c8:	8080030f 	ldh	r2,12(r16)
   859cc:	8c400044 	addi	r17,r17,1
   859d0:	10000626 	beq	r2,zero,859ec <_fwalk_reent+0x7c>
   859d4:	8080038f 	ldh	r2,14(r16)
   859d8:	800b883a 	mov	r5,r16
   859dc:	a809883a 	mov	r4,r21
   859e0:	15000226 	beq	r2,r20,859ec <_fwalk_reent+0x7c>
   859e4:	b03ee83a 	callr	r22
   859e8:	b8aeb03a 	or	r23,r23,r2
   859ec:	84001704 	addi	r16,r16,92
   859f0:	947ff51e 	bne	r18,r17,859c8 <_fwalk_reent+0x58>
   859f4:	9cc00017 	ldw	r19,0(r19)
   859f8:	983fed1e 	bne	r19,zero,859b0 <_fwalk_reent+0x40>
   859fc:	0084dfc0 	call	84dfc <__sfp_lock_release>
   85a00:	b805883a 	mov	r2,r23
   85a04:	dfc00817 	ldw	ra,32(sp)
   85a08:	ddc00717 	ldw	r23,28(sp)
   85a0c:	dd800617 	ldw	r22,24(sp)
   85a10:	dd400517 	ldw	r21,20(sp)
   85a14:	dd000417 	ldw	r20,16(sp)
   85a18:	dcc00317 	ldw	r19,12(sp)
   85a1c:	dc800217 	ldw	r18,8(sp)
   85a20:	dc400117 	ldw	r17,4(sp)
   85a24:	dc000017 	ldw	r16,0(sp)
   85a28:	dec00904 	addi	sp,sp,36
   85a2c:	f800283a 	ret
   85a30:	002f883a 	mov	r23,zero
   85a34:	003ff106 	br	859fc <_fwalk_reent+0x8c>

00085a38 <_fwalk>:
   85a38:	defff804 	addi	sp,sp,-32
   85a3c:	dcc00315 	stw	r19,12(sp)
   85a40:	24c0b804 	addi	r19,r4,736
   85a44:	dd400515 	stw	r21,20(sp)
   85a48:	dfc00715 	stw	ra,28(sp)
   85a4c:	dd800615 	stw	r22,24(sp)
   85a50:	dd000415 	stw	r20,16(sp)
   85a54:	dc800215 	stw	r18,8(sp)
   85a58:	dc400115 	stw	r17,4(sp)
   85a5c:	dc000015 	stw	r16,0(sp)
   85a60:	282b883a 	mov	r21,r5
   85a64:	0084df80 	call	84df8 <__sfp_lock_acquire>
   85a68:	98001f26 	beq	r19,zero,85ae8 <_fwalk+0xb0>
   85a6c:	002d883a 	mov	r22,zero
   85a70:	9c800117 	ldw	r18,4(r19)
   85a74:	9c000217 	ldw	r16,8(r19)
   85a78:	90bfffc4 	addi	r2,r18,-1
   85a7c:	10000c16 	blt	r2,zero,85ab0 <_fwalk+0x78>
   85a80:	0023883a 	mov	r17,zero
   85a84:	053fffc4 	movi	r20,-1
   85a88:	8080030f 	ldh	r2,12(r16)
   85a8c:	8c400044 	addi	r17,r17,1
   85a90:	10000526 	beq	r2,zero,85aa8 <_fwalk+0x70>
   85a94:	8080038f 	ldh	r2,14(r16)
   85a98:	8009883a 	mov	r4,r16
   85a9c:	15000226 	beq	r2,r20,85aa8 <_fwalk+0x70>
   85aa0:	a83ee83a 	callr	r21
   85aa4:	b0acb03a 	or	r22,r22,r2
   85aa8:	84001704 	addi	r16,r16,92
   85aac:	947ff61e 	bne	r18,r17,85a88 <_fwalk+0x50>
   85ab0:	9cc00017 	ldw	r19,0(r19)
   85ab4:	983fee1e 	bne	r19,zero,85a70 <_fwalk+0x38>
   85ab8:	0084dfc0 	call	84dfc <__sfp_lock_release>
   85abc:	b005883a 	mov	r2,r22
   85ac0:	dfc00717 	ldw	ra,28(sp)
   85ac4:	dd800617 	ldw	r22,24(sp)
   85ac8:	dd400517 	ldw	r21,20(sp)
   85acc:	dd000417 	ldw	r20,16(sp)
   85ad0:	dcc00317 	ldw	r19,12(sp)
   85ad4:	dc800217 	ldw	r18,8(sp)
   85ad8:	dc400117 	ldw	r17,4(sp)
   85adc:	dc000017 	ldw	r16,0(sp)
   85ae0:	dec00804 	addi	sp,sp,32
   85ae4:	f800283a 	ret
   85ae8:	002d883a 	mov	r22,zero
   85aec:	003ff206 	br	85ab8 <_fwalk+0x80>

00085af0 <__locale_charset>:
   85af0:	d0a00417 	ldw	r2,-32752(gp)
   85af4:	f800283a 	ret

00085af8 <_localeconv_r>:
   85af8:	00800274 	movhi	r2,9
   85afc:	109e1104 	addi	r2,r2,30788
   85b00:	f800283a 	ret

00085b04 <localeconv>:
   85b04:	008002b4 	movhi	r2,10
   85b08:	10a59d04 	addi	r2,r2,-27020
   85b0c:	11000017 	ldw	r4,0(r2)
   85b10:	0085af81 	jmpi	85af8 <_localeconv_r>

00085b14 <_setlocale_r>:
   85b14:	defffc04 	addi	sp,sp,-16
   85b18:	00c00274 	movhi	r3,9
   85b1c:	18dde704 	addi	r3,r3,30620
   85b20:	dc800215 	stw	r18,8(sp)
   85b24:	dc400115 	stw	r17,4(sp)
   85b28:	dc000015 	stw	r16,0(sp)
   85b2c:	2023883a 	mov	r17,r4
   85b30:	2825883a 	mov	r18,r5
   85b34:	dfc00315 	stw	ra,12(sp)
   85b38:	3021883a 	mov	r16,r6
   85b3c:	3009883a 	mov	r4,r6
   85b40:	180b883a 	mov	r5,r3
   85b44:	30000926 	beq	r6,zero,85b6c <_setlocale_r+0x58>
   85b48:	00880300 	call	88030 <strcmp>
   85b4c:	8009883a 	mov	r4,r16
   85b50:	01400274 	movhi	r5,9
   85b54:	295df804 	addi	r5,r5,30688
   85b58:	10000b1e 	bne	r2,zero,85b88 <_setlocale_r+0x74>
   85b5c:	8c000d15 	stw	r16,52(r17)
   85b60:	8c800c15 	stw	r18,48(r17)
   85b64:	00c00274 	movhi	r3,9
   85b68:	18dde704 	addi	r3,r3,30620
   85b6c:	1805883a 	mov	r2,r3
   85b70:	dfc00317 	ldw	ra,12(sp)
   85b74:	dc800217 	ldw	r18,8(sp)
   85b78:	dc400117 	ldw	r17,4(sp)
   85b7c:	dc000017 	ldw	r16,0(sp)
   85b80:	dec00404 	addi	sp,sp,16
   85b84:	f800283a 	ret
   85b88:	00880300 	call	88030 <strcmp>
   85b8c:	0007883a 	mov	r3,zero
   85b90:	103ff226 	beq	r2,zero,85b5c <_setlocale_r+0x48>
   85b94:	003ff506 	br	85b6c <_setlocale_r+0x58>

00085b98 <setlocale>:
   85b98:	018002b4 	movhi	r6,10
   85b9c:	31a59d04 	addi	r6,r6,-27020
   85ba0:	2007883a 	mov	r3,r4
   85ba4:	31000017 	ldw	r4,0(r6)
   85ba8:	280d883a 	mov	r6,r5
   85bac:	180b883a 	mov	r5,r3
   85bb0:	0085b141 	jmpi	85b14 <_setlocale_r>

00085bb4 <__smakebuf_r>:
   85bb4:	2880030b 	ldhu	r2,12(r5)
   85bb8:	deffed04 	addi	sp,sp,-76
   85bbc:	dc401015 	stw	r17,64(sp)
   85bc0:	1080008c 	andi	r2,r2,2
   85bc4:	dc000f15 	stw	r16,60(sp)
   85bc8:	dfc01215 	stw	ra,72(sp)
   85bcc:	dc801115 	stw	r18,68(sp)
   85bd0:	2821883a 	mov	r16,r5
   85bd4:	2023883a 	mov	r17,r4
   85bd8:	10000b26 	beq	r2,zero,85c08 <__smakebuf_r+0x54>
   85bdc:	28c010c4 	addi	r3,r5,67
   85be0:	00800044 	movi	r2,1
   85be4:	28800515 	stw	r2,20(r5)
   85be8:	28c00415 	stw	r3,16(r5)
   85bec:	28c00015 	stw	r3,0(r5)
   85bf0:	dfc01217 	ldw	ra,72(sp)
   85bf4:	dc801117 	ldw	r18,68(sp)
   85bf8:	dc401017 	ldw	r17,64(sp)
   85bfc:	dc000f17 	ldw	r16,60(sp)
   85c00:	dec01304 	addi	sp,sp,76
   85c04:	f800283a 	ret
   85c08:	2940038f 	ldh	r5,14(r5)
   85c0c:	28002116 	blt	r5,zero,85c94 <__smakebuf_r+0xe0>
   85c10:	d80d883a 	mov	r6,sp
   85c14:	00883c00 	call	883c0 <_fstat_r>
   85c18:	10001e16 	blt	r2,zero,85c94 <__smakebuf_r+0xe0>
   85c1c:	d8800117 	ldw	r2,4(sp)
   85c20:	00e00014 	movui	r3,32768
   85c24:	113c000c 	andi	r4,r2,61440
   85c28:	20c03126 	beq	r4,r3,85cf0 <__smakebuf_r+0x13c>
   85c2c:	8080030b 	ldhu	r2,12(r16)
   85c30:	00c80004 	movi	r3,8192
   85c34:	10820014 	ori	r2,r2,2048
   85c38:	8080030d 	sth	r2,12(r16)
   85c3c:	20c01e26 	beq	r4,r3,85cb8 <__smakebuf_r+0x104>
   85c40:	04810004 	movi	r18,1024
   85c44:	8809883a 	mov	r4,r17
   85c48:	900b883a 	mov	r5,r18
   85c4c:	0085d480 	call	85d48 <_malloc_r>
   85c50:	1009883a 	mov	r4,r2
   85c54:	10003126 	beq	r2,zero,85d1c <__smakebuf_r+0x168>
   85c58:	80c0030b 	ldhu	r3,12(r16)
   85c5c:	00800234 	movhi	r2,8
   85c60:	1093bb04 	addi	r2,r2,20204
   85c64:	88800f15 	stw	r2,60(r17)
   85c68:	18c02014 	ori	r3,r3,128
   85c6c:	84800515 	stw	r18,20(r16)
   85c70:	80c0030d 	sth	r3,12(r16)
   85c74:	81000415 	stw	r4,16(r16)
   85c78:	81000015 	stw	r4,0(r16)
   85c7c:	dfc01217 	ldw	ra,72(sp)
   85c80:	dc801117 	ldw	r18,68(sp)
   85c84:	dc401017 	ldw	r17,64(sp)
   85c88:	dc000f17 	ldw	r16,60(sp)
   85c8c:	dec01304 	addi	sp,sp,76
   85c90:	f800283a 	ret
   85c94:	80c0030b 	ldhu	r3,12(r16)
   85c98:	1880200c 	andi	r2,r3,128
   85c9c:	10000426 	beq	r2,zero,85cb0 <__smakebuf_r+0xfc>
   85ca0:	04801004 	movi	r18,64
   85ca4:	18820014 	ori	r2,r3,2048
   85ca8:	8080030d 	sth	r2,12(r16)
   85cac:	003fe506 	br	85c44 <__smakebuf_r+0x90>
   85cb0:	04810004 	movi	r18,1024
   85cb4:	003ffb06 	br	85ca4 <__smakebuf_r+0xf0>
   85cb8:	8140038f 	ldh	r5,14(r16)
   85cbc:	8809883a 	mov	r4,r17
   85cc0:	00884340 	call	88434 <_isatty_r>
   85cc4:	103fde26 	beq	r2,zero,85c40 <__smakebuf_r+0x8c>
   85cc8:	8080030b 	ldhu	r2,12(r16)
   85ccc:	80c010c4 	addi	r3,r16,67
   85cd0:	04810004 	movi	r18,1024
   85cd4:	10800054 	ori	r2,r2,1
   85cd8:	8080030d 	sth	r2,12(r16)
   85cdc:	00800044 	movi	r2,1
   85ce0:	80c00415 	stw	r3,16(r16)
   85ce4:	80800515 	stw	r2,20(r16)
   85ce8:	80c00015 	stw	r3,0(r16)
   85cec:	003fd506 	br	85c44 <__smakebuf_r+0x90>
   85cf0:	80c00a17 	ldw	r3,40(r16)
   85cf4:	00800234 	movhi	r2,8
   85cf8:	109fbb04 	addi	r2,r2,32492
   85cfc:	18bfcb1e 	bne	r3,r2,85c2c <__smakebuf_r+0x78>
   85d00:	8080030b 	ldhu	r2,12(r16)
   85d04:	00c10004 	movi	r3,1024
   85d08:	1825883a 	mov	r18,r3
   85d0c:	10c4b03a 	or	r2,r2,r3
   85d10:	8080030d 	sth	r2,12(r16)
   85d14:	80c01315 	stw	r3,76(r16)
   85d18:	003fca06 	br	85c44 <__smakebuf_r+0x90>
   85d1c:	8100030b 	ldhu	r4,12(r16)
   85d20:	2080800c 	andi	r2,r4,512
   85d24:	103fb21e 	bne	r2,zero,85bf0 <__smakebuf_r+0x3c>
   85d28:	80c010c4 	addi	r3,r16,67
   85d2c:	21000094 	ori	r4,r4,2
   85d30:	00800044 	movi	r2,1
   85d34:	80800515 	stw	r2,20(r16)
   85d38:	8100030d 	sth	r4,12(r16)
   85d3c:	80c00415 	stw	r3,16(r16)
   85d40:	80c00015 	stw	r3,0(r16)
   85d44:	003faa06 	br	85bf0 <__smakebuf_r+0x3c>

00085d48 <_malloc_r>:
   85d48:	defff604 	addi	sp,sp,-40
   85d4c:	28c002c4 	addi	r3,r5,11
   85d50:	00800584 	movi	r2,22
   85d54:	dc800215 	stw	r18,8(sp)
   85d58:	dfc00915 	stw	ra,36(sp)
   85d5c:	df000815 	stw	fp,32(sp)
   85d60:	ddc00715 	stw	r23,28(sp)
   85d64:	dd800615 	stw	r22,24(sp)
   85d68:	dd400515 	stw	r21,20(sp)
   85d6c:	dd000415 	stw	r20,16(sp)
   85d70:	dcc00315 	stw	r19,12(sp)
   85d74:	dc400115 	stw	r17,4(sp)
   85d78:	dc000015 	stw	r16,0(sp)
   85d7c:	2025883a 	mov	r18,r4
   85d80:	10c01236 	bltu	r2,r3,85dcc <_malloc_r+0x84>
   85d84:	04400404 	movi	r17,16
   85d88:	8940142e 	bgeu	r17,r5,85ddc <_malloc_r+0x94>
   85d8c:	00800304 	movi	r2,12
   85d90:	0007883a 	mov	r3,zero
   85d94:	90800015 	stw	r2,0(r18)
   85d98:	1805883a 	mov	r2,r3
   85d9c:	dfc00917 	ldw	ra,36(sp)
   85da0:	df000817 	ldw	fp,32(sp)
   85da4:	ddc00717 	ldw	r23,28(sp)
   85da8:	dd800617 	ldw	r22,24(sp)
   85dac:	dd400517 	ldw	r21,20(sp)
   85db0:	dd000417 	ldw	r20,16(sp)
   85db4:	dcc00317 	ldw	r19,12(sp)
   85db8:	dc800217 	ldw	r18,8(sp)
   85dbc:	dc400117 	ldw	r17,4(sp)
   85dc0:	dc000017 	ldw	r16,0(sp)
   85dc4:	dec00a04 	addi	sp,sp,40
   85dc8:	f800283a 	ret
   85dcc:	00bffe04 	movi	r2,-8
   85dd0:	18a2703a 	and	r17,r3,r2
   85dd4:	883fed16 	blt	r17,zero,85d8c <_malloc_r+0x44>
   85dd8:	897fec36 	bltu	r17,r5,85d8c <_malloc_r+0x44>
   85ddc:	9009883a 	mov	r4,r18
   85de0:	008bc1c0 	call	8bc1c <__malloc_lock>
   85de4:	00807dc4 	movi	r2,503
   85de8:	14402b2e 	bgeu	r2,r17,85e98 <_malloc_r+0x150>
   85dec:	8806d27a 	srli	r3,r17,9
   85df0:	18003f1e 	bne	r3,zero,85ef0 <_malloc_r+0x1a8>
   85df4:	880cd0fa 	srli	r6,r17,3
   85df8:	300490fa 	slli	r2,r6,3
   85dfc:	02c002b4 	movhi	r11,10
   85e00:	5ae00a04 	addi	r11,r11,-32728
   85e04:	12cb883a 	add	r5,r2,r11
   85e08:	2c000317 	ldw	r16,12(r5)
   85e0c:	580f883a 	mov	r7,r11
   85e10:	2c00041e 	bne	r5,r16,85e24 <_malloc_r+0xdc>
   85e14:	00000a06 	br	85e40 <_malloc_r+0xf8>
   85e18:	1800860e 	bge	r3,zero,86034 <_malloc_r+0x2ec>
   85e1c:	84000317 	ldw	r16,12(r16)
   85e20:	2c000726 	beq	r5,r16,85e40 <_malloc_r+0xf8>
   85e24:	80800117 	ldw	r2,4(r16)
   85e28:	00ffff04 	movi	r3,-4
   85e2c:	10c8703a 	and	r4,r2,r3
   85e30:	2447c83a 	sub	r3,r4,r17
   85e34:	008003c4 	movi	r2,15
   85e38:	10fff70e 	bge	r2,r3,85e18 <_malloc_r+0xd0>
   85e3c:	31bfffc4 	addi	r6,r6,-1
   85e40:	32400044 	addi	r9,r6,1
   85e44:	028002b4 	movhi	r10,10
   85e48:	52a00c04 	addi	r10,r10,-32720
   85e4c:	54000217 	ldw	r16,8(r10)
   85e50:	8280a026 	beq	r16,r10,860d4 <_malloc_r+0x38c>
   85e54:	80800117 	ldw	r2,4(r16)
   85e58:	00ffff04 	movi	r3,-4
   85e5c:	10ca703a 	and	r5,r2,r3
   85e60:	2c4dc83a 	sub	r6,r5,r17
   85e64:	008003c4 	movi	r2,15
   85e68:	11808316 	blt	r2,r6,86078 <_malloc_r+0x330>
   85e6c:	52800315 	stw	r10,12(r10)
   85e70:	52800215 	stw	r10,8(r10)
   85e74:	30002916 	blt	r6,zero,85f1c <_malloc_r+0x1d4>
   85e78:	8147883a 	add	r3,r16,r5
   85e7c:	18800117 	ldw	r2,4(r3)
   85e80:	9009883a 	mov	r4,r18
   85e84:	10800054 	ori	r2,r2,1
   85e88:	18800115 	stw	r2,4(r3)
   85e8c:	008bd240 	call	8bd24 <__malloc_unlock>
   85e90:	80c00204 	addi	r3,r16,8
   85e94:	003fc006 	br	85d98 <_malloc_r+0x50>
   85e98:	02c002b4 	movhi	r11,10
   85e9c:	5ae00a04 	addi	r11,r11,-32728
   85ea0:	8ac5883a 	add	r2,r17,r11
   85ea4:	14000317 	ldw	r16,12(r2)
   85ea8:	580f883a 	mov	r7,r11
   85eac:	8806d0fa 	srli	r3,r17,3
   85eb0:	14006c26 	beq	r2,r16,86064 <_malloc_r+0x31c>
   85eb4:	80c00117 	ldw	r3,4(r16)
   85eb8:	00bfff04 	movi	r2,-4
   85ebc:	81800317 	ldw	r6,12(r16)
   85ec0:	1886703a 	and	r3,r3,r2
   85ec4:	80c7883a 	add	r3,r16,r3
   85ec8:	18800117 	ldw	r2,4(r3)
   85ecc:	81400217 	ldw	r5,8(r16)
   85ed0:	9009883a 	mov	r4,r18
   85ed4:	10800054 	ori	r2,r2,1
   85ed8:	18800115 	stw	r2,4(r3)
   85edc:	31400215 	stw	r5,8(r6)
   85ee0:	29800315 	stw	r6,12(r5)
   85ee4:	008bd240 	call	8bd24 <__malloc_unlock>
   85ee8:	80c00204 	addi	r3,r16,8
   85eec:	003faa06 	br	85d98 <_malloc_r+0x50>
   85ef0:	00800104 	movi	r2,4
   85ef4:	10c0052e 	bgeu	r2,r3,85f0c <_malloc_r+0x1c4>
   85ef8:	00800504 	movi	r2,20
   85efc:	10c07836 	bltu	r2,r3,860e0 <_malloc_r+0x398>
   85f00:	198016c4 	addi	r6,r3,91
   85f04:	300490fa 	slli	r2,r6,3
   85f08:	003fbc06 	br	85dfc <_malloc_r+0xb4>
   85f0c:	8804d1ba 	srli	r2,r17,6
   85f10:	11800e04 	addi	r6,r2,56
   85f14:	300490fa 	slli	r2,r6,3
   85f18:	003fb806 	br	85dfc <_malloc_r+0xb4>
   85f1c:	00807fc4 	movi	r2,511
   85f20:	1140bb36 	bltu	r2,r5,86210 <_malloc_r+0x4c8>
   85f24:	2806d0fa 	srli	r3,r5,3
   85f28:	573ffe04 	addi	fp,r10,-8
   85f2c:	00800044 	movi	r2,1
   85f30:	180890fa 	slli	r4,r3,3
   85f34:	1807d0ba 	srai	r3,r3,2
   85f38:	e1c00117 	ldw	r7,4(fp)
   85f3c:	5909883a 	add	r4,r11,r4
   85f40:	21400217 	ldw	r5,8(r4)
   85f44:	10c4983a 	sll	r2,r2,r3
   85f48:	81000315 	stw	r4,12(r16)
   85f4c:	81400215 	stw	r5,8(r16)
   85f50:	388eb03a 	or	r7,r7,r2
   85f54:	2c000315 	stw	r16,12(r5)
   85f58:	24000215 	stw	r16,8(r4)
   85f5c:	e1c00115 	stw	r7,4(fp)
   85f60:	4807883a 	mov	r3,r9
   85f64:	4800cd16 	blt	r9,zero,8629c <_malloc_r+0x554>
   85f68:	1807d0ba 	srai	r3,r3,2
   85f6c:	00800044 	movi	r2,1
   85f70:	10c8983a 	sll	r4,r2,r3
   85f74:	39004436 	bltu	r7,r4,86088 <_malloc_r+0x340>
   85f78:	21c4703a 	and	r2,r4,r7
   85f7c:	10000a1e 	bne	r2,zero,85fa8 <_malloc_r+0x260>
   85f80:	2109883a 	add	r4,r4,r4
   85f84:	00bfff04 	movi	r2,-4
   85f88:	4884703a 	and	r2,r9,r2
   85f8c:	3906703a 	and	r3,r7,r4
   85f90:	12400104 	addi	r9,r2,4
   85f94:	1800041e 	bne	r3,zero,85fa8 <_malloc_r+0x260>
   85f98:	2109883a 	add	r4,r4,r4
   85f9c:	3904703a 	and	r2,r7,r4
   85fa0:	4a400104 	addi	r9,r9,4
   85fa4:	103ffc26 	beq	r2,zero,85f98 <_malloc_r+0x250>
   85fa8:	480490fa 	slli	r2,r9,3
   85fac:	4819883a 	mov	r12,r9
   85fb0:	023fff04 	movi	r8,-4
   85fb4:	589b883a 	add	r13,r11,r2
   85fb8:	6807883a 	mov	r3,r13
   85fbc:	014003c4 	movi	r5,15
   85fc0:	1c000317 	ldw	r16,12(r3)
   85fc4:	1c00041e 	bne	r3,r16,85fd8 <_malloc_r+0x290>
   85fc8:	0000a706 	br	86268 <_malloc_r+0x520>
   85fcc:	3000ab0e 	bge	r6,zero,8627c <_malloc_r+0x534>
   85fd0:	84000317 	ldw	r16,12(r16)
   85fd4:	1c00a426 	beq	r3,r16,86268 <_malloc_r+0x520>
   85fd8:	80800117 	ldw	r2,4(r16)
   85fdc:	1204703a 	and	r2,r2,r8
   85fe0:	144dc83a 	sub	r6,r2,r17
   85fe4:	29bff90e 	bge	r5,r6,85fcc <_malloc_r+0x284>
   85fe8:	81000317 	ldw	r4,12(r16)
   85fec:	80c00217 	ldw	r3,8(r16)
   85ff0:	89400054 	ori	r5,r17,1
   85ff4:	8445883a 	add	r2,r16,r17
   85ff8:	20c00215 	stw	r3,8(r4)
   85ffc:	19000315 	stw	r4,12(r3)
   86000:	81400115 	stw	r5,4(r16)
   86004:	1187883a 	add	r3,r2,r6
   86008:	31000054 	ori	r4,r6,1
   8600c:	50800315 	stw	r2,12(r10)
   86010:	50800215 	stw	r2,8(r10)
   86014:	19800015 	stw	r6,0(r3)
   86018:	11000115 	stw	r4,4(r2)
   8601c:	12800215 	stw	r10,8(r2)
   86020:	12800315 	stw	r10,12(r2)
   86024:	9009883a 	mov	r4,r18
   86028:	008bd240 	call	8bd24 <__malloc_unlock>
   8602c:	80c00204 	addi	r3,r16,8
   86030:	003f5906 	br	85d98 <_malloc_r+0x50>
   86034:	8109883a 	add	r4,r16,r4
   86038:	20800117 	ldw	r2,4(r4)
   8603c:	80c00217 	ldw	r3,8(r16)
   86040:	81400317 	ldw	r5,12(r16)
   86044:	10800054 	ori	r2,r2,1
   86048:	20800115 	stw	r2,4(r4)
   8604c:	28c00215 	stw	r3,8(r5)
   86050:	19400315 	stw	r5,12(r3)
   86054:	9009883a 	mov	r4,r18
   86058:	008bd240 	call	8bd24 <__malloc_unlock>
   8605c:	80c00204 	addi	r3,r16,8
   86060:	003f4d06 	br	85d98 <_malloc_r+0x50>
   86064:	80800204 	addi	r2,r16,8
   86068:	14000317 	ldw	r16,12(r2)
   8606c:	143f911e 	bne	r2,r16,85eb4 <_malloc_r+0x16c>
   86070:	1a400084 	addi	r9,r3,2
   86074:	003f7306 	br	85e44 <_malloc_r+0xfc>
   86078:	88c00054 	ori	r3,r17,1
   8607c:	8445883a 	add	r2,r16,r17
   86080:	80c00115 	stw	r3,4(r16)
   86084:	003fdf06 	br	86004 <_malloc_r+0x2bc>
   86088:	e4000217 	ldw	r16,8(fp)
   8608c:	00bfff04 	movi	r2,-4
   86090:	80c00117 	ldw	r3,4(r16)
   86094:	802d883a 	mov	r22,r16
   86098:	18aa703a 	and	r21,r3,r2
   8609c:	ac401636 	bltu	r21,r17,860f8 <_malloc_r+0x3b0>
   860a0:	ac49c83a 	sub	r4,r21,r17
   860a4:	008003c4 	movi	r2,15
   860a8:	1100130e 	bge	r2,r4,860f8 <_malloc_r+0x3b0>
   860ac:	88800054 	ori	r2,r17,1
   860b0:	8447883a 	add	r3,r16,r17
   860b4:	80800115 	stw	r2,4(r16)
   860b8:	20800054 	ori	r2,r4,1
   860bc:	18800115 	stw	r2,4(r3)
   860c0:	e0c00215 	stw	r3,8(fp)
   860c4:	9009883a 	mov	r4,r18
   860c8:	008bd240 	call	8bd24 <__malloc_unlock>
   860cc:	80c00204 	addi	r3,r16,8
   860d0:	003f3106 	br	85d98 <_malloc_r+0x50>
   860d4:	39c00117 	ldw	r7,4(r7)
   860d8:	573ffe04 	addi	fp,r10,-8
   860dc:	003fa006 	br	85f60 <_malloc_r+0x218>
   860e0:	00801504 	movi	r2,84
   860e4:	10c06736 	bltu	r2,r3,86284 <_malloc_r+0x53c>
   860e8:	8804d33a 	srli	r2,r17,12
   860ec:	11801b84 	addi	r6,r2,110
   860f0:	300490fa 	slli	r2,r6,3
   860f4:	003f4106 	br	85dfc <_malloc_r+0xb4>
   860f8:	d0a6f817 	ldw	r2,-25632(gp)
   860fc:	d0e00617 	ldw	r3,-32744(gp)
   86100:	053fffc4 	movi	r20,-1
   86104:	10800404 	addi	r2,r2,16
   86108:	88a7883a 	add	r19,r17,r2
   8610c:	1d000326 	beq	r3,r20,8611c <_malloc_r+0x3d4>
   86110:	98c3ffc4 	addi	r3,r19,4095
   86114:	00bc0004 	movi	r2,-4096
   86118:	18a6703a 	and	r19,r3,r2
   8611c:	9009883a 	mov	r4,r18
   86120:	980b883a 	mov	r5,r19
   86124:	0087e740 	call	87e74 <_sbrk_r>
   86128:	1009883a 	mov	r4,r2
   8612c:	15000426 	beq	r2,r20,86140 <_malloc_r+0x3f8>
   86130:	854b883a 	add	r5,r16,r21
   86134:	1029883a 	mov	r20,r2
   86138:	11405a2e 	bgeu	r2,r5,862a4 <_malloc_r+0x55c>
   8613c:	87000c26 	beq	r16,fp,86170 <_malloc_r+0x428>
   86140:	e4000217 	ldw	r16,8(fp)
   86144:	80c00117 	ldw	r3,4(r16)
   86148:	00bfff04 	movi	r2,-4
   8614c:	1884703a 	and	r2,r3,r2
   86150:	14400336 	bltu	r2,r17,86160 <_malloc_r+0x418>
   86154:	1449c83a 	sub	r4,r2,r17
   86158:	008003c4 	movi	r2,15
   8615c:	113fd316 	blt	r2,r4,860ac <_malloc_r+0x364>
   86160:	9009883a 	mov	r4,r18
   86164:	008bd240 	call	8bd24 <__malloc_unlock>
   86168:	0007883a 	mov	r3,zero
   8616c:	003f0a06 	br	85d98 <_malloc_r+0x50>
   86170:	05c002b4 	movhi	r23,10
   86174:	bdecb704 	addi	r23,r23,-19748
   86178:	b8800017 	ldw	r2,0(r23)
   8617c:	988d883a 	add	r6,r19,r2
   86180:	b9800015 	stw	r6,0(r23)
   86184:	d0e00617 	ldw	r3,-32744(gp)
   86188:	00bfffc4 	movi	r2,-1
   8618c:	18808e26 	beq	r3,r2,863c8 <_malloc_r+0x680>
   86190:	2145c83a 	sub	r2,r4,r5
   86194:	3085883a 	add	r2,r6,r2
   86198:	b8800015 	stw	r2,0(r23)
   8619c:	20c001cc 	andi	r3,r4,7
   861a0:	18005f1e 	bne	r3,zero,86320 <_malloc_r+0x5d8>
   861a4:	000b883a 	mov	r5,zero
   861a8:	a4c5883a 	add	r2,r20,r19
   861ac:	1083ffcc 	andi	r2,r2,4095
   861b0:	00c40004 	movi	r3,4096
   861b4:	1887c83a 	sub	r3,r3,r2
   861b8:	28e7883a 	add	r19,r5,r3
   861bc:	9009883a 	mov	r4,r18
   861c0:	980b883a 	mov	r5,r19
   861c4:	0087e740 	call	87e74 <_sbrk_r>
   861c8:	1007883a 	mov	r3,r2
   861cc:	00bfffc4 	movi	r2,-1
   861d0:	18807a26 	beq	r3,r2,863bc <_malloc_r+0x674>
   861d4:	1d05c83a 	sub	r2,r3,r20
   861d8:	9885883a 	add	r2,r19,r2
   861dc:	10c00054 	ori	r3,r2,1
   861e0:	b8800017 	ldw	r2,0(r23)
   861e4:	a021883a 	mov	r16,r20
   861e8:	a0c00115 	stw	r3,4(r20)
   861ec:	9885883a 	add	r2,r19,r2
   861f0:	b8800015 	stw	r2,0(r23)
   861f4:	e5000215 	stw	r20,8(fp)
   861f8:	b7003626 	beq	r22,fp,862d4 <_malloc_r+0x58c>
   861fc:	018003c4 	movi	r6,15
   86200:	35404b36 	bltu	r6,r21,86330 <_malloc_r+0x5e8>
   86204:	00800044 	movi	r2,1
   86208:	a0800115 	stw	r2,4(r20)
   8620c:	003fcd06 	br	86144 <_malloc_r+0x3fc>
   86210:	2808d27a 	srli	r4,r5,9
   86214:	2000371e 	bne	r4,zero,862f4 <_malloc_r+0x5ac>
   86218:	2808d0fa 	srli	r4,r5,3
   8621c:	200690fa 	slli	r3,r4,3
   86220:	1ad1883a 	add	r8,r3,r11
   86224:	41800217 	ldw	r6,8(r8)
   86228:	41805b26 	beq	r8,r6,86398 <_malloc_r+0x650>
   8622c:	30800117 	ldw	r2,4(r6)
   86230:	00ffff04 	movi	r3,-4
   86234:	10c4703a 	and	r2,r2,r3
   86238:	2880022e 	bgeu	r5,r2,86244 <_malloc_r+0x4fc>
   8623c:	31800217 	ldw	r6,8(r6)
   86240:	41bffa1e 	bne	r8,r6,8622c <_malloc_r+0x4e4>
   86244:	32000317 	ldw	r8,12(r6)
   86248:	39c00117 	ldw	r7,4(r7)
   8624c:	82000315 	stw	r8,12(r16)
   86250:	81800215 	stw	r6,8(r16)
   86254:	070002b4 	movhi	fp,10
   86258:	e7200a04 	addi	fp,fp,-32728
   8625c:	34000315 	stw	r16,12(r6)
   86260:	44000215 	stw	r16,8(r8)
   86264:	003f3e06 	br	85f60 <_malloc_r+0x218>
   86268:	63000044 	addi	r12,r12,1
   8626c:	608000cc 	andi	r2,r12,3
   86270:	10005d26 	beq	r2,zero,863e8 <_malloc_r+0x6a0>
   86274:	18c00204 	addi	r3,r3,8
   86278:	003f5106 	br	85fc0 <_malloc_r+0x278>
   8627c:	8089883a 	add	r4,r16,r2
   86280:	003f6d06 	br	86038 <_malloc_r+0x2f0>
   86284:	00805504 	movi	r2,340
   86288:	10c02036 	bltu	r2,r3,8630c <_malloc_r+0x5c4>
   8628c:	8804d3fa 	srli	r2,r17,15
   86290:	11801dc4 	addi	r6,r2,119
   86294:	300490fa 	slli	r2,r6,3
   86298:	003ed806 	br	85dfc <_malloc_r+0xb4>
   8629c:	48c000c4 	addi	r3,r9,3
   862a0:	003f3106 	br	85f68 <_malloc_r+0x220>
   862a4:	05c002b4 	movhi	r23,10
   862a8:	bdecb704 	addi	r23,r23,-19748
   862ac:	b8800017 	ldw	r2,0(r23)
   862b0:	988d883a 	add	r6,r19,r2
   862b4:	b9800015 	stw	r6,0(r23)
   862b8:	293fb21e 	bne	r5,r4,86184 <_malloc_r+0x43c>
   862bc:	2083ffcc 	andi	r2,r4,4095
   862c0:	103fb01e 	bne	r2,zero,86184 <_malloc_r+0x43c>
   862c4:	e4000217 	ldw	r16,8(fp)
   862c8:	9d45883a 	add	r2,r19,r21
   862cc:	10800054 	ori	r2,r2,1
   862d0:	80800115 	stw	r2,4(r16)
   862d4:	b8c00017 	ldw	r3,0(r23)
   862d8:	d0a6f917 	ldw	r2,-25628(gp)
   862dc:	10c0012e 	bgeu	r2,r3,862e4 <_malloc_r+0x59c>
   862e0:	d0e6f915 	stw	r3,-25628(gp)
   862e4:	d0a6fa17 	ldw	r2,-25624(gp)
   862e8:	10ff962e 	bgeu	r2,r3,86144 <_malloc_r+0x3fc>
   862ec:	d0e6fa15 	stw	r3,-25624(gp)
   862f0:	003f9406 	br	86144 <_malloc_r+0x3fc>
   862f4:	00800104 	movi	r2,4
   862f8:	11001e36 	bltu	r2,r4,86374 <_malloc_r+0x62c>
   862fc:	2804d1ba 	srli	r2,r5,6
   86300:	11000e04 	addi	r4,r2,56
   86304:	200690fa 	slli	r3,r4,3
   86308:	003fc506 	br	86220 <_malloc_r+0x4d8>
   8630c:	00815504 	movi	r2,1364
   86310:	10c01d2e 	bgeu	r2,r3,86388 <_malloc_r+0x640>
   86314:	01801f84 	movi	r6,126
   86318:	0080fc04 	movi	r2,1008
   8631c:	003eb706 	br	85dfc <_malloc_r+0xb4>
   86320:	00800204 	movi	r2,8
   86324:	10cbc83a 	sub	r5,r2,r3
   86328:	2169883a 	add	r20,r4,r5
   8632c:	003f9e06 	br	861a8 <_malloc_r+0x460>
   86330:	00bffe04 	movi	r2,-8
   86334:	a93ffd04 	addi	r4,r21,-12
   86338:	2088703a 	and	r4,r4,r2
   8633c:	b10b883a 	add	r5,r22,r4
   86340:	00c00144 	movi	r3,5
   86344:	28c00215 	stw	r3,8(r5)
   86348:	28c00115 	stw	r3,4(r5)
   8634c:	b0800117 	ldw	r2,4(r22)
   86350:	1080004c 	andi	r2,r2,1
   86354:	2084b03a 	or	r2,r4,r2
   86358:	b0800115 	stw	r2,4(r22)
   8635c:	313fdd2e 	bgeu	r6,r4,862d4 <_malloc_r+0x58c>
   86360:	b1400204 	addi	r5,r22,8
   86364:	9009883a 	mov	r4,r18
   86368:	00851c00 	call	851c0 <_free_r>
   8636c:	e4000217 	ldw	r16,8(fp)
   86370:	003fd806 	br	862d4 <_malloc_r+0x58c>
   86374:	00800504 	movi	r2,20
   86378:	11001536 	bltu	r2,r4,863d0 <_malloc_r+0x688>
   8637c:	210016c4 	addi	r4,r4,91
   86380:	200690fa 	slli	r3,r4,3
   86384:	003fa606 	br	86220 <_malloc_r+0x4d8>
   86388:	8804d4ba 	srli	r2,r17,18
   8638c:	11801f04 	addi	r6,r2,124
   86390:	300490fa 	slli	r2,r6,3
   86394:	003e9906 	br	85dfc <_malloc_r+0xb4>
   86398:	2009d0ba 	srai	r4,r4,2
   8639c:	014002b4 	movhi	r5,10
   863a0:	29600a04 	addi	r5,r5,-32728
   863a4:	00c00044 	movi	r3,1
   863a8:	28800117 	ldw	r2,4(r5)
   863ac:	1906983a 	sll	r3,r3,r4
   863b0:	10c4b03a 	or	r2,r2,r3
   863b4:	28800115 	stw	r2,4(r5)
   863b8:	003fa306 	br	86248 <_malloc_r+0x500>
   863bc:	0027883a 	mov	r19,zero
   863c0:	00c00044 	movi	r3,1
   863c4:	003f8606 	br	861e0 <_malloc_r+0x498>
   863c8:	d1200615 	stw	r4,-32744(gp)
   863cc:	003f7306 	br	8619c <_malloc_r+0x454>
   863d0:	00801504 	movi	r2,84
   863d4:	11001936 	bltu	r2,r4,8643c <_malloc_r+0x6f4>
   863d8:	2804d33a 	srli	r2,r5,12
   863dc:	11001b84 	addi	r4,r2,110
   863e0:	200690fa 	slli	r3,r4,3
   863e4:	003f8e06 	br	86220 <_malloc_r+0x4d8>
   863e8:	480b883a 	mov	r5,r9
   863ec:	6807883a 	mov	r3,r13
   863f0:	288000cc 	andi	r2,r5,3
   863f4:	18fffe04 	addi	r3,r3,-8
   863f8:	297fffc4 	addi	r5,r5,-1
   863fc:	10001526 	beq	r2,zero,86454 <_malloc_r+0x70c>
   86400:	18800217 	ldw	r2,8(r3)
   86404:	10fffa26 	beq	r2,r3,863f0 <_malloc_r+0x6a8>
   86408:	2109883a 	add	r4,r4,r4
   8640c:	393f1e36 	bltu	r7,r4,86088 <_malloc_r+0x340>
   86410:	203f1d26 	beq	r4,zero,86088 <_malloc_r+0x340>
   86414:	21c4703a 	and	r2,r4,r7
   86418:	10000226 	beq	r2,zero,86424 <_malloc_r+0x6dc>
   8641c:	6013883a 	mov	r9,r12
   86420:	003ee106 	br	85fa8 <_malloc_r+0x260>
   86424:	2109883a 	add	r4,r4,r4
   86428:	3904703a 	and	r2,r7,r4
   8642c:	63000104 	addi	r12,r12,4
   86430:	103ffc26 	beq	r2,zero,86424 <_malloc_r+0x6dc>
   86434:	6013883a 	mov	r9,r12
   86438:	003edb06 	br	85fa8 <_malloc_r+0x260>
   8643c:	00805504 	movi	r2,340
   86440:	11000836 	bltu	r2,r4,86464 <_malloc_r+0x71c>
   86444:	2804d3fa 	srli	r2,r5,15
   86448:	11001dc4 	addi	r4,r2,119
   8644c:	200690fa 	slli	r3,r4,3
   86450:	003f7306 	br	86220 <_malloc_r+0x4d8>
   86454:	0104303a 	nor	r2,zero,r4
   86458:	388e703a 	and	r7,r7,r2
   8645c:	e1c00115 	stw	r7,4(fp)
   86460:	003fe906 	br	86408 <_malloc_r+0x6c0>
   86464:	00815504 	movi	r2,1364
   86468:	1100032e 	bgeu	r2,r4,86478 <_malloc_r+0x730>
   8646c:	01001f84 	movi	r4,126
   86470:	00c0fc04 	movi	r3,1008
   86474:	003f6a06 	br	86220 <_malloc_r+0x4d8>
   86478:	2804d4ba 	srli	r2,r5,18
   8647c:	11001f04 	addi	r4,r2,124
   86480:	200690fa 	slli	r3,r4,3
   86484:	003f6606 	br	86220 <_malloc_r+0x4d8>

00086488 <memchr>:
   86488:	008000c4 	movi	r2,3
   8648c:	29403fcc 	andi	r5,r5,255
   86490:	2007883a 	mov	r3,r4
   86494:	1180022e 	bgeu	r2,r6,864a0 <memchr+0x18>
   86498:	2084703a 	and	r2,r4,r2
   8649c:	10000b26 	beq	r2,zero,864cc <memchr+0x44>
   864a0:	313fffc4 	addi	r4,r6,-1
   864a4:	3000051e 	bne	r6,zero,864bc <memchr+0x34>
   864a8:	00002c06 	br	8655c <memchr+0xd4>
   864ac:	213fffc4 	addi	r4,r4,-1
   864b0:	00bfffc4 	movi	r2,-1
   864b4:	18c00044 	addi	r3,r3,1
   864b8:	20802826 	beq	r4,r2,8655c <memchr+0xd4>
   864bc:	18800003 	ldbu	r2,0(r3)
   864c0:	28bffa1e 	bne	r5,r2,864ac <memchr+0x24>
   864c4:	1805883a 	mov	r2,r3
   864c8:	f800283a 	ret
   864cc:	0011883a 	mov	r8,zero
   864d0:	0007883a 	mov	r3,zero
   864d4:	01c00104 	movi	r7,4
   864d8:	4004923a 	slli	r2,r8,8
   864dc:	18c00044 	addi	r3,r3,1
   864e0:	1151883a 	add	r8,r2,r5
   864e4:	19fffc1e 	bne	r3,r7,864d8 <memchr+0x50>
   864e8:	02bfbff4 	movhi	r10,65279
   864ec:	52bfbfc4 	addi	r10,r10,-257
   864f0:	02602074 	movhi	r9,32897
   864f4:	4a602004 	addi	r9,r9,-32640
   864f8:	02c000c4 	movi	r11,3
   864fc:	20800017 	ldw	r2,0(r4)
   86500:	31bfff04 	addi	r6,r6,-4
   86504:	200f883a 	mov	r7,r4
   86508:	1204f03a 	xor	r2,r2,r8
   8650c:	1287883a 	add	r3,r2,r10
   86510:	1a46703a 	and	r3,r3,r9
   86514:	0084303a 	nor	r2,zero,r2
   86518:	10c4703a 	and	r2,r2,r3
   8651c:	10000b26 	beq	r2,zero,8654c <memchr+0xc4>
   86520:	20800003 	ldbu	r2,0(r4)
   86524:	28800f26 	beq	r5,r2,86564 <memchr+0xdc>
   86528:	20800043 	ldbu	r2,1(r4)
   8652c:	21c00044 	addi	r7,r4,1
   86530:	28800c26 	beq	r5,r2,86564 <memchr+0xdc>
   86534:	20800083 	ldbu	r2,2(r4)
   86538:	21c00084 	addi	r7,r4,2
   8653c:	28800926 	beq	r5,r2,86564 <memchr+0xdc>
   86540:	208000c3 	ldbu	r2,3(r4)
   86544:	21c000c4 	addi	r7,r4,3
   86548:	28800626 	beq	r5,r2,86564 <memchr+0xdc>
   8654c:	21000104 	addi	r4,r4,4
   86550:	59bfea36 	bltu	r11,r6,864fc <memchr+0x74>
   86554:	2007883a 	mov	r3,r4
   86558:	003fd106 	br	864a0 <memchr+0x18>
   8655c:	0005883a 	mov	r2,zero
   86560:	f800283a 	ret
   86564:	3805883a 	mov	r2,r7
   86568:	f800283a 	ret

0008656c <memcpy>:
   8656c:	01c003c4 	movi	r7,15
   86570:	2007883a 	mov	r3,r4
   86574:	3980032e 	bgeu	r7,r6,86584 <memcpy+0x18>
   86578:	2904b03a 	or	r2,r5,r4
   8657c:	108000cc 	andi	r2,r2,3
   86580:	10000926 	beq	r2,zero,865a8 <memcpy+0x3c>
   86584:	30000626 	beq	r6,zero,865a0 <memcpy+0x34>
   86588:	30cd883a 	add	r6,r6,r3
   8658c:	28800003 	ldbu	r2,0(r5)
   86590:	29400044 	addi	r5,r5,1
   86594:	18800005 	stb	r2,0(r3)
   86598:	18c00044 	addi	r3,r3,1
   8659c:	30fffb1e 	bne	r6,r3,8658c <memcpy+0x20>
   865a0:	2005883a 	mov	r2,r4
   865a4:	f800283a 	ret
   865a8:	3811883a 	mov	r8,r7
   865ac:	200f883a 	mov	r7,r4
   865b0:	28c00017 	ldw	r3,0(r5)
   865b4:	31bffc04 	addi	r6,r6,-16
   865b8:	38c00015 	stw	r3,0(r7)
   865bc:	28800117 	ldw	r2,4(r5)
   865c0:	38800115 	stw	r2,4(r7)
   865c4:	28c00217 	ldw	r3,8(r5)
   865c8:	38c00215 	stw	r3,8(r7)
   865cc:	28800317 	ldw	r2,12(r5)
   865d0:	29400404 	addi	r5,r5,16
   865d4:	38800315 	stw	r2,12(r7)
   865d8:	39c00404 	addi	r7,r7,16
   865dc:	41bff436 	bltu	r8,r6,865b0 <memcpy+0x44>
   865e0:	008000c4 	movi	r2,3
   865e4:	1180072e 	bgeu	r2,r6,86604 <memcpy+0x98>
   865e8:	1007883a 	mov	r3,r2
   865ec:	28800017 	ldw	r2,0(r5)
   865f0:	31bfff04 	addi	r6,r6,-4
   865f4:	29400104 	addi	r5,r5,4
   865f8:	38800015 	stw	r2,0(r7)
   865fc:	39c00104 	addi	r7,r7,4
   86600:	19bffa36 	bltu	r3,r6,865ec <memcpy+0x80>
   86604:	3807883a 	mov	r3,r7
   86608:	003fde06 	br	86584 <memcpy+0x18>

0008660c <memmove>:
   8660c:	2807883a 	mov	r3,r5
   86610:	2011883a 	mov	r8,r4
   86614:	29000c2e 	bgeu	r5,r4,86648 <memmove+0x3c>
   86618:	298f883a 	add	r7,r5,r6
   8661c:	21c00a2e 	bgeu	r4,r7,86648 <memmove+0x3c>
   86620:	30000726 	beq	r6,zero,86640 <memmove+0x34>
   86624:	2187883a 	add	r3,r4,r6
   86628:	198dc83a 	sub	r6,r3,r6
   8662c:	39ffffc4 	addi	r7,r7,-1
   86630:	38800003 	ldbu	r2,0(r7)
   86634:	18ffffc4 	addi	r3,r3,-1
   86638:	18800005 	stb	r2,0(r3)
   8663c:	19bffb1e 	bne	r3,r6,8662c <memmove+0x20>
   86640:	2005883a 	mov	r2,r4
   86644:	f800283a 	ret
   86648:	01c003c4 	movi	r7,15
   8664c:	39800a36 	bltu	r7,r6,86678 <memmove+0x6c>
   86650:	303ffb26 	beq	r6,zero,86640 <memmove+0x34>
   86654:	400f883a 	mov	r7,r8
   86658:	320d883a 	add	r6,r6,r8
   8665c:	28800003 	ldbu	r2,0(r5)
   86660:	29400044 	addi	r5,r5,1
   86664:	38800005 	stb	r2,0(r7)
   86668:	39c00044 	addi	r7,r7,1
   8666c:	39bffb1e 	bne	r7,r6,8665c <memmove+0x50>
   86670:	2005883a 	mov	r2,r4
   86674:	f800283a 	ret
   86678:	1904b03a 	or	r2,r3,r4
   8667c:	108000cc 	andi	r2,r2,3
   86680:	103ff31e 	bne	r2,zero,86650 <memmove+0x44>
   86684:	3811883a 	mov	r8,r7
   86688:	180b883a 	mov	r5,r3
   8668c:	200f883a 	mov	r7,r4
   86690:	28c00017 	ldw	r3,0(r5)
   86694:	31bffc04 	addi	r6,r6,-16
   86698:	38c00015 	stw	r3,0(r7)
   8669c:	28800117 	ldw	r2,4(r5)
   866a0:	38800115 	stw	r2,4(r7)
   866a4:	28c00217 	ldw	r3,8(r5)
   866a8:	38c00215 	stw	r3,8(r7)
   866ac:	28800317 	ldw	r2,12(r5)
   866b0:	29400404 	addi	r5,r5,16
   866b4:	38800315 	stw	r2,12(r7)
   866b8:	39c00404 	addi	r7,r7,16
   866bc:	41bff436 	bltu	r8,r6,86690 <memmove+0x84>
   866c0:	008000c4 	movi	r2,3
   866c4:	1180072e 	bgeu	r2,r6,866e4 <memmove+0xd8>
   866c8:	1007883a 	mov	r3,r2
   866cc:	28800017 	ldw	r2,0(r5)
   866d0:	31bfff04 	addi	r6,r6,-4
   866d4:	29400104 	addi	r5,r5,4
   866d8:	38800015 	stw	r2,0(r7)
   866dc:	39c00104 	addi	r7,r7,4
   866e0:	19bffa36 	bltu	r3,r6,866cc <memmove+0xc0>
   866e4:	3811883a 	mov	r8,r7
   866e8:	003fd906 	br	86650 <memmove+0x44>

000866ec <memset>:
   866ec:	008000c4 	movi	r2,3
   866f0:	29403fcc 	andi	r5,r5,255
   866f4:	2007883a 	mov	r3,r4
   866f8:	1180022e 	bgeu	r2,r6,86704 <memset+0x18>
   866fc:	2084703a 	and	r2,r4,r2
   86700:	10000826 	beq	r2,zero,86724 <memset+0x38>
   86704:	30000526 	beq	r6,zero,8671c <memset+0x30>
   86708:	2805883a 	mov	r2,r5
   8670c:	30cd883a 	add	r6,r6,r3
   86710:	18800005 	stb	r2,0(r3)
   86714:	18c00044 	addi	r3,r3,1
   86718:	19bffd1e 	bne	r3,r6,86710 <memset+0x24>
   8671c:	2005883a 	mov	r2,r4
   86720:	f800283a 	ret
   86724:	2804923a 	slli	r2,r5,8
   86728:	020003c4 	movi	r8,15
   8672c:	200f883a 	mov	r7,r4
   86730:	2884b03a 	or	r2,r5,r2
   86734:	1006943a 	slli	r3,r2,16
   86738:	10c6b03a 	or	r3,r2,r3
   8673c:	41800a2e 	bgeu	r8,r6,86768 <memset+0x7c>
   86740:	4005883a 	mov	r2,r8
   86744:	31bffc04 	addi	r6,r6,-16
   86748:	38c00015 	stw	r3,0(r7)
   8674c:	38c00115 	stw	r3,4(r7)
   86750:	38c00215 	stw	r3,8(r7)
   86754:	38c00315 	stw	r3,12(r7)
   86758:	39c00404 	addi	r7,r7,16
   8675c:	11bff936 	bltu	r2,r6,86744 <memset+0x58>
   86760:	008000c4 	movi	r2,3
   86764:	1180052e 	bgeu	r2,r6,8677c <memset+0x90>
   86768:	31bfff04 	addi	r6,r6,-4
   8676c:	008000c4 	movi	r2,3
   86770:	38c00015 	stw	r3,0(r7)
   86774:	39c00104 	addi	r7,r7,4
   86778:	11bffb36 	bltu	r2,r6,86768 <memset+0x7c>
   8677c:	3807883a 	mov	r3,r7
   86780:	003fe006 	br	86704 <memset+0x18>

00086784 <_Bfree>:
   86784:	28000826 	beq	r5,zero,867a8 <_Bfree+0x24>
   86788:	28800117 	ldw	r2,4(r5)
   8678c:	21001317 	ldw	r4,76(r4)
   86790:	1085883a 	add	r2,r2,r2
   86794:	1085883a 	add	r2,r2,r2
   86798:	1105883a 	add	r2,r2,r4
   8679c:	10c00017 	ldw	r3,0(r2)
   867a0:	28c00015 	stw	r3,0(r5)
   867a4:	11400015 	stw	r5,0(r2)
   867a8:	f800283a 	ret

000867ac <__hi0bits>:
   867ac:	20bfffec 	andhi	r2,r4,65535
   867b0:	10001426 	beq	r2,zero,86804 <__hi0bits+0x58>
   867b4:	0007883a 	mov	r3,zero
   867b8:	20bfc02c 	andhi	r2,r4,65280
   867bc:	1000021e 	bne	r2,zero,867c8 <__hi0bits+0x1c>
   867c0:	2008923a 	slli	r4,r4,8
   867c4:	18c00204 	addi	r3,r3,8
   867c8:	20bc002c 	andhi	r2,r4,61440
   867cc:	1000021e 	bne	r2,zero,867d8 <__hi0bits+0x2c>
   867d0:	2008913a 	slli	r4,r4,4
   867d4:	18c00104 	addi	r3,r3,4
   867d8:	20b0002c 	andhi	r2,r4,49152
   867dc:	1000031e 	bne	r2,zero,867ec <__hi0bits+0x40>
   867e0:	2105883a 	add	r2,r4,r4
   867e4:	18c00084 	addi	r3,r3,2
   867e8:	1089883a 	add	r4,r2,r2
   867ec:	20000316 	blt	r4,zero,867fc <__hi0bits+0x50>
   867f0:	2090002c 	andhi	r2,r4,16384
   867f4:	10000626 	beq	r2,zero,86810 <__hi0bits+0x64>
   867f8:	18c00044 	addi	r3,r3,1
   867fc:	1805883a 	mov	r2,r3
   86800:	f800283a 	ret
   86804:	2008943a 	slli	r4,r4,16
   86808:	00c00404 	movi	r3,16
   8680c:	003fea06 	br	867b8 <__hi0bits+0xc>
   86810:	00c00804 	movi	r3,32
   86814:	1805883a 	mov	r2,r3
   86818:	f800283a 	ret

0008681c <__lo0bits>:
   8681c:	20c00017 	ldw	r3,0(r4)
   86820:	188001cc 	andi	r2,r3,7
   86824:	10000a26 	beq	r2,zero,86850 <__lo0bits+0x34>
   86828:	1880004c 	andi	r2,r3,1
   8682c:	1005003a 	cmpeq	r2,r2,zero
   86830:	10002126 	beq	r2,zero,868b8 <__lo0bits+0x9c>
   86834:	1880008c 	andi	r2,r3,2
   86838:	1000251e 	bne	r2,zero,868d0 <__lo0bits+0xb4>
   8683c:	1804d0ba 	srli	r2,r3,2
   86840:	01400084 	movi	r5,2
   86844:	20800015 	stw	r2,0(r4)
   86848:	2805883a 	mov	r2,r5
   8684c:	f800283a 	ret
   86850:	18bfffcc 	andi	r2,r3,65535
   86854:	10001526 	beq	r2,zero,868ac <__lo0bits+0x90>
   86858:	000b883a 	mov	r5,zero
   8685c:	18803fcc 	andi	r2,r3,255
   86860:	1000021e 	bne	r2,zero,8686c <__lo0bits+0x50>
   86864:	1806d23a 	srli	r3,r3,8
   86868:	29400204 	addi	r5,r5,8
   8686c:	188003cc 	andi	r2,r3,15
   86870:	1000021e 	bne	r2,zero,8687c <__lo0bits+0x60>
   86874:	1806d13a 	srli	r3,r3,4
   86878:	29400104 	addi	r5,r5,4
   8687c:	188000cc 	andi	r2,r3,3
   86880:	1000021e 	bne	r2,zero,8688c <__lo0bits+0x70>
   86884:	1806d0ba 	srli	r3,r3,2
   86888:	29400084 	addi	r5,r5,2
   8688c:	1880004c 	andi	r2,r3,1
   86890:	1000031e 	bne	r2,zero,868a0 <__lo0bits+0x84>
   86894:	1806d07a 	srli	r3,r3,1
   86898:	18000a26 	beq	r3,zero,868c4 <__lo0bits+0xa8>
   8689c:	29400044 	addi	r5,r5,1
   868a0:	2805883a 	mov	r2,r5
   868a4:	20c00015 	stw	r3,0(r4)
   868a8:	f800283a 	ret
   868ac:	1806d43a 	srli	r3,r3,16
   868b0:	01400404 	movi	r5,16
   868b4:	003fe906 	br	8685c <__lo0bits+0x40>
   868b8:	000b883a 	mov	r5,zero
   868bc:	2805883a 	mov	r2,r5
   868c0:	f800283a 	ret
   868c4:	01400804 	movi	r5,32
   868c8:	2805883a 	mov	r2,r5
   868cc:	f800283a 	ret
   868d0:	1804d07a 	srli	r2,r3,1
   868d4:	01400044 	movi	r5,1
   868d8:	20800015 	stw	r2,0(r4)
   868dc:	003fda06 	br	86848 <__lo0bits+0x2c>

000868e0 <__mcmp>:
   868e0:	20800417 	ldw	r2,16(r4)
   868e4:	28c00417 	ldw	r3,16(r5)
   868e8:	10cfc83a 	sub	r7,r2,r3
   868ec:	38000c1e 	bne	r7,zero,86920 <__mcmp+0x40>
   868f0:	18c5883a 	add	r2,r3,r3
   868f4:	1085883a 	add	r2,r2,r2
   868f8:	10c00504 	addi	r3,r2,20
   868fc:	21000504 	addi	r4,r4,20
   86900:	28cb883a 	add	r5,r5,r3
   86904:	2085883a 	add	r2,r4,r2
   86908:	10bfff04 	addi	r2,r2,-4
   8690c:	297fff04 	addi	r5,r5,-4
   86910:	11800017 	ldw	r6,0(r2)
   86914:	28c00017 	ldw	r3,0(r5)
   86918:	30c0031e 	bne	r6,r3,86928 <__mcmp+0x48>
   8691c:	20bffa36 	bltu	r4,r2,86908 <__mcmp+0x28>
   86920:	3805883a 	mov	r2,r7
   86924:	f800283a 	ret
   86928:	30c00336 	bltu	r6,r3,86938 <__mcmp+0x58>
   8692c:	01c00044 	movi	r7,1
   86930:	3805883a 	mov	r2,r7
   86934:	f800283a 	ret
   86938:	01ffffc4 	movi	r7,-1
   8693c:	003ff806 	br	86920 <__mcmp+0x40>

00086940 <__ulp>:
   86940:	295ffc2c 	andhi	r5,r5,32752
   86944:	013f3034 	movhi	r4,64704
   86948:	290b883a 	add	r5,r5,r4
   8694c:	0145c83a 	sub	r2,zero,r5
   86950:	1007d53a 	srai	r3,r2,20
   86954:	000d883a 	mov	r6,zero
   86958:	0140040e 	bge	zero,r5,8696c <__ulp+0x2c>
   8695c:	280f883a 	mov	r7,r5
   86960:	3807883a 	mov	r3,r7
   86964:	3005883a 	mov	r2,r6
   86968:	f800283a 	ret
   8696c:	008004c4 	movi	r2,19
   86970:	193ffb04 	addi	r4,r3,-20
   86974:	10c00c0e 	bge	r2,r3,869a8 <__ulp+0x68>
   86978:	008007c4 	movi	r2,31
   8697c:	1107c83a 	sub	r3,r2,r4
   86980:	00800784 	movi	r2,30
   86984:	01400044 	movi	r5,1
   86988:	11000216 	blt	r2,r4,86994 <__ulp+0x54>
   8698c:	00800044 	movi	r2,1
   86990:	10ca983a 	sll	r5,r2,r3
   86994:	000f883a 	mov	r7,zero
   86998:	280d883a 	mov	r6,r5
   8699c:	3807883a 	mov	r3,r7
   869a0:	3005883a 	mov	r2,r6
   869a4:	f800283a 	ret
   869a8:	00800234 	movhi	r2,8
   869ac:	10cfd83a 	sra	r7,r2,r3
   869b0:	000d883a 	mov	r6,zero
   869b4:	3005883a 	mov	r2,r6
   869b8:	3807883a 	mov	r3,r7
   869bc:	f800283a 	ret

000869c0 <__b2d>:
   869c0:	20800417 	ldw	r2,16(r4)
   869c4:	defff904 	addi	sp,sp,-28
   869c8:	dd000415 	stw	r20,16(sp)
   869cc:	1085883a 	add	r2,r2,r2
   869d0:	25000504 	addi	r20,r4,20
   869d4:	1085883a 	add	r2,r2,r2
   869d8:	dc000015 	stw	r16,0(sp)
   869dc:	a0a1883a 	add	r16,r20,r2
   869e0:	dd400515 	stw	r21,20(sp)
   869e4:	857fff17 	ldw	r21,-4(r16)
   869e8:	dc400115 	stw	r17,4(sp)
   869ec:	dfc00615 	stw	ra,24(sp)
   869f0:	a809883a 	mov	r4,r21
   869f4:	2823883a 	mov	r17,r5
   869f8:	dcc00315 	stw	r19,12(sp)
   869fc:	dc800215 	stw	r18,8(sp)
   86a00:	00867ac0 	call	867ac <__hi0bits>
   86a04:	100b883a 	mov	r5,r2
   86a08:	00800804 	movi	r2,32
   86a0c:	1145c83a 	sub	r2,r2,r5
   86a10:	88800015 	stw	r2,0(r17)
   86a14:	00800284 	movi	r2,10
   86a18:	80ffff04 	addi	r3,r16,-4
   86a1c:	11401416 	blt	r2,r5,86a70 <__b2d+0xb0>
   86a20:	008002c4 	movi	r2,11
   86a24:	1149c83a 	sub	r4,r2,r5
   86a28:	a0c02736 	bltu	r20,r3,86ac8 <__b2d+0x108>
   86a2c:	000d883a 	mov	r6,zero
   86a30:	28800544 	addi	r2,r5,21
   86a34:	a906d83a 	srl	r3,r21,r4
   86a38:	a884983a 	sll	r2,r21,r2
   86a3c:	1ccffc34 	orhi	r19,r3,16368
   86a40:	11a4b03a 	or	r18,r2,r6
   86a44:	9005883a 	mov	r2,r18
   86a48:	9807883a 	mov	r3,r19
   86a4c:	dfc00617 	ldw	ra,24(sp)
   86a50:	dd400517 	ldw	r21,20(sp)
   86a54:	dd000417 	ldw	r20,16(sp)
   86a58:	dcc00317 	ldw	r19,12(sp)
   86a5c:	dc800217 	ldw	r18,8(sp)
   86a60:	dc400117 	ldw	r17,4(sp)
   86a64:	dc000017 	ldw	r16,0(sp)
   86a68:	dec00704 	addi	sp,sp,28
   86a6c:	f800283a 	ret
   86a70:	a0c00e36 	bltu	r20,r3,86aac <__b2d+0xec>
   86a74:	293ffd44 	addi	r4,r5,-11
   86a78:	000d883a 	mov	r6,zero
   86a7c:	20000f26 	beq	r4,zero,86abc <__b2d+0xfc>
   86a80:	00800804 	movi	r2,32
   86a84:	110bc83a 	sub	r5,r2,r4
   86a88:	a0c01236 	bltu	r20,r3,86ad4 <__b2d+0x114>
   86a8c:	000f883a 	mov	r7,zero
   86a90:	a904983a 	sll	r2,r21,r4
   86a94:	3146d83a 	srl	r3,r6,r5
   86a98:	3108983a 	sll	r4,r6,r4
   86a9c:	108ffc34 	orhi	r2,r2,16368
   86aa0:	18a6b03a 	or	r19,r3,r2
   86aa4:	3924b03a 	or	r18,r7,r4
   86aa8:	003fe606 	br	86a44 <__b2d+0x84>
   86aac:	293ffd44 	addi	r4,r5,-11
   86ab0:	81bffe17 	ldw	r6,-8(r16)
   86ab4:	80fffe04 	addi	r3,r16,-8
   86ab8:	203ff11e 	bne	r4,zero,86a80 <__b2d+0xc0>
   86abc:	accffc34 	orhi	r19,r21,16368
   86ac0:	3025883a 	mov	r18,r6
   86ac4:	003fdf06 	br	86a44 <__b2d+0x84>
   86ac8:	18bfff17 	ldw	r2,-4(r3)
   86acc:	110cd83a 	srl	r6,r2,r4
   86ad0:	003fd706 	br	86a30 <__b2d+0x70>
   86ad4:	18bfff17 	ldw	r2,-4(r3)
   86ad8:	114ed83a 	srl	r7,r2,r5
   86adc:	003fec06 	br	86a90 <__b2d+0xd0>

00086ae0 <__ratio>:
   86ae0:	defff904 	addi	sp,sp,-28
   86ae4:	dc400215 	stw	r17,8(sp)
   86ae8:	2823883a 	mov	r17,r5
   86aec:	d80b883a 	mov	r5,sp
   86af0:	dfc00615 	stw	ra,24(sp)
   86af4:	dd000515 	stw	r20,20(sp)
   86af8:	dcc00415 	stw	r19,16(sp)
   86afc:	dc800315 	stw	r18,12(sp)
   86b00:	2025883a 	mov	r18,r4
   86b04:	00869c00 	call	869c0 <__b2d>
   86b08:	8809883a 	mov	r4,r17
   86b0c:	d9400104 	addi	r5,sp,4
   86b10:	1027883a 	mov	r19,r2
   86b14:	1829883a 	mov	r20,r3
   86b18:	00869c00 	call	869c0 <__b2d>
   86b1c:	89000417 	ldw	r4,16(r17)
   86b20:	91c00417 	ldw	r7,16(r18)
   86b24:	d9800117 	ldw	r6,4(sp)
   86b28:	180b883a 	mov	r5,r3
   86b2c:	390fc83a 	sub	r7,r7,r4
   86b30:	1009883a 	mov	r4,r2
   86b34:	d8800017 	ldw	r2,0(sp)
   86b38:	380e917a 	slli	r7,r7,5
   86b3c:	2011883a 	mov	r8,r4
   86b40:	1185c83a 	sub	r2,r2,r6
   86b44:	11c5883a 	add	r2,r2,r7
   86b48:	1006953a 	slli	r3,r2,20
   86b4c:	2813883a 	mov	r9,r5
   86b50:	00800d0e 	bge	zero,r2,86b88 <__ratio+0xa8>
   86b54:	1d29883a 	add	r20,r3,r20
   86b58:	a00b883a 	mov	r5,r20
   86b5c:	480f883a 	mov	r7,r9
   86b60:	9809883a 	mov	r4,r19
   86b64:	400d883a 	mov	r6,r8
   86b68:	0089c4c0 	call	89c4c <__divdf3>
   86b6c:	dfc00617 	ldw	ra,24(sp)
   86b70:	dd000517 	ldw	r20,20(sp)
   86b74:	dcc00417 	ldw	r19,16(sp)
   86b78:	dc800317 	ldw	r18,12(sp)
   86b7c:	dc400217 	ldw	r17,8(sp)
   86b80:	dec00704 	addi	sp,sp,28
   86b84:	f800283a 	ret
   86b88:	28d3c83a 	sub	r9,r5,r3
   86b8c:	003ff206 	br	86b58 <__ratio+0x78>

00086b90 <_mprec_log10>:
   86b90:	defffe04 	addi	sp,sp,-8
   86b94:	008005c4 	movi	r2,23
   86b98:	dc000015 	stw	r16,0(sp)
   86b9c:	dfc00115 	stw	ra,4(sp)
   86ba0:	2021883a 	mov	r16,r4
   86ba4:	11000c16 	blt	r2,r4,86bd8 <_mprec_log10+0x48>
   86ba8:	200490fa 	slli	r2,r4,3
   86bac:	00c00274 	movhi	r3,9
   86bb0:	18de1d04 	addi	r3,r3,30836
   86bb4:	10c5883a 	add	r2,r2,r3
   86bb8:	12400117 	ldw	r9,4(r2)
   86bbc:	12000017 	ldw	r8,0(r2)
   86bc0:	4807883a 	mov	r3,r9
   86bc4:	4005883a 	mov	r2,r8
   86bc8:	dfc00117 	ldw	ra,4(sp)
   86bcc:	dc000017 	ldw	r16,0(sp)
   86bd0:	dec00204 	addi	sp,sp,8
   86bd4:	f800283a 	ret
   86bd8:	0011883a 	mov	r8,zero
   86bdc:	024ffc34 	movhi	r9,16368
   86be0:	0005883a 	mov	r2,zero
   86be4:	00d00934 	movhi	r3,16420
   86be8:	480b883a 	mov	r5,r9
   86bec:	4009883a 	mov	r4,r8
   86bf0:	180f883a 	mov	r7,r3
   86bf4:	100d883a 	mov	r6,r2
   86bf8:	00898880 	call	89888 <__muldf3>
   86bfc:	843fffc4 	addi	r16,r16,-1
   86c00:	1011883a 	mov	r8,r2
   86c04:	1813883a 	mov	r9,r3
   86c08:	803ff51e 	bne	r16,zero,86be0 <_mprec_log10+0x50>
   86c0c:	4005883a 	mov	r2,r8
   86c10:	4807883a 	mov	r3,r9
   86c14:	dfc00117 	ldw	ra,4(sp)
   86c18:	dc000017 	ldw	r16,0(sp)
   86c1c:	dec00204 	addi	sp,sp,8
   86c20:	f800283a 	ret

00086c24 <__copybits>:
   86c24:	297fffc4 	addi	r5,r5,-1
   86c28:	30800417 	ldw	r2,16(r6)
   86c2c:	280bd17a 	srai	r5,r5,5
   86c30:	31800504 	addi	r6,r6,20
   86c34:	1085883a 	add	r2,r2,r2
   86c38:	294b883a 	add	r5,r5,r5
   86c3c:	294b883a 	add	r5,r5,r5
   86c40:	1085883a 	add	r2,r2,r2
   86c44:	290b883a 	add	r5,r5,r4
   86c48:	3087883a 	add	r3,r6,r2
   86c4c:	29400104 	addi	r5,r5,4
   86c50:	30c0052e 	bgeu	r6,r3,86c68 <__copybits+0x44>
   86c54:	30800017 	ldw	r2,0(r6)
   86c58:	31800104 	addi	r6,r6,4
   86c5c:	20800015 	stw	r2,0(r4)
   86c60:	21000104 	addi	r4,r4,4
   86c64:	30fffb36 	bltu	r6,r3,86c54 <__copybits+0x30>
   86c68:	2140032e 	bgeu	r4,r5,86c78 <__copybits+0x54>
   86c6c:	20000015 	stw	zero,0(r4)
   86c70:	21000104 	addi	r4,r4,4
   86c74:	217ffd36 	bltu	r4,r5,86c6c <__copybits+0x48>
   86c78:	f800283a 	ret

00086c7c <__any_on>:
   86c7c:	20800417 	ldw	r2,16(r4)
   86c80:	2807d17a 	srai	r3,r5,5
   86c84:	21000504 	addi	r4,r4,20
   86c88:	10c00d0e 	bge	r2,r3,86cc0 <__any_on+0x44>
   86c8c:	1085883a 	add	r2,r2,r2
   86c90:	1085883a 	add	r2,r2,r2
   86c94:	208d883a 	add	r6,r4,r2
   86c98:	2180182e 	bgeu	r4,r6,86cfc <__any_on+0x80>
   86c9c:	30bfff17 	ldw	r2,-4(r6)
   86ca0:	30ffff04 	addi	r3,r6,-4
   86ca4:	1000041e 	bne	r2,zero,86cb8 <__any_on+0x3c>
   86ca8:	20c0142e 	bgeu	r4,r3,86cfc <__any_on+0x80>
   86cac:	18ffff04 	addi	r3,r3,-4
   86cb0:	18800017 	ldw	r2,0(r3)
   86cb4:	103ffc26 	beq	r2,zero,86ca8 <__any_on+0x2c>
   86cb8:	00800044 	movi	r2,1
   86cbc:	f800283a 	ret
   86cc0:	18800a0e 	bge	r3,r2,86cec <__any_on+0x70>
   86cc4:	294007cc 	andi	r5,r5,31
   86cc8:	28000826 	beq	r5,zero,86cec <__any_on+0x70>
   86ccc:	18c5883a 	add	r2,r3,r3
   86cd0:	1085883a 	add	r2,r2,r2
   86cd4:	208d883a 	add	r6,r4,r2
   86cd8:	30c00017 	ldw	r3,0(r6)
   86cdc:	1944d83a 	srl	r2,r3,r5
   86ce0:	1144983a 	sll	r2,r2,r5
   86ce4:	18bff41e 	bne	r3,r2,86cb8 <__any_on+0x3c>
   86ce8:	003feb06 	br	86c98 <__any_on+0x1c>
   86cec:	18c5883a 	add	r2,r3,r3
   86cf0:	1085883a 	add	r2,r2,r2
   86cf4:	208d883a 	add	r6,r4,r2
   86cf8:	003fe706 	br	86c98 <__any_on+0x1c>
   86cfc:	0005883a 	mov	r2,zero
   86d00:	f800283a 	ret

00086d04 <_Balloc>:
   86d04:	20c01317 	ldw	r3,76(r4)
   86d08:	defffb04 	addi	sp,sp,-20
   86d0c:	dcc00315 	stw	r19,12(sp)
   86d10:	dc800215 	stw	r18,8(sp)
   86d14:	dfc00415 	stw	ra,16(sp)
   86d18:	2825883a 	mov	r18,r5
   86d1c:	dc400115 	stw	r17,4(sp)
   86d20:	dc000015 	stw	r16,0(sp)
   86d24:	2027883a 	mov	r19,r4
   86d28:	01800404 	movi	r6,16
   86d2c:	01400104 	movi	r5,4
   86d30:	18001726 	beq	r3,zero,86d90 <_Balloc+0x8c>
   86d34:	01400044 	movi	r5,1
   86d38:	9485883a 	add	r2,r18,r18
   86d3c:	2ca2983a 	sll	r17,r5,r18
   86d40:	1085883a 	add	r2,r2,r2
   86d44:	10c7883a 	add	r3,r2,r3
   86d48:	1c000017 	ldw	r16,0(r3)
   86d4c:	8c4d883a 	add	r6,r17,r17
   86d50:	318d883a 	add	r6,r6,r6
   86d54:	9809883a 	mov	r4,r19
   86d58:	31800504 	addi	r6,r6,20
   86d5c:	80001226 	beq	r16,zero,86da8 <_Balloc+0xa4>
   86d60:	80800017 	ldw	r2,0(r16)
   86d64:	18800015 	stw	r2,0(r3)
   86d68:	80000415 	stw	zero,16(r16)
   86d6c:	80000315 	stw	zero,12(r16)
   86d70:	8005883a 	mov	r2,r16
   86d74:	dfc00417 	ldw	ra,16(sp)
   86d78:	dcc00317 	ldw	r19,12(sp)
   86d7c:	dc800217 	ldw	r18,8(sp)
   86d80:	dc400117 	ldw	r17,4(sp)
   86d84:	dc000017 	ldw	r16,0(sp)
   86d88:	dec00504 	addi	sp,sp,20
   86d8c:	f800283a 	ret
   86d90:	00881640 	call	88164 <_calloc_r>
   86d94:	1007883a 	mov	r3,r2
   86d98:	0021883a 	mov	r16,zero
   86d9c:	98801315 	stw	r2,76(r19)
   86da0:	103fe41e 	bne	r2,zero,86d34 <_Balloc+0x30>
   86da4:	003ff206 	br	86d70 <_Balloc+0x6c>
   86da8:	00881640 	call	88164 <_calloc_r>
   86dac:	103ff026 	beq	r2,zero,86d70 <_Balloc+0x6c>
   86db0:	1021883a 	mov	r16,r2
   86db4:	14800115 	stw	r18,4(r2)
   86db8:	14400215 	stw	r17,8(r2)
   86dbc:	003fea06 	br	86d68 <_Balloc+0x64>

00086dc0 <__d2b>:
   86dc0:	defff504 	addi	sp,sp,-44
   86dc4:	dcc00515 	stw	r19,20(sp)
   86dc8:	04c00044 	movi	r19,1
   86dcc:	dc000215 	stw	r16,8(sp)
   86dd0:	2821883a 	mov	r16,r5
   86dd4:	980b883a 	mov	r5,r19
   86dd8:	ddc00915 	stw	r23,36(sp)
   86ddc:	dd800815 	stw	r22,32(sp)
   86de0:	dd400715 	stw	r21,28(sp)
   86de4:	dd000615 	stw	r20,24(sp)
   86de8:	dc800415 	stw	r18,16(sp)
   86dec:	dc400315 	stw	r17,12(sp)
   86df0:	dfc00a15 	stw	ra,40(sp)
   86df4:	3023883a 	mov	r17,r6
   86df8:	382d883a 	mov	r22,r7
   86dfc:	ddc00b17 	ldw	r23,44(sp)
   86e00:	0086d040 	call	86d04 <_Balloc>
   86e04:	1025883a 	mov	r18,r2
   86e08:	00a00034 	movhi	r2,32768
   86e0c:	10bfffc4 	addi	r2,r2,-1
   86e10:	8888703a 	and	r4,r17,r2
   86e14:	202ad53a 	srli	r21,r4,20
   86e18:	00800434 	movhi	r2,16
   86e1c:	10bfffc4 	addi	r2,r2,-1
   86e20:	8886703a 	and	r3,r17,r2
   86e24:	a829003a 	cmpeq	r20,r21,zero
   86e28:	800b883a 	mov	r5,r16
   86e2c:	d8c00115 	stw	r3,4(sp)
   86e30:	94000504 	addi	r16,r18,20
   86e34:	a000021e 	bne	r20,zero,86e40 <__d2b+0x80>
   86e38:	18c00434 	orhi	r3,r3,16
   86e3c:	d8c00115 	stw	r3,4(sp)
   86e40:	28002726 	beq	r5,zero,86ee0 <__d2b+0x120>
   86e44:	d809883a 	mov	r4,sp
   86e48:	d9400015 	stw	r5,0(sp)
   86e4c:	008681c0 	call	8681c <__lo0bits>
   86e50:	100d883a 	mov	r6,r2
   86e54:	10003526 	beq	r2,zero,86f2c <__d2b+0x16c>
   86e58:	d8c00117 	ldw	r3,4(sp)
   86e5c:	00800804 	movi	r2,32
   86e60:	1185c83a 	sub	r2,r2,r6
   86e64:	d9000017 	ldw	r4,0(sp)
   86e68:	1886983a 	sll	r3,r3,r2
   86e6c:	1906b03a 	or	r3,r3,r4
   86e70:	90c00515 	stw	r3,20(r18)
   86e74:	d8c00117 	ldw	r3,4(sp)
   86e78:	1986d83a 	srl	r3,r3,r6
   86e7c:	d8c00115 	stw	r3,4(sp)
   86e80:	180b003a 	cmpeq	r5,r3,zero
   86e84:	00800084 	movi	r2,2
   86e88:	114bc83a 	sub	r5,r2,r5
   86e8c:	80c00115 	stw	r3,4(r16)
   86e90:	91400415 	stw	r5,16(r18)
   86e94:	a0001a1e 	bne	r20,zero,86f00 <__d2b+0x140>
   86e98:	3545883a 	add	r2,r6,r21
   86e9c:	10bef344 	addi	r2,r2,-1075
   86ea0:	00c00d44 	movi	r3,53
   86ea4:	b0800015 	stw	r2,0(r22)
   86ea8:	1987c83a 	sub	r3,r3,r6
   86eac:	b8c00015 	stw	r3,0(r23)
   86eb0:	9005883a 	mov	r2,r18
   86eb4:	dfc00a17 	ldw	ra,40(sp)
   86eb8:	ddc00917 	ldw	r23,36(sp)
   86ebc:	dd800817 	ldw	r22,32(sp)
   86ec0:	dd400717 	ldw	r21,28(sp)
   86ec4:	dd000617 	ldw	r20,24(sp)
   86ec8:	dcc00517 	ldw	r19,20(sp)
   86ecc:	dc800417 	ldw	r18,16(sp)
   86ed0:	dc400317 	ldw	r17,12(sp)
   86ed4:	dc000217 	ldw	r16,8(sp)
   86ed8:	dec00b04 	addi	sp,sp,44
   86edc:	f800283a 	ret
   86ee0:	d9000104 	addi	r4,sp,4
   86ee4:	008681c0 	call	8681c <__lo0bits>
   86ee8:	11800804 	addi	r6,r2,32
   86eec:	d8800117 	ldw	r2,4(sp)
   86ef0:	94c00415 	stw	r19,16(r18)
   86ef4:	980b883a 	mov	r5,r19
   86ef8:	90800515 	stw	r2,20(r18)
   86efc:	a03fe626 	beq	r20,zero,86e98 <__d2b+0xd8>
   86f00:	2945883a 	add	r2,r5,r5
   86f04:	1085883a 	add	r2,r2,r2
   86f08:	1405883a 	add	r2,r2,r16
   86f0c:	113fff17 	ldw	r4,-4(r2)
   86f10:	30fef384 	addi	r3,r6,-1074
   86f14:	2820917a 	slli	r16,r5,5
   86f18:	b0c00015 	stw	r3,0(r22)
   86f1c:	00867ac0 	call	867ac <__hi0bits>
   86f20:	80a1c83a 	sub	r16,r16,r2
   86f24:	bc000015 	stw	r16,0(r23)
   86f28:	003fe106 	br	86eb0 <__d2b+0xf0>
   86f2c:	d8800017 	ldw	r2,0(sp)
   86f30:	90800515 	stw	r2,20(r18)
   86f34:	d8c00117 	ldw	r3,4(sp)
   86f38:	003fd106 	br	86e80 <__d2b+0xc0>

00086f3c <__mdiff>:
   86f3c:	defffb04 	addi	sp,sp,-20
   86f40:	dc000015 	stw	r16,0(sp)
   86f44:	2821883a 	mov	r16,r5
   86f48:	dc800215 	stw	r18,8(sp)
   86f4c:	300b883a 	mov	r5,r6
   86f50:	2025883a 	mov	r18,r4
   86f54:	8009883a 	mov	r4,r16
   86f58:	dc400115 	stw	r17,4(sp)
   86f5c:	dfc00415 	stw	ra,16(sp)
   86f60:	dcc00315 	stw	r19,12(sp)
   86f64:	3023883a 	mov	r17,r6
   86f68:	00868e00 	call	868e0 <__mcmp>
   86f6c:	10004226 	beq	r2,zero,87078 <__mdiff+0x13c>
   86f70:	10005016 	blt	r2,zero,870b4 <__mdiff+0x178>
   86f74:	0027883a 	mov	r19,zero
   86f78:	81400117 	ldw	r5,4(r16)
   86f7c:	9009883a 	mov	r4,r18
   86f80:	0086d040 	call	86d04 <_Balloc>
   86f84:	1019883a 	mov	r12,r2
   86f88:	82800417 	ldw	r10,16(r16)
   86f8c:	88800417 	ldw	r2,16(r17)
   86f90:	81800504 	addi	r6,r16,20
   86f94:	5287883a 	add	r3,r10,r10
   86f98:	1085883a 	add	r2,r2,r2
   86f9c:	18c7883a 	add	r3,r3,r3
   86fa0:	1085883a 	add	r2,r2,r2
   86fa4:	8a000504 	addi	r8,r17,20
   86fa8:	64c00315 	stw	r19,12(r12)
   86fac:	30db883a 	add	r13,r6,r3
   86fb0:	4097883a 	add	r11,r8,r2
   86fb4:	61c00504 	addi	r7,r12,20
   86fb8:	0013883a 	mov	r9,zero
   86fbc:	31000017 	ldw	r4,0(r6)
   86fc0:	41400017 	ldw	r5,0(r8)
   86fc4:	42000104 	addi	r8,r8,4
   86fc8:	20bfffcc 	andi	r2,r4,65535
   86fcc:	28ffffcc 	andi	r3,r5,65535
   86fd0:	10c5c83a 	sub	r2,r2,r3
   86fd4:	1245883a 	add	r2,r2,r9
   86fd8:	2008d43a 	srli	r4,r4,16
   86fdc:	280ad43a 	srli	r5,r5,16
   86fe0:	1007d43a 	srai	r3,r2,16
   86fe4:	3880000d 	sth	r2,0(r7)
   86fe8:	2149c83a 	sub	r4,r4,r5
   86fec:	20c9883a 	add	r4,r4,r3
   86ff0:	3900008d 	sth	r4,2(r7)
   86ff4:	31800104 	addi	r6,r6,4
   86ff8:	39c00104 	addi	r7,r7,4
   86ffc:	2013d43a 	srai	r9,r4,16
   87000:	42ffee36 	bltu	r8,r11,86fbc <__mdiff+0x80>
   87004:	33400c2e 	bgeu	r6,r13,87038 <__mdiff+0xfc>
   87008:	30800017 	ldw	r2,0(r6)
   8700c:	31800104 	addi	r6,r6,4
   87010:	10ffffcc 	andi	r3,r2,65535
   87014:	1a47883a 	add	r3,r3,r9
   87018:	1004d43a 	srli	r2,r2,16
   8701c:	1809d43a 	srai	r4,r3,16
   87020:	38c0000d 	sth	r3,0(r7)
   87024:	1105883a 	add	r2,r2,r4
   87028:	3880008d 	sth	r2,2(r7)
   8702c:	1013d43a 	srai	r9,r2,16
   87030:	39c00104 	addi	r7,r7,4
   87034:	337ff436 	bltu	r6,r13,87008 <__mdiff+0xcc>
   87038:	38bfff17 	ldw	r2,-4(r7)
   8703c:	38ffff04 	addi	r3,r7,-4
   87040:	1000041e 	bne	r2,zero,87054 <__mdiff+0x118>
   87044:	18ffff04 	addi	r3,r3,-4
   87048:	18800017 	ldw	r2,0(r3)
   8704c:	52bfffc4 	addi	r10,r10,-1
   87050:	103ffc26 	beq	r2,zero,87044 <__mdiff+0x108>
   87054:	6005883a 	mov	r2,r12
   87058:	62800415 	stw	r10,16(r12)
   8705c:	dfc00417 	ldw	ra,16(sp)
   87060:	dcc00317 	ldw	r19,12(sp)
   87064:	dc800217 	ldw	r18,8(sp)
   87068:	dc400117 	ldw	r17,4(sp)
   8706c:	dc000017 	ldw	r16,0(sp)
   87070:	dec00504 	addi	sp,sp,20
   87074:	f800283a 	ret
   87078:	9009883a 	mov	r4,r18
   8707c:	000b883a 	mov	r5,zero
   87080:	0086d040 	call	86d04 <_Balloc>
   87084:	1019883a 	mov	r12,r2
   87088:	00800044 	movi	r2,1
   8708c:	60800415 	stw	r2,16(r12)
   87090:	6005883a 	mov	r2,r12
   87094:	60000515 	stw	zero,20(r12)
   87098:	dfc00417 	ldw	ra,16(sp)
   8709c:	dcc00317 	ldw	r19,12(sp)
   870a0:	dc800217 	ldw	r18,8(sp)
   870a4:	dc400117 	ldw	r17,4(sp)
   870a8:	dc000017 	ldw	r16,0(sp)
   870ac:	dec00504 	addi	sp,sp,20
   870b0:	f800283a 	ret
   870b4:	880d883a 	mov	r6,r17
   870b8:	04c00044 	movi	r19,1
   870bc:	8023883a 	mov	r17,r16
   870c0:	3021883a 	mov	r16,r6
   870c4:	003fac06 	br	86f78 <__mdiff+0x3c>

000870c8 <__lshift>:
   870c8:	defff904 	addi	sp,sp,-28
   870cc:	28800417 	ldw	r2,16(r5)
   870d0:	dc000015 	stw	r16,0(sp)
   870d4:	3021d17a 	srai	r16,r6,5
   870d8:	28c00217 	ldw	r3,8(r5)
   870dc:	10800044 	addi	r2,r2,1
   870e0:	dc400115 	stw	r17,4(sp)
   870e4:	80a3883a 	add	r17,r16,r2
   870e8:	dd400515 	stw	r21,20(sp)
   870ec:	dd000415 	stw	r20,16(sp)
   870f0:	dc800215 	stw	r18,8(sp)
   870f4:	dfc00615 	stw	ra,24(sp)
   870f8:	2825883a 	mov	r18,r5
   870fc:	dcc00315 	stw	r19,12(sp)
   87100:	3029883a 	mov	r20,r6
   87104:	202b883a 	mov	r21,r4
   87108:	29400117 	ldw	r5,4(r5)
   8710c:	1c40030e 	bge	r3,r17,8711c <__lshift+0x54>
   87110:	18c7883a 	add	r3,r3,r3
   87114:	29400044 	addi	r5,r5,1
   87118:	1c7ffd16 	blt	r3,r17,87110 <__lshift+0x48>
   8711c:	a809883a 	mov	r4,r21
   87120:	0086d040 	call	86d04 <_Balloc>
   87124:	1027883a 	mov	r19,r2
   87128:	11400504 	addi	r5,r2,20
   8712c:	0400090e 	bge	zero,r16,87154 <__lshift+0x8c>
   87130:	2805883a 	mov	r2,r5
   87134:	0007883a 	mov	r3,zero
   87138:	18c00044 	addi	r3,r3,1
   8713c:	10000015 	stw	zero,0(r2)
   87140:	10800104 	addi	r2,r2,4
   87144:	80fffc1e 	bne	r16,r3,87138 <__lshift+0x70>
   87148:	8405883a 	add	r2,r16,r16
   8714c:	1085883a 	add	r2,r2,r2
   87150:	288b883a 	add	r5,r5,r2
   87154:	90800417 	ldw	r2,16(r18)
   87158:	91000504 	addi	r4,r18,20
   8715c:	a18007cc 	andi	r6,r20,31
   87160:	1085883a 	add	r2,r2,r2
   87164:	1085883a 	add	r2,r2,r2
   87168:	208f883a 	add	r7,r4,r2
   8716c:	30001e26 	beq	r6,zero,871e8 <__lshift+0x120>
   87170:	00800804 	movi	r2,32
   87174:	1191c83a 	sub	r8,r2,r6
   87178:	0007883a 	mov	r3,zero
   8717c:	20800017 	ldw	r2,0(r4)
   87180:	1184983a 	sll	r2,r2,r6
   87184:	1884b03a 	or	r2,r3,r2
   87188:	28800015 	stw	r2,0(r5)
   8718c:	20c00017 	ldw	r3,0(r4)
   87190:	21000104 	addi	r4,r4,4
   87194:	29400104 	addi	r5,r5,4
   87198:	1a06d83a 	srl	r3,r3,r8
   8719c:	21fff736 	bltu	r4,r7,8717c <__lshift+0xb4>
   871a0:	28c00015 	stw	r3,0(r5)
   871a4:	18000126 	beq	r3,zero,871ac <__lshift+0xe4>
   871a8:	8c400044 	addi	r17,r17,1
   871ac:	88bfffc4 	addi	r2,r17,-1
   871b0:	98800415 	stw	r2,16(r19)
   871b4:	a809883a 	mov	r4,r21
   871b8:	900b883a 	mov	r5,r18
   871bc:	00867840 	call	86784 <_Bfree>
   871c0:	9805883a 	mov	r2,r19
   871c4:	dfc00617 	ldw	ra,24(sp)
   871c8:	dd400517 	ldw	r21,20(sp)
   871cc:	dd000417 	ldw	r20,16(sp)
   871d0:	dcc00317 	ldw	r19,12(sp)
   871d4:	dc800217 	ldw	r18,8(sp)
   871d8:	dc400117 	ldw	r17,4(sp)
   871dc:	dc000017 	ldw	r16,0(sp)
   871e0:	dec00704 	addi	sp,sp,28
   871e4:	f800283a 	ret
   871e8:	20800017 	ldw	r2,0(r4)
   871ec:	21000104 	addi	r4,r4,4
   871f0:	28800015 	stw	r2,0(r5)
   871f4:	29400104 	addi	r5,r5,4
   871f8:	21ffec2e 	bgeu	r4,r7,871ac <__lshift+0xe4>
   871fc:	20800017 	ldw	r2,0(r4)
   87200:	21000104 	addi	r4,r4,4
   87204:	28800015 	stw	r2,0(r5)
   87208:	29400104 	addi	r5,r5,4
   8720c:	21fff636 	bltu	r4,r7,871e8 <__lshift+0x120>
   87210:	003fe606 	br	871ac <__lshift+0xe4>

00087214 <__multiply>:
   87214:	defff004 	addi	sp,sp,-64
   87218:	dc800815 	stw	r18,32(sp)
   8721c:	dc400715 	stw	r17,28(sp)
   87220:	2c800417 	ldw	r18,16(r5)
   87224:	34400417 	ldw	r17,16(r6)
   87228:	dcc00915 	stw	r19,36(sp)
   8722c:	dc000615 	stw	r16,24(sp)
   87230:	dfc00f15 	stw	ra,60(sp)
   87234:	df000e15 	stw	fp,56(sp)
   87238:	ddc00d15 	stw	r23,52(sp)
   8723c:	dd800c15 	stw	r22,48(sp)
   87240:	dd400b15 	stw	r21,44(sp)
   87244:	dd000a15 	stw	r20,40(sp)
   87248:	2821883a 	mov	r16,r5
   8724c:	3027883a 	mov	r19,r6
   87250:	9440040e 	bge	r18,r17,87264 <__multiply+0x50>
   87254:	8825883a 	mov	r18,r17
   87258:	2c400417 	ldw	r17,16(r5)
   8725c:	2827883a 	mov	r19,r5
   87260:	3021883a 	mov	r16,r6
   87264:	80800217 	ldw	r2,8(r16)
   87268:	9447883a 	add	r3,r18,r17
   8726c:	d8c00415 	stw	r3,16(sp)
   87270:	81400117 	ldw	r5,4(r16)
   87274:	10c0010e 	bge	r2,r3,8727c <__multiply+0x68>
   87278:	29400044 	addi	r5,r5,1
   8727c:	0086d040 	call	86d04 <_Balloc>
   87280:	d8800515 	stw	r2,20(sp)
   87284:	d9000417 	ldw	r4,16(sp)
   87288:	d8c00517 	ldw	r3,20(sp)
   8728c:	2105883a 	add	r2,r4,r4
   87290:	1085883a 	add	r2,r2,r2
   87294:	19000504 	addi	r4,r3,20
   87298:	2085883a 	add	r2,r4,r2
   8729c:	d8800315 	stw	r2,12(sp)
   872a0:	2080052e 	bgeu	r4,r2,872b8 <__multiply+0xa4>
   872a4:	2005883a 	mov	r2,r4
   872a8:	d8c00317 	ldw	r3,12(sp)
   872ac:	10000015 	stw	zero,0(r2)
   872b0:	10800104 	addi	r2,r2,4
   872b4:	10fffc36 	bltu	r2,r3,872a8 <__multiply+0x94>
   872b8:	8c45883a 	add	r2,r17,r17
   872bc:	9487883a 	add	r3,r18,r18
   872c0:	9dc00504 	addi	r23,r19,20
   872c4:	1085883a 	add	r2,r2,r2
   872c8:	84000504 	addi	r16,r16,20
   872cc:	18c7883a 	add	r3,r3,r3
   872d0:	b885883a 	add	r2,r23,r2
   872d4:	dc000015 	stw	r16,0(sp)
   872d8:	d8800215 	stw	r2,8(sp)
   872dc:	80f9883a 	add	fp,r16,r3
   872e0:	b880432e 	bgeu	r23,r2,873f0 <__multiply+0x1dc>
   872e4:	d9000115 	stw	r4,4(sp)
   872e8:	b9000017 	ldw	r4,0(r23)
   872ec:	253fffcc 	andi	r20,r4,65535
   872f0:	a0001a26 	beq	r20,zero,8735c <__multiply+0x148>
   872f4:	dcc00017 	ldw	r19,0(sp)
   872f8:	dc800117 	ldw	r18,4(sp)
   872fc:	002b883a 	mov	r21,zero
   87300:	9c400017 	ldw	r17,0(r19)
   87304:	94000017 	ldw	r16,0(r18)
   87308:	a009883a 	mov	r4,r20
   8730c:	897fffcc 	andi	r5,r17,65535
   87310:	0080f440 	call	80f44 <__mulsi3>
   87314:	880ad43a 	srli	r5,r17,16
   87318:	80ffffcc 	andi	r3,r16,65535
   8731c:	a8c7883a 	add	r3,r21,r3
   87320:	a009883a 	mov	r4,r20
   87324:	10e3883a 	add	r17,r2,r3
   87328:	8020d43a 	srli	r16,r16,16
   8732c:	0080f440 	call	80f44 <__mulsi3>
   87330:	8806d43a 	srli	r3,r17,16
   87334:	1405883a 	add	r2,r2,r16
   87338:	9cc00104 	addi	r19,r19,4
   8733c:	1887883a 	add	r3,r3,r2
   87340:	90c0008d 	sth	r3,2(r18)
   87344:	9440000d 	sth	r17,0(r18)
   87348:	182ad43a 	srli	r21,r3,16
   8734c:	94800104 	addi	r18,r18,4
   87350:	9f3feb36 	bltu	r19,fp,87300 <__multiply+0xec>
   87354:	95400015 	stw	r21,0(r18)
   87358:	b9000017 	ldw	r4,0(r23)
   8735c:	202ad43a 	srli	r21,r4,16
   87360:	a8001c26 	beq	r21,zero,873d4 <__multiply+0x1c0>
   87364:	d9000117 	ldw	r4,4(sp)
   87368:	dd000017 	ldw	r20,0(sp)
   8736c:	002d883a 	mov	r22,zero
   87370:	24c00017 	ldw	r19,0(r4)
   87374:	2025883a 	mov	r18,r4
   87378:	9823883a 	mov	r17,r19
   8737c:	a4000017 	ldw	r16,0(r20)
   87380:	a809883a 	mov	r4,r21
   87384:	a5000104 	addi	r20,r20,4
   87388:	817fffcc 	andi	r5,r16,65535
   8738c:	0080f440 	call	80f44 <__mulsi3>
   87390:	8806d43a 	srli	r3,r17,16
   87394:	800ad43a 	srli	r5,r16,16
   87398:	94c0000d 	sth	r19,0(r18)
   8739c:	b0c7883a 	add	r3,r22,r3
   873a0:	10e1883a 	add	r16,r2,r3
   873a4:	9400008d 	sth	r16,2(r18)
   873a8:	a809883a 	mov	r4,r21
   873ac:	94800104 	addi	r18,r18,4
   873b0:	0080f440 	call	80f44 <__mulsi3>
   873b4:	94400017 	ldw	r17,0(r18)
   873b8:	8020d43a 	srli	r16,r16,16
   873bc:	88ffffcc 	andi	r3,r17,65535
   873c0:	10c5883a 	add	r2,r2,r3
   873c4:	80a7883a 	add	r19,r16,r2
   873c8:	982cd43a 	srli	r22,r19,16
   873cc:	a73feb36 	bltu	r20,fp,8737c <__multiply+0x168>
   873d0:	94c00015 	stw	r19,0(r18)
   873d4:	d8800217 	ldw	r2,8(sp)
   873d8:	bdc00104 	addi	r23,r23,4
   873dc:	b880042e 	bgeu	r23,r2,873f0 <__multiply+0x1dc>
   873e0:	d8c00117 	ldw	r3,4(sp)
   873e4:	18c00104 	addi	r3,r3,4
   873e8:	d8c00115 	stw	r3,4(sp)
   873ec:	003fbe06 	br	872e8 <__multiply+0xd4>
   873f0:	d9000417 	ldw	r4,16(sp)
   873f4:	01000c0e 	bge	zero,r4,87428 <__multiply+0x214>
   873f8:	d8c00317 	ldw	r3,12(sp)
   873fc:	18bfff17 	ldw	r2,-4(r3)
   87400:	18ffff04 	addi	r3,r3,-4
   87404:	10000326 	beq	r2,zero,87414 <__multiply+0x200>
   87408:	00000706 	br	87428 <__multiply+0x214>
   8740c:	18800017 	ldw	r2,0(r3)
   87410:	1000051e 	bne	r2,zero,87428 <__multiply+0x214>
   87414:	d9000417 	ldw	r4,16(sp)
   87418:	18ffff04 	addi	r3,r3,-4
   8741c:	213fffc4 	addi	r4,r4,-1
   87420:	d9000415 	stw	r4,16(sp)
   87424:	203ff91e 	bne	r4,zero,8740c <__multiply+0x1f8>
   87428:	d8800417 	ldw	r2,16(sp)
   8742c:	d8c00517 	ldw	r3,20(sp)
   87430:	18800415 	stw	r2,16(r3)
   87434:	1805883a 	mov	r2,r3
   87438:	dfc00f17 	ldw	ra,60(sp)
   8743c:	df000e17 	ldw	fp,56(sp)
   87440:	ddc00d17 	ldw	r23,52(sp)
   87444:	dd800c17 	ldw	r22,48(sp)
   87448:	dd400b17 	ldw	r21,44(sp)
   8744c:	dd000a17 	ldw	r20,40(sp)
   87450:	dcc00917 	ldw	r19,36(sp)
   87454:	dc800817 	ldw	r18,32(sp)
   87458:	dc400717 	ldw	r17,28(sp)
   8745c:	dc000617 	ldw	r16,24(sp)
   87460:	dec01004 	addi	sp,sp,64
   87464:	f800283a 	ret

00087468 <__i2b>:
   87468:	defffd04 	addi	sp,sp,-12
   8746c:	dc000015 	stw	r16,0(sp)
   87470:	04000044 	movi	r16,1
   87474:	dc800115 	stw	r18,4(sp)
   87478:	2825883a 	mov	r18,r5
   8747c:	800b883a 	mov	r5,r16
   87480:	dfc00215 	stw	ra,8(sp)
   87484:	0086d040 	call	86d04 <_Balloc>
   87488:	14000415 	stw	r16,16(r2)
   8748c:	14800515 	stw	r18,20(r2)
   87490:	dfc00217 	ldw	ra,8(sp)
   87494:	dc800117 	ldw	r18,4(sp)
   87498:	dc000017 	ldw	r16,0(sp)
   8749c:	dec00304 	addi	sp,sp,12
   874a0:	f800283a 	ret

000874a4 <__multadd>:
   874a4:	defff604 	addi	sp,sp,-40
   874a8:	dd800615 	stw	r22,24(sp)
   874ac:	2d800417 	ldw	r22,16(r5)
   874b0:	df000815 	stw	fp,32(sp)
   874b4:	ddc00715 	stw	r23,28(sp)
   874b8:	dd400515 	stw	r21,20(sp)
   874bc:	dd000415 	stw	r20,16(sp)
   874c0:	dcc00315 	stw	r19,12(sp)
   874c4:	dc800215 	stw	r18,8(sp)
   874c8:	dfc00915 	stw	ra,36(sp)
   874cc:	dc400115 	stw	r17,4(sp)
   874d0:	dc000015 	stw	r16,0(sp)
   874d4:	282f883a 	mov	r23,r5
   874d8:	2039883a 	mov	fp,r4
   874dc:	302b883a 	mov	r21,r6
   874e0:	3829883a 	mov	r20,r7
   874e4:	2c800504 	addi	r18,r5,20
   874e8:	0027883a 	mov	r19,zero
   874ec:	94400017 	ldw	r17,0(r18)
   874f0:	a80b883a 	mov	r5,r21
   874f4:	9cc00044 	addi	r19,r19,1
   874f8:	893fffcc 	andi	r4,r17,65535
   874fc:	0080f440 	call	80f44 <__mulsi3>
   87500:	8808d43a 	srli	r4,r17,16
   87504:	1521883a 	add	r16,r2,r20
   87508:	a80b883a 	mov	r5,r21
   8750c:	0080f440 	call	80f44 <__mulsi3>
   87510:	8008d43a 	srli	r4,r16,16
   87514:	843fffcc 	andi	r16,r16,65535
   87518:	1105883a 	add	r2,r2,r4
   8751c:	1006943a 	slli	r3,r2,16
   87520:	1028d43a 	srli	r20,r2,16
   87524:	1c07883a 	add	r3,r3,r16
   87528:	90c00015 	stw	r3,0(r18)
   8752c:	94800104 	addi	r18,r18,4
   87530:	9dbfee16 	blt	r19,r22,874ec <__multadd+0x48>
   87534:	a0000826 	beq	r20,zero,87558 <__multadd+0xb4>
   87538:	b8800217 	ldw	r2,8(r23)
   8753c:	b080130e 	bge	r22,r2,8758c <__multadd+0xe8>
   87540:	b585883a 	add	r2,r22,r22
   87544:	1085883a 	add	r2,r2,r2
   87548:	15c5883a 	add	r2,r2,r23
   8754c:	b0c00044 	addi	r3,r22,1
   87550:	15000515 	stw	r20,20(r2)
   87554:	b8c00415 	stw	r3,16(r23)
   87558:	b805883a 	mov	r2,r23
   8755c:	dfc00917 	ldw	ra,36(sp)
   87560:	df000817 	ldw	fp,32(sp)
   87564:	ddc00717 	ldw	r23,28(sp)
   87568:	dd800617 	ldw	r22,24(sp)
   8756c:	dd400517 	ldw	r21,20(sp)
   87570:	dd000417 	ldw	r20,16(sp)
   87574:	dcc00317 	ldw	r19,12(sp)
   87578:	dc800217 	ldw	r18,8(sp)
   8757c:	dc400117 	ldw	r17,4(sp)
   87580:	dc000017 	ldw	r16,0(sp)
   87584:	dec00a04 	addi	sp,sp,40
   87588:	f800283a 	ret
   8758c:	b9400117 	ldw	r5,4(r23)
   87590:	e009883a 	mov	r4,fp
   87594:	29400044 	addi	r5,r5,1
   87598:	0086d040 	call	86d04 <_Balloc>
   8759c:	b9800417 	ldw	r6,16(r23)
   875a0:	b9400304 	addi	r5,r23,12
   875a4:	11000304 	addi	r4,r2,12
   875a8:	318d883a 	add	r6,r6,r6
   875ac:	318d883a 	add	r6,r6,r6
   875b0:	31800204 	addi	r6,r6,8
   875b4:	1023883a 	mov	r17,r2
   875b8:	008656c0 	call	8656c <memcpy>
   875bc:	b80b883a 	mov	r5,r23
   875c0:	e009883a 	mov	r4,fp
   875c4:	00867840 	call	86784 <_Bfree>
   875c8:	882f883a 	mov	r23,r17
   875cc:	003fdc06 	br	87540 <__multadd+0x9c>

000875d0 <__pow5mult>:
   875d0:	defffa04 	addi	sp,sp,-24
   875d4:	308000cc 	andi	r2,r6,3
   875d8:	dd000415 	stw	r20,16(sp)
   875dc:	dcc00315 	stw	r19,12(sp)
   875e0:	dc000015 	stw	r16,0(sp)
   875e4:	dfc00515 	stw	ra,20(sp)
   875e8:	dc800215 	stw	r18,8(sp)
   875ec:	dc400115 	stw	r17,4(sp)
   875f0:	3021883a 	mov	r16,r6
   875f4:	2027883a 	mov	r19,r4
   875f8:	2829883a 	mov	r20,r5
   875fc:	10002b1e 	bne	r2,zero,876ac <__pow5mult+0xdc>
   87600:	8025d0ba 	srai	r18,r16,2
   87604:	90001b26 	beq	r18,zero,87674 <__pow5mult+0xa4>
   87608:	9c001217 	ldw	r16,72(r19)
   8760c:	8000081e 	bne	r16,zero,87630 <__pow5mult+0x60>
   87610:	00003006 	br	876d4 <__pow5mult+0x104>
   87614:	800b883a 	mov	r5,r16
   87618:	800d883a 	mov	r6,r16
   8761c:	9809883a 	mov	r4,r19
   87620:	90001426 	beq	r18,zero,87674 <__pow5mult+0xa4>
   87624:	80800017 	ldw	r2,0(r16)
   87628:	10001b26 	beq	r2,zero,87698 <__pow5mult+0xc8>
   8762c:	1021883a 	mov	r16,r2
   87630:	9080004c 	andi	r2,r18,1
   87634:	1005003a 	cmpeq	r2,r2,zero
   87638:	9025d07a 	srai	r18,r18,1
   8763c:	800d883a 	mov	r6,r16
   87640:	9809883a 	mov	r4,r19
   87644:	a00b883a 	mov	r5,r20
   87648:	103ff21e 	bne	r2,zero,87614 <__pow5mult+0x44>
   8764c:	00872140 	call	87214 <__multiply>
   87650:	a00b883a 	mov	r5,r20
   87654:	9809883a 	mov	r4,r19
   87658:	1023883a 	mov	r17,r2
   8765c:	00867840 	call	86784 <_Bfree>
   87660:	8829883a 	mov	r20,r17
   87664:	800b883a 	mov	r5,r16
   87668:	800d883a 	mov	r6,r16
   8766c:	9809883a 	mov	r4,r19
   87670:	903fec1e 	bne	r18,zero,87624 <__pow5mult+0x54>
   87674:	a005883a 	mov	r2,r20
   87678:	dfc00517 	ldw	ra,20(sp)
   8767c:	dd000417 	ldw	r20,16(sp)
   87680:	dcc00317 	ldw	r19,12(sp)
   87684:	dc800217 	ldw	r18,8(sp)
   87688:	dc400117 	ldw	r17,4(sp)
   8768c:	dc000017 	ldw	r16,0(sp)
   87690:	dec00604 	addi	sp,sp,24
   87694:	f800283a 	ret
   87698:	00872140 	call	87214 <__multiply>
   8769c:	80800015 	stw	r2,0(r16)
   876a0:	1021883a 	mov	r16,r2
   876a4:	10000015 	stw	zero,0(r2)
   876a8:	003fe106 	br	87630 <__pow5mult+0x60>
   876ac:	1085883a 	add	r2,r2,r2
   876b0:	00c00274 	movhi	r3,9
   876b4:	18de6304 	addi	r3,r3,31116
   876b8:	1085883a 	add	r2,r2,r2
   876bc:	10c5883a 	add	r2,r2,r3
   876c0:	11bfff17 	ldw	r6,-4(r2)
   876c4:	000f883a 	mov	r7,zero
   876c8:	00874a40 	call	874a4 <__multadd>
   876cc:	1029883a 	mov	r20,r2
   876d0:	003fcb06 	br	87600 <__pow5mult+0x30>
   876d4:	9809883a 	mov	r4,r19
   876d8:	01409c44 	movi	r5,625
   876dc:	00874680 	call	87468 <__i2b>
   876e0:	98801215 	stw	r2,72(r19)
   876e4:	1021883a 	mov	r16,r2
   876e8:	10000015 	stw	zero,0(r2)
   876ec:	003fd006 	br	87630 <__pow5mult+0x60>

000876f0 <__s2b>:
   876f0:	defff904 	addi	sp,sp,-28
   876f4:	dcc00315 	stw	r19,12(sp)
   876f8:	dc800215 	stw	r18,8(sp)
   876fc:	2827883a 	mov	r19,r5
   87700:	2025883a 	mov	r18,r4
   87704:	01400244 	movi	r5,9
   87708:	39000204 	addi	r4,r7,8
   8770c:	dd000415 	stw	r20,16(sp)
   87710:	dc400115 	stw	r17,4(sp)
   87714:	dfc00615 	stw	ra,24(sp)
   87718:	dd400515 	stw	r21,20(sp)
   8771c:	dc000015 	stw	r16,0(sp)
   87720:	3829883a 	mov	r20,r7
   87724:	3023883a 	mov	r17,r6
   87728:	008a52c0 	call	8a52c <__divsi3>
   8772c:	00c00044 	movi	r3,1
   87730:	1880350e 	bge	r3,r2,87808 <__s2b+0x118>
   87734:	000b883a 	mov	r5,zero
   87738:	18c7883a 	add	r3,r3,r3
   8773c:	29400044 	addi	r5,r5,1
   87740:	18bffd16 	blt	r3,r2,87738 <__s2b+0x48>
   87744:	9009883a 	mov	r4,r18
   87748:	0086d040 	call	86d04 <_Balloc>
   8774c:	1011883a 	mov	r8,r2
   87750:	d8800717 	ldw	r2,28(sp)
   87754:	00c00044 	movi	r3,1
   87758:	01800244 	movi	r6,9
   8775c:	40800515 	stw	r2,20(r8)
   87760:	40c00415 	stw	r3,16(r8)
   87764:	3440260e 	bge	r6,r17,87800 <__s2b+0x110>
   87768:	3021883a 	mov	r16,r6
   8776c:	99ab883a 	add	r21,r19,r6
   87770:	9c05883a 	add	r2,r19,r16
   87774:	11c00007 	ldb	r7,0(r2)
   87778:	400b883a 	mov	r5,r8
   8777c:	9009883a 	mov	r4,r18
   87780:	39fff404 	addi	r7,r7,-48
   87784:	01800284 	movi	r6,10
   87788:	00874a40 	call	874a4 <__multadd>
   8778c:	84000044 	addi	r16,r16,1
   87790:	1011883a 	mov	r8,r2
   87794:	8c3ff61e 	bne	r17,r16,87770 <__s2b+0x80>
   87798:	ac45883a 	add	r2,r21,r17
   8779c:	117ffe04 	addi	r5,r2,-8
   877a0:	880d883a 	mov	r6,r17
   877a4:	35000c0e 	bge	r6,r20,877d8 <__s2b+0xe8>
   877a8:	a185c83a 	sub	r2,r20,r6
   877ac:	2821883a 	mov	r16,r5
   877b0:	28a3883a 	add	r17,r5,r2
   877b4:	81c00007 	ldb	r7,0(r16)
   877b8:	400b883a 	mov	r5,r8
   877bc:	9009883a 	mov	r4,r18
   877c0:	39fff404 	addi	r7,r7,-48
   877c4:	01800284 	movi	r6,10
   877c8:	00874a40 	call	874a4 <__multadd>
   877cc:	84000044 	addi	r16,r16,1
   877d0:	1011883a 	mov	r8,r2
   877d4:	847ff71e 	bne	r16,r17,877b4 <__s2b+0xc4>
   877d8:	4005883a 	mov	r2,r8
   877dc:	dfc00617 	ldw	ra,24(sp)
   877e0:	dd400517 	ldw	r21,20(sp)
   877e4:	dd000417 	ldw	r20,16(sp)
   877e8:	dcc00317 	ldw	r19,12(sp)
   877ec:	dc800217 	ldw	r18,8(sp)
   877f0:	dc400117 	ldw	r17,4(sp)
   877f4:	dc000017 	ldw	r16,0(sp)
   877f8:	dec00704 	addi	sp,sp,28
   877fc:	f800283a 	ret
   87800:	99400284 	addi	r5,r19,10
   87804:	003fe706 	br	877a4 <__s2b+0xb4>
   87808:	000b883a 	mov	r5,zero
   8780c:	003fcd06 	br	87744 <__s2b+0x54>

00087810 <_realloc_r>:
   87810:	defff404 	addi	sp,sp,-48
   87814:	dd800815 	stw	r22,32(sp)
   87818:	dc800415 	stw	r18,16(sp)
   8781c:	dc400315 	stw	r17,12(sp)
   87820:	dfc00b15 	stw	ra,44(sp)
   87824:	df000a15 	stw	fp,40(sp)
   87828:	ddc00915 	stw	r23,36(sp)
   8782c:	dd400715 	stw	r21,28(sp)
   87830:	dd000615 	stw	r20,24(sp)
   87834:	dcc00515 	stw	r19,20(sp)
   87838:	dc000215 	stw	r16,8(sp)
   8783c:	2825883a 	mov	r18,r5
   87840:	3023883a 	mov	r17,r6
   87844:	202d883a 	mov	r22,r4
   87848:	2800c926 	beq	r5,zero,87b70 <_realloc_r+0x360>
   8784c:	008bc1c0 	call	8bc1c <__malloc_lock>
   87850:	943ffe04 	addi	r16,r18,-8
   87854:	88c002c4 	addi	r3,r17,11
   87858:	00800584 	movi	r2,22
   8785c:	82000117 	ldw	r8,4(r16)
   87860:	10c01b2e 	bgeu	r2,r3,878d0 <_realloc_r+0xc0>
   87864:	00bffe04 	movi	r2,-8
   87868:	188e703a 	and	r7,r3,r2
   8786c:	3839883a 	mov	fp,r7
   87870:	38001a16 	blt	r7,zero,878dc <_realloc_r+0xcc>
   87874:	e4401936 	bltu	fp,r17,878dc <_realloc_r+0xcc>
   87878:	013fff04 	movi	r4,-4
   8787c:	4126703a 	and	r19,r8,r4
   87880:	99c02616 	blt	r19,r7,8791c <_realloc_r+0x10c>
   87884:	802b883a 	mov	r21,r16
   87888:	9829883a 	mov	r20,r19
   8788c:	84000204 	addi	r16,r16,8
   87890:	a80f883a 	mov	r7,r21
   87894:	a70dc83a 	sub	r6,r20,fp
   87898:	008003c4 	movi	r2,15
   8789c:	1180c136 	bltu	r2,r6,87ba4 <_realloc_r+0x394>
   878a0:	38800117 	ldw	r2,4(r7)
   878a4:	a549883a 	add	r4,r20,r21
   878a8:	1080004c 	andi	r2,r2,1
   878ac:	a084b03a 	or	r2,r20,r2
   878b0:	38800115 	stw	r2,4(r7)
   878b4:	20c00117 	ldw	r3,4(r4)
   878b8:	18c00054 	ori	r3,r3,1
   878bc:	20c00115 	stw	r3,4(r4)
   878c0:	b009883a 	mov	r4,r22
   878c4:	008bd240 	call	8bd24 <__malloc_unlock>
   878c8:	8023883a 	mov	r17,r16
   878cc:	00000606 	br	878e8 <_realloc_r+0xd8>
   878d0:	01c00404 	movi	r7,16
   878d4:	3839883a 	mov	fp,r7
   878d8:	e47fe72e 	bgeu	fp,r17,87878 <_realloc_r+0x68>
   878dc:	00800304 	movi	r2,12
   878e0:	0023883a 	mov	r17,zero
   878e4:	b0800015 	stw	r2,0(r22)
   878e8:	8805883a 	mov	r2,r17
   878ec:	dfc00b17 	ldw	ra,44(sp)
   878f0:	df000a17 	ldw	fp,40(sp)
   878f4:	ddc00917 	ldw	r23,36(sp)
   878f8:	dd800817 	ldw	r22,32(sp)
   878fc:	dd400717 	ldw	r21,28(sp)
   87900:	dd000617 	ldw	r20,24(sp)
   87904:	dcc00517 	ldw	r19,20(sp)
   87908:	dc800417 	ldw	r18,16(sp)
   8790c:	dc400317 	ldw	r17,12(sp)
   87910:	dc000217 	ldw	r16,8(sp)
   87914:	dec00c04 	addi	sp,sp,48
   87918:	f800283a 	ret
   8791c:	008002b4 	movhi	r2,10
   87920:	10a00a04 	addi	r2,r2,-32728
   87924:	12400217 	ldw	r9,8(r2)
   87928:	84cd883a 	add	r6,r16,r19
   8792c:	802b883a 	mov	r21,r16
   87930:	3240b926 	beq	r6,r9,87c18 <_realloc_r+0x408>
   87934:	31400117 	ldw	r5,4(r6)
   87938:	00bfff84 	movi	r2,-2
   8793c:	2884703a 	and	r2,r5,r2
   87940:	1185883a 	add	r2,r2,r6
   87944:	10c00117 	ldw	r3,4(r2)
   87948:	18c0004c 	andi	r3,r3,1
   8794c:	1807003a 	cmpeq	r3,r3,zero
   87950:	1800a326 	beq	r3,zero,87be0 <_realloc_r+0x3d0>
   87954:	2908703a 	and	r4,r5,r4
   87958:	9929883a 	add	r20,r19,r4
   8795c:	a1c0a30e 	bge	r20,r7,87bec <_realloc_r+0x3dc>
   87960:	4080004c 	andi	r2,r8,1
   87964:	1000551e 	bne	r2,zero,87abc <_realloc_r+0x2ac>
   87968:	80800017 	ldw	r2,0(r16)
   8796c:	80afc83a 	sub	r23,r16,r2
   87970:	b8c00117 	ldw	r3,4(r23)
   87974:	00bfff04 	movi	r2,-4
   87978:	1884703a 	and	r2,r3,r2
   8797c:	30002e26 	beq	r6,zero,87a38 <_realloc_r+0x228>
   87980:	3240b926 	beq	r6,r9,87c68 <_realloc_r+0x458>
   87984:	98a9883a 	add	r20,r19,r2
   87988:	2509883a 	add	r4,r4,r20
   8798c:	d9000015 	stw	r4,0(sp)
   87990:	21c02a16 	blt	r4,r7,87a3c <_realloc_r+0x22c>
   87994:	30800317 	ldw	r2,12(r6)
   87998:	30c00217 	ldw	r3,8(r6)
   8799c:	01400904 	movi	r5,36
   879a0:	99bfff04 	addi	r6,r19,-4
   879a4:	18800315 	stw	r2,12(r3)
   879a8:	10c00215 	stw	r3,8(r2)
   879ac:	b9000317 	ldw	r4,12(r23)
   879b0:	b8800217 	ldw	r2,8(r23)
   879b4:	b82b883a 	mov	r21,r23
   879b8:	bc000204 	addi	r16,r23,8
   879bc:	20800215 	stw	r2,8(r4)
   879c0:	11000315 	stw	r4,12(r2)
   879c4:	2980e436 	bltu	r5,r6,87d58 <_realloc_r+0x548>
   879c8:	008004c4 	movi	r2,19
   879cc:	9009883a 	mov	r4,r18
   879d0:	8011883a 	mov	r8,r16
   879d4:	11800f2e 	bgeu	r2,r6,87a14 <_realloc_r+0x204>
   879d8:	90800017 	ldw	r2,0(r18)
   879dc:	ba000404 	addi	r8,r23,16
   879e0:	91000204 	addi	r4,r18,8
   879e4:	b8800215 	stw	r2,8(r23)
   879e8:	90c00117 	ldw	r3,4(r18)
   879ec:	008006c4 	movi	r2,27
   879f0:	b8c00315 	stw	r3,12(r23)
   879f4:	1180072e 	bgeu	r2,r6,87a14 <_realloc_r+0x204>
   879f8:	90c00217 	ldw	r3,8(r18)
   879fc:	ba000604 	addi	r8,r23,24
   87a00:	91000404 	addi	r4,r18,16
   87a04:	b8c00415 	stw	r3,16(r23)
   87a08:	90800317 	ldw	r2,12(r18)
   87a0c:	b8800515 	stw	r2,20(r23)
   87a10:	3140e726 	beq	r6,r5,87db0 <_realloc_r+0x5a0>
   87a14:	20800017 	ldw	r2,0(r4)
   87a18:	dd000017 	ldw	r20,0(sp)
   87a1c:	b80f883a 	mov	r7,r23
   87a20:	40800015 	stw	r2,0(r8)
   87a24:	20c00117 	ldw	r3,4(r4)
   87a28:	40c00115 	stw	r3,4(r8)
   87a2c:	20800217 	ldw	r2,8(r4)
   87a30:	40800215 	stw	r2,8(r8)
   87a34:	003f9706 	br	87894 <_realloc_r+0x84>
   87a38:	98a9883a 	add	r20,r19,r2
   87a3c:	a1c01f16 	blt	r20,r7,87abc <_realloc_r+0x2ac>
   87a40:	b8c00317 	ldw	r3,12(r23)
   87a44:	b8800217 	ldw	r2,8(r23)
   87a48:	99bfff04 	addi	r6,r19,-4
   87a4c:	01400904 	movi	r5,36
   87a50:	b82b883a 	mov	r21,r23
   87a54:	18800215 	stw	r2,8(r3)
   87a58:	10c00315 	stw	r3,12(r2)
   87a5c:	bc000204 	addi	r16,r23,8
   87a60:	2980c336 	bltu	r5,r6,87d70 <_realloc_r+0x560>
   87a64:	008004c4 	movi	r2,19
   87a68:	9009883a 	mov	r4,r18
   87a6c:	8011883a 	mov	r8,r16
   87a70:	11800f2e 	bgeu	r2,r6,87ab0 <_realloc_r+0x2a0>
   87a74:	90800017 	ldw	r2,0(r18)
   87a78:	ba000404 	addi	r8,r23,16
   87a7c:	91000204 	addi	r4,r18,8
   87a80:	b8800215 	stw	r2,8(r23)
   87a84:	90c00117 	ldw	r3,4(r18)
   87a88:	008006c4 	movi	r2,27
   87a8c:	b8c00315 	stw	r3,12(r23)
   87a90:	1180072e 	bgeu	r2,r6,87ab0 <_realloc_r+0x2a0>
   87a94:	90c00217 	ldw	r3,8(r18)
   87a98:	ba000604 	addi	r8,r23,24
   87a9c:	91000404 	addi	r4,r18,16
   87aa0:	b8c00415 	stw	r3,16(r23)
   87aa4:	90800317 	ldw	r2,12(r18)
   87aa8:	b8800515 	stw	r2,20(r23)
   87aac:	3140c726 	beq	r6,r5,87dcc <_realloc_r+0x5bc>
   87ab0:	20800017 	ldw	r2,0(r4)
   87ab4:	b80f883a 	mov	r7,r23
   87ab8:	003fd906 	br	87a20 <_realloc_r+0x210>
   87abc:	880b883a 	mov	r5,r17
   87ac0:	b009883a 	mov	r4,r22
   87ac4:	0085d480 	call	85d48 <_malloc_r>
   87ac8:	1023883a 	mov	r17,r2
   87acc:	10002526 	beq	r2,zero,87b64 <_realloc_r+0x354>
   87ad0:	80800117 	ldw	r2,4(r16)
   87ad4:	00ffff84 	movi	r3,-2
   87ad8:	893ffe04 	addi	r4,r17,-8
   87adc:	10c4703a 	and	r2,r2,r3
   87ae0:	8085883a 	add	r2,r16,r2
   87ae4:	20809526 	beq	r4,r2,87d3c <_realloc_r+0x52c>
   87ae8:	99bfff04 	addi	r6,r19,-4
   87aec:	01c00904 	movi	r7,36
   87af0:	39804536 	bltu	r7,r6,87c08 <_realloc_r+0x3f8>
   87af4:	008004c4 	movi	r2,19
   87af8:	9009883a 	mov	r4,r18
   87afc:	880b883a 	mov	r5,r17
   87b00:	11800f2e 	bgeu	r2,r6,87b40 <_realloc_r+0x330>
   87b04:	90800017 	ldw	r2,0(r18)
   87b08:	89400204 	addi	r5,r17,8
   87b0c:	91000204 	addi	r4,r18,8
   87b10:	88800015 	stw	r2,0(r17)
   87b14:	90c00117 	ldw	r3,4(r18)
   87b18:	008006c4 	movi	r2,27
   87b1c:	88c00115 	stw	r3,4(r17)
   87b20:	1180072e 	bgeu	r2,r6,87b40 <_realloc_r+0x330>
   87b24:	90c00217 	ldw	r3,8(r18)
   87b28:	89400404 	addi	r5,r17,16
   87b2c:	91000404 	addi	r4,r18,16
   87b30:	88c00215 	stw	r3,8(r17)
   87b34:	90800317 	ldw	r2,12(r18)
   87b38:	88800315 	stw	r2,12(r17)
   87b3c:	31c09126 	beq	r6,r7,87d84 <_realloc_r+0x574>
   87b40:	20800017 	ldw	r2,0(r4)
   87b44:	28800015 	stw	r2,0(r5)
   87b48:	20c00117 	ldw	r3,4(r4)
   87b4c:	28c00115 	stw	r3,4(r5)
   87b50:	20800217 	ldw	r2,8(r4)
   87b54:	28800215 	stw	r2,8(r5)
   87b58:	900b883a 	mov	r5,r18
   87b5c:	b009883a 	mov	r4,r22
   87b60:	00851c00 	call	851c0 <_free_r>
   87b64:	b009883a 	mov	r4,r22
   87b68:	008bd240 	call	8bd24 <__malloc_unlock>
   87b6c:	003f5e06 	br	878e8 <_realloc_r+0xd8>
   87b70:	300b883a 	mov	r5,r6
   87b74:	dfc00b17 	ldw	ra,44(sp)
   87b78:	df000a17 	ldw	fp,40(sp)
   87b7c:	ddc00917 	ldw	r23,36(sp)
   87b80:	dd800817 	ldw	r22,32(sp)
   87b84:	dd400717 	ldw	r21,28(sp)
   87b88:	dd000617 	ldw	r20,24(sp)
   87b8c:	dcc00517 	ldw	r19,20(sp)
   87b90:	dc800417 	ldw	r18,16(sp)
   87b94:	dc400317 	ldw	r17,12(sp)
   87b98:	dc000217 	ldw	r16,8(sp)
   87b9c:	dec00c04 	addi	sp,sp,48
   87ba0:	0085d481 	jmpi	85d48 <_malloc_r>
   87ba4:	38800117 	ldw	r2,4(r7)
   87ba8:	e54b883a 	add	r5,fp,r21
   87bac:	31000054 	ori	r4,r6,1
   87bb0:	1080004c 	andi	r2,r2,1
   87bb4:	1704b03a 	or	r2,r2,fp
   87bb8:	38800115 	stw	r2,4(r7)
   87bbc:	29000115 	stw	r4,4(r5)
   87bc0:	2987883a 	add	r3,r5,r6
   87bc4:	18800117 	ldw	r2,4(r3)
   87bc8:	29400204 	addi	r5,r5,8
   87bcc:	b009883a 	mov	r4,r22
   87bd0:	10800054 	ori	r2,r2,1
   87bd4:	18800115 	stw	r2,4(r3)
   87bd8:	00851c00 	call	851c0 <_free_r>
   87bdc:	003f3806 	br	878c0 <_realloc_r+0xb0>
   87be0:	000d883a 	mov	r6,zero
   87be4:	0009883a 	mov	r4,zero
   87be8:	003f5d06 	br	87960 <_realloc_r+0x150>
   87bec:	30c00217 	ldw	r3,8(r6)
   87bf0:	30800317 	ldw	r2,12(r6)
   87bf4:	800f883a 	mov	r7,r16
   87bf8:	84000204 	addi	r16,r16,8
   87bfc:	10c00215 	stw	r3,8(r2)
   87c00:	18800315 	stw	r2,12(r3)
   87c04:	003f2306 	br	87894 <_realloc_r+0x84>
   87c08:	8809883a 	mov	r4,r17
   87c0c:	900b883a 	mov	r5,r18
   87c10:	008660c0 	call	8660c <memmove>
   87c14:	003fd006 	br	87b58 <_realloc_r+0x348>
   87c18:	30800117 	ldw	r2,4(r6)
   87c1c:	e0c00404 	addi	r3,fp,16
   87c20:	1108703a 	and	r4,r2,r4
   87c24:	9905883a 	add	r2,r19,r4
   87c28:	10ff4d16 	blt	r2,r3,87960 <_realloc_r+0x150>
   87c2c:	1705c83a 	sub	r2,r2,fp
   87c30:	870b883a 	add	r5,r16,fp
   87c34:	10800054 	ori	r2,r2,1
   87c38:	28800115 	stw	r2,4(r5)
   87c3c:	80c00117 	ldw	r3,4(r16)
   87c40:	008002b4 	movhi	r2,10
   87c44:	10a00a04 	addi	r2,r2,-32728
   87c48:	b009883a 	mov	r4,r22
   87c4c:	18c0004c 	andi	r3,r3,1
   87c50:	e0c6b03a 	or	r3,fp,r3
   87c54:	11400215 	stw	r5,8(r2)
   87c58:	80c00115 	stw	r3,4(r16)
   87c5c:	008bd240 	call	8bd24 <__malloc_unlock>
   87c60:	84400204 	addi	r17,r16,8
   87c64:	003f2006 	br	878e8 <_realloc_r+0xd8>
   87c68:	98a9883a 	add	r20,r19,r2
   87c6c:	2509883a 	add	r4,r4,r20
   87c70:	e0800404 	addi	r2,fp,16
   87c74:	d9000115 	stw	r4,4(sp)
   87c78:	20bf7016 	blt	r4,r2,87a3c <_realloc_r+0x22c>
   87c7c:	b8c00317 	ldw	r3,12(r23)
   87c80:	b8800217 	ldw	r2,8(r23)
   87c84:	99bfff04 	addi	r6,r19,-4
   87c88:	01400904 	movi	r5,36
   87c8c:	18800215 	stw	r2,8(r3)
   87c90:	10c00315 	stw	r3,12(r2)
   87c94:	bc400204 	addi	r17,r23,8
   87c98:	29804136 	bltu	r5,r6,87da0 <_realloc_r+0x590>
   87c9c:	008004c4 	movi	r2,19
   87ca0:	9009883a 	mov	r4,r18
   87ca4:	880f883a 	mov	r7,r17
   87ca8:	11800f2e 	bgeu	r2,r6,87ce8 <_realloc_r+0x4d8>
   87cac:	90800017 	ldw	r2,0(r18)
   87cb0:	b9c00404 	addi	r7,r23,16
   87cb4:	91000204 	addi	r4,r18,8
   87cb8:	b8800215 	stw	r2,8(r23)
   87cbc:	90c00117 	ldw	r3,4(r18)
   87cc0:	008006c4 	movi	r2,27
   87cc4:	b8c00315 	stw	r3,12(r23)
   87cc8:	1180072e 	bgeu	r2,r6,87ce8 <_realloc_r+0x4d8>
   87ccc:	90c00217 	ldw	r3,8(r18)
   87cd0:	b9c00604 	addi	r7,r23,24
   87cd4:	91000404 	addi	r4,r18,16
   87cd8:	b8c00415 	stw	r3,16(r23)
   87cdc:	90800317 	ldw	r2,12(r18)
   87ce0:	b8800515 	stw	r2,20(r23)
   87ce4:	31404026 	beq	r6,r5,87de8 <_realloc_r+0x5d8>
   87ce8:	20800017 	ldw	r2,0(r4)
   87cec:	38800015 	stw	r2,0(r7)
   87cf0:	20c00117 	ldw	r3,4(r4)
   87cf4:	38c00115 	stw	r3,4(r7)
   87cf8:	20800217 	ldw	r2,8(r4)
   87cfc:	38800215 	stw	r2,8(r7)
   87d00:	d8c00117 	ldw	r3,4(sp)
   87d04:	bf0b883a 	add	r5,r23,fp
   87d08:	b009883a 	mov	r4,r22
   87d0c:	1f05c83a 	sub	r2,r3,fp
   87d10:	10800054 	ori	r2,r2,1
   87d14:	28800115 	stw	r2,4(r5)
   87d18:	b8c00117 	ldw	r3,4(r23)
   87d1c:	008002b4 	movhi	r2,10
   87d20:	10a00a04 	addi	r2,r2,-32728
   87d24:	11400215 	stw	r5,8(r2)
   87d28:	18c0004c 	andi	r3,r3,1
   87d2c:	e0c6b03a 	or	r3,fp,r3
   87d30:	b8c00115 	stw	r3,4(r23)
   87d34:	008bd240 	call	8bd24 <__malloc_unlock>
   87d38:	003eeb06 	br	878e8 <_realloc_r+0xd8>
   87d3c:	20800117 	ldw	r2,4(r4)
   87d40:	00ffff04 	movi	r3,-4
   87d44:	800f883a 	mov	r7,r16
   87d48:	10c4703a 	and	r2,r2,r3
   87d4c:	98a9883a 	add	r20,r19,r2
   87d50:	84000204 	addi	r16,r16,8
   87d54:	003ecf06 	br	87894 <_realloc_r+0x84>
   87d58:	900b883a 	mov	r5,r18
   87d5c:	8009883a 	mov	r4,r16
   87d60:	008660c0 	call	8660c <memmove>
   87d64:	dd000017 	ldw	r20,0(sp)
   87d68:	b80f883a 	mov	r7,r23
   87d6c:	003ec906 	br	87894 <_realloc_r+0x84>
   87d70:	900b883a 	mov	r5,r18
   87d74:	8009883a 	mov	r4,r16
   87d78:	008660c0 	call	8660c <memmove>
   87d7c:	b80f883a 	mov	r7,r23
   87d80:	003ec406 	br	87894 <_realloc_r+0x84>
   87d84:	90c00417 	ldw	r3,16(r18)
   87d88:	89400604 	addi	r5,r17,24
   87d8c:	91000604 	addi	r4,r18,24
   87d90:	88c00415 	stw	r3,16(r17)
   87d94:	90800517 	ldw	r2,20(r18)
   87d98:	88800515 	stw	r2,20(r17)
   87d9c:	003f6806 	br	87b40 <_realloc_r+0x330>
   87da0:	900b883a 	mov	r5,r18
   87da4:	8809883a 	mov	r4,r17
   87da8:	008660c0 	call	8660c <memmove>
   87dac:	003fd406 	br	87d00 <_realloc_r+0x4f0>
   87db0:	90c00417 	ldw	r3,16(r18)
   87db4:	91000604 	addi	r4,r18,24
   87db8:	ba000804 	addi	r8,r23,32
   87dbc:	b8c00615 	stw	r3,24(r23)
   87dc0:	90800517 	ldw	r2,20(r18)
   87dc4:	b8800715 	stw	r2,28(r23)
   87dc8:	003f1206 	br	87a14 <_realloc_r+0x204>
   87dcc:	90c00417 	ldw	r3,16(r18)
   87dd0:	91000604 	addi	r4,r18,24
   87dd4:	ba000804 	addi	r8,r23,32
   87dd8:	b8c00615 	stw	r3,24(r23)
   87ddc:	90800517 	ldw	r2,20(r18)
   87de0:	b8800715 	stw	r2,28(r23)
   87de4:	003f3206 	br	87ab0 <_realloc_r+0x2a0>
   87de8:	90c00417 	ldw	r3,16(r18)
   87dec:	91000604 	addi	r4,r18,24
   87df0:	b9c00804 	addi	r7,r23,32
   87df4:	b8c00615 	stw	r3,24(r23)
   87df8:	90800517 	ldw	r2,20(r18)
   87dfc:	b8800715 	stw	r2,28(r23)
   87e00:	003fb906 	br	87ce8 <_realloc_r+0x4d8>

00087e04 <__isinfd>:
   87e04:	200d883a 	mov	r6,r4
   87e08:	0109c83a 	sub	r4,zero,r4
   87e0c:	2188b03a 	or	r4,r4,r6
   87e10:	2008d7fa 	srli	r4,r4,31
   87e14:	00a00034 	movhi	r2,32768
   87e18:	10bfffc4 	addi	r2,r2,-1
   87e1c:	1144703a 	and	r2,r2,r5
   87e20:	2088b03a 	or	r4,r4,r2
   87e24:	009ffc34 	movhi	r2,32752
   87e28:	1105c83a 	sub	r2,r2,r4
   87e2c:	0087c83a 	sub	r3,zero,r2
   87e30:	10c4b03a 	or	r2,r2,r3
   87e34:	1004d7fa 	srli	r2,r2,31
   87e38:	00c00044 	movi	r3,1
   87e3c:	1885c83a 	sub	r2,r3,r2
   87e40:	f800283a 	ret

00087e44 <__isnand>:
   87e44:	200d883a 	mov	r6,r4
   87e48:	0109c83a 	sub	r4,zero,r4
   87e4c:	2188b03a 	or	r4,r4,r6
   87e50:	2008d7fa 	srli	r4,r4,31
   87e54:	00a00034 	movhi	r2,32768
   87e58:	10bfffc4 	addi	r2,r2,-1
   87e5c:	1144703a 	and	r2,r2,r5
   87e60:	2088b03a 	or	r4,r4,r2
   87e64:	009ffc34 	movhi	r2,32752
   87e68:	1105c83a 	sub	r2,r2,r4
   87e6c:	1004d7fa 	srli	r2,r2,31
   87e70:	f800283a 	ret

00087e74 <_sbrk_r>:
   87e74:	defffd04 	addi	sp,sp,-12
   87e78:	dc000015 	stw	r16,0(sp)
   87e7c:	040002b4 	movhi	r16,10
   87e80:	842c9704 	addi	r16,r16,-19876
   87e84:	dc400115 	stw	r17,4(sp)
   87e88:	80000015 	stw	zero,0(r16)
   87e8c:	2023883a 	mov	r17,r4
   87e90:	2809883a 	mov	r4,r5
   87e94:	dfc00215 	stw	ra,8(sp)
   87e98:	008b8d40 	call	8b8d4 <sbrk>
   87e9c:	1007883a 	mov	r3,r2
   87ea0:	00bfffc4 	movi	r2,-1
   87ea4:	18800626 	beq	r3,r2,87ec0 <_sbrk_r+0x4c>
   87ea8:	1805883a 	mov	r2,r3
   87eac:	dfc00217 	ldw	ra,8(sp)
   87eb0:	dc400117 	ldw	r17,4(sp)
   87eb4:	dc000017 	ldw	r16,0(sp)
   87eb8:	dec00304 	addi	sp,sp,12
   87ebc:	f800283a 	ret
   87ec0:	80800017 	ldw	r2,0(r16)
   87ec4:	103ff826 	beq	r2,zero,87ea8 <_sbrk_r+0x34>
   87ec8:	88800015 	stw	r2,0(r17)
   87ecc:	1805883a 	mov	r2,r3
   87ed0:	dfc00217 	ldw	ra,8(sp)
   87ed4:	dc400117 	ldw	r17,4(sp)
   87ed8:	dc000017 	ldw	r16,0(sp)
   87edc:	dec00304 	addi	sp,sp,12
   87ee0:	f800283a 	ret

00087ee4 <__sclose>:
   87ee4:	2940038f 	ldh	r5,14(r5)
   87ee8:	008822c1 	jmpi	8822c <_close_r>

00087eec <__sseek>:
   87eec:	defffe04 	addi	sp,sp,-8
   87ef0:	dc000015 	stw	r16,0(sp)
   87ef4:	2821883a 	mov	r16,r5
   87ef8:	2940038f 	ldh	r5,14(r5)
   87efc:	dfc00115 	stw	ra,4(sp)
   87f00:	00884a40 	call	884a4 <_lseek_r>
   87f04:	1007883a 	mov	r3,r2
   87f08:	00bfffc4 	movi	r2,-1
   87f0c:	18800926 	beq	r3,r2,87f34 <__sseek+0x48>
   87f10:	8080030b 	ldhu	r2,12(r16)
   87f14:	80c01415 	stw	r3,80(r16)
   87f18:	10840014 	ori	r2,r2,4096
   87f1c:	8080030d 	sth	r2,12(r16)
   87f20:	1805883a 	mov	r2,r3
   87f24:	dfc00117 	ldw	ra,4(sp)
   87f28:	dc000017 	ldw	r16,0(sp)
   87f2c:	dec00204 	addi	sp,sp,8
   87f30:	f800283a 	ret
   87f34:	8080030b 	ldhu	r2,12(r16)
   87f38:	10bbffcc 	andi	r2,r2,61439
   87f3c:	8080030d 	sth	r2,12(r16)
   87f40:	1805883a 	mov	r2,r3
   87f44:	dfc00117 	ldw	ra,4(sp)
   87f48:	dc000017 	ldw	r16,0(sp)
   87f4c:	dec00204 	addi	sp,sp,8
   87f50:	f800283a 	ret

00087f54 <__swrite>:
   87f54:	2880030b 	ldhu	r2,12(r5)
   87f58:	defffb04 	addi	sp,sp,-20
   87f5c:	dcc00315 	stw	r19,12(sp)
   87f60:	1080400c 	andi	r2,r2,256
   87f64:	dc800215 	stw	r18,8(sp)
   87f68:	dc400115 	stw	r17,4(sp)
   87f6c:	dc000015 	stw	r16,0(sp)
   87f70:	3027883a 	mov	r19,r6
   87f74:	3825883a 	mov	r18,r7
   87f78:	dfc00415 	stw	ra,16(sp)
   87f7c:	2821883a 	mov	r16,r5
   87f80:	000d883a 	mov	r6,zero
   87f84:	01c00084 	movi	r7,2
   87f88:	2023883a 	mov	r17,r4
   87f8c:	10000226 	beq	r2,zero,87f98 <__swrite+0x44>
   87f90:	2940038f 	ldh	r5,14(r5)
   87f94:	00884a40 	call	884a4 <_lseek_r>
   87f98:	8080030b 	ldhu	r2,12(r16)
   87f9c:	8140038f 	ldh	r5,14(r16)
   87fa0:	8809883a 	mov	r4,r17
   87fa4:	10bbffcc 	andi	r2,r2,61439
   87fa8:	980d883a 	mov	r6,r19
   87fac:	900f883a 	mov	r7,r18
   87fb0:	8080030d 	sth	r2,12(r16)
   87fb4:	dfc00417 	ldw	ra,16(sp)
   87fb8:	dcc00317 	ldw	r19,12(sp)
   87fbc:	dc800217 	ldw	r18,8(sp)
   87fc0:	dc400117 	ldw	r17,4(sp)
   87fc4:	dc000017 	ldw	r16,0(sp)
   87fc8:	dec00504 	addi	sp,sp,20
   87fcc:	00880ec1 	jmpi	880ec <_write_r>

00087fd0 <__sread>:
   87fd0:	defffe04 	addi	sp,sp,-8
   87fd4:	dc000015 	stw	r16,0(sp)
   87fd8:	2821883a 	mov	r16,r5
   87fdc:	2940038f 	ldh	r5,14(r5)
   87fe0:	dfc00115 	stw	ra,4(sp)
   87fe4:	008851c0 	call	8851c <_read_r>
   87fe8:	1007883a 	mov	r3,r2
   87fec:	10000816 	blt	r2,zero,88010 <__sread+0x40>
   87ff0:	80801417 	ldw	r2,80(r16)
   87ff4:	10c5883a 	add	r2,r2,r3
   87ff8:	80801415 	stw	r2,80(r16)
   87ffc:	1805883a 	mov	r2,r3
   88000:	dfc00117 	ldw	ra,4(sp)
   88004:	dc000017 	ldw	r16,0(sp)
   88008:	dec00204 	addi	sp,sp,8
   8800c:	f800283a 	ret
   88010:	8080030b 	ldhu	r2,12(r16)
   88014:	10bbffcc 	andi	r2,r2,61439
   88018:	8080030d 	sth	r2,12(r16)
   8801c:	1805883a 	mov	r2,r3
   88020:	dfc00117 	ldw	ra,4(sp)
   88024:	dc000017 	ldw	r16,0(sp)
   88028:	dec00204 	addi	sp,sp,8
   8802c:	f800283a 	ret

00088030 <strcmp>:
   88030:	2144b03a 	or	r2,r4,r5
   88034:	108000cc 	andi	r2,r2,3
   88038:	10001d1e 	bne	r2,zero,880b0 <strcmp+0x80>
   8803c:	200f883a 	mov	r7,r4
   88040:	28800017 	ldw	r2,0(r5)
   88044:	21000017 	ldw	r4,0(r4)
   88048:	280d883a 	mov	r6,r5
   8804c:	2080161e 	bne	r4,r2,880a8 <strcmp+0x78>
   88050:	023fbff4 	movhi	r8,65279
   88054:	423fbfc4 	addi	r8,r8,-257
   88058:	2207883a 	add	r3,r4,r8
   8805c:	01602074 	movhi	r5,32897
   88060:	29602004 	addi	r5,r5,-32640
   88064:	1946703a 	and	r3,r3,r5
   88068:	0104303a 	nor	r2,zero,r4
   8806c:	10c4703a 	and	r2,r2,r3
   88070:	10001c1e 	bne	r2,zero,880e4 <strcmp+0xb4>
   88074:	4013883a 	mov	r9,r8
   88078:	2811883a 	mov	r8,r5
   8807c:	00000106 	br	88084 <strcmp+0x54>
   88080:	1800181e 	bne	r3,zero,880e4 <strcmp+0xb4>
   88084:	39c00104 	addi	r7,r7,4
   88088:	39000017 	ldw	r4,0(r7)
   8808c:	31800104 	addi	r6,r6,4
   88090:	31400017 	ldw	r5,0(r6)
   88094:	2245883a 	add	r2,r4,r9
   88098:	1204703a 	and	r2,r2,r8
   8809c:	0106303a 	nor	r3,zero,r4
   880a0:	1886703a 	and	r3,r3,r2
   880a4:	217ff626 	beq	r4,r5,88080 <strcmp+0x50>
   880a8:	3809883a 	mov	r4,r7
   880ac:	300b883a 	mov	r5,r6
   880b0:	20c00007 	ldb	r3,0(r4)
   880b4:	1800051e 	bne	r3,zero,880cc <strcmp+0x9c>
   880b8:	00000606 	br	880d4 <strcmp+0xa4>
   880bc:	21000044 	addi	r4,r4,1
   880c0:	20c00007 	ldb	r3,0(r4)
   880c4:	29400044 	addi	r5,r5,1
   880c8:	18000226 	beq	r3,zero,880d4 <strcmp+0xa4>
   880cc:	28800007 	ldb	r2,0(r5)
   880d0:	18bffa26 	beq	r3,r2,880bc <strcmp+0x8c>
   880d4:	20c00003 	ldbu	r3,0(r4)
   880d8:	28800003 	ldbu	r2,0(r5)
   880dc:	1885c83a 	sub	r2,r3,r2
   880e0:	f800283a 	ret
   880e4:	0005883a 	mov	r2,zero
   880e8:	f800283a 	ret

000880ec <_write_r>:
   880ec:	defffd04 	addi	sp,sp,-12
   880f0:	dc000015 	stw	r16,0(sp)
   880f4:	040002b4 	movhi	r16,10
   880f8:	842c9704 	addi	r16,r16,-19876
   880fc:	dc400115 	stw	r17,4(sp)
   88100:	80000015 	stw	zero,0(r16)
   88104:	2023883a 	mov	r17,r4
   88108:	2809883a 	mov	r4,r5
   8810c:	300b883a 	mov	r5,r6
   88110:	380d883a 	mov	r6,r7
   88114:	dfc00215 	stw	ra,8(sp)
   88118:	008b9900 	call	8b990 <write>
   8811c:	1007883a 	mov	r3,r2
   88120:	00bfffc4 	movi	r2,-1
   88124:	18800626 	beq	r3,r2,88140 <_write_r+0x54>
   88128:	1805883a 	mov	r2,r3
   8812c:	dfc00217 	ldw	ra,8(sp)
   88130:	dc400117 	ldw	r17,4(sp)
   88134:	dc000017 	ldw	r16,0(sp)
   88138:	dec00304 	addi	sp,sp,12
   8813c:	f800283a 	ret
   88140:	80800017 	ldw	r2,0(r16)
   88144:	103ff826 	beq	r2,zero,88128 <_write_r+0x3c>
   88148:	88800015 	stw	r2,0(r17)
   8814c:	1805883a 	mov	r2,r3
   88150:	dfc00217 	ldw	ra,8(sp)
   88154:	dc400117 	ldw	r17,4(sp)
   88158:	dc000017 	ldw	r16,0(sp)
   8815c:	dec00304 	addi	sp,sp,12
   88160:	f800283a 	ret

00088164 <_calloc_r>:
   88164:	defffe04 	addi	sp,sp,-8
   88168:	dc400015 	stw	r17,0(sp)
   8816c:	2023883a 	mov	r17,r4
   88170:	2809883a 	mov	r4,r5
   88174:	300b883a 	mov	r5,r6
   88178:	dfc00115 	stw	ra,4(sp)
   8817c:	0080f440 	call	80f44 <__mulsi3>
   88180:	100b883a 	mov	r5,r2
   88184:	8809883a 	mov	r4,r17
   88188:	0085d480 	call	85d48 <_malloc_r>
   8818c:	1023883a 	mov	r17,r2
   88190:	01c00904 	movi	r7,36
   88194:	10000d26 	beq	r2,zero,881cc <_calloc_r+0x68>
   88198:	10ffff17 	ldw	r3,-4(r2)
   8819c:	1009883a 	mov	r4,r2
   881a0:	00bfff04 	movi	r2,-4
   881a4:	1886703a 	and	r3,r3,r2
   881a8:	1887883a 	add	r3,r3,r2
   881ac:	180d883a 	mov	r6,r3
   881b0:	000b883a 	mov	r5,zero
   881b4:	38c01736 	bltu	r7,r3,88214 <_calloc_r+0xb0>
   881b8:	008004c4 	movi	r2,19
   881bc:	10c00836 	bltu	r2,r3,881e0 <_calloc_r+0x7c>
   881c0:	20000215 	stw	zero,8(r4)
   881c4:	20000015 	stw	zero,0(r4)
   881c8:	20000115 	stw	zero,4(r4)
   881cc:	8805883a 	mov	r2,r17
   881d0:	dfc00117 	ldw	ra,4(sp)
   881d4:	dc400017 	ldw	r17,0(sp)
   881d8:	dec00204 	addi	sp,sp,8
   881dc:	f800283a 	ret
   881e0:	008006c4 	movi	r2,27
   881e4:	88000015 	stw	zero,0(r17)
   881e8:	88000115 	stw	zero,4(r17)
   881ec:	89000204 	addi	r4,r17,8
   881f0:	10fff32e 	bgeu	r2,r3,881c0 <_calloc_r+0x5c>
   881f4:	88000215 	stw	zero,8(r17)
   881f8:	88000315 	stw	zero,12(r17)
   881fc:	89000404 	addi	r4,r17,16
   88200:	19ffef1e 	bne	r3,r7,881c0 <_calloc_r+0x5c>
   88204:	89000604 	addi	r4,r17,24
   88208:	88000415 	stw	zero,16(r17)
   8820c:	88000515 	stw	zero,20(r17)
   88210:	003feb06 	br	881c0 <_calloc_r+0x5c>
   88214:	00866ec0 	call	866ec <memset>
   88218:	8805883a 	mov	r2,r17
   8821c:	dfc00117 	ldw	ra,4(sp)
   88220:	dc400017 	ldw	r17,0(sp)
   88224:	dec00204 	addi	sp,sp,8
   88228:	f800283a 	ret

0008822c <_close_r>:
   8822c:	defffd04 	addi	sp,sp,-12
   88230:	dc000015 	stw	r16,0(sp)
   88234:	040002b4 	movhi	r16,10
   88238:	842c9704 	addi	r16,r16,-19876
   8823c:	dc400115 	stw	r17,4(sp)
   88240:	80000015 	stw	zero,0(r16)
   88244:	2023883a 	mov	r17,r4
   88248:	2809883a 	mov	r4,r5
   8824c:	dfc00215 	stw	ra,8(sp)
   88250:	008ab900 	call	8ab90 <close>
   88254:	1007883a 	mov	r3,r2
   88258:	00bfffc4 	movi	r2,-1
   8825c:	18800626 	beq	r3,r2,88278 <_close_r+0x4c>
   88260:	1805883a 	mov	r2,r3
   88264:	dfc00217 	ldw	ra,8(sp)
   88268:	dc400117 	ldw	r17,4(sp)
   8826c:	dc000017 	ldw	r16,0(sp)
   88270:	dec00304 	addi	sp,sp,12
   88274:	f800283a 	ret
   88278:	80800017 	ldw	r2,0(r16)
   8827c:	103ff826 	beq	r2,zero,88260 <_close_r+0x34>
   88280:	88800015 	stw	r2,0(r17)
   88284:	1805883a 	mov	r2,r3
   88288:	dfc00217 	ldw	ra,8(sp)
   8828c:	dc400117 	ldw	r17,4(sp)
   88290:	dc000017 	ldw	r16,0(sp)
   88294:	dec00304 	addi	sp,sp,12
   88298:	f800283a 	ret

0008829c <_fclose_r>:
   8829c:	defffc04 	addi	sp,sp,-16
   882a0:	dc400115 	stw	r17,4(sp)
   882a4:	dc000015 	stw	r16,0(sp)
   882a8:	dfc00315 	stw	ra,12(sp)
   882ac:	dc800215 	stw	r18,8(sp)
   882b0:	2821883a 	mov	r16,r5
   882b4:	2023883a 	mov	r17,r4
   882b8:	28002926 	beq	r5,zero,88360 <_fclose_r+0xc4>
   882bc:	0084df80 	call	84df8 <__sfp_lock_acquire>
   882c0:	88000226 	beq	r17,zero,882cc <_fclose_r+0x30>
   882c4:	88800e17 	ldw	r2,56(r17)
   882c8:	10002d26 	beq	r2,zero,88380 <_fclose_r+0xe4>
   882cc:	8080030f 	ldh	r2,12(r16)
   882d0:	10002226 	beq	r2,zero,8835c <_fclose_r+0xc0>
   882d4:	8809883a 	mov	r4,r17
   882d8:	800b883a 	mov	r5,r16
   882dc:	0084b700 	call	84b70 <_fflush_r>
   882e0:	1025883a 	mov	r18,r2
   882e4:	80800b17 	ldw	r2,44(r16)
   882e8:	10000426 	beq	r2,zero,882fc <_fclose_r+0x60>
   882ec:	81400717 	ldw	r5,28(r16)
   882f0:	8809883a 	mov	r4,r17
   882f4:	103ee83a 	callr	r2
   882f8:	10002a16 	blt	r2,zero,883a4 <_fclose_r+0x108>
   882fc:	8080030b 	ldhu	r2,12(r16)
   88300:	1080200c 	andi	r2,r2,128
   88304:	1000231e 	bne	r2,zero,88394 <_fclose_r+0xf8>
   88308:	81400c17 	ldw	r5,48(r16)
   8830c:	28000526 	beq	r5,zero,88324 <_fclose_r+0x88>
   88310:	80801004 	addi	r2,r16,64
   88314:	28800226 	beq	r5,r2,88320 <_fclose_r+0x84>
   88318:	8809883a 	mov	r4,r17
   8831c:	00851c00 	call	851c0 <_free_r>
   88320:	80000c15 	stw	zero,48(r16)
   88324:	81401117 	ldw	r5,68(r16)
   88328:	28000326 	beq	r5,zero,88338 <_fclose_r+0x9c>
   8832c:	8809883a 	mov	r4,r17
   88330:	00851c00 	call	851c0 <_free_r>
   88334:	80001115 	stw	zero,68(r16)
   88338:	8000030d 	sth	zero,12(r16)
   8833c:	0084dfc0 	call	84dfc <__sfp_lock_release>
   88340:	9005883a 	mov	r2,r18
   88344:	dfc00317 	ldw	ra,12(sp)
   88348:	dc800217 	ldw	r18,8(sp)
   8834c:	dc400117 	ldw	r17,4(sp)
   88350:	dc000017 	ldw	r16,0(sp)
   88354:	dec00404 	addi	sp,sp,16
   88358:	f800283a 	ret
   8835c:	0084dfc0 	call	84dfc <__sfp_lock_release>
   88360:	0025883a 	mov	r18,zero
   88364:	9005883a 	mov	r2,r18
   88368:	dfc00317 	ldw	ra,12(sp)
   8836c:	dc800217 	ldw	r18,8(sp)
   88370:	dc400117 	ldw	r17,4(sp)
   88374:	dc000017 	ldw	r16,0(sp)
   88378:	dec00404 	addi	sp,sp,16
   8837c:	f800283a 	ret
   88380:	8809883a 	mov	r4,r17
   88384:	0084e080 	call	84e08 <__sinit>
   88388:	8080030f 	ldh	r2,12(r16)
   8838c:	103fd11e 	bne	r2,zero,882d4 <_fclose_r+0x38>
   88390:	003ff206 	br	8835c <_fclose_r+0xc0>
   88394:	81400417 	ldw	r5,16(r16)
   88398:	8809883a 	mov	r4,r17
   8839c:	00851c00 	call	851c0 <_free_r>
   883a0:	003fd906 	br	88308 <_fclose_r+0x6c>
   883a4:	04bfffc4 	movi	r18,-1
   883a8:	003fd406 	br	882fc <_fclose_r+0x60>

000883ac <fclose>:
   883ac:	008002b4 	movhi	r2,10
   883b0:	10a59d04 	addi	r2,r2,-27020
   883b4:	200b883a 	mov	r5,r4
   883b8:	11000017 	ldw	r4,0(r2)
   883bc:	008829c1 	jmpi	8829c <_fclose_r>

000883c0 <_fstat_r>:
   883c0:	defffd04 	addi	sp,sp,-12
   883c4:	dc000015 	stw	r16,0(sp)
   883c8:	040002b4 	movhi	r16,10
   883cc:	842c9704 	addi	r16,r16,-19876
   883d0:	dc400115 	stw	r17,4(sp)
   883d4:	80000015 	stw	zero,0(r16)
   883d8:	2023883a 	mov	r17,r4
   883dc:	2809883a 	mov	r4,r5
   883e0:	300b883a 	mov	r5,r6
   883e4:	dfc00215 	stw	ra,8(sp)
   883e8:	008ad1c0 	call	8ad1c <fstat>
   883ec:	1007883a 	mov	r3,r2
   883f0:	00bfffc4 	movi	r2,-1
   883f4:	18800626 	beq	r3,r2,88410 <_fstat_r+0x50>
   883f8:	1805883a 	mov	r2,r3
   883fc:	dfc00217 	ldw	ra,8(sp)
   88400:	dc400117 	ldw	r17,4(sp)
   88404:	dc000017 	ldw	r16,0(sp)
   88408:	dec00304 	addi	sp,sp,12
   8840c:	f800283a 	ret
   88410:	80800017 	ldw	r2,0(r16)
   88414:	103ff826 	beq	r2,zero,883f8 <_fstat_r+0x38>
   88418:	88800015 	stw	r2,0(r17)
   8841c:	1805883a 	mov	r2,r3
   88420:	dfc00217 	ldw	ra,8(sp)
   88424:	dc400117 	ldw	r17,4(sp)
   88428:	dc000017 	ldw	r16,0(sp)
   8842c:	dec00304 	addi	sp,sp,12
   88430:	f800283a 	ret

00088434 <_isatty_r>:
   88434:	defffd04 	addi	sp,sp,-12
   88438:	dc000015 	stw	r16,0(sp)
   8843c:	040002b4 	movhi	r16,10
   88440:	842c9704 	addi	r16,r16,-19876
   88444:	dc400115 	stw	r17,4(sp)
   88448:	80000015 	stw	zero,0(r16)
   8844c:	2023883a 	mov	r17,r4
   88450:	2809883a 	mov	r4,r5
   88454:	dfc00215 	stw	ra,8(sp)
   88458:	008b0140 	call	8b014 <isatty>
   8845c:	1007883a 	mov	r3,r2
   88460:	00bfffc4 	movi	r2,-1
   88464:	18800626 	beq	r3,r2,88480 <_isatty_r+0x4c>
   88468:	1805883a 	mov	r2,r3
   8846c:	dfc00217 	ldw	ra,8(sp)
   88470:	dc400117 	ldw	r17,4(sp)
   88474:	dc000017 	ldw	r16,0(sp)
   88478:	dec00304 	addi	sp,sp,12
   8847c:	f800283a 	ret
   88480:	80800017 	ldw	r2,0(r16)
   88484:	103ff826 	beq	r2,zero,88468 <_isatty_r+0x34>
   88488:	88800015 	stw	r2,0(r17)
   8848c:	1805883a 	mov	r2,r3
   88490:	dfc00217 	ldw	ra,8(sp)
   88494:	dc400117 	ldw	r17,4(sp)
   88498:	dc000017 	ldw	r16,0(sp)
   8849c:	dec00304 	addi	sp,sp,12
   884a0:	f800283a 	ret

000884a4 <_lseek_r>:
   884a4:	defffd04 	addi	sp,sp,-12
   884a8:	dc000015 	stw	r16,0(sp)
   884ac:	040002b4 	movhi	r16,10
   884b0:	842c9704 	addi	r16,r16,-19876
   884b4:	dc400115 	stw	r17,4(sp)
   884b8:	80000015 	stw	zero,0(r16)
   884bc:	2023883a 	mov	r17,r4
   884c0:	2809883a 	mov	r4,r5
   884c4:	300b883a 	mov	r5,r6
   884c8:	380d883a 	mov	r6,r7
   884cc:	dfc00215 	stw	ra,8(sp)
   884d0:	008b2240 	call	8b224 <lseek>
   884d4:	1007883a 	mov	r3,r2
   884d8:	00bfffc4 	movi	r2,-1
   884dc:	18800626 	beq	r3,r2,884f8 <_lseek_r+0x54>
   884e0:	1805883a 	mov	r2,r3
   884e4:	dfc00217 	ldw	ra,8(sp)
   884e8:	dc400117 	ldw	r17,4(sp)
   884ec:	dc000017 	ldw	r16,0(sp)
   884f0:	dec00304 	addi	sp,sp,12
   884f4:	f800283a 	ret
   884f8:	80800017 	ldw	r2,0(r16)
   884fc:	103ff826 	beq	r2,zero,884e0 <_lseek_r+0x3c>
   88500:	88800015 	stw	r2,0(r17)
   88504:	1805883a 	mov	r2,r3
   88508:	dfc00217 	ldw	ra,8(sp)
   8850c:	dc400117 	ldw	r17,4(sp)
   88510:	dc000017 	ldw	r16,0(sp)
   88514:	dec00304 	addi	sp,sp,12
   88518:	f800283a 	ret

0008851c <_read_r>:
   8851c:	defffd04 	addi	sp,sp,-12
   88520:	dc000015 	stw	r16,0(sp)
   88524:	040002b4 	movhi	r16,10
   88528:	842c9704 	addi	r16,r16,-19876
   8852c:	dc400115 	stw	r17,4(sp)
   88530:	80000015 	stw	zero,0(r16)
   88534:	2023883a 	mov	r17,r4
   88538:	2809883a 	mov	r4,r5
   8853c:	300b883a 	mov	r5,r6
   88540:	380d883a 	mov	r6,r7
   88544:	dfc00215 	stw	ra,8(sp)
   88548:	008b6d80 	call	8b6d8 <read>
   8854c:	1007883a 	mov	r3,r2
   88550:	00bfffc4 	movi	r2,-1
   88554:	18800626 	beq	r3,r2,88570 <_read_r+0x54>
   88558:	1805883a 	mov	r2,r3
   8855c:	dfc00217 	ldw	ra,8(sp)
   88560:	dc400117 	ldw	r17,4(sp)
   88564:	dc000017 	ldw	r16,0(sp)
   88568:	dec00304 	addi	sp,sp,12
   8856c:	f800283a 	ret
   88570:	80800017 	ldw	r2,0(r16)
   88574:	103ff826 	beq	r2,zero,88558 <_read_r+0x3c>
   88578:	88800015 	stw	r2,0(r17)
   8857c:	1805883a 	mov	r2,r3
   88580:	dfc00217 	ldw	ra,8(sp)
   88584:	dc400117 	ldw	r17,4(sp)
   88588:	dc000017 	ldw	r16,0(sp)
   8858c:	dec00304 	addi	sp,sp,12
   88590:	f800283a 	ret

00088594 <__muldi3>:
   88594:	defff204 	addi	sp,sp,-56
   88598:	df000c15 	stw	fp,48(sp)
   8859c:	3038d43a 	srli	fp,r6,16
   885a0:	dd000815 	stw	r20,32(sp)
   885a4:	dc400515 	stw	r17,20(sp)
   885a8:	2028d43a 	srli	r20,r4,16
   885ac:	247fffcc 	andi	r17,r4,65535
   885b0:	dc000415 	stw	r16,16(sp)
   885b4:	343fffcc 	andi	r16,r6,65535
   885b8:	dcc00715 	stw	r19,28(sp)
   885bc:	d9000015 	stw	r4,0(sp)
   885c0:	2827883a 	mov	r19,r5
   885c4:	8809883a 	mov	r4,r17
   885c8:	d9400115 	stw	r5,4(sp)
   885cc:	800b883a 	mov	r5,r16
   885d0:	d9800215 	stw	r6,8(sp)
   885d4:	dfc00d15 	stw	ra,52(sp)
   885d8:	d9c00315 	stw	r7,12(sp)
   885dc:	dd800a15 	stw	r22,40(sp)
   885e0:	dd400915 	stw	r21,36(sp)
   885e4:	302d883a 	mov	r22,r6
   885e8:	ddc00b15 	stw	r23,44(sp)
   885ec:	dc800615 	stw	r18,24(sp)
   885f0:	0080f440 	call	80f44 <__mulsi3>
   885f4:	8809883a 	mov	r4,r17
   885f8:	e00b883a 	mov	r5,fp
   885fc:	102b883a 	mov	r21,r2
   88600:	0080f440 	call	80f44 <__mulsi3>
   88604:	800b883a 	mov	r5,r16
   88608:	a009883a 	mov	r4,r20
   8860c:	1023883a 	mov	r17,r2
   88610:	0080f440 	call	80f44 <__mulsi3>
   88614:	a009883a 	mov	r4,r20
   88618:	e00b883a 	mov	r5,fp
   8861c:	1021883a 	mov	r16,r2
   88620:	0080f440 	call	80f44 <__mulsi3>
   88624:	a8ffffcc 	andi	r3,r21,65535
   88628:	a82ad43a 	srli	r21,r21,16
   8862c:	8c23883a 	add	r17,r17,r16
   88630:	1011883a 	mov	r8,r2
   88634:	ac6b883a 	add	r21,r21,r17
   88638:	a804943a 	slli	r2,r21,16
   8863c:	b009883a 	mov	r4,r22
   88640:	980b883a 	mov	r5,r19
   88644:	10c7883a 	add	r3,r2,r3
   88648:	a812d43a 	srli	r9,r21,16
   8864c:	180d883a 	mov	r6,r3
   88650:	ac00022e 	bgeu	r21,r16,8865c <__muldi3+0xc8>
   88654:	00800074 	movhi	r2,1
   88658:	4091883a 	add	r8,r8,r2
   8865c:	4267883a 	add	r19,r8,r9
   88660:	302d883a 	mov	r22,r6
   88664:	0080f440 	call	80f44 <__mulsi3>
   88668:	d9400317 	ldw	r5,12(sp)
   8866c:	d9000017 	ldw	r4,0(sp)
   88670:	1023883a 	mov	r17,r2
   88674:	0080f440 	call	80f44 <__mulsi3>
   88678:	14cb883a 	add	r5,r2,r19
   8867c:	894b883a 	add	r5,r17,r5
   88680:	b005883a 	mov	r2,r22
   88684:	2807883a 	mov	r3,r5
   88688:	dfc00d17 	ldw	ra,52(sp)
   8868c:	df000c17 	ldw	fp,48(sp)
   88690:	ddc00b17 	ldw	r23,44(sp)
   88694:	dd800a17 	ldw	r22,40(sp)
   88698:	dd400917 	ldw	r21,36(sp)
   8869c:	dd000817 	ldw	r20,32(sp)
   886a0:	dcc00717 	ldw	r19,28(sp)
   886a4:	dc800617 	ldw	r18,24(sp)
   886a8:	dc400517 	ldw	r17,20(sp)
   886ac:	dc000417 	ldw	r16,16(sp)
   886b0:	dec00e04 	addi	sp,sp,56
   886b4:	f800283a 	ret

000886b8 <__udivdi3>:
   886b8:	defff104 	addi	sp,sp,-60
   886bc:	0015883a 	mov	r10,zero
   886c0:	2005883a 	mov	r2,r4
   886c4:	3011883a 	mov	r8,r6
   886c8:	df000d15 	stw	fp,52(sp)
   886cc:	dd400a15 	stw	r21,40(sp)
   886d0:	dcc00815 	stw	r19,32(sp)
   886d4:	dfc00e15 	stw	ra,56(sp)
   886d8:	ddc00c15 	stw	r23,48(sp)
   886dc:	dd800b15 	stw	r22,44(sp)
   886e0:	dd000915 	stw	r20,36(sp)
   886e4:	dc800715 	stw	r18,28(sp)
   886e8:	dc400615 	stw	r17,24(sp)
   886ec:	dc000515 	stw	r16,20(sp)
   886f0:	da800315 	stw	r10,12(sp)
   886f4:	4027883a 	mov	r19,r8
   886f8:	1039883a 	mov	fp,r2
   886fc:	282b883a 	mov	r21,r5
   88700:	da800415 	stw	r10,16(sp)
   88704:	3800401e 	bne	r7,zero,88808 <__udivdi3+0x150>
   88708:	2a006536 	bltu	r5,r8,888a0 <__udivdi3+0x1e8>
   8870c:	4000b526 	beq	r8,zero,889e4 <__udivdi3+0x32c>
   88710:	00bfffd4 	movui	r2,65535
   88714:	14c0ad36 	bltu	r2,r19,889cc <__udivdi3+0x314>
   88718:	00803fc4 	movi	r2,255
   8871c:	14c15e36 	bltu	r2,r19,88c98 <__udivdi3+0x5e0>
   88720:	000b883a 	mov	r5,zero
   88724:	0005883a 	mov	r2,zero
   88728:	9884d83a 	srl	r2,r19,r2
   8872c:	01000274 	movhi	r4,9
   88730:	211e6b04 	addi	r4,r4,31148
   88734:	01800804 	movi	r6,32
   88738:	1105883a 	add	r2,r2,r4
   8873c:	10c00003 	ldbu	r3,0(r2)
   88740:	28c7883a 	add	r3,r5,r3
   88744:	30e9c83a 	sub	r20,r6,r3
   88748:	a0010a1e 	bne	r20,zero,88b74 <__udivdi3+0x4bc>
   8874c:	982ed43a 	srli	r23,r19,16
   88750:	acebc83a 	sub	r21,r21,r19
   88754:	9dbfffcc 	andi	r22,r19,65535
   88758:	05000044 	movi	r20,1
   8875c:	a809883a 	mov	r4,r21
   88760:	b80b883a 	mov	r5,r23
   88764:	008a5ec0 	call	8a5ec <__udivsi3>
   88768:	100b883a 	mov	r5,r2
   8876c:	b009883a 	mov	r4,r22
   88770:	1021883a 	mov	r16,r2
   88774:	0080f440 	call	80f44 <__mulsi3>
   88778:	a809883a 	mov	r4,r21
   8877c:	b80b883a 	mov	r5,r23
   88780:	1023883a 	mov	r17,r2
   88784:	008a5f40 	call	8a5f4 <__umodsi3>
   88788:	1004943a 	slli	r2,r2,16
   8878c:	e006d43a 	srli	r3,fp,16
   88790:	10c4b03a 	or	r2,r2,r3
   88794:	1440042e 	bgeu	r2,r17,887a8 <__udivdi3+0xf0>
   88798:	14c5883a 	add	r2,r2,r19
   8879c:	843fffc4 	addi	r16,r16,-1
   887a0:	14c00136 	bltu	r2,r19,887a8 <__udivdi3+0xf0>
   887a4:	14415c36 	bltu	r2,r17,88d18 <__udivdi3+0x660>
   887a8:	1463c83a 	sub	r17,r2,r17
   887ac:	8809883a 	mov	r4,r17
   887b0:	b80b883a 	mov	r5,r23
   887b4:	008a5ec0 	call	8a5ec <__udivsi3>
   887b8:	100b883a 	mov	r5,r2
   887bc:	b009883a 	mov	r4,r22
   887c0:	102b883a 	mov	r21,r2
   887c4:	0080f440 	call	80f44 <__mulsi3>
   887c8:	8809883a 	mov	r4,r17
   887cc:	b80b883a 	mov	r5,r23
   887d0:	1025883a 	mov	r18,r2
   887d4:	008a5f40 	call	8a5f4 <__umodsi3>
   887d8:	1004943a 	slli	r2,r2,16
   887dc:	e0ffffcc 	andi	r3,fp,65535
   887e0:	10c4b03a 	or	r2,r2,r3
   887e4:	1480042e 	bgeu	r2,r18,887f8 <__udivdi3+0x140>
   887e8:	9885883a 	add	r2,r19,r2
   887ec:	ad7fffc4 	addi	r21,r21,-1
   887f0:	14c00136 	bltu	r2,r19,887f8 <__udivdi3+0x140>
   887f4:	14813c36 	bltu	r2,r18,88ce8 <__udivdi3+0x630>
   887f8:	8004943a 	slli	r2,r16,16
   887fc:	a009883a 	mov	r4,r20
   88800:	a884b03a 	or	r2,r21,r2
   88804:	00001506 	br	8885c <__udivdi3+0x1a4>
   88808:	380d883a 	mov	r6,r7
   8880c:	29c06c36 	bltu	r5,r7,889c0 <__udivdi3+0x308>
   88810:	00bfffd4 	movui	r2,65535
   88814:	11c06436 	bltu	r2,r7,889a8 <__udivdi3+0x2f0>
   88818:	00803fc4 	movi	r2,255
   8881c:	11c11836 	bltu	r2,r7,88c80 <__udivdi3+0x5c8>
   88820:	000b883a 	mov	r5,zero
   88824:	0005883a 	mov	r2,zero
   88828:	3084d83a 	srl	r2,r6,r2
   8882c:	01000274 	movhi	r4,9
   88830:	211e6b04 	addi	r4,r4,31148
   88834:	01c00804 	movi	r7,32
   88838:	1105883a 	add	r2,r2,r4
   8883c:	10c00003 	ldbu	r3,0(r2)
   88840:	28c7883a 	add	r3,r5,r3
   88844:	38edc83a 	sub	r22,r7,r3
   88848:	b000731e 	bne	r22,zero,88a18 <__udivdi3+0x360>
   8884c:	35400136 	bltu	r6,r21,88854 <__udivdi3+0x19c>
   88850:	e4c05b36 	bltu	fp,r19,889c0 <__udivdi3+0x308>
   88854:	00800044 	movi	r2,1
   88858:	0009883a 	mov	r4,zero
   8885c:	d8800315 	stw	r2,12(sp)
   88860:	d9400317 	ldw	r5,12(sp)
   88864:	d9000415 	stw	r4,16(sp)
   88868:	2007883a 	mov	r3,r4
   8886c:	2805883a 	mov	r2,r5
   88870:	dfc00e17 	ldw	ra,56(sp)
   88874:	df000d17 	ldw	fp,52(sp)
   88878:	ddc00c17 	ldw	r23,48(sp)
   8887c:	dd800b17 	ldw	r22,44(sp)
   88880:	dd400a17 	ldw	r21,40(sp)
   88884:	dd000917 	ldw	r20,36(sp)
   88888:	dcc00817 	ldw	r19,32(sp)
   8888c:	dc800717 	ldw	r18,28(sp)
   88890:	dc400617 	ldw	r17,24(sp)
   88894:	dc000517 	ldw	r16,20(sp)
   88898:	dec00f04 	addi	sp,sp,60
   8889c:	f800283a 	ret
   888a0:	00bfffd4 	movui	r2,65535
   888a4:	12005636 	bltu	r2,r8,88a00 <__udivdi3+0x348>
   888a8:	00803fc4 	movi	r2,255
   888ac:	12010036 	bltu	r2,r8,88cb0 <__udivdi3+0x5f8>
   888b0:	000b883a 	mov	r5,zero
   888b4:	0005883a 	mov	r2,zero
   888b8:	9884d83a 	srl	r2,r19,r2
   888bc:	01000274 	movhi	r4,9
   888c0:	211e6b04 	addi	r4,r4,31148
   888c4:	01800804 	movi	r6,32
   888c8:	1105883a 	add	r2,r2,r4
   888cc:	10c00003 	ldbu	r3,0(r2)
   888d0:	28c7883a 	add	r3,r5,r3
   888d4:	30cbc83a 	sub	r5,r6,r3
   888d8:	28000626 	beq	r5,zero,888f4 <__udivdi3+0x23c>
   888dc:	3145c83a 	sub	r2,r6,r5
   888e0:	e084d83a 	srl	r2,fp,r2
   888e4:	a946983a 	sll	r3,r21,r5
   888e8:	e178983a 	sll	fp,fp,r5
   888ec:	9966983a 	sll	r19,r19,r5
   888f0:	18aab03a 	or	r21,r3,r2
   888f4:	982ed43a 	srli	r23,r19,16
   888f8:	a809883a 	mov	r4,r21
   888fc:	9cbfffcc 	andi	r18,r19,65535
   88900:	b80b883a 	mov	r5,r23
   88904:	008a5ec0 	call	8a5ec <__udivsi3>
   88908:	100b883a 	mov	r5,r2
   8890c:	9009883a 	mov	r4,r18
   88910:	1021883a 	mov	r16,r2
   88914:	0080f440 	call	80f44 <__mulsi3>
   88918:	a809883a 	mov	r4,r21
   8891c:	b80b883a 	mov	r5,r23
   88920:	1023883a 	mov	r17,r2
   88924:	008a5f40 	call	8a5f4 <__umodsi3>
   88928:	1004943a 	slli	r2,r2,16
   8892c:	e006d43a 	srli	r3,fp,16
   88930:	10c4b03a 	or	r2,r2,r3
   88934:	1440042e 	bgeu	r2,r17,88948 <__udivdi3+0x290>
   88938:	14c5883a 	add	r2,r2,r19
   8893c:	843fffc4 	addi	r16,r16,-1
   88940:	14c00136 	bltu	r2,r19,88948 <__udivdi3+0x290>
   88944:	1440ea36 	bltu	r2,r17,88cf0 <__udivdi3+0x638>
   88948:	1463c83a 	sub	r17,r2,r17
   8894c:	8809883a 	mov	r4,r17
   88950:	b80b883a 	mov	r5,r23
   88954:	008a5ec0 	call	8a5ec <__udivsi3>
   88958:	100b883a 	mov	r5,r2
   8895c:	9009883a 	mov	r4,r18
   88960:	102b883a 	mov	r21,r2
   88964:	0080f440 	call	80f44 <__mulsi3>
   88968:	8809883a 	mov	r4,r17
   8896c:	b80b883a 	mov	r5,r23
   88970:	1025883a 	mov	r18,r2
   88974:	008a5f40 	call	8a5f4 <__umodsi3>
   88978:	1004943a 	slli	r2,r2,16
   8897c:	e0ffffcc 	andi	r3,fp,65535
   88980:	10c4b03a 	or	r2,r2,r3
   88984:	1480042e 	bgeu	r2,r18,88998 <__udivdi3+0x2e0>
   88988:	9885883a 	add	r2,r19,r2
   8898c:	ad7fffc4 	addi	r21,r21,-1
   88990:	14c00136 	bltu	r2,r19,88998 <__udivdi3+0x2e0>
   88994:	1480d936 	bltu	r2,r18,88cfc <__udivdi3+0x644>
   88998:	8004943a 	slli	r2,r16,16
   8899c:	0009883a 	mov	r4,zero
   889a0:	a884b03a 	or	r2,r21,r2
   889a4:	003fad06 	br	8885c <__udivdi3+0x1a4>
   889a8:	00804034 	movhi	r2,256
   889ac:	10bfffc4 	addi	r2,r2,-1
   889b0:	11c0b636 	bltu	r2,r7,88c8c <__udivdi3+0x5d4>
   889b4:	01400404 	movi	r5,16
   889b8:	2805883a 	mov	r2,r5
   889bc:	003f9a06 	br	88828 <__udivdi3+0x170>
   889c0:	0005883a 	mov	r2,zero
   889c4:	0009883a 	mov	r4,zero
   889c8:	003fa406 	br	8885c <__udivdi3+0x1a4>
   889cc:	00804034 	movhi	r2,256
   889d0:	10bfffc4 	addi	r2,r2,-1
   889d4:	14c0b336 	bltu	r2,r19,88ca4 <__udivdi3+0x5ec>
   889d8:	01400404 	movi	r5,16
   889dc:	2805883a 	mov	r2,r5
   889e0:	003f5106 	br	88728 <__udivdi3+0x70>
   889e4:	01000044 	movi	r4,1
   889e8:	000b883a 	mov	r5,zero
   889ec:	008a5ec0 	call	8a5ec <__udivsi3>
   889f0:	1027883a 	mov	r19,r2
   889f4:	00bfffd4 	movui	r2,65535
   889f8:	14fff436 	bltu	r2,r19,889cc <__udivdi3+0x314>
   889fc:	003f4606 	br	88718 <__udivdi3+0x60>
   88a00:	00804034 	movhi	r2,256
   88a04:	10bfffc4 	addi	r2,r2,-1
   88a08:	1200ac36 	bltu	r2,r8,88cbc <__udivdi3+0x604>
   88a0c:	01400404 	movi	r5,16
   88a10:	2805883a 	mov	r2,r5
   88a14:	003fa806 	br	888b8 <__udivdi3+0x200>
   88a18:	3d85c83a 	sub	r2,r7,r22
   88a1c:	3588983a 	sll	r4,r6,r22
   88a20:	9886d83a 	srl	r3,r19,r2
   88a24:	a8a2d83a 	srl	r17,r21,r2
   88a28:	e084d83a 	srl	r2,fp,r2
   88a2c:	20eeb03a 	or	r23,r4,r3
   88a30:	b824d43a 	srli	r18,r23,16
   88a34:	ad86983a 	sll	r3,r21,r22
   88a38:	8809883a 	mov	r4,r17
   88a3c:	900b883a 	mov	r5,r18
   88a40:	1886b03a 	or	r3,r3,r2
   88a44:	d8c00115 	stw	r3,4(sp)
   88a48:	bc3fffcc 	andi	r16,r23,65535
   88a4c:	008a5ec0 	call	8a5ec <__udivsi3>
   88a50:	100b883a 	mov	r5,r2
   88a54:	8009883a 	mov	r4,r16
   88a58:	1029883a 	mov	r20,r2
   88a5c:	0080f440 	call	80f44 <__mulsi3>
   88a60:	900b883a 	mov	r5,r18
   88a64:	8809883a 	mov	r4,r17
   88a68:	102b883a 	mov	r21,r2
   88a6c:	008a5f40 	call	8a5f4 <__umodsi3>
   88a70:	d9400117 	ldw	r5,4(sp)
   88a74:	1004943a 	slli	r2,r2,16
   88a78:	9da6983a 	sll	r19,r19,r22
   88a7c:	2806d43a 	srli	r3,r5,16
   88a80:	10c4b03a 	or	r2,r2,r3
   88a84:	1540032e 	bgeu	r2,r21,88a94 <__udivdi3+0x3dc>
   88a88:	15c5883a 	add	r2,r2,r23
   88a8c:	a53fffc4 	addi	r20,r20,-1
   88a90:	15c0912e 	bgeu	r2,r23,88cd8 <__udivdi3+0x620>
   88a94:	1563c83a 	sub	r17,r2,r21
   88a98:	8809883a 	mov	r4,r17
   88a9c:	900b883a 	mov	r5,r18
   88aa0:	008a5ec0 	call	8a5ec <__udivsi3>
   88aa4:	100b883a 	mov	r5,r2
   88aa8:	8009883a 	mov	r4,r16
   88aac:	102b883a 	mov	r21,r2
   88ab0:	0080f440 	call	80f44 <__mulsi3>
   88ab4:	8809883a 	mov	r4,r17
   88ab8:	900b883a 	mov	r5,r18
   88abc:	1021883a 	mov	r16,r2
   88ac0:	008a5f40 	call	8a5f4 <__umodsi3>
   88ac4:	da800117 	ldw	r10,4(sp)
   88ac8:	1004943a 	slli	r2,r2,16
   88acc:	50ffffcc 	andi	r3,r10,65535
   88ad0:	10c6b03a 	or	r3,r2,r3
   88ad4:	1c00032e 	bgeu	r3,r16,88ae4 <__udivdi3+0x42c>
   88ad8:	1dc7883a 	add	r3,r3,r23
   88adc:	ad7fffc4 	addi	r21,r21,-1
   88ae0:	1dc0792e 	bgeu	r3,r23,88cc8 <__udivdi3+0x610>
   88ae4:	a004943a 	slli	r2,r20,16
   88ae8:	982ed43a 	srli	r23,r19,16
   88aec:	9cffffcc 	andi	r19,r19,65535
   88af0:	a8a4b03a 	or	r18,r21,r2
   88af4:	947fffcc 	andi	r17,r18,65535
   88af8:	902ad43a 	srli	r21,r18,16
   88afc:	8809883a 	mov	r4,r17
   88b00:	980b883a 	mov	r5,r19
   88b04:	1c21c83a 	sub	r16,r3,r16
   88b08:	0080f440 	call	80f44 <__mulsi3>
   88b0c:	8809883a 	mov	r4,r17
   88b10:	b80b883a 	mov	r5,r23
   88b14:	1029883a 	mov	r20,r2
   88b18:	0080f440 	call	80f44 <__mulsi3>
   88b1c:	980b883a 	mov	r5,r19
   88b20:	a809883a 	mov	r4,r21
   88b24:	1023883a 	mov	r17,r2
   88b28:	0080f440 	call	80f44 <__mulsi3>
   88b2c:	a809883a 	mov	r4,r21
   88b30:	b80b883a 	mov	r5,r23
   88b34:	1027883a 	mov	r19,r2
   88b38:	0080f440 	call	80f44 <__mulsi3>
   88b3c:	1009883a 	mov	r4,r2
   88b40:	a004d43a 	srli	r2,r20,16
   88b44:	8ce3883a 	add	r17,r17,r19
   88b48:	1447883a 	add	r3,r2,r17
   88b4c:	1cc0022e 	bgeu	r3,r19,88b58 <__udivdi3+0x4a0>
   88b50:	00800074 	movhi	r2,1
   88b54:	2089883a 	add	r4,r4,r2
   88b58:	1804d43a 	srli	r2,r3,16
   88b5c:	2085883a 	add	r2,r4,r2
   88b60:	80804436 	bltu	r16,r2,88c74 <__udivdi3+0x5bc>
   88b64:	80803e26 	beq	r16,r2,88c60 <__udivdi3+0x5a8>
   88b68:	9005883a 	mov	r2,r18
   88b6c:	0009883a 	mov	r4,zero
   88b70:	003f3a06 	br	8885c <__udivdi3+0x1a4>
   88b74:	9d26983a 	sll	r19,r19,r20
   88b78:	3505c83a 	sub	r2,r6,r20
   88b7c:	a8a2d83a 	srl	r17,r21,r2
   88b80:	982ed43a 	srli	r23,r19,16
   88b84:	e084d83a 	srl	r2,fp,r2
   88b88:	ad06983a 	sll	r3,r21,r20
   88b8c:	8809883a 	mov	r4,r17
   88b90:	b80b883a 	mov	r5,r23
   88b94:	1886b03a 	or	r3,r3,r2
   88b98:	d8c00015 	stw	r3,0(sp)
   88b9c:	9dbfffcc 	andi	r22,r19,65535
   88ba0:	008a5ec0 	call	8a5ec <__udivsi3>
   88ba4:	100b883a 	mov	r5,r2
   88ba8:	b009883a 	mov	r4,r22
   88bac:	d8800215 	stw	r2,8(sp)
   88bb0:	0080f440 	call	80f44 <__mulsi3>
   88bb4:	8809883a 	mov	r4,r17
   88bb8:	b80b883a 	mov	r5,r23
   88bbc:	102b883a 	mov	r21,r2
   88bc0:	008a5f40 	call	8a5f4 <__umodsi3>
   88bc4:	d9000017 	ldw	r4,0(sp)
   88bc8:	1004943a 	slli	r2,r2,16
   88bcc:	2006d43a 	srli	r3,r4,16
   88bd0:	10c4b03a 	or	r2,r2,r3
   88bd4:	1540052e 	bgeu	r2,r21,88bec <__udivdi3+0x534>
   88bd8:	d9400217 	ldw	r5,8(sp)
   88bdc:	14c5883a 	add	r2,r2,r19
   88be0:	297fffc4 	addi	r5,r5,-1
   88be4:	d9400215 	stw	r5,8(sp)
   88be8:	14c0462e 	bgeu	r2,r19,88d04 <__udivdi3+0x64c>
   88bec:	1563c83a 	sub	r17,r2,r21
   88bf0:	8809883a 	mov	r4,r17
   88bf4:	b80b883a 	mov	r5,r23
   88bf8:	008a5ec0 	call	8a5ec <__udivsi3>
   88bfc:	100b883a 	mov	r5,r2
   88c00:	b009883a 	mov	r4,r22
   88c04:	1025883a 	mov	r18,r2
   88c08:	0080f440 	call	80f44 <__mulsi3>
   88c0c:	8809883a 	mov	r4,r17
   88c10:	b80b883a 	mov	r5,r23
   88c14:	1021883a 	mov	r16,r2
   88c18:	008a5f40 	call	8a5f4 <__umodsi3>
   88c1c:	da800017 	ldw	r10,0(sp)
   88c20:	1004943a 	slli	r2,r2,16
   88c24:	50ffffcc 	andi	r3,r10,65535
   88c28:	10c6b03a 	or	r3,r2,r3
   88c2c:	1c00062e 	bgeu	r3,r16,88c48 <__udivdi3+0x590>
   88c30:	1cc7883a 	add	r3,r3,r19
   88c34:	94bfffc4 	addi	r18,r18,-1
   88c38:	1cc00336 	bltu	r3,r19,88c48 <__udivdi3+0x590>
   88c3c:	1c00022e 	bgeu	r3,r16,88c48 <__udivdi3+0x590>
   88c40:	94bfffc4 	addi	r18,r18,-1
   88c44:	1cc7883a 	add	r3,r3,r19
   88c48:	d9000217 	ldw	r4,8(sp)
   88c4c:	e538983a 	sll	fp,fp,r20
   88c50:	1c2bc83a 	sub	r21,r3,r16
   88c54:	2004943a 	slli	r2,r4,16
   88c58:	90a8b03a 	or	r20,r18,r2
   88c5c:	003ebf06 	br	8875c <__udivdi3+0xa4>
   88c60:	1804943a 	slli	r2,r3,16
   88c64:	e588983a 	sll	r4,fp,r22
   88c68:	a0ffffcc 	andi	r3,r20,65535
   88c6c:	10c5883a 	add	r2,r2,r3
   88c70:	20bfbd2e 	bgeu	r4,r2,88b68 <__udivdi3+0x4b0>
   88c74:	90bfffc4 	addi	r2,r18,-1
   88c78:	0009883a 	mov	r4,zero
   88c7c:	003ef706 	br	8885c <__udivdi3+0x1a4>
   88c80:	01400204 	movi	r5,8
   88c84:	2805883a 	mov	r2,r5
   88c88:	003ee706 	br	88828 <__udivdi3+0x170>
   88c8c:	01400604 	movi	r5,24
   88c90:	2805883a 	mov	r2,r5
   88c94:	003ee406 	br	88828 <__udivdi3+0x170>
   88c98:	01400204 	movi	r5,8
   88c9c:	2805883a 	mov	r2,r5
   88ca0:	003ea106 	br	88728 <__udivdi3+0x70>
   88ca4:	01400604 	movi	r5,24
   88ca8:	2805883a 	mov	r2,r5
   88cac:	003e9e06 	br	88728 <__udivdi3+0x70>
   88cb0:	01400204 	movi	r5,8
   88cb4:	2805883a 	mov	r2,r5
   88cb8:	003eff06 	br	888b8 <__udivdi3+0x200>
   88cbc:	01400604 	movi	r5,24
   88cc0:	2805883a 	mov	r2,r5
   88cc4:	003efc06 	br	888b8 <__udivdi3+0x200>
   88cc8:	1c3f862e 	bgeu	r3,r16,88ae4 <__udivdi3+0x42c>
   88ccc:	1dc7883a 	add	r3,r3,r23
   88cd0:	ad7fffc4 	addi	r21,r21,-1
   88cd4:	003f8306 	br	88ae4 <__udivdi3+0x42c>
   88cd8:	157f6e2e 	bgeu	r2,r21,88a94 <__udivdi3+0x3dc>
   88cdc:	a53fffc4 	addi	r20,r20,-1
   88ce0:	15c5883a 	add	r2,r2,r23
   88ce4:	003f6b06 	br	88a94 <__udivdi3+0x3dc>
   88ce8:	ad7fffc4 	addi	r21,r21,-1
   88cec:	003ec206 	br	887f8 <__udivdi3+0x140>
   88cf0:	843fffc4 	addi	r16,r16,-1
   88cf4:	14c5883a 	add	r2,r2,r19
   88cf8:	003f1306 	br	88948 <__udivdi3+0x290>
   88cfc:	ad7fffc4 	addi	r21,r21,-1
   88d00:	003f2506 	br	88998 <__udivdi3+0x2e0>
   88d04:	157fb92e 	bgeu	r2,r21,88bec <__udivdi3+0x534>
   88d08:	297fffc4 	addi	r5,r5,-1
   88d0c:	14c5883a 	add	r2,r2,r19
   88d10:	d9400215 	stw	r5,8(sp)
   88d14:	003fb506 	br	88bec <__udivdi3+0x534>
   88d18:	843fffc4 	addi	r16,r16,-1
   88d1c:	14c5883a 	add	r2,r2,r19
   88d20:	003ea106 	br	887a8 <__udivdi3+0xf0>

00088d24 <__umoddi3>:
   88d24:	defff004 	addi	sp,sp,-64
   88d28:	3011883a 	mov	r8,r6
   88d2c:	000d883a 	mov	r6,zero
   88d30:	dd400b15 	stw	r21,44(sp)
   88d34:	dcc00915 	stw	r19,36(sp)
   88d38:	dc000615 	stw	r16,24(sp)
   88d3c:	dfc00f15 	stw	ra,60(sp)
   88d40:	df000e15 	stw	fp,56(sp)
   88d44:	ddc00d15 	stw	r23,52(sp)
   88d48:	dd800c15 	stw	r22,48(sp)
   88d4c:	dd000a15 	stw	r20,40(sp)
   88d50:	dc800815 	stw	r18,32(sp)
   88d54:	dc400715 	stw	r17,28(sp)
   88d58:	2817883a 	mov	r11,r5
   88d5c:	d9800415 	stw	r6,16(sp)
   88d60:	4027883a 	mov	r19,r8
   88d64:	d9800515 	stw	r6,20(sp)
   88d68:	2021883a 	mov	r16,r4
   88d6c:	282b883a 	mov	r21,r5
   88d70:	38002c1e 	bne	r7,zero,88e24 <__umoddi3+0x100>
   88d74:	2a005636 	bltu	r5,r8,88ed0 <__umoddi3+0x1ac>
   88d78:	40009a26 	beq	r8,zero,88fe4 <__umoddi3+0x2c0>
   88d7c:	00bfffd4 	movui	r2,65535
   88d80:	14c09236 	bltu	r2,r19,88fcc <__umoddi3+0x2a8>
   88d84:	00803fc4 	movi	r2,255
   88d88:	14c15c36 	bltu	r2,r19,892fc <__umoddi3+0x5d8>
   88d8c:	000b883a 	mov	r5,zero
   88d90:	0005883a 	mov	r2,zero
   88d94:	9884d83a 	srl	r2,r19,r2
   88d98:	01000274 	movhi	r4,9
   88d9c:	211e6b04 	addi	r4,r4,31148
   88da0:	01800804 	movi	r6,32
   88da4:	1105883a 	add	r2,r2,r4
   88da8:	10c00003 	ldbu	r3,0(r2)
   88dac:	28c7883a 	add	r3,r5,r3
   88db0:	30e5c83a 	sub	r18,r6,r3
   88db4:	9000a41e 	bne	r18,zero,89048 <__umoddi3+0x324>
   88db8:	982ed43a 	srli	r23,r19,16
   88dbc:	acebc83a 	sub	r21,r21,r19
   88dc0:	9d3fffcc 	andi	r20,r19,65535
   88dc4:	002d883a 	mov	r22,zero
   88dc8:	a809883a 	mov	r4,r21
   88dcc:	b80b883a 	mov	r5,r23
   88dd0:	008a5ec0 	call	8a5ec <__udivsi3>
   88dd4:	100b883a 	mov	r5,r2
   88dd8:	a009883a 	mov	r4,r20
   88ddc:	0080f440 	call	80f44 <__mulsi3>
   88de0:	a809883a 	mov	r4,r21
   88de4:	b80b883a 	mov	r5,r23
   88de8:	1023883a 	mov	r17,r2
   88dec:	008a5f40 	call	8a5f4 <__umodsi3>
   88df0:	1004943a 	slli	r2,r2,16
   88df4:	8006d43a 	srli	r3,r16,16
   88df8:	10c4b03a 	or	r2,r2,r3
   88dfc:	1440032e 	bgeu	r2,r17,88e0c <__umoddi3+0xe8>
   88e00:	14c5883a 	add	r2,r2,r19
   88e04:	14c00136 	bltu	r2,r19,88e0c <__umoddi3+0xe8>
   88e08:	14415836 	bltu	r2,r17,8936c <__umoddi3+0x648>
   88e0c:	1463c83a 	sub	r17,r2,r17
   88e10:	8809883a 	mov	r4,r17
   88e14:	b80b883a 	mov	r5,r23
   88e18:	008a5ec0 	call	8a5ec <__udivsi3>
   88e1c:	a009883a 	mov	r4,r20
   88e20:	00005306 	br	88f70 <__umoddi3+0x24c>
   88e24:	380d883a 	mov	r6,r7
   88e28:	29c0132e 	bgeu	r5,r7,88e78 <__umoddi3+0x154>
   88e2c:	d9000415 	stw	r4,16(sp)
   88e30:	d9400515 	stw	r5,20(sp)
   88e34:	d9400417 	ldw	r5,16(sp)
   88e38:	5813883a 	mov	r9,r11
   88e3c:	2811883a 	mov	r8,r5
   88e40:	4005883a 	mov	r2,r8
   88e44:	4807883a 	mov	r3,r9
   88e48:	dfc00f17 	ldw	ra,60(sp)
   88e4c:	df000e17 	ldw	fp,56(sp)
   88e50:	ddc00d17 	ldw	r23,52(sp)
   88e54:	dd800c17 	ldw	r22,48(sp)
   88e58:	dd400b17 	ldw	r21,44(sp)
   88e5c:	dd000a17 	ldw	r20,40(sp)
   88e60:	dcc00917 	ldw	r19,36(sp)
   88e64:	dc800817 	ldw	r18,32(sp)
   88e68:	dc400717 	ldw	r17,28(sp)
   88e6c:	dc000617 	ldw	r16,24(sp)
   88e70:	dec01004 	addi	sp,sp,64
   88e74:	f800283a 	ret
   88e78:	00bfffd4 	movui	r2,65535
   88e7c:	11c06636 	bltu	r2,r7,89018 <__umoddi3+0x2f4>
   88e80:	00803fc4 	movi	r2,255
   88e84:	11c12036 	bltu	r2,r7,89308 <__umoddi3+0x5e4>
   88e88:	000b883a 	mov	r5,zero
   88e8c:	0005883a 	mov	r2,zero
   88e90:	3084d83a 	srl	r2,r6,r2
   88e94:	01000274 	movhi	r4,9
   88e98:	211e6b04 	addi	r4,r4,31148
   88e9c:	01c00804 	movi	r7,32
   88ea0:	1105883a 	add	r2,r2,r4
   88ea4:	10c00003 	ldbu	r3,0(r2)
   88ea8:	28c7883a 	add	r3,r5,r3
   88eac:	38e5c83a 	sub	r18,r7,r3
   88eb0:	9000941e 	bne	r18,zero,89104 <__umoddi3+0x3e0>
   88eb4:	35405e36 	bltu	r6,r21,89030 <__umoddi3+0x30c>
   88eb8:	84c05d2e 	bgeu	r16,r19,89030 <__umoddi3+0x30c>
   88ebc:	8011883a 	mov	r8,r16
   88ec0:	a813883a 	mov	r9,r21
   88ec4:	dc000415 	stw	r16,16(sp)
   88ec8:	dd400515 	stw	r21,20(sp)
   88ecc:	003fdc06 	br	88e40 <__umoddi3+0x11c>
   88ed0:	00bfffd4 	movui	r2,65535
   88ed4:	12004a36 	bltu	r2,r8,89000 <__umoddi3+0x2dc>
   88ed8:	00803fc4 	movi	r2,255
   88edc:	12010d36 	bltu	r2,r8,89314 <__umoddi3+0x5f0>
   88ee0:	000b883a 	mov	r5,zero
   88ee4:	0005883a 	mov	r2,zero
   88ee8:	9884d83a 	srl	r2,r19,r2
   88eec:	01000274 	movhi	r4,9
   88ef0:	211e6b04 	addi	r4,r4,31148
   88ef4:	01800804 	movi	r6,32
   88ef8:	1105883a 	add	r2,r2,r4
   88efc:	10c00003 	ldbu	r3,0(r2)
   88f00:	28c7883a 	add	r3,r5,r3
   88f04:	30c7c83a 	sub	r3,r6,r3
   88f08:	1800dc1e 	bne	r3,zero,8927c <__umoddi3+0x558>
   88f0c:	002d883a 	mov	r22,zero
   88f10:	982ed43a 	srli	r23,r19,16
   88f14:	a809883a 	mov	r4,r21
   88f18:	9cbfffcc 	andi	r18,r19,65535
   88f1c:	b80b883a 	mov	r5,r23
   88f20:	008a5ec0 	call	8a5ec <__udivsi3>
   88f24:	100b883a 	mov	r5,r2
   88f28:	9009883a 	mov	r4,r18
   88f2c:	0080f440 	call	80f44 <__mulsi3>
   88f30:	a809883a 	mov	r4,r21
   88f34:	b80b883a 	mov	r5,r23
   88f38:	1023883a 	mov	r17,r2
   88f3c:	008a5f40 	call	8a5f4 <__umodsi3>
   88f40:	1004943a 	slli	r2,r2,16
   88f44:	8006d43a 	srli	r3,r16,16
   88f48:	10c4b03a 	or	r2,r2,r3
   88f4c:	1440032e 	bgeu	r2,r17,88f5c <__umoddi3+0x238>
   88f50:	14c5883a 	add	r2,r2,r19
   88f54:	14c00136 	bltu	r2,r19,88f5c <__umoddi3+0x238>
   88f58:	14410236 	bltu	r2,r17,89364 <__umoddi3+0x640>
   88f5c:	1463c83a 	sub	r17,r2,r17
   88f60:	8809883a 	mov	r4,r17
   88f64:	b80b883a 	mov	r5,r23
   88f68:	008a5ec0 	call	8a5ec <__udivsi3>
   88f6c:	9009883a 	mov	r4,r18
   88f70:	100b883a 	mov	r5,r2
   88f74:	0080f440 	call	80f44 <__mulsi3>
   88f78:	8809883a 	mov	r4,r17
   88f7c:	b80b883a 	mov	r5,r23
   88f80:	102b883a 	mov	r21,r2
   88f84:	008a5f40 	call	8a5f4 <__umodsi3>
   88f88:	1004943a 	slli	r2,r2,16
   88f8c:	80ffffcc 	andi	r3,r16,65535
   88f90:	10c4b03a 	or	r2,r2,r3
   88f94:	1540042e 	bgeu	r2,r21,88fa8 <__umoddi3+0x284>
   88f98:	14c5883a 	add	r2,r2,r19
   88f9c:	14c00236 	bltu	r2,r19,88fa8 <__umoddi3+0x284>
   88fa0:	1540012e 	bgeu	r2,r21,88fa8 <__umoddi3+0x284>
   88fa4:	14c5883a 	add	r2,r2,r19
   88fa8:	1545c83a 	sub	r2,r2,r21
   88fac:	1584d83a 	srl	r2,r2,r22
   88fb0:	0013883a 	mov	r9,zero
   88fb4:	d8800415 	stw	r2,16(sp)
   88fb8:	d8c00417 	ldw	r3,16(sp)
   88fbc:	0005883a 	mov	r2,zero
   88fc0:	d8800515 	stw	r2,20(sp)
   88fc4:	1811883a 	mov	r8,r3
   88fc8:	003f9d06 	br	88e40 <__umoddi3+0x11c>
   88fcc:	00804034 	movhi	r2,256
   88fd0:	10bfffc4 	addi	r2,r2,-1
   88fd4:	14c0c636 	bltu	r2,r19,892f0 <__umoddi3+0x5cc>
   88fd8:	01400404 	movi	r5,16
   88fdc:	2805883a 	mov	r2,r5
   88fe0:	003f6c06 	br	88d94 <__umoddi3+0x70>
   88fe4:	01000044 	movi	r4,1
   88fe8:	000b883a 	mov	r5,zero
   88fec:	008a5ec0 	call	8a5ec <__udivsi3>
   88ff0:	1027883a 	mov	r19,r2
   88ff4:	00bfffd4 	movui	r2,65535
   88ff8:	14fff436 	bltu	r2,r19,88fcc <__umoddi3+0x2a8>
   88ffc:	003f6106 	br	88d84 <__umoddi3+0x60>
   89000:	00804034 	movhi	r2,256
   89004:	10bfffc4 	addi	r2,r2,-1
   89008:	1200c536 	bltu	r2,r8,89320 <__umoddi3+0x5fc>
   8900c:	01400404 	movi	r5,16
   89010:	2805883a 	mov	r2,r5
   89014:	003fb406 	br	88ee8 <__umoddi3+0x1c4>
   89018:	00804034 	movhi	r2,256
   8901c:	10bfffc4 	addi	r2,r2,-1
   89020:	11c0c236 	bltu	r2,r7,8932c <__umoddi3+0x608>
   89024:	01400404 	movi	r5,16
   89028:	2805883a 	mov	r2,r5
   8902c:	003f9806 	br	88e90 <__umoddi3+0x16c>
   89030:	84c9c83a 	sub	r4,r16,r19
   89034:	8105803a 	cmpltu	r2,r16,r4
   89038:	a987c83a 	sub	r3,r21,r6
   8903c:	18abc83a 	sub	r21,r3,r2
   89040:	2021883a 	mov	r16,r4
   89044:	003f9d06 	br	88ebc <__umoddi3+0x198>
   89048:	9ca6983a 	sll	r19,r19,r18
   8904c:	3485c83a 	sub	r2,r6,r18
   89050:	a8a2d83a 	srl	r17,r21,r2
   89054:	982ed43a 	srli	r23,r19,16
   89058:	ac86983a 	sll	r3,r21,r18
   8905c:	8084d83a 	srl	r2,r16,r2
   89060:	8809883a 	mov	r4,r17
   89064:	b80b883a 	mov	r5,r23
   89068:	18b8b03a 	or	fp,r3,r2
   8906c:	9d3fffcc 	andi	r20,r19,65535
   89070:	008a5ec0 	call	8a5ec <__udivsi3>
   89074:	100b883a 	mov	r5,r2
   89078:	a009883a 	mov	r4,r20
   8907c:	0080f440 	call	80f44 <__mulsi3>
   89080:	8809883a 	mov	r4,r17
   89084:	b80b883a 	mov	r5,r23
   89088:	102b883a 	mov	r21,r2
   8908c:	008a5f40 	call	8a5f4 <__umodsi3>
   89090:	1004943a 	slli	r2,r2,16
   89094:	e006d43a 	srli	r3,fp,16
   89098:	902d883a 	mov	r22,r18
   8909c:	10c4b03a 	or	r2,r2,r3
   890a0:	1540022e 	bgeu	r2,r21,890ac <__umoddi3+0x388>
   890a4:	14c5883a 	add	r2,r2,r19
   890a8:	14c0ab2e 	bgeu	r2,r19,89358 <__umoddi3+0x634>
   890ac:	1563c83a 	sub	r17,r2,r21
   890b0:	8809883a 	mov	r4,r17
   890b4:	b80b883a 	mov	r5,r23
   890b8:	008a5ec0 	call	8a5ec <__udivsi3>
   890bc:	100b883a 	mov	r5,r2
   890c0:	a009883a 	mov	r4,r20
   890c4:	0080f440 	call	80f44 <__mulsi3>
   890c8:	8809883a 	mov	r4,r17
   890cc:	b80b883a 	mov	r5,r23
   890d0:	102b883a 	mov	r21,r2
   890d4:	008a5f40 	call	8a5f4 <__umodsi3>
   890d8:	1004943a 	slli	r2,r2,16
   890dc:	e0ffffcc 	andi	r3,fp,65535
   890e0:	10c4b03a 	or	r2,r2,r3
   890e4:	1540042e 	bgeu	r2,r21,890f8 <__umoddi3+0x3d4>
   890e8:	14c5883a 	add	r2,r2,r19
   890ec:	14c00236 	bltu	r2,r19,890f8 <__umoddi3+0x3d4>
   890f0:	1540012e 	bgeu	r2,r21,890f8 <__umoddi3+0x3d4>
   890f4:	14c5883a 	add	r2,r2,r19
   890f8:	84a0983a 	sll	r16,r16,r18
   890fc:	156bc83a 	sub	r21,r2,r21
   89100:	003f3106 	br	88dc8 <__umoddi3+0xa4>
   89104:	3c8fc83a 	sub	r7,r7,r18
   89108:	3486983a 	sll	r3,r6,r18
   8910c:	99c4d83a 	srl	r2,r19,r7
   89110:	a9e2d83a 	srl	r17,r21,r7
   89114:	ac8c983a 	sll	r6,r21,r18
   89118:	18acb03a 	or	r22,r3,r2
   8911c:	b02ed43a 	srli	r23,r22,16
   89120:	81c4d83a 	srl	r2,r16,r7
   89124:	8809883a 	mov	r4,r17
   89128:	b80b883a 	mov	r5,r23
   8912c:	308cb03a 	or	r6,r6,r2
   89130:	d9c00315 	stw	r7,12(sp)
   89134:	d9800215 	stw	r6,8(sp)
   89138:	b53fffcc 	andi	r20,r22,65535
   8913c:	008a5ec0 	call	8a5ec <__udivsi3>
   89140:	100b883a 	mov	r5,r2
   89144:	a009883a 	mov	r4,r20
   89148:	1039883a 	mov	fp,r2
   8914c:	0080f440 	call	80f44 <__mulsi3>
   89150:	8809883a 	mov	r4,r17
   89154:	b80b883a 	mov	r5,r23
   89158:	102b883a 	mov	r21,r2
   8915c:	008a5f40 	call	8a5f4 <__umodsi3>
   89160:	d9000217 	ldw	r4,8(sp)
   89164:	1004943a 	slli	r2,r2,16
   89168:	9ca6983a 	sll	r19,r19,r18
   8916c:	2006d43a 	srli	r3,r4,16
   89170:	84a0983a 	sll	r16,r16,r18
   89174:	dcc00015 	stw	r19,0(sp)
   89178:	10c4b03a 	or	r2,r2,r3
   8917c:	dc000115 	stw	r16,4(sp)
   89180:	1540032e 	bgeu	r2,r21,89190 <__umoddi3+0x46c>
   89184:	1585883a 	add	r2,r2,r22
   89188:	e73fffc4 	addi	fp,fp,-1
   8918c:	15806e2e 	bgeu	r2,r22,89348 <__umoddi3+0x624>
   89190:	1563c83a 	sub	r17,r2,r21
   89194:	8809883a 	mov	r4,r17
   89198:	b80b883a 	mov	r5,r23
   8919c:	008a5ec0 	call	8a5ec <__udivsi3>
   891a0:	100b883a 	mov	r5,r2
   891a4:	a009883a 	mov	r4,r20
   891a8:	1021883a 	mov	r16,r2
   891ac:	0080f440 	call	80f44 <__mulsi3>
   891b0:	b80b883a 	mov	r5,r23
   891b4:	8809883a 	mov	r4,r17
   891b8:	1029883a 	mov	r20,r2
   891bc:	008a5f40 	call	8a5f4 <__umodsi3>
   891c0:	d9400217 	ldw	r5,8(sp)
   891c4:	1004943a 	slli	r2,r2,16
   891c8:	28ffffcc 	andi	r3,r5,65535
   891cc:	10c4b03a 	or	r2,r2,r3
   891d0:	1500032e 	bgeu	r2,r20,891e0 <__umoddi3+0x4bc>
   891d4:	1585883a 	add	r2,r2,r22
   891d8:	843fffc4 	addi	r16,r16,-1
   891dc:	1580562e 	bgeu	r2,r22,89338 <__umoddi3+0x614>
   891e0:	d9800017 	ldw	r6,0(sp)
   891e4:	e022943a 	slli	r17,fp,16
   891e8:	302ed43a 	srli	r23,r6,16
   891ec:	8462b03a 	or	r17,r16,r17
   891f0:	34ffffcc 	andi	r19,r6,65535
   891f4:	882ad43a 	srli	r21,r17,16
   891f8:	8c7fffcc 	andi	r17,r17,65535
   891fc:	8809883a 	mov	r4,r17
   89200:	980b883a 	mov	r5,r19
   89204:	1521c83a 	sub	r16,r2,r20
   89208:	0080f440 	call	80f44 <__mulsi3>
   8920c:	8809883a 	mov	r4,r17
   89210:	b80b883a 	mov	r5,r23
   89214:	1029883a 	mov	r20,r2
   89218:	0080f440 	call	80f44 <__mulsi3>
   8921c:	980b883a 	mov	r5,r19
   89220:	a809883a 	mov	r4,r21
   89224:	1023883a 	mov	r17,r2
   89228:	0080f440 	call	80f44 <__mulsi3>
   8922c:	a809883a 	mov	r4,r21
   89230:	b80b883a 	mov	r5,r23
   89234:	1027883a 	mov	r19,r2
   89238:	0080f440 	call	80f44 <__mulsi3>
   8923c:	100b883a 	mov	r5,r2
   89240:	a004d43a 	srli	r2,r20,16
   89244:	8ce3883a 	add	r17,r17,r19
   89248:	1449883a 	add	r4,r2,r17
   8924c:	24c0022e 	bgeu	r4,r19,89258 <__umoddi3+0x534>
   89250:	00800074 	movhi	r2,1
   89254:	288b883a 	add	r5,r5,r2
   89258:	2004d43a 	srli	r2,r4,16
   8925c:	2008943a 	slli	r4,r4,16
   89260:	a0ffffcc 	andi	r3,r20,65535
   89264:	288d883a 	add	r6,r5,r2
   89268:	20c9883a 	add	r4,r4,r3
   8926c:	81800b36 	bltu	r16,r6,8929c <__umoddi3+0x578>
   89270:	81804026 	beq	r16,r6,89374 <__umoddi3+0x650>
   89274:	818dc83a 	sub	r6,r16,r6
   89278:	00000f06 	br	892b8 <__umoddi3+0x594>
   8927c:	30c5c83a 	sub	r2,r6,r3
   89280:	182d883a 	mov	r22,r3
   89284:	8084d83a 	srl	r2,r16,r2
   89288:	a8c6983a 	sll	r3,r21,r3
   8928c:	9da6983a 	sll	r19,r19,r22
   89290:	85a0983a 	sll	r16,r16,r22
   89294:	18aab03a 	or	r21,r3,r2
   89298:	003f1d06 	br	88f10 <__umoddi3+0x1ec>
   8929c:	d8c00017 	ldw	r3,0(sp)
   892a0:	20c5c83a 	sub	r2,r4,r3
   892a4:	2089803a 	cmpltu	r4,r4,r2
   892a8:	3587c83a 	sub	r3,r6,r22
   892ac:	1907c83a 	sub	r3,r3,r4
   892b0:	80cdc83a 	sub	r6,r16,r3
   892b4:	1009883a 	mov	r4,r2
   892b8:	d9400117 	ldw	r5,4(sp)
   892bc:	2905c83a 	sub	r2,r5,r4
   892c0:	2887803a 	cmpltu	r3,r5,r2
   892c4:	30c7c83a 	sub	r3,r6,r3
   892c8:	d9800317 	ldw	r6,12(sp)
   892cc:	1484d83a 	srl	r2,r2,r18
   892d0:	1988983a 	sll	r4,r3,r6
   892d4:	1c86d83a 	srl	r3,r3,r18
   892d8:	2088b03a 	or	r4,r4,r2
   892dc:	2011883a 	mov	r8,r4
   892e0:	1813883a 	mov	r9,r3
   892e4:	d9000415 	stw	r4,16(sp)
   892e8:	d8c00515 	stw	r3,20(sp)
   892ec:	003ed406 	br	88e40 <__umoddi3+0x11c>
   892f0:	01400604 	movi	r5,24
   892f4:	2805883a 	mov	r2,r5
   892f8:	003ea606 	br	88d94 <__umoddi3+0x70>
   892fc:	01400204 	movi	r5,8
   89300:	2805883a 	mov	r2,r5
   89304:	003ea306 	br	88d94 <__umoddi3+0x70>
   89308:	01400204 	movi	r5,8
   8930c:	2805883a 	mov	r2,r5
   89310:	003edf06 	br	88e90 <__umoddi3+0x16c>
   89314:	01400204 	movi	r5,8
   89318:	2805883a 	mov	r2,r5
   8931c:	003ef206 	br	88ee8 <__umoddi3+0x1c4>
   89320:	01400604 	movi	r5,24
   89324:	2805883a 	mov	r2,r5
   89328:	003eef06 	br	88ee8 <__umoddi3+0x1c4>
   8932c:	01400604 	movi	r5,24
   89330:	2805883a 	mov	r2,r5
   89334:	003ed606 	br	88e90 <__umoddi3+0x16c>
   89338:	153fa92e 	bgeu	r2,r20,891e0 <__umoddi3+0x4bc>
   8933c:	843fffc4 	addi	r16,r16,-1
   89340:	1585883a 	add	r2,r2,r22
   89344:	003fa606 	br	891e0 <__umoddi3+0x4bc>
   89348:	157f912e 	bgeu	r2,r21,89190 <__umoddi3+0x46c>
   8934c:	e73fffc4 	addi	fp,fp,-1
   89350:	1585883a 	add	r2,r2,r22
   89354:	003f8e06 	br	89190 <__umoddi3+0x46c>
   89358:	157f542e 	bgeu	r2,r21,890ac <__umoddi3+0x388>
   8935c:	14c5883a 	add	r2,r2,r19
   89360:	003f5206 	br	890ac <__umoddi3+0x388>
   89364:	14c5883a 	add	r2,r2,r19
   89368:	003efc06 	br	88f5c <__umoddi3+0x238>
   8936c:	14c5883a 	add	r2,r2,r19
   89370:	003ea606 	br	88e0c <__umoddi3+0xe8>
   89374:	d8800117 	ldw	r2,4(sp)
   89378:	113fc836 	bltu	r2,r4,8929c <__umoddi3+0x578>
   8937c:	000d883a 	mov	r6,zero
   89380:	003fcd06 	br	892b8 <__umoddi3+0x594>

00089384 <_fpadd_parts>:
   89384:	defff804 	addi	sp,sp,-32
   89388:	dcc00315 	stw	r19,12(sp)
   8938c:	2027883a 	mov	r19,r4
   89390:	21000017 	ldw	r4,0(r4)
   89394:	00c00044 	movi	r3,1
   89398:	dd400515 	stw	r21,20(sp)
   8939c:	dd000415 	stw	r20,16(sp)
   893a0:	ddc00715 	stw	r23,28(sp)
   893a4:	dd800615 	stw	r22,24(sp)
   893a8:	dc800215 	stw	r18,8(sp)
   893ac:	dc400115 	stw	r17,4(sp)
   893b0:	dc000015 	stw	r16,0(sp)
   893b4:	282b883a 	mov	r21,r5
   893b8:	3029883a 	mov	r20,r6
   893bc:	1900632e 	bgeu	r3,r4,8954c <_fpadd_parts+0x1c8>
   893c0:	28800017 	ldw	r2,0(r5)
   893c4:	1880812e 	bgeu	r3,r2,895cc <_fpadd_parts+0x248>
   893c8:	00c00104 	movi	r3,4
   893cc:	20c0dc26 	beq	r4,r3,89740 <_fpadd_parts+0x3bc>
   893d0:	10c07e26 	beq	r2,r3,895cc <_fpadd_parts+0x248>
   893d4:	00c00084 	movi	r3,2
   893d8:	10c06726 	beq	r2,r3,89578 <_fpadd_parts+0x1f4>
   893dc:	20c07b26 	beq	r4,r3,895cc <_fpadd_parts+0x248>
   893e0:	9dc00217 	ldw	r23,8(r19)
   893e4:	28c00217 	ldw	r3,8(r5)
   893e8:	9c400317 	ldw	r17,12(r19)
   893ec:	2bc00317 	ldw	r15,12(r5)
   893f0:	b8cdc83a 	sub	r6,r23,r3
   893f4:	9c800417 	ldw	r18,16(r19)
   893f8:	2c000417 	ldw	r16,16(r5)
   893fc:	3009883a 	mov	r4,r6
   89400:	30009716 	blt	r6,zero,89660 <_fpadd_parts+0x2dc>
   89404:	00800fc4 	movi	r2,63
   89408:	11806b16 	blt	r2,r6,895b8 <_fpadd_parts+0x234>
   8940c:	0100a40e 	bge	zero,r4,896a0 <_fpadd_parts+0x31c>
   89410:	35bff804 	addi	r22,r6,-32
   89414:	b000bc16 	blt	r22,zero,89708 <_fpadd_parts+0x384>
   89418:	8596d83a 	srl	r11,r16,r22
   8941c:	0019883a 	mov	r12,zero
   89420:	0013883a 	mov	r9,zero
   89424:	01000044 	movi	r4,1
   89428:	0015883a 	mov	r10,zero
   8942c:	b000be16 	blt	r22,zero,89728 <_fpadd_parts+0x3a4>
   89430:	2590983a 	sll	r8,r4,r22
   89434:	000f883a 	mov	r7,zero
   89438:	00bfffc4 	movi	r2,-1
   8943c:	3889883a 	add	r4,r7,r2
   89440:	408b883a 	add	r5,r8,r2
   89444:	21cd803a 	cmpltu	r6,r4,r7
   89448:	314b883a 	add	r5,r6,r5
   8944c:	7904703a 	and	r2,r15,r4
   89450:	8146703a 	and	r3,r16,r5
   89454:	10c4b03a 	or	r2,r2,r3
   89458:	10000226 	beq	r2,zero,89464 <_fpadd_parts+0xe0>
   8945c:	02400044 	movi	r9,1
   89460:	0015883a 	mov	r10,zero
   89464:	5a5eb03a 	or	r15,r11,r9
   89468:	62a0b03a 	or	r16,r12,r10
   8946c:	99400117 	ldw	r5,4(r19)
   89470:	a8800117 	ldw	r2,4(r21)
   89474:	28806e26 	beq	r5,r2,89630 <_fpadd_parts+0x2ac>
   89478:	28006626 	beq	r5,zero,89614 <_fpadd_parts+0x290>
   8947c:	7c45c83a 	sub	r2,r15,r17
   89480:	7889803a 	cmpltu	r4,r15,r2
   89484:	8487c83a 	sub	r3,r16,r18
   89488:	1909c83a 	sub	r4,r3,r4
   8948c:	100d883a 	mov	r6,r2
   89490:	200f883a 	mov	r7,r4
   89494:	38007716 	blt	r7,zero,89674 <_fpadd_parts+0x2f0>
   89498:	a5c00215 	stw	r23,8(r20)
   8949c:	a1c00415 	stw	r7,16(r20)
   894a0:	a0000115 	stw	zero,4(r20)
   894a4:	a1800315 	stw	r6,12(r20)
   894a8:	a2000317 	ldw	r8,12(r20)
   894ac:	a2400417 	ldw	r9,16(r20)
   894b0:	00bfffc4 	movi	r2,-1
   894b4:	408b883a 	add	r5,r8,r2
   894b8:	2a09803a 	cmpltu	r4,r5,r8
   894bc:	488d883a 	add	r6,r9,r2
   894c0:	01c40034 	movhi	r7,4096
   894c4:	39ffffc4 	addi	r7,r7,-1
   894c8:	218d883a 	add	r6,r4,r6
   894cc:	39801736 	bltu	r7,r6,8952c <_fpadd_parts+0x1a8>
   894d0:	31c06526 	beq	r6,r7,89668 <_fpadd_parts+0x2e4>
   894d4:	a3000217 	ldw	r12,8(r20)
   894d8:	4209883a 	add	r4,r8,r8
   894dc:	00bfffc4 	movi	r2,-1
   894e0:	220f803a 	cmpltu	r7,r4,r8
   894e4:	4a4b883a 	add	r5,r9,r9
   894e8:	394f883a 	add	r7,r7,r5
   894ec:	2095883a 	add	r10,r4,r2
   894f0:	3897883a 	add	r11,r7,r2
   894f4:	510d803a 	cmpltu	r6,r10,r4
   894f8:	6099883a 	add	r12,r12,r2
   894fc:	32d7883a 	add	r11,r6,r11
   89500:	00840034 	movhi	r2,4096
   89504:	10bfffc4 	addi	r2,r2,-1
   89508:	2011883a 	mov	r8,r4
   8950c:	3813883a 	mov	r9,r7
   89510:	a1000315 	stw	r4,12(r20)
   89514:	a1c00415 	stw	r7,16(r20)
   89518:	a3000215 	stw	r12,8(r20)
   8951c:	12c00336 	bltu	r2,r11,8952c <_fpadd_parts+0x1a8>
   89520:	58bfed1e 	bne	r11,r2,894d8 <_fpadd_parts+0x154>
   89524:	00bfff84 	movi	r2,-2
   89528:	12bfeb2e 	bgeu	r2,r10,894d8 <_fpadd_parts+0x154>
   8952c:	a2800417 	ldw	r10,16(r20)
   89530:	008000c4 	movi	r2,3
   89534:	00c80034 	movhi	r3,8192
   89538:	18ffffc4 	addi	r3,r3,-1
   8953c:	a2400317 	ldw	r9,12(r20)
   89540:	a0800015 	stw	r2,0(r20)
   89544:	1a802336 	bltu	r3,r10,895d4 <_fpadd_parts+0x250>
   89548:	a027883a 	mov	r19,r20
   8954c:	9805883a 	mov	r2,r19
   89550:	ddc00717 	ldw	r23,28(sp)
   89554:	dd800617 	ldw	r22,24(sp)
   89558:	dd400517 	ldw	r21,20(sp)
   8955c:	dd000417 	ldw	r20,16(sp)
   89560:	dcc00317 	ldw	r19,12(sp)
   89564:	dc800217 	ldw	r18,8(sp)
   89568:	dc400117 	ldw	r17,4(sp)
   8956c:	dc000017 	ldw	r16,0(sp)
   89570:	dec00804 	addi	sp,sp,32
   89574:	f800283a 	ret
   89578:	20fff41e 	bne	r4,r3,8954c <_fpadd_parts+0x1c8>
   8957c:	31000015 	stw	r4,0(r6)
   89580:	98800117 	ldw	r2,4(r19)
   89584:	30800115 	stw	r2,4(r6)
   89588:	98c00217 	ldw	r3,8(r19)
   8958c:	30c00215 	stw	r3,8(r6)
   89590:	98800317 	ldw	r2,12(r19)
   89594:	30800315 	stw	r2,12(r6)
   89598:	98c00417 	ldw	r3,16(r19)
   8959c:	30c00415 	stw	r3,16(r6)
   895a0:	98800117 	ldw	r2,4(r19)
   895a4:	28c00117 	ldw	r3,4(r5)
   895a8:	3027883a 	mov	r19,r6
   895ac:	10c4703a 	and	r2,r2,r3
   895b0:	30800115 	stw	r2,4(r6)
   895b4:	003fe506 	br	8954c <_fpadd_parts+0x1c8>
   895b8:	1dc02616 	blt	r3,r23,89654 <_fpadd_parts+0x2d0>
   895bc:	0023883a 	mov	r17,zero
   895c0:	182f883a 	mov	r23,r3
   895c4:	0025883a 	mov	r18,zero
   895c8:	003fa806 	br	8946c <_fpadd_parts+0xe8>
   895cc:	a827883a 	mov	r19,r21
   895d0:	003fde06 	br	8954c <_fpadd_parts+0x1c8>
   895d4:	01800044 	movi	r6,1
   895d8:	500497fa 	slli	r2,r10,31
   895dc:	4808d07a 	srli	r4,r9,1
   895e0:	518ad83a 	srl	r5,r10,r6
   895e4:	a2000217 	ldw	r8,8(r20)
   895e8:	1108b03a 	or	r4,r2,r4
   895ec:	0007883a 	mov	r3,zero
   895f0:	4984703a 	and	r2,r9,r6
   895f4:	208cb03a 	or	r6,r4,r2
   895f8:	28ceb03a 	or	r7,r5,r3
   895fc:	42000044 	addi	r8,r8,1
   89600:	a027883a 	mov	r19,r20
   89604:	a1c00415 	stw	r7,16(r20)
   89608:	a2000215 	stw	r8,8(r20)
   8960c:	a1800315 	stw	r6,12(r20)
   89610:	003fce06 	br	8954c <_fpadd_parts+0x1c8>
   89614:	8bc5c83a 	sub	r2,r17,r15
   89618:	8889803a 	cmpltu	r4,r17,r2
   8961c:	9407c83a 	sub	r3,r18,r16
   89620:	1909c83a 	sub	r4,r3,r4
   89624:	100d883a 	mov	r6,r2
   89628:	200f883a 	mov	r7,r4
   8962c:	003f9906 	br	89494 <_fpadd_parts+0x110>
   89630:	7c45883a 	add	r2,r15,r17
   89634:	13c9803a 	cmpltu	r4,r2,r15
   89638:	8487883a 	add	r3,r16,r18
   8963c:	20c9883a 	add	r4,r4,r3
   89640:	a1400115 	stw	r5,4(r20)
   89644:	a5c00215 	stw	r23,8(r20)
   89648:	a0800315 	stw	r2,12(r20)
   8964c:	a1000415 	stw	r4,16(r20)
   89650:	003fb606 	br	8952c <_fpadd_parts+0x1a8>
   89654:	001f883a 	mov	r15,zero
   89658:	0021883a 	mov	r16,zero
   8965c:	003f8306 	br	8946c <_fpadd_parts+0xe8>
   89660:	018dc83a 	sub	r6,zero,r6
   89664:	003f6706 	br	89404 <_fpadd_parts+0x80>
   89668:	00bfff84 	movi	r2,-2
   8966c:	117faf36 	bltu	r2,r5,8952c <_fpadd_parts+0x1a8>
   89670:	003f9806 	br	894d4 <_fpadd_parts+0x150>
   89674:	0005883a 	mov	r2,zero
   89678:	1189c83a 	sub	r4,r2,r6
   8967c:	1105803a 	cmpltu	r2,r2,r4
   89680:	01cbc83a 	sub	r5,zero,r7
   89684:	2885c83a 	sub	r2,r5,r2
   89688:	01800044 	movi	r6,1
   8968c:	a1800115 	stw	r6,4(r20)
   89690:	a5c00215 	stw	r23,8(r20)
   89694:	a1000315 	stw	r4,12(r20)
   89698:	a0800415 	stw	r2,16(r20)
   8969c:	003f8206 	br	894a8 <_fpadd_parts+0x124>
   896a0:	203f7226 	beq	r4,zero,8946c <_fpadd_parts+0xe8>
   896a4:	35bff804 	addi	r22,r6,-32
   896a8:	b9af883a 	add	r23,r23,r6
   896ac:	b0003116 	blt	r22,zero,89774 <_fpadd_parts+0x3f0>
   896b0:	959ad83a 	srl	r13,r18,r22
   896b4:	001d883a 	mov	r14,zero
   896b8:	000f883a 	mov	r7,zero
   896bc:	01000044 	movi	r4,1
   896c0:	0011883a 	mov	r8,zero
   896c4:	b0002516 	blt	r22,zero,8975c <_fpadd_parts+0x3d8>
   896c8:	2594983a 	sll	r10,r4,r22
   896cc:	0013883a 	mov	r9,zero
   896d0:	00bfffc4 	movi	r2,-1
   896d4:	4889883a 	add	r4,r9,r2
   896d8:	508b883a 	add	r5,r10,r2
   896dc:	224d803a 	cmpltu	r6,r4,r9
   896e0:	314b883a 	add	r5,r6,r5
   896e4:	8904703a 	and	r2,r17,r4
   896e8:	9146703a 	and	r3,r18,r5
   896ec:	10c4b03a 	or	r2,r2,r3
   896f0:	10000226 	beq	r2,zero,896fc <_fpadd_parts+0x378>
   896f4:	01c00044 	movi	r7,1
   896f8:	0011883a 	mov	r8,zero
   896fc:	69e2b03a 	or	r17,r13,r7
   89700:	7224b03a 	or	r18,r14,r8
   89704:	003f5906 	br	8946c <_fpadd_parts+0xe8>
   89708:	8407883a 	add	r3,r16,r16
   8970c:	008007c4 	movi	r2,31
   89710:	1185c83a 	sub	r2,r2,r6
   89714:	1886983a 	sll	r3,r3,r2
   89718:	7996d83a 	srl	r11,r15,r6
   8971c:	8198d83a 	srl	r12,r16,r6
   89720:	1ad6b03a 	or	r11,r3,r11
   89724:	003f3e06 	br	89420 <_fpadd_parts+0x9c>
   89728:	2006d07a 	srli	r3,r4,1
   8972c:	008007c4 	movi	r2,31
   89730:	1185c83a 	sub	r2,r2,r6
   89734:	1890d83a 	srl	r8,r3,r2
   89738:	218e983a 	sll	r7,r4,r6
   8973c:	003f3e06 	br	89438 <_fpadd_parts+0xb4>
   89740:	113f821e 	bne	r2,r4,8954c <_fpadd_parts+0x1c8>
   89744:	28c00117 	ldw	r3,4(r5)
   89748:	98800117 	ldw	r2,4(r19)
   8974c:	10ff7f26 	beq	r2,r3,8954c <_fpadd_parts+0x1c8>
   89750:	04c00274 	movhi	r19,9
   89754:	9cde6604 	addi	r19,r19,31128
   89758:	003f7c06 	br	8954c <_fpadd_parts+0x1c8>
   8975c:	2006d07a 	srli	r3,r4,1
   89760:	008007c4 	movi	r2,31
   89764:	1185c83a 	sub	r2,r2,r6
   89768:	1894d83a 	srl	r10,r3,r2
   8976c:	2192983a 	sll	r9,r4,r6
   89770:	003fd706 	br	896d0 <_fpadd_parts+0x34c>
   89774:	9487883a 	add	r3,r18,r18
   89778:	008007c4 	movi	r2,31
   8977c:	1185c83a 	sub	r2,r2,r6
   89780:	1886983a 	sll	r3,r3,r2
   89784:	899ad83a 	srl	r13,r17,r6
   89788:	919cd83a 	srl	r14,r18,r6
   8978c:	1b5ab03a 	or	r13,r3,r13
   89790:	003fc906 	br	896b8 <_fpadd_parts+0x334>

00089794 <__subdf3>:
   89794:	deffea04 	addi	sp,sp,-88
   89798:	dcc01415 	stw	r19,80(sp)
   8979c:	dcc00404 	addi	r19,sp,16
   897a0:	2011883a 	mov	r8,r4
   897a4:	2813883a 	mov	r9,r5
   897a8:	dc401315 	stw	r17,76(sp)
   897ac:	d809883a 	mov	r4,sp
   897b0:	980b883a 	mov	r5,r19
   897b4:	dc400904 	addi	r17,sp,36
   897b8:	dfc01515 	stw	ra,84(sp)
   897bc:	da400115 	stw	r9,4(sp)
   897c0:	d9c00315 	stw	r7,12(sp)
   897c4:	da000015 	stw	r8,0(sp)
   897c8:	d9800215 	stw	r6,8(sp)
   897cc:	008a9900 	call	8a990 <__unpack_d>
   897d0:	d9000204 	addi	r4,sp,8
   897d4:	880b883a 	mov	r5,r17
   897d8:	008a9900 	call	8a990 <__unpack_d>
   897dc:	d8800a17 	ldw	r2,40(sp)
   897e0:	880b883a 	mov	r5,r17
   897e4:	9809883a 	mov	r4,r19
   897e8:	d9800e04 	addi	r6,sp,56
   897ec:	1080005c 	xori	r2,r2,1
   897f0:	d8800a15 	stw	r2,40(sp)
   897f4:	00893840 	call	89384 <_fpadd_parts>
   897f8:	1009883a 	mov	r4,r2
   897fc:	008a67c0 	call	8a67c <__pack_d>
   89800:	dfc01517 	ldw	ra,84(sp)
   89804:	dcc01417 	ldw	r19,80(sp)
   89808:	dc401317 	ldw	r17,76(sp)
   8980c:	dec01604 	addi	sp,sp,88
   89810:	f800283a 	ret

00089814 <__adddf3>:
   89814:	deffea04 	addi	sp,sp,-88
   89818:	dcc01415 	stw	r19,80(sp)
   8981c:	dcc00404 	addi	r19,sp,16
   89820:	2011883a 	mov	r8,r4
   89824:	2813883a 	mov	r9,r5
   89828:	dc401315 	stw	r17,76(sp)
   8982c:	d809883a 	mov	r4,sp
   89830:	980b883a 	mov	r5,r19
   89834:	dc400904 	addi	r17,sp,36
   89838:	dfc01515 	stw	ra,84(sp)
   8983c:	da400115 	stw	r9,4(sp)
   89840:	d9c00315 	stw	r7,12(sp)
   89844:	da000015 	stw	r8,0(sp)
   89848:	d9800215 	stw	r6,8(sp)
   8984c:	008a9900 	call	8a990 <__unpack_d>
   89850:	d9000204 	addi	r4,sp,8
   89854:	880b883a 	mov	r5,r17
   89858:	008a9900 	call	8a990 <__unpack_d>
   8985c:	d9800e04 	addi	r6,sp,56
   89860:	9809883a 	mov	r4,r19
   89864:	880b883a 	mov	r5,r17
   89868:	00893840 	call	89384 <_fpadd_parts>
   8986c:	1009883a 	mov	r4,r2
   89870:	008a67c0 	call	8a67c <__pack_d>
   89874:	dfc01517 	ldw	ra,84(sp)
   89878:	dcc01417 	ldw	r19,80(sp)
   8987c:	dc401317 	ldw	r17,76(sp)
   89880:	dec01604 	addi	sp,sp,88
   89884:	f800283a 	ret

00089888 <__muldf3>:
   89888:	deffe004 	addi	sp,sp,-128
   8988c:	dc401815 	stw	r17,96(sp)
   89890:	dc400404 	addi	r17,sp,16
   89894:	2011883a 	mov	r8,r4
   89898:	2813883a 	mov	r9,r5
   8989c:	dc001715 	stw	r16,92(sp)
   898a0:	d809883a 	mov	r4,sp
   898a4:	880b883a 	mov	r5,r17
   898a8:	dc000904 	addi	r16,sp,36
   898ac:	dfc01f15 	stw	ra,124(sp)
   898b0:	da400115 	stw	r9,4(sp)
   898b4:	d9c00315 	stw	r7,12(sp)
   898b8:	da000015 	stw	r8,0(sp)
   898bc:	d9800215 	stw	r6,8(sp)
   898c0:	ddc01e15 	stw	r23,120(sp)
   898c4:	dd801d15 	stw	r22,116(sp)
   898c8:	dd401c15 	stw	r21,112(sp)
   898cc:	dd001b15 	stw	r20,108(sp)
   898d0:	dcc01a15 	stw	r19,104(sp)
   898d4:	dc801915 	stw	r18,100(sp)
   898d8:	008a9900 	call	8a990 <__unpack_d>
   898dc:	d9000204 	addi	r4,sp,8
   898e0:	800b883a 	mov	r5,r16
   898e4:	008a9900 	call	8a990 <__unpack_d>
   898e8:	d9000417 	ldw	r4,16(sp)
   898ec:	00800044 	movi	r2,1
   898f0:	1100102e 	bgeu	r2,r4,89934 <__muldf3+0xac>
   898f4:	d8c00917 	ldw	r3,36(sp)
   898f8:	10c0062e 	bgeu	r2,r3,89914 <__muldf3+0x8c>
   898fc:	00800104 	movi	r2,4
   89900:	20800a26 	beq	r4,r2,8992c <__muldf3+0xa4>
   89904:	1880cc26 	beq	r3,r2,89c38 <__muldf3+0x3b0>
   89908:	00800084 	movi	r2,2
   8990c:	20800926 	beq	r4,r2,89934 <__muldf3+0xac>
   89910:	1880191e 	bne	r3,r2,89978 <__muldf3+0xf0>
   89914:	d8c00a17 	ldw	r3,40(sp)
   89918:	d8800517 	ldw	r2,20(sp)
   8991c:	8009883a 	mov	r4,r16
   89920:	10c4c03a 	cmpne	r2,r2,r3
   89924:	d8800a15 	stw	r2,40(sp)
   89928:	00000706 	br	89948 <__muldf3+0xc0>
   8992c:	00800084 	movi	r2,2
   89930:	1880c326 	beq	r3,r2,89c40 <__muldf3+0x3b8>
   89934:	d8800517 	ldw	r2,20(sp)
   89938:	d8c00a17 	ldw	r3,40(sp)
   8993c:	8809883a 	mov	r4,r17
   89940:	10c4c03a 	cmpne	r2,r2,r3
   89944:	d8800515 	stw	r2,20(sp)
   89948:	008a67c0 	call	8a67c <__pack_d>
   8994c:	dfc01f17 	ldw	ra,124(sp)
   89950:	ddc01e17 	ldw	r23,120(sp)
   89954:	dd801d17 	ldw	r22,116(sp)
   89958:	dd401c17 	ldw	r21,112(sp)
   8995c:	dd001b17 	ldw	r20,108(sp)
   89960:	dcc01a17 	ldw	r19,104(sp)
   89964:	dc801917 	ldw	r18,100(sp)
   89968:	dc401817 	ldw	r17,96(sp)
   8996c:	dc001717 	ldw	r16,92(sp)
   89970:	dec02004 	addi	sp,sp,128
   89974:	f800283a 	ret
   89978:	dd800717 	ldw	r22,28(sp)
   8997c:	dc800c17 	ldw	r18,48(sp)
   89980:	002b883a 	mov	r21,zero
   89984:	0023883a 	mov	r17,zero
   89988:	a80b883a 	mov	r5,r21
   8998c:	b00d883a 	mov	r6,r22
   89990:	880f883a 	mov	r7,r17
   89994:	ddc00817 	ldw	r23,32(sp)
   89998:	dcc00d17 	ldw	r19,52(sp)
   8999c:	9009883a 	mov	r4,r18
   899a0:	00885940 	call	88594 <__muldi3>
   899a4:	001b883a 	mov	r13,zero
   899a8:	680f883a 	mov	r7,r13
   899ac:	b009883a 	mov	r4,r22
   899b0:	000b883a 	mov	r5,zero
   899b4:	980d883a 	mov	r6,r19
   899b8:	b82d883a 	mov	r22,r23
   899bc:	002f883a 	mov	r23,zero
   899c0:	db401615 	stw	r13,88(sp)
   899c4:	d8801315 	stw	r2,76(sp)
   899c8:	d8c01415 	stw	r3,80(sp)
   899cc:	dcc01515 	stw	r19,84(sp)
   899d0:	00885940 	call	88594 <__muldi3>
   899d4:	b00d883a 	mov	r6,r22
   899d8:	000b883a 	mov	r5,zero
   899dc:	9009883a 	mov	r4,r18
   899e0:	b80f883a 	mov	r7,r23
   899e4:	1021883a 	mov	r16,r2
   899e8:	1823883a 	mov	r17,r3
   899ec:	00885940 	call	88594 <__muldi3>
   899f0:	8085883a 	add	r2,r16,r2
   899f4:	140d803a 	cmpltu	r6,r2,r16
   899f8:	88c7883a 	add	r3,r17,r3
   899fc:	30cd883a 	add	r6,r6,r3
   89a00:	1029883a 	mov	r20,r2
   89a04:	302b883a 	mov	r21,r6
   89a08:	da801317 	ldw	r10,76(sp)
   89a0c:	dac01417 	ldw	r11,80(sp)
   89a10:	db001517 	ldw	r12,84(sp)
   89a14:	db401617 	ldw	r13,88(sp)
   89a18:	3440612e 	bgeu	r6,r17,89ba0 <__muldf3+0x318>
   89a1c:	0009883a 	mov	r4,zero
   89a20:	5105883a 	add	r2,r10,r4
   89a24:	128d803a 	cmpltu	r6,r2,r10
   89a28:	5d07883a 	add	r3,r11,r20
   89a2c:	30cd883a 	add	r6,r6,r3
   89a30:	0021883a 	mov	r16,zero
   89a34:	04400044 	movi	r17,1
   89a38:	1025883a 	mov	r18,r2
   89a3c:	3027883a 	mov	r19,r6
   89a40:	32c06236 	bltu	r6,r11,89bcc <__muldf3+0x344>
   89a44:	59807a26 	beq	r11,r6,89c30 <__muldf3+0x3a8>
   89a48:	680b883a 	mov	r5,r13
   89a4c:	b80f883a 	mov	r7,r23
   89a50:	6009883a 	mov	r4,r12
   89a54:	b00d883a 	mov	r6,r22
   89a58:	00885940 	call	88594 <__muldi3>
   89a5c:	1009883a 	mov	r4,r2
   89a60:	000f883a 	mov	r7,zero
   89a64:	1545883a 	add	r2,r2,r21
   89a68:	1111803a 	cmpltu	r8,r2,r4
   89a6c:	19c7883a 	add	r3,r3,r7
   89a70:	40c7883a 	add	r3,r8,r3
   89a74:	88cb883a 	add	r5,r17,r3
   89a78:	d8c00617 	ldw	r3,24(sp)
   89a7c:	8089883a 	add	r4,r16,r2
   89a80:	d8800b17 	ldw	r2,44(sp)
   89a84:	18c00104 	addi	r3,r3,4
   89a88:	240d803a 	cmpltu	r6,r4,r16
   89a8c:	10c7883a 	add	r3,r2,r3
   89a90:	2013883a 	mov	r9,r4
   89a94:	d8800a17 	ldw	r2,40(sp)
   89a98:	d9000517 	ldw	r4,20(sp)
   89a9c:	314d883a 	add	r6,r6,r5
   89aa0:	3015883a 	mov	r10,r6
   89aa4:	2088c03a 	cmpne	r4,r4,r2
   89aa8:	00880034 	movhi	r2,8192
   89aac:	10bfffc4 	addi	r2,r2,-1
   89ab0:	d9000f15 	stw	r4,60(sp)
   89ab4:	d8c01015 	stw	r3,64(sp)
   89ab8:	1180162e 	bgeu	r2,r6,89b14 <__muldf3+0x28c>
   89abc:	1811883a 	mov	r8,r3
   89ac0:	101f883a 	mov	r15,r2
   89ac4:	980497fa 	slli	r2,r19,31
   89ac8:	9016d07a 	srli	r11,r18,1
   89acc:	500697fa 	slli	r3,r10,31
   89ad0:	480cd07a 	srli	r6,r9,1
   89ad4:	500ed07a 	srli	r7,r10,1
   89ad8:	12d6b03a 	or	r11,r2,r11
   89adc:	00800044 	movi	r2,1
   89ae0:	198cb03a 	or	r6,r3,r6
   89ae4:	4888703a 	and	r4,r9,r2
   89ae8:	9818d07a 	srli	r12,r19,1
   89aec:	001b883a 	mov	r13,zero
   89af0:	03a00034 	movhi	r14,32768
   89af4:	3013883a 	mov	r9,r6
   89af8:	3815883a 	mov	r10,r7
   89afc:	4091883a 	add	r8,r8,r2
   89b00:	20000226 	beq	r4,zero,89b0c <__muldf3+0x284>
   89b04:	5b64b03a 	or	r18,r11,r13
   89b08:	63a6b03a 	or	r19,r12,r14
   89b0c:	7abfed36 	bltu	r15,r10,89ac4 <__muldf3+0x23c>
   89b10:	da001015 	stw	r8,64(sp)
   89b14:	00840034 	movhi	r2,4096
   89b18:	10bfffc4 	addi	r2,r2,-1
   89b1c:	12801436 	bltu	r2,r10,89b70 <__muldf3+0x2e8>
   89b20:	da001017 	ldw	r8,64(sp)
   89b24:	101f883a 	mov	r15,r2
   89b28:	4a45883a 	add	r2,r9,r9
   89b2c:	124d803a 	cmpltu	r6,r2,r9
   89b30:	5287883a 	add	r3,r10,r10
   89b34:	9497883a 	add	r11,r18,r18
   89b38:	5c8f803a 	cmpltu	r7,r11,r18
   89b3c:	9cd9883a 	add	r12,r19,r19
   89b40:	01000044 	movi	r4,1
   89b44:	30cd883a 	add	r6,r6,r3
   89b48:	3b0f883a 	add	r7,r7,r12
   89b4c:	423fffc4 	addi	r8,r8,-1
   89b50:	1013883a 	mov	r9,r2
   89b54:	3015883a 	mov	r10,r6
   89b58:	111ab03a 	or	r13,r2,r4
   89b5c:	98003016 	blt	r19,zero,89c20 <__muldf3+0x398>
   89b60:	5825883a 	mov	r18,r11
   89b64:	3827883a 	mov	r19,r7
   89b68:	7abfef2e 	bgeu	r15,r10,89b28 <__muldf3+0x2a0>
   89b6c:	da001015 	stw	r8,64(sp)
   89b70:	00803fc4 	movi	r2,255
   89b74:	488e703a 	and	r7,r9,r2
   89b78:	00802004 	movi	r2,128
   89b7c:	0007883a 	mov	r3,zero
   89b80:	0011883a 	mov	r8,zero
   89b84:	38801826 	beq	r7,r2,89be8 <__muldf3+0x360>
   89b88:	008000c4 	movi	r2,3
   89b8c:	d9000e04 	addi	r4,sp,56
   89b90:	da801215 	stw	r10,72(sp)
   89b94:	d8800e15 	stw	r2,56(sp)
   89b98:	da401115 	stw	r9,68(sp)
   89b9c:	003f6a06 	br	89948 <__muldf3+0xc0>
   89ba0:	89802126 	beq	r17,r6,89c28 <__muldf3+0x3a0>
   89ba4:	0009883a 	mov	r4,zero
   89ba8:	5105883a 	add	r2,r10,r4
   89bac:	128d803a 	cmpltu	r6,r2,r10
   89bb0:	5d07883a 	add	r3,r11,r20
   89bb4:	30cd883a 	add	r6,r6,r3
   89bb8:	0021883a 	mov	r16,zero
   89bbc:	0023883a 	mov	r17,zero
   89bc0:	1025883a 	mov	r18,r2
   89bc4:	3027883a 	mov	r19,r6
   89bc8:	32ff9e2e 	bgeu	r6,r11,89a44 <__muldf3+0x1bc>
   89bcc:	00800044 	movi	r2,1
   89bd0:	8089883a 	add	r4,r16,r2
   89bd4:	240d803a 	cmpltu	r6,r4,r16
   89bd8:	344d883a 	add	r6,r6,r17
   89bdc:	2021883a 	mov	r16,r4
   89be0:	3023883a 	mov	r17,r6
   89be4:	003f9806 	br	89a48 <__muldf3+0x1c0>
   89be8:	403fe71e 	bne	r8,zero,89b88 <__muldf3+0x300>
   89bec:	01004004 	movi	r4,256
   89bf0:	4904703a 	and	r2,r9,r4
   89bf4:	10c4b03a 	or	r2,r2,r3
   89bf8:	103fe31e 	bne	r2,zero,89b88 <__muldf3+0x300>
   89bfc:	94c4b03a 	or	r2,r18,r19
   89c00:	103fe126 	beq	r2,zero,89b88 <__muldf3+0x300>
   89c04:	49c5883a 	add	r2,r9,r7
   89c08:	1251803a 	cmpltu	r8,r2,r9
   89c0c:	4291883a 	add	r8,r8,r10
   89c10:	013fc004 	movi	r4,-256
   89c14:	1112703a 	and	r9,r2,r4
   89c18:	4015883a 	mov	r10,r8
   89c1c:	003fda06 	br	89b88 <__muldf3+0x300>
   89c20:	6813883a 	mov	r9,r13
   89c24:	003fce06 	br	89b60 <__muldf3+0x2d8>
   89c28:	143f7c36 	bltu	r2,r16,89a1c <__muldf3+0x194>
   89c2c:	003fdd06 	br	89ba4 <__muldf3+0x31c>
   89c30:	12bf852e 	bgeu	r2,r10,89a48 <__muldf3+0x1c0>
   89c34:	003fe506 	br	89bcc <__muldf3+0x344>
   89c38:	00800084 	movi	r2,2
   89c3c:	20bf351e 	bne	r4,r2,89914 <__muldf3+0x8c>
   89c40:	01000274 	movhi	r4,9
   89c44:	211e6604 	addi	r4,r4,31128
   89c48:	003f3f06 	br	89948 <__muldf3+0xc0>

00089c4c <__divdf3>:
   89c4c:	deffed04 	addi	sp,sp,-76
   89c50:	dcc01115 	stw	r19,68(sp)
   89c54:	dcc00404 	addi	r19,sp,16
   89c58:	2011883a 	mov	r8,r4
   89c5c:	2813883a 	mov	r9,r5
   89c60:	dc000e15 	stw	r16,56(sp)
   89c64:	d809883a 	mov	r4,sp
   89c68:	980b883a 	mov	r5,r19
   89c6c:	dc000904 	addi	r16,sp,36
   89c70:	dfc01215 	stw	ra,72(sp)
   89c74:	da400115 	stw	r9,4(sp)
   89c78:	d9c00315 	stw	r7,12(sp)
   89c7c:	da000015 	stw	r8,0(sp)
   89c80:	d9800215 	stw	r6,8(sp)
   89c84:	dc801015 	stw	r18,64(sp)
   89c88:	dc400f15 	stw	r17,60(sp)
   89c8c:	008a9900 	call	8a990 <__unpack_d>
   89c90:	d9000204 	addi	r4,sp,8
   89c94:	800b883a 	mov	r5,r16
   89c98:	008a9900 	call	8a990 <__unpack_d>
   89c9c:	d9000417 	ldw	r4,16(sp)
   89ca0:	00800044 	movi	r2,1
   89ca4:	11000b2e 	bgeu	r2,r4,89cd4 <__divdf3+0x88>
   89ca8:	d9400917 	ldw	r5,36(sp)
   89cac:	1140762e 	bgeu	r2,r5,89e88 <__divdf3+0x23c>
   89cb0:	d8800517 	ldw	r2,20(sp)
   89cb4:	d8c00a17 	ldw	r3,40(sp)
   89cb8:	01800104 	movi	r6,4
   89cbc:	10c4f03a 	xor	r2,r2,r3
   89cc0:	d8800515 	stw	r2,20(sp)
   89cc4:	21800226 	beq	r4,r6,89cd0 <__divdf3+0x84>
   89cc8:	00800084 	movi	r2,2
   89ccc:	2080141e 	bne	r4,r2,89d20 <__divdf3+0xd4>
   89cd0:	29000926 	beq	r5,r4,89cf8 <__divdf3+0xac>
   89cd4:	9809883a 	mov	r4,r19
   89cd8:	008a67c0 	call	8a67c <__pack_d>
   89cdc:	dfc01217 	ldw	ra,72(sp)
   89ce0:	dcc01117 	ldw	r19,68(sp)
   89ce4:	dc801017 	ldw	r18,64(sp)
   89ce8:	dc400f17 	ldw	r17,60(sp)
   89cec:	dc000e17 	ldw	r16,56(sp)
   89cf0:	dec01304 	addi	sp,sp,76
   89cf4:	f800283a 	ret
   89cf8:	01000274 	movhi	r4,9
   89cfc:	211e6604 	addi	r4,r4,31128
   89d00:	008a67c0 	call	8a67c <__pack_d>
   89d04:	dfc01217 	ldw	ra,72(sp)
   89d08:	dcc01117 	ldw	r19,68(sp)
   89d0c:	dc801017 	ldw	r18,64(sp)
   89d10:	dc400f17 	ldw	r17,60(sp)
   89d14:	dc000e17 	ldw	r16,56(sp)
   89d18:	dec01304 	addi	sp,sp,76
   89d1c:	f800283a 	ret
   89d20:	29805b26 	beq	r5,r6,89e90 <__divdf3+0x244>
   89d24:	28802d26 	beq	r5,r2,89ddc <__divdf3+0x190>
   89d28:	d8c00617 	ldw	r3,24(sp)
   89d2c:	d8800b17 	ldw	r2,44(sp)
   89d30:	d9c00817 	ldw	r7,32(sp)
   89d34:	dc400d17 	ldw	r17,52(sp)
   89d38:	188bc83a 	sub	r5,r3,r2
   89d3c:	d9800717 	ldw	r6,28(sp)
   89d40:	dc000c17 	ldw	r16,48(sp)
   89d44:	d9400615 	stw	r5,24(sp)
   89d48:	3c403836 	bltu	r7,r17,89e2c <__divdf3+0x1e0>
   89d4c:	89c03626 	beq	r17,r7,89e28 <__divdf3+0x1dc>
   89d50:	0015883a 	mov	r10,zero
   89d54:	001d883a 	mov	r14,zero
   89d58:	02c40034 	movhi	r11,4096
   89d5c:	001f883a 	mov	r15,zero
   89d60:	003f883a 	mov	ra,zero
   89d64:	04800f44 	movi	r18,61
   89d68:	00000f06 	br	89da8 <__divdf3+0x15c>
   89d6c:	601d883a 	mov	r14,r12
   89d70:	681f883a 	mov	r15,r13
   89d74:	400d883a 	mov	r6,r8
   89d78:	100f883a 	mov	r7,r2
   89d7c:	3191883a 	add	r8,r6,r6
   89d80:	5808d07a 	srli	r4,r11,1
   89d84:	4185803a 	cmpltu	r2,r8,r6
   89d88:	39d3883a 	add	r9,r7,r7
   89d8c:	28c6b03a 	or	r3,r5,r3
   89d90:	1245883a 	add	r2,r2,r9
   89d94:	1815883a 	mov	r10,r3
   89d98:	2017883a 	mov	r11,r4
   89d9c:	400d883a 	mov	r6,r8
   89da0:	100f883a 	mov	r7,r2
   89da4:	fc801726 	beq	ra,r18,89e04 <__divdf3+0x1b8>
   89da8:	580a97fa 	slli	r5,r11,31
   89dac:	5006d07a 	srli	r3,r10,1
   89db0:	ffc00044 	addi	ra,ra,1
   89db4:	3c7ff136 	bltu	r7,r17,89d7c <__divdf3+0x130>
   89db8:	3411c83a 	sub	r8,r6,r16
   89dbc:	3205803a 	cmpltu	r2,r6,r8
   89dc0:	3c53c83a 	sub	r9,r7,r17
   89dc4:	7298b03a 	or	r12,r14,r10
   89dc8:	7adab03a 	or	r13,r15,r11
   89dcc:	4885c83a 	sub	r2,r9,r2
   89dd0:	89ffe61e 	bne	r17,r7,89d6c <__divdf3+0x120>
   89dd4:	343fe936 	bltu	r6,r16,89d7c <__divdf3+0x130>
   89dd8:	003fe406 	br	89d6c <__divdf3+0x120>
   89ddc:	9809883a 	mov	r4,r19
   89de0:	d9800415 	stw	r6,16(sp)
   89de4:	008a67c0 	call	8a67c <__pack_d>
   89de8:	dfc01217 	ldw	ra,72(sp)
   89dec:	dcc01117 	ldw	r19,68(sp)
   89df0:	dc801017 	ldw	r18,64(sp)
   89df4:	dc400f17 	ldw	r17,60(sp)
   89df8:	dc000e17 	ldw	r16,56(sp)
   89dfc:	dec01304 	addi	sp,sp,76
   89e00:	f800283a 	ret
   89e04:	00803fc4 	movi	r2,255
   89e08:	7090703a 	and	r8,r14,r2
   89e0c:	00802004 	movi	r2,128
   89e10:	0007883a 	mov	r3,zero
   89e14:	0013883a 	mov	r9,zero
   89e18:	40800d26 	beq	r8,r2,89e50 <__divdf3+0x204>
   89e1c:	dbc00815 	stw	r15,32(sp)
   89e20:	db800715 	stw	r14,28(sp)
   89e24:	003fab06 	br	89cd4 <__divdf3+0x88>
   89e28:	343fc92e 	bgeu	r6,r16,89d50 <__divdf3+0x104>
   89e2c:	3185883a 	add	r2,r6,r6
   89e30:	1189803a 	cmpltu	r4,r2,r6
   89e34:	39c7883a 	add	r3,r7,r7
   89e38:	20c9883a 	add	r4,r4,r3
   89e3c:	297fffc4 	addi	r5,r5,-1
   89e40:	100d883a 	mov	r6,r2
   89e44:	200f883a 	mov	r7,r4
   89e48:	d9400615 	stw	r5,24(sp)
   89e4c:	003fc006 	br	89d50 <__divdf3+0x104>
   89e50:	483ff21e 	bne	r9,zero,89e1c <__divdf3+0x1d0>
   89e54:	01004004 	movi	r4,256
   89e58:	7104703a 	and	r2,r14,r4
   89e5c:	10c4b03a 	or	r2,r2,r3
   89e60:	103fee1e 	bne	r2,zero,89e1c <__divdf3+0x1d0>
   89e64:	31c4b03a 	or	r2,r6,r7
   89e68:	103fec26 	beq	r2,zero,89e1c <__divdf3+0x1d0>
   89e6c:	7205883a 	add	r2,r14,r8
   89e70:	1391803a 	cmpltu	r8,r2,r14
   89e74:	43d1883a 	add	r8,r8,r15
   89e78:	013fc004 	movi	r4,-256
   89e7c:	111c703a 	and	r14,r2,r4
   89e80:	401f883a 	mov	r15,r8
   89e84:	003fe506 	br	89e1c <__divdf3+0x1d0>
   89e88:	8009883a 	mov	r4,r16
   89e8c:	003f9206 	br	89cd8 <__divdf3+0x8c>
   89e90:	9809883a 	mov	r4,r19
   89e94:	d8000715 	stw	zero,28(sp)
   89e98:	d8000815 	stw	zero,32(sp)
   89e9c:	d8000615 	stw	zero,24(sp)
   89ea0:	003f8d06 	br	89cd8 <__divdf3+0x8c>

00089ea4 <__eqdf2>:
   89ea4:	deffef04 	addi	sp,sp,-68
   89ea8:	dc400f15 	stw	r17,60(sp)
   89eac:	dc400404 	addi	r17,sp,16
   89eb0:	2005883a 	mov	r2,r4
   89eb4:	2807883a 	mov	r3,r5
   89eb8:	dc000e15 	stw	r16,56(sp)
   89ebc:	d809883a 	mov	r4,sp
   89ec0:	880b883a 	mov	r5,r17
   89ec4:	dc000904 	addi	r16,sp,36
   89ec8:	d8c00115 	stw	r3,4(sp)
   89ecc:	d8800015 	stw	r2,0(sp)
   89ed0:	d9800215 	stw	r6,8(sp)
   89ed4:	dfc01015 	stw	ra,64(sp)
   89ed8:	d9c00315 	stw	r7,12(sp)
   89edc:	008a9900 	call	8a990 <__unpack_d>
   89ee0:	d9000204 	addi	r4,sp,8
   89ee4:	800b883a 	mov	r5,r16
   89ee8:	008a9900 	call	8a990 <__unpack_d>
   89eec:	d8800417 	ldw	r2,16(sp)
   89ef0:	00c00044 	movi	r3,1
   89ef4:	180d883a 	mov	r6,r3
   89ef8:	1880062e 	bgeu	r3,r2,89f14 <__eqdf2+0x70>
   89efc:	d8800917 	ldw	r2,36(sp)
   89f00:	8809883a 	mov	r4,r17
   89f04:	800b883a 	mov	r5,r16
   89f08:	1880022e 	bgeu	r3,r2,89f14 <__eqdf2+0x70>
   89f0c:	008aac80 	call	8aac8 <__fpcmp_parts_d>
   89f10:	100d883a 	mov	r6,r2
   89f14:	3005883a 	mov	r2,r6
   89f18:	dfc01017 	ldw	ra,64(sp)
   89f1c:	dc400f17 	ldw	r17,60(sp)
   89f20:	dc000e17 	ldw	r16,56(sp)
   89f24:	dec01104 	addi	sp,sp,68
   89f28:	f800283a 	ret

00089f2c <__nedf2>:
   89f2c:	deffef04 	addi	sp,sp,-68
   89f30:	dc400f15 	stw	r17,60(sp)
   89f34:	dc400404 	addi	r17,sp,16
   89f38:	2005883a 	mov	r2,r4
   89f3c:	2807883a 	mov	r3,r5
   89f40:	dc000e15 	stw	r16,56(sp)
   89f44:	d809883a 	mov	r4,sp
   89f48:	880b883a 	mov	r5,r17
   89f4c:	dc000904 	addi	r16,sp,36
   89f50:	d8c00115 	stw	r3,4(sp)
   89f54:	d8800015 	stw	r2,0(sp)
   89f58:	d9800215 	stw	r6,8(sp)
   89f5c:	dfc01015 	stw	ra,64(sp)
   89f60:	d9c00315 	stw	r7,12(sp)
   89f64:	008a9900 	call	8a990 <__unpack_d>
   89f68:	d9000204 	addi	r4,sp,8
   89f6c:	800b883a 	mov	r5,r16
   89f70:	008a9900 	call	8a990 <__unpack_d>
   89f74:	d8800417 	ldw	r2,16(sp)
   89f78:	00c00044 	movi	r3,1
   89f7c:	180d883a 	mov	r6,r3
   89f80:	1880062e 	bgeu	r3,r2,89f9c <__nedf2+0x70>
   89f84:	d8800917 	ldw	r2,36(sp)
   89f88:	8809883a 	mov	r4,r17
   89f8c:	800b883a 	mov	r5,r16
   89f90:	1880022e 	bgeu	r3,r2,89f9c <__nedf2+0x70>
   89f94:	008aac80 	call	8aac8 <__fpcmp_parts_d>
   89f98:	100d883a 	mov	r6,r2
   89f9c:	3005883a 	mov	r2,r6
   89fa0:	dfc01017 	ldw	ra,64(sp)
   89fa4:	dc400f17 	ldw	r17,60(sp)
   89fa8:	dc000e17 	ldw	r16,56(sp)
   89fac:	dec01104 	addi	sp,sp,68
   89fb0:	f800283a 	ret

00089fb4 <__gtdf2>:
   89fb4:	deffef04 	addi	sp,sp,-68
   89fb8:	dc400f15 	stw	r17,60(sp)
   89fbc:	dc400404 	addi	r17,sp,16
   89fc0:	2005883a 	mov	r2,r4
   89fc4:	2807883a 	mov	r3,r5
   89fc8:	dc000e15 	stw	r16,56(sp)
   89fcc:	d809883a 	mov	r4,sp
   89fd0:	880b883a 	mov	r5,r17
   89fd4:	dc000904 	addi	r16,sp,36
   89fd8:	d8c00115 	stw	r3,4(sp)
   89fdc:	d8800015 	stw	r2,0(sp)
   89fe0:	d9800215 	stw	r6,8(sp)
   89fe4:	dfc01015 	stw	ra,64(sp)
   89fe8:	d9c00315 	stw	r7,12(sp)
   89fec:	008a9900 	call	8a990 <__unpack_d>
   89ff0:	d9000204 	addi	r4,sp,8
   89ff4:	800b883a 	mov	r5,r16
   89ff8:	008a9900 	call	8a990 <__unpack_d>
   89ffc:	d8800417 	ldw	r2,16(sp)
   8a000:	00c00044 	movi	r3,1
   8a004:	01bfffc4 	movi	r6,-1
   8a008:	1880062e 	bgeu	r3,r2,8a024 <__gtdf2+0x70>
   8a00c:	d8800917 	ldw	r2,36(sp)
   8a010:	8809883a 	mov	r4,r17
   8a014:	800b883a 	mov	r5,r16
   8a018:	1880022e 	bgeu	r3,r2,8a024 <__gtdf2+0x70>
   8a01c:	008aac80 	call	8aac8 <__fpcmp_parts_d>
   8a020:	100d883a 	mov	r6,r2
   8a024:	3005883a 	mov	r2,r6
   8a028:	dfc01017 	ldw	ra,64(sp)
   8a02c:	dc400f17 	ldw	r17,60(sp)
   8a030:	dc000e17 	ldw	r16,56(sp)
   8a034:	dec01104 	addi	sp,sp,68
   8a038:	f800283a 	ret

0008a03c <__gedf2>:
   8a03c:	deffef04 	addi	sp,sp,-68
   8a040:	dc400f15 	stw	r17,60(sp)
   8a044:	dc400404 	addi	r17,sp,16
   8a048:	2005883a 	mov	r2,r4
   8a04c:	2807883a 	mov	r3,r5
   8a050:	dc000e15 	stw	r16,56(sp)
   8a054:	d809883a 	mov	r4,sp
   8a058:	880b883a 	mov	r5,r17
   8a05c:	dc000904 	addi	r16,sp,36
   8a060:	d8c00115 	stw	r3,4(sp)
   8a064:	d8800015 	stw	r2,0(sp)
   8a068:	d9800215 	stw	r6,8(sp)
   8a06c:	dfc01015 	stw	ra,64(sp)
   8a070:	d9c00315 	stw	r7,12(sp)
   8a074:	008a9900 	call	8a990 <__unpack_d>
   8a078:	d9000204 	addi	r4,sp,8
   8a07c:	800b883a 	mov	r5,r16
   8a080:	008a9900 	call	8a990 <__unpack_d>
   8a084:	d8800417 	ldw	r2,16(sp)
   8a088:	00c00044 	movi	r3,1
   8a08c:	01bfffc4 	movi	r6,-1
   8a090:	1880062e 	bgeu	r3,r2,8a0ac <__gedf2+0x70>
   8a094:	d8800917 	ldw	r2,36(sp)
   8a098:	8809883a 	mov	r4,r17
   8a09c:	800b883a 	mov	r5,r16
   8a0a0:	1880022e 	bgeu	r3,r2,8a0ac <__gedf2+0x70>
   8a0a4:	008aac80 	call	8aac8 <__fpcmp_parts_d>
   8a0a8:	100d883a 	mov	r6,r2
   8a0ac:	3005883a 	mov	r2,r6
   8a0b0:	dfc01017 	ldw	ra,64(sp)
   8a0b4:	dc400f17 	ldw	r17,60(sp)
   8a0b8:	dc000e17 	ldw	r16,56(sp)
   8a0bc:	dec01104 	addi	sp,sp,68
   8a0c0:	f800283a 	ret

0008a0c4 <__ltdf2>:
   8a0c4:	deffef04 	addi	sp,sp,-68
   8a0c8:	dc400f15 	stw	r17,60(sp)
   8a0cc:	dc400404 	addi	r17,sp,16
   8a0d0:	2005883a 	mov	r2,r4
   8a0d4:	2807883a 	mov	r3,r5
   8a0d8:	dc000e15 	stw	r16,56(sp)
   8a0dc:	d809883a 	mov	r4,sp
   8a0e0:	880b883a 	mov	r5,r17
   8a0e4:	dc000904 	addi	r16,sp,36
   8a0e8:	d8c00115 	stw	r3,4(sp)
   8a0ec:	d8800015 	stw	r2,0(sp)
   8a0f0:	d9800215 	stw	r6,8(sp)
   8a0f4:	dfc01015 	stw	ra,64(sp)
   8a0f8:	d9c00315 	stw	r7,12(sp)
   8a0fc:	008a9900 	call	8a990 <__unpack_d>
   8a100:	d9000204 	addi	r4,sp,8
   8a104:	800b883a 	mov	r5,r16
   8a108:	008a9900 	call	8a990 <__unpack_d>
   8a10c:	d8800417 	ldw	r2,16(sp)
   8a110:	00c00044 	movi	r3,1
   8a114:	180d883a 	mov	r6,r3
   8a118:	1880062e 	bgeu	r3,r2,8a134 <__ltdf2+0x70>
   8a11c:	d8800917 	ldw	r2,36(sp)
   8a120:	8809883a 	mov	r4,r17
   8a124:	800b883a 	mov	r5,r16
   8a128:	1880022e 	bgeu	r3,r2,8a134 <__ltdf2+0x70>
   8a12c:	008aac80 	call	8aac8 <__fpcmp_parts_d>
   8a130:	100d883a 	mov	r6,r2
   8a134:	3005883a 	mov	r2,r6
   8a138:	dfc01017 	ldw	ra,64(sp)
   8a13c:	dc400f17 	ldw	r17,60(sp)
   8a140:	dc000e17 	ldw	r16,56(sp)
   8a144:	dec01104 	addi	sp,sp,68
   8a148:	f800283a 	ret

0008a14c <__floatsidf>:
   8a14c:	2006d7fa 	srli	r3,r4,31
   8a150:	defff604 	addi	sp,sp,-40
   8a154:	008000c4 	movi	r2,3
   8a158:	dfc00915 	stw	ra,36(sp)
   8a15c:	dcc00815 	stw	r19,32(sp)
   8a160:	dc800715 	stw	r18,28(sp)
   8a164:	dc400615 	stw	r17,24(sp)
   8a168:	dc000515 	stw	r16,20(sp)
   8a16c:	d8800015 	stw	r2,0(sp)
   8a170:	d8c00115 	stw	r3,4(sp)
   8a174:	20000f1e 	bne	r4,zero,8a1b4 <__floatsidf+0x68>
   8a178:	00800084 	movi	r2,2
   8a17c:	d8800015 	stw	r2,0(sp)
   8a180:	d809883a 	mov	r4,sp
   8a184:	008a67c0 	call	8a67c <__pack_d>
   8a188:	1009883a 	mov	r4,r2
   8a18c:	180b883a 	mov	r5,r3
   8a190:	2005883a 	mov	r2,r4
   8a194:	2807883a 	mov	r3,r5
   8a198:	dfc00917 	ldw	ra,36(sp)
   8a19c:	dcc00817 	ldw	r19,32(sp)
   8a1a0:	dc800717 	ldw	r18,28(sp)
   8a1a4:	dc400617 	ldw	r17,24(sp)
   8a1a8:	dc000517 	ldw	r16,20(sp)
   8a1ac:	dec00a04 	addi	sp,sp,40
   8a1b0:	f800283a 	ret
   8a1b4:	00800f04 	movi	r2,60
   8a1b8:	1807003a 	cmpeq	r3,r3,zero
   8a1bc:	d8800215 	stw	r2,8(sp)
   8a1c0:	18001126 	beq	r3,zero,8a208 <__floatsidf+0xbc>
   8a1c4:	0027883a 	mov	r19,zero
   8a1c8:	2025883a 	mov	r18,r4
   8a1cc:	d9000315 	stw	r4,12(sp)
   8a1d0:	dcc00415 	stw	r19,16(sp)
   8a1d4:	008a5fc0 	call	8a5fc <__clzsi2>
   8a1d8:	11000744 	addi	r4,r2,29
   8a1dc:	013fe80e 	bge	zero,r4,8a180 <__floatsidf+0x34>
   8a1e0:	10bfff44 	addi	r2,r2,-3
   8a1e4:	10000c16 	blt	r2,zero,8a218 <__floatsidf+0xcc>
   8a1e8:	90a2983a 	sll	r17,r18,r2
   8a1ec:	0021883a 	mov	r16,zero
   8a1f0:	d8800217 	ldw	r2,8(sp)
   8a1f4:	dc400415 	stw	r17,16(sp)
   8a1f8:	dc000315 	stw	r16,12(sp)
   8a1fc:	1105c83a 	sub	r2,r2,r4
   8a200:	d8800215 	stw	r2,8(sp)
   8a204:	003fde06 	br	8a180 <__floatsidf+0x34>
   8a208:	00a00034 	movhi	r2,32768
   8a20c:	20800a26 	beq	r4,r2,8a238 <__floatsidf+0xec>
   8a210:	0109c83a 	sub	r4,zero,r4
   8a214:	003feb06 	br	8a1c4 <__floatsidf+0x78>
   8a218:	9006d07a 	srli	r3,r18,1
   8a21c:	008007c4 	movi	r2,31
   8a220:	1105c83a 	sub	r2,r2,r4
   8a224:	1886d83a 	srl	r3,r3,r2
   8a228:	9922983a 	sll	r17,r19,r4
   8a22c:	9120983a 	sll	r16,r18,r4
   8a230:	1c62b03a 	or	r17,r3,r17
   8a234:	003fee06 	br	8a1f0 <__floatsidf+0xa4>
   8a238:	0009883a 	mov	r4,zero
   8a23c:	01707834 	movhi	r5,49632
   8a240:	003fd306 	br	8a190 <__floatsidf+0x44>

0008a244 <__fixdfsi>:
   8a244:	defff804 	addi	sp,sp,-32
   8a248:	2005883a 	mov	r2,r4
   8a24c:	2807883a 	mov	r3,r5
   8a250:	d809883a 	mov	r4,sp
   8a254:	d9400204 	addi	r5,sp,8
   8a258:	d8c00115 	stw	r3,4(sp)
   8a25c:	d8800015 	stw	r2,0(sp)
   8a260:	dfc00715 	stw	ra,28(sp)
   8a264:	008a9900 	call	8a990 <__unpack_d>
   8a268:	d8c00217 	ldw	r3,8(sp)
   8a26c:	00800084 	movi	r2,2
   8a270:	1880051e 	bne	r3,r2,8a288 <__fixdfsi+0x44>
   8a274:	0007883a 	mov	r3,zero
   8a278:	1805883a 	mov	r2,r3
   8a27c:	dfc00717 	ldw	ra,28(sp)
   8a280:	dec00804 	addi	sp,sp,32
   8a284:	f800283a 	ret
   8a288:	00800044 	movi	r2,1
   8a28c:	10fff92e 	bgeu	r2,r3,8a274 <__fixdfsi+0x30>
   8a290:	00800104 	movi	r2,4
   8a294:	18800426 	beq	r3,r2,8a2a8 <__fixdfsi+0x64>
   8a298:	d8c00417 	ldw	r3,16(sp)
   8a29c:	183ff516 	blt	r3,zero,8a274 <__fixdfsi+0x30>
   8a2a0:	00800784 	movi	r2,30
   8a2a4:	10c0080e 	bge	r2,r3,8a2c8 <__fixdfsi+0x84>
   8a2a8:	d8800317 	ldw	r2,12(sp)
   8a2ac:	1000121e 	bne	r2,zero,8a2f8 <__fixdfsi+0xb4>
   8a2b0:	00e00034 	movhi	r3,32768
   8a2b4:	18ffffc4 	addi	r3,r3,-1
   8a2b8:	1805883a 	mov	r2,r3
   8a2bc:	dfc00717 	ldw	ra,28(sp)
   8a2c0:	dec00804 	addi	sp,sp,32
   8a2c4:	f800283a 	ret
   8a2c8:	00800f04 	movi	r2,60
   8a2cc:	10d1c83a 	sub	r8,r2,r3
   8a2d0:	40bff804 	addi	r2,r8,-32
   8a2d4:	d9800517 	ldw	r6,20(sp)
   8a2d8:	d9c00617 	ldw	r7,24(sp)
   8a2dc:	10000816 	blt	r2,zero,8a300 <__fixdfsi+0xbc>
   8a2e0:	3888d83a 	srl	r4,r7,r2
   8a2e4:	d8800317 	ldw	r2,12(sp)
   8a2e8:	2007883a 	mov	r3,r4
   8a2ec:	103fe226 	beq	r2,zero,8a278 <__fixdfsi+0x34>
   8a2f0:	0107c83a 	sub	r3,zero,r4
   8a2f4:	003fe006 	br	8a278 <__fixdfsi+0x34>
   8a2f8:	00e00034 	movhi	r3,32768
   8a2fc:	003fde06 	br	8a278 <__fixdfsi+0x34>
   8a300:	39c7883a 	add	r3,r7,r7
   8a304:	008007c4 	movi	r2,31
   8a308:	1205c83a 	sub	r2,r2,r8
   8a30c:	1886983a 	sll	r3,r3,r2
   8a310:	3208d83a 	srl	r4,r6,r8
   8a314:	1908b03a 	or	r4,r3,r4
   8a318:	003ff206 	br	8a2e4 <__fixdfsi+0xa0>

0008a31c <__floatunsidf>:
   8a31c:	defff204 	addi	sp,sp,-56
   8a320:	dfc00d15 	stw	ra,52(sp)
   8a324:	ddc00c15 	stw	r23,48(sp)
   8a328:	dd800b15 	stw	r22,44(sp)
   8a32c:	dd400a15 	stw	r21,40(sp)
   8a330:	dd000915 	stw	r20,36(sp)
   8a334:	dcc00815 	stw	r19,32(sp)
   8a338:	dc800715 	stw	r18,28(sp)
   8a33c:	dc400615 	stw	r17,24(sp)
   8a340:	dc000515 	stw	r16,20(sp)
   8a344:	d8000115 	stw	zero,4(sp)
   8a348:	20000f1e 	bne	r4,zero,8a388 <__floatunsidf+0x6c>
   8a34c:	00800084 	movi	r2,2
   8a350:	d8800015 	stw	r2,0(sp)
   8a354:	d809883a 	mov	r4,sp
   8a358:	008a67c0 	call	8a67c <__pack_d>
   8a35c:	dfc00d17 	ldw	ra,52(sp)
   8a360:	ddc00c17 	ldw	r23,48(sp)
   8a364:	dd800b17 	ldw	r22,44(sp)
   8a368:	dd400a17 	ldw	r21,40(sp)
   8a36c:	dd000917 	ldw	r20,36(sp)
   8a370:	dcc00817 	ldw	r19,32(sp)
   8a374:	dc800717 	ldw	r18,28(sp)
   8a378:	dc400617 	ldw	r17,24(sp)
   8a37c:	dc000517 	ldw	r16,20(sp)
   8a380:	dec00e04 	addi	sp,sp,56
   8a384:	f800283a 	ret
   8a388:	008000c4 	movi	r2,3
   8a38c:	00c00f04 	movi	r3,60
   8a390:	002f883a 	mov	r23,zero
   8a394:	202d883a 	mov	r22,r4
   8a398:	d8800015 	stw	r2,0(sp)
   8a39c:	d8c00215 	stw	r3,8(sp)
   8a3a0:	d9000315 	stw	r4,12(sp)
   8a3a4:	ddc00415 	stw	r23,16(sp)
   8a3a8:	008a5fc0 	call	8a5fc <__clzsi2>
   8a3ac:	12400744 	addi	r9,r2,29
   8a3b0:	48000b16 	blt	r9,zero,8a3e0 <__floatunsidf+0xc4>
   8a3b4:	483fe726 	beq	r9,zero,8a354 <__floatunsidf+0x38>
   8a3b8:	10bfff44 	addi	r2,r2,-3
   8a3bc:	10002e16 	blt	r2,zero,8a478 <__floatunsidf+0x15c>
   8a3c0:	b0a2983a 	sll	r17,r22,r2
   8a3c4:	0021883a 	mov	r16,zero
   8a3c8:	d8800217 	ldw	r2,8(sp)
   8a3cc:	dc400415 	stw	r17,16(sp)
   8a3d0:	dc000315 	stw	r16,12(sp)
   8a3d4:	1245c83a 	sub	r2,r2,r9
   8a3d8:	d8800215 	stw	r2,8(sp)
   8a3dc:	003fdd06 	br	8a354 <__floatunsidf+0x38>
   8a3e0:	0255c83a 	sub	r10,zero,r9
   8a3e4:	51bff804 	addi	r6,r10,-32
   8a3e8:	30001b16 	blt	r6,zero,8a458 <__floatunsidf+0x13c>
   8a3ec:	b9a8d83a 	srl	r20,r23,r6
   8a3f0:	002b883a 	mov	r21,zero
   8a3f4:	000f883a 	mov	r7,zero
   8a3f8:	01000044 	movi	r4,1
   8a3fc:	0011883a 	mov	r8,zero
   8a400:	30002516 	blt	r6,zero,8a498 <__floatunsidf+0x17c>
   8a404:	21a6983a 	sll	r19,r4,r6
   8a408:	0025883a 	mov	r18,zero
   8a40c:	00bfffc4 	movi	r2,-1
   8a410:	9089883a 	add	r4,r18,r2
   8a414:	988b883a 	add	r5,r19,r2
   8a418:	248d803a 	cmpltu	r6,r4,r18
   8a41c:	314b883a 	add	r5,r6,r5
   8a420:	b104703a 	and	r2,r22,r4
   8a424:	b946703a 	and	r3,r23,r5
   8a428:	10c4b03a 	or	r2,r2,r3
   8a42c:	10000226 	beq	r2,zero,8a438 <__floatunsidf+0x11c>
   8a430:	01c00044 	movi	r7,1
   8a434:	0011883a 	mov	r8,zero
   8a438:	d9000217 	ldw	r4,8(sp)
   8a43c:	a1c4b03a 	or	r2,r20,r7
   8a440:	aa06b03a 	or	r3,r21,r8
   8a444:	2249c83a 	sub	r4,r4,r9
   8a448:	d8c00415 	stw	r3,16(sp)
   8a44c:	d9000215 	stw	r4,8(sp)
   8a450:	d8800315 	stw	r2,12(sp)
   8a454:	003fbf06 	br	8a354 <__floatunsidf+0x38>
   8a458:	bdc7883a 	add	r3,r23,r23
   8a45c:	008007c4 	movi	r2,31
   8a460:	1285c83a 	sub	r2,r2,r10
   8a464:	1886983a 	sll	r3,r3,r2
   8a468:	b2a8d83a 	srl	r20,r22,r10
   8a46c:	baaad83a 	srl	r21,r23,r10
   8a470:	1d28b03a 	or	r20,r3,r20
   8a474:	003fdf06 	br	8a3f4 <__floatunsidf+0xd8>
   8a478:	b006d07a 	srli	r3,r22,1
   8a47c:	008007c4 	movi	r2,31
   8a480:	1245c83a 	sub	r2,r2,r9
   8a484:	1886d83a 	srl	r3,r3,r2
   8a488:	ba62983a 	sll	r17,r23,r9
   8a48c:	b260983a 	sll	r16,r22,r9
   8a490:	1c62b03a 	or	r17,r3,r17
   8a494:	003fcc06 	br	8a3c8 <__floatunsidf+0xac>
   8a498:	2006d07a 	srli	r3,r4,1
   8a49c:	008007c4 	movi	r2,31
   8a4a0:	1285c83a 	sub	r2,r2,r10
   8a4a4:	18a6d83a 	srl	r19,r3,r2
   8a4a8:	22a4983a 	sll	r18,r4,r10
   8a4ac:	003fd706 	br	8a40c <__floatunsidf+0xf0>

0008a4b0 <udivmodsi4>:
   8a4b0:	29001b2e 	bgeu	r5,r4,8a520 <udivmodsi4+0x70>
   8a4b4:	28001a16 	blt	r5,zero,8a520 <udivmodsi4+0x70>
   8a4b8:	00800044 	movi	r2,1
   8a4bc:	0007883a 	mov	r3,zero
   8a4c0:	01c007c4 	movi	r7,31
   8a4c4:	00000306 	br	8a4d4 <udivmodsi4+0x24>
   8a4c8:	19c01326 	beq	r3,r7,8a518 <udivmodsi4+0x68>
   8a4cc:	18c00044 	addi	r3,r3,1
   8a4d0:	28000416 	blt	r5,zero,8a4e4 <udivmodsi4+0x34>
   8a4d4:	294b883a 	add	r5,r5,r5
   8a4d8:	1085883a 	add	r2,r2,r2
   8a4dc:	293ffa36 	bltu	r5,r4,8a4c8 <udivmodsi4+0x18>
   8a4e0:	10000d26 	beq	r2,zero,8a518 <udivmodsi4+0x68>
   8a4e4:	0007883a 	mov	r3,zero
   8a4e8:	21400236 	bltu	r4,r5,8a4f4 <udivmodsi4+0x44>
   8a4ec:	2149c83a 	sub	r4,r4,r5
   8a4f0:	1886b03a 	or	r3,r3,r2
   8a4f4:	1004d07a 	srli	r2,r2,1
   8a4f8:	280ad07a 	srli	r5,r5,1
   8a4fc:	103ffa1e 	bne	r2,zero,8a4e8 <udivmodsi4+0x38>
   8a500:	30000226 	beq	r6,zero,8a50c <udivmodsi4+0x5c>
   8a504:	2005883a 	mov	r2,r4
   8a508:	f800283a 	ret
   8a50c:	1809883a 	mov	r4,r3
   8a510:	2005883a 	mov	r2,r4
   8a514:	f800283a 	ret
   8a518:	0007883a 	mov	r3,zero
   8a51c:	003ff806 	br	8a500 <udivmodsi4+0x50>
   8a520:	00800044 	movi	r2,1
   8a524:	0007883a 	mov	r3,zero
   8a528:	003fef06 	br	8a4e8 <udivmodsi4+0x38>

0008a52c <__divsi3>:
   8a52c:	defffe04 	addi	sp,sp,-8
   8a530:	dc000015 	stw	r16,0(sp)
   8a534:	dfc00115 	stw	ra,4(sp)
   8a538:	0021883a 	mov	r16,zero
   8a53c:	20000c16 	blt	r4,zero,8a570 <__divsi3+0x44>
   8a540:	000d883a 	mov	r6,zero
   8a544:	28000e16 	blt	r5,zero,8a580 <__divsi3+0x54>
   8a548:	008a4b00 	call	8a4b0 <udivmodsi4>
   8a54c:	1007883a 	mov	r3,r2
   8a550:	8005003a 	cmpeq	r2,r16,zero
   8a554:	1000011e 	bne	r2,zero,8a55c <__divsi3+0x30>
   8a558:	00c7c83a 	sub	r3,zero,r3
   8a55c:	1805883a 	mov	r2,r3
   8a560:	dfc00117 	ldw	ra,4(sp)
   8a564:	dc000017 	ldw	r16,0(sp)
   8a568:	dec00204 	addi	sp,sp,8
   8a56c:	f800283a 	ret
   8a570:	0109c83a 	sub	r4,zero,r4
   8a574:	04000044 	movi	r16,1
   8a578:	000d883a 	mov	r6,zero
   8a57c:	283ff20e 	bge	r5,zero,8a548 <__divsi3+0x1c>
   8a580:	014bc83a 	sub	r5,zero,r5
   8a584:	8021003a 	cmpeq	r16,r16,zero
   8a588:	003fef06 	br	8a548 <__divsi3+0x1c>

0008a58c <__modsi3>:
   8a58c:	deffff04 	addi	sp,sp,-4
   8a590:	dfc00015 	stw	ra,0(sp)
   8a594:	01800044 	movi	r6,1
   8a598:	2807883a 	mov	r3,r5
   8a59c:	20000416 	blt	r4,zero,8a5b0 <__modsi3+0x24>
   8a5a0:	28000c16 	blt	r5,zero,8a5d4 <__modsi3+0x48>
   8a5a4:	dfc00017 	ldw	ra,0(sp)
   8a5a8:	dec00104 	addi	sp,sp,4
   8a5ac:	008a4b01 	jmpi	8a4b0 <udivmodsi4>
   8a5b0:	0109c83a 	sub	r4,zero,r4
   8a5b4:	28000b16 	blt	r5,zero,8a5e4 <__modsi3+0x58>
   8a5b8:	180b883a 	mov	r5,r3
   8a5bc:	01800044 	movi	r6,1
   8a5c0:	008a4b00 	call	8a4b0 <udivmodsi4>
   8a5c4:	0085c83a 	sub	r2,zero,r2
   8a5c8:	dfc00017 	ldw	ra,0(sp)
   8a5cc:	dec00104 	addi	sp,sp,4
   8a5d0:	f800283a 	ret
   8a5d4:	014bc83a 	sub	r5,zero,r5
   8a5d8:	dfc00017 	ldw	ra,0(sp)
   8a5dc:	dec00104 	addi	sp,sp,4
   8a5e0:	008a4b01 	jmpi	8a4b0 <udivmodsi4>
   8a5e4:	0147c83a 	sub	r3,zero,r5
   8a5e8:	003ff306 	br	8a5b8 <__modsi3+0x2c>

0008a5ec <__udivsi3>:
   8a5ec:	000d883a 	mov	r6,zero
   8a5f0:	008a4b01 	jmpi	8a4b0 <udivmodsi4>

0008a5f4 <__umodsi3>:
   8a5f4:	01800044 	movi	r6,1
   8a5f8:	008a4b01 	jmpi	8a4b0 <udivmodsi4>

0008a5fc <__clzsi2>:
   8a5fc:	00bfffd4 	movui	r2,65535
   8a600:	11000e36 	bltu	r2,r4,8a63c <__clzsi2+0x40>
   8a604:	00803fc4 	movi	r2,255
   8a608:	01400204 	movi	r5,8
   8a60c:	0007883a 	mov	r3,zero
   8a610:	11001036 	bltu	r2,r4,8a654 <__clzsi2+0x58>
   8a614:	000b883a 	mov	r5,zero
   8a618:	20c6d83a 	srl	r3,r4,r3
   8a61c:	00800274 	movhi	r2,9
   8a620:	109e6b04 	addi	r2,r2,31148
   8a624:	1887883a 	add	r3,r3,r2
   8a628:	18800003 	ldbu	r2,0(r3)
   8a62c:	00c00804 	movi	r3,32
   8a630:	2885883a 	add	r2,r5,r2
   8a634:	1885c83a 	sub	r2,r3,r2
   8a638:	f800283a 	ret
   8a63c:	01400404 	movi	r5,16
   8a640:	00804034 	movhi	r2,256
   8a644:	10bfffc4 	addi	r2,r2,-1
   8a648:	2807883a 	mov	r3,r5
   8a64c:	113ff22e 	bgeu	r2,r4,8a618 <__clzsi2+0x1c>
   8a650:	01400604 	movi	r5,24
   8a654:	2807883a 	mov	r3,r5
   8a658:	20c6d83a 	srl	r3,r4,r3
   8a65c:	00800274 	movhi	r2,9
   8a660:	109e6b04 	addi	r2,r2,31148
   8a664:	1887883a 	add	r3,r3,r2
   8a668:	18800003 	ldbu	r2,0(r3)
   8a66c:	00c00804 	movi	r3,32
   8a670:	2885883a 	add	r2,r5,r2
   8a674:	1885c83a 	sub	r2,r3,r2
   8a678:	f800283a 	ret

0008a67c <__pack_d>:
   8a67c:	20c00017 	ldw	r3,0(r4)
   8a680:	defffd04 	addi	sp,sp,-12
   8a684:	dc000015 	stw	r16,0(sp)
   8a688:	dc800215 	stw	r18,8(sp)
   8a68c:	dc400115 	stw	r17,4(sp)
   8a690:	00800044 	movi	r2,1
   8a694:	22000317 	ldw	r8,12(r4)
   8a698:	001f883a 	mov	r15,zero
   8a69c:	22400417 	ldw	r9,16(r4)
   8a6a0:	24000117 	ldw	r16,4(r4)
   8a6a4:	10c0552e 	bgeu	r2,r3,8a7fc <__pack_d+0x180>
   8a6a8:	00800104 	movi	r2,4
   8a6ac:	18804f26 	beq	r3,r2,8a7ec <__pack_d+0x170>
   8a6b0:	00800084 	movi	r2,2
   8a6b4:	18800226 	beq	r3,r2,8a6c0 <__pack_d+0x44>
   8a6b8:	4244b03a 	or	r2,r8,r9
   8a6bc:	10001a1e 	bne	r2,zero,8a728 <__pack_d+0xac>
   8a6c0:	000d883a 	mov	r6,zero
   8a6c4:	000f883a 	mov	r7,zero
   8a6c8:	0011883a 	mov	r8,zero
   8a6cc:	00800434 	movhi	r2,16
   8a6d0:	10bfffc4 	addi	r2,r2,-1
   8a6d4:	301d883a 	mov	r14,r6
   8a6d8:	3884703a 	and	r2,r7,r2
   8a6dc:	400a953a 	slli	r5,r8,20
   8a6e0:	79bffc2c 	andhi	r6,r15,65520
   8a6e4:	308cb03a 	or	r6,r6,r2
   8a6e8:	00e00434 	movhi	r3,32784
   8a6ec:	18ffffc4 	addi	r3,r3,-1
   8a6f0:	800497fa 	slli	r2,r16,31
   8a6f4:	30c6703a 	and	r3,r6,r3
   8a6f8:	1946b03a 	or	r3,r3,r5
   8a6fc:	01600034 	movhi	r5,32768
   8a700:	297fffc4 	addi	r5,r5,-1
   8a704:	194a703a 	and	r5,r3,r5
   8a708:	288ab03a 	or	r5,r5,r2
   8a70c:	2807883a 	mov	r3,r5
   8a710:	7005883a 	mov	r2,r14
   8a714:	dc800217 	ldw	r18,8(sp)
   8a718:	dc400117 	ldw	r17,4(sp)
   8a71c:	dc000017 	ldw	r16,0(sp)
   8a720:	dec00304 	addi	sp,sp,12
   8a724:	f800283a 	ret
   8a728:	21000217 	ldw	r4,8(r4)
   8a72c:	00bf0084 	movi	r2,-1022
   8a730:	20803f16 	blt	r4,r2,8a830 <__pack_d+0x1b4>
   8a734:	0080ffc4 	movi	r2,1023
   8a738:	11002c16 	blt	r2,r4,8a7ec <__pack_d+0x170>
   8a73c:	00803fc4 	movi	r2,255
   8a740:	408c703a 	and	r6,r8,r2
   8a744:	00802004 	movi	r2,128
   8a748:	0007883a 	mov	r3,zero
   8a74c:	000f883a 	mov	r7,zero
   8a750:	2280ffc4 	addi	r10,r4,1023
   8a754:	30801e26 	beq	r6,r2,8a7d0 <__pack_d+0x154>
   8a758:	00801fc4 	movi	r2,127
   8a75c:	4089883a 	add	r4,r8,r2
   8a760:	220d803a 	cmpltu	r6,r4,r8
   8a764:	324d883a 	add	r6,r6,r9
   8a768:	2011883a 	mov	r8,r4
   8a76c:	3013883a 	mov	r9,r6
   8a770:	00880034 	movhi	r2,8192
   8a774:	10bfffc4 	addi	r2,r2,-1
   8a778:	12400d36 	bltu	r2,r9,8a7b0 <__pack_d+0x134>
   8a77c:	4804963a 	slli	r2,r9,24
   8a780:	400cd23a 	srli	r6,r8,8
   8a784:	480ed23a 	srli	r7,r9,8
   8a788:	013fffc4 	movi	r4,-1
   8a78c:	118cb03a 	or	r6,r2,r6
   8a790:	01400434 	movhi	r5,16
   8a794:	297fffc4 	addi	r5,r5,-1
   8a798:	3104703a 	and	r2,r6,r4
   8a79c:	3946703a 	and	r3,r7,r5
   8a7a0:	5201ffcc 	andi	r8,r10,2047
   8a7a4:	100d883a 	mov	r6,r2
   8a7a8:	180f883a 	mov	r7,r3
   8a7ac:	003fc706 	br	8a6cc <__pack_d+0x50>
   8a7b0:	480897fa 	slli	r4,r9,31
   8a7b4:	4004d07a 	srli	r2,r8,1
   8a7b8:	4806d07a 	srli	r3,r9,1
   8a7bc:	52800044 	addi	r10,r10,1
   8a7c0:	2084b03a 	or	r2,r4,r2
   8a7c4:	1011883a 	mov	r8,r2
   8a7c8:	1813883a 	mov	r9,r3
   8a7cc:	003feb06 	br	8a77c <__pack_d+0x100>
   8a7d0:	383fe11e 	bne	r7,zero,8a758 <__pack_d+0xdc>
   8a7d4:	01004004 	movi	r4,256
   8a7d8:	4104703a 	and	r2,r8,r4
   8a7dc:	10c4b03a 	or	r2,r2,r3
   8a7e0:	103fe326 	beq	r2,zero,8a770 <__pack_d+0xf4>
   8a7e4:	3005883a 	mov	r2,r6
   8a7e8:	003fdc06 	br	8a75c <__pack_d+0xe0>
   8a7ec:	000d883a 	mov	r6,zero
   8a7f0:	000f883a 	mov	r7,zero
   8a7f4:	0201ffc4 	movi	r8,2047
   8a7f8:	003fb406 	br	8a6cc <__pack_d+0x50>
   8a7fc:	0005883a 	mov	r2,zero
   8a800:	00c00234 	movhi	r3,8
   8a804:	408cb03a 	or	r6,r8,r2
   8a808:	48ceb03a 	or	r7,r9,r3
   8a80c:	013fffc4 	movi	r4,-1
   8a810:	01400434 	movhi	r5,16
   8a814:	297fffc4 	addi	r5,r5,-1
   8a818:	3104703a 	and	r2,r6,r4
   8a81c:	3946703a 	and	r3,r7,r5
   8a820:	100d883a 	mov	r6,r2
   8a824:	180f883a 	mov	r7,r3
   8a828:	0201ffc4 	movi	r8,2047
   8a82c:	003fa706 	br	8a6cc <__pack_d+0x50>
   8a830:	1109c83a 	sub	r4,r2,r4
   8a834:	00800e04 	movi	r2,56
   8a838:	11004316 	blt	r2,r4,8a948 <__pack_d+0x2cc>
   8a83c:	21fff804 	addi	r7,r4,-32
   8a840:	38004516 	blt	r7,zero,8a958 <__pack_d+0x2dc>
   8a844:	49d8d83a 	srl	r12,r9,r7
   8a848:	001b883a 	mov	r13,zero
   8a84c:	0023883a 	mov	r17,zero
   8a850:	01400044 	movi	r5,1
   8a854:	0025883a 	mov	r18,zero
   8a858:	38004716 	blt	r7,zero,8a978 <__pack_d+0x2fc>
   8a85c:	29d6983a 	sll	r11,r5,r7
   8a860:	0015883a 	mov	r10,zero
   8a864:	00bfffc4 	movi	r2,-1
   8a868:	5089883a 	add	r4,r10,r2
   8a86c:	588b883a 	add	r5,r11,r2
   8a870:	228d803a 	cmpltu	r6,r4,r10
   8a874:	314b883a 	add	r5,r6,r5
   8a878:	4104703a 	and	r2,r8,r4
   8a87c:	4946703a 	and	r3,r9,r5
   8a880:	10c4b03a 	or	r2,r2,r3
   8a884:	10000226 	beq	r2,zero,8a890 <__pack_d+0x214>
   8a888:	04400044 	movi	r17,1
   8a88c:	0025883a 	mov	r18,zero
   8a890:	00803fc4 	movi	r2,255
   8a894:	644eb03a 	or	r7,r12,r17
   8a898:	3892703a 	and	r9,r7,r2
   8a89c:	00802004 	movi	r2,128
   8a8a0:	6c90b03a 	or	r8,r13,r18
   8a8a4:	0015883a 	mov	r10,zero
   8a8a8:	48801626 	beq	r9,r2,8a904 <__pack_d+0x288>
   8a8ac:	01001fc4 	movi	r4,127
   8a8b0:	3905883a 	add	r2,r7,r4
   8a8b4:	11cd803a 	cmpltu	r6,r2,r7
   8a8b8:	320d883a 	add	r6,r6,r8
   8a8bc:	100f883a 	mov	r7,r2
   8a8c0:	00840034 	movhi	r2,4096
   8a8c4:	10bfffc4 	addi	r2,r2,-1
   8a8c8:	3011883a 	mov	r8,r6
   8a8cc:	0007883a 	mov	r3,zero
   8a8d0:	11801b36 	bltu	r2,r6,8a940 <__pack_d+0x2c4>
   8a8d4:	4004963a 	slli	r2,r8,24
   8a8d8:	3808d23a 	srli	r4,r7,8
   8a8dc:	400ad23a 	srli	r5,r8,8
   8a8e0:	1813883a 	mov	r9,r3
   8a8e4:	1108b03a 	or	r4,r2,r4
   8a8e8:	00bfffc4 	movi	r2,-1
   8a8ec:	00c00434 	movhi	r3,16
   8a8f0:	18ffffc4 	addi	r3,r3,-1
   8a8f4:	208c703a 	and	r6,r4,r2
   8a8f8:	28ce703a 	and	r7,r5,r3
   8a8fc:	4a01ffcc 	andi	r8,r9,2047
   8a900:	003f7206 	br	8a6cc <__pack_d+0x50>
   8a904:	503fe91e 	bne	r10,zero,8a8ac <__pack_d+0x230>
   8a908:	01004004 	movi	r4,256
   8a90c:	3904703a 	and	r2,r7,r4
   8a910:	0007883a 	mov	r3,zero
   8a914:	10c4b03a 	or	r2,r2,r3
   8a918:	10000626 	beq	r2,zero,8a934 <__pack_d+0x2b8>
   8a91c:	3a45883a 	add	r2,r7,r9
   8a920:	11cd803a 	cmpltu	r6,r2,r7
   8a924:	320d883a 	add	r6,r6,r8
   8a928:	100f883a 	mov	r7,r2
   8a92c:	3011883a 	mov	r8,r6
   8a930:	0007883a 	mov	r3,zero
   8a934:	00840034 	movhi	r2,4096
   8a938:	10bfffc4 	addi	r2,r2,-1
   8a93c:	123fe52e 	bgeu	r2,r8,8a8d4 <__pack_d+0x258>
   8a940:	00c00044 	movi	r3,1
   8a944:	003fe306 	br	8a8d4 <__pack_d+0x258>
   8a948:	0009883a 	mov	r4,zero
   8a94c:	0013883a 	mov	r9,zero
   8a950:	000b883a 	mov	r5,zero
   8a954:	003fe406 	br	8a8e8 <__pack_d+0x26c>
   8a958:	4a47883a 	add	r3,r9,r9
   8a95c:	008007c4 	movi	r2,31
   8a960:	1105c83a 	sub	r2,r2,r4
   8a964:	1886983a 	sll	r3,r3,r2
   8a968:	4118d83a 	srl	r12,r8,r4
   8a96c:	491ad83a 	srl	r13,r9,r4
   8a970:	1b18b03a 	or	r12,r3,r12
   8a974:	003fb506 	br	8a84c <__pack_d+0x1d0>
   8a978:	2806d07a 	srli	r3,r5,1
   8a97c:	008007c4 	movi	r2,31
   8a980:	1105c83a 	sub	r2,r2,r4
   8a984:	1896d83a 	srl	r11,r3,r2
   8a988:	2914983a 	sll	r10,r5,r4
   8a98c:	003fb506 	br	8a864 <__pack_d+0x1e8>

0008a990 <__unpack_d>:
   8a990:	20c00117 	ldw	r3,4(r4)
   8a994:	22400017 	ldw	r9,0(r4)
   8a998:	00800434 	movhi	r2,16
   8a99c:	10bfffc4 	addi	r2,r2,-1
   8a9a0:	1808d53a 	srli	r4,r3,20
   8a9a4:	180cd7fa 	srli	r6,r3,31
   8a9a8:	1894703a 	and	r10,r3,r2
   8a9ac:	2201ffcc 	andi	r8,r4,2047
   8a9b0:	281b883a 	mov	r13,r5
   8a9b4:	4817883a 	mov	r11,r9
   8a9b8:	29800115 	stw	r6,4(r5)
   8a9bc:	5019883a 	mov	r12,r10
   8a9c0:	40001e1e 	bne	r8,zero,8aa3c <__unpack_d+0xac>
   8a9c4:	4a84b03a 	or	r2,r9,r10
   8a9c8:	10001926 	beq	r2,zero,8aa30 <__unpack_d+0xa0>
   8a9cc:	4804d63a 	srli	r2,r9,24
   8a9d0:	500c923a 	slli	r6,r10,8
   8a9d4:	013f0084 	movi	r4,-1022
   8a9d8:	00c40034 	movhi	r3,4096
   8a9dc:	18ffffc4 	addi	r3,r3,-1
   8a9e0:	118cb03a 	or	r6,r2,r6
   8a9e4:	008000c4 	movi	r2,3
   8a9e8:	480a923a 	slli	r5,r9,8
   8a9ec:	68800015 	stw	r2,0(r13)
   8a9f0:	69000215 	stw	r4,8(r13)
   8a9f4:	19800b36 	bltu	r3,r6,8aa24 <__unpack_d+0x94>
   8a9f8:	200f883a 	mov	r7,r4
   8a9fc:	1811883a 	mov	r8,r3
   8aa00:	2945883a 	add	r2,r5,r5
   8aa04:	1149803a 	cmpltu	r4,r2,r5
   8aa08:	3187883a 	add	r3,r6,r6
   8aa0c:	20c9883a 	add	r4,r4,r3
   8aa10:	100b883a 	mov	r5,r2
   8aa14:	200d883a 	mov	r6,r4
   8aa18:	39ffffc4 	addi	r7,r7,-1
   8aa1c:	413ff82e 	bgeu	r8,r4,8aa00 <__unpack_d+0x70>
   8aa20:	69c00215 	stw	r7,8(r13)
   8aa24:	69800415 	stw	r6,16(r13)
   8aa28:	69400315 	stw	r5,12(r13)
   8aa2c:	f800283a 	ret
   8aa30:	00800084 	movi	r2,2
   8aa34:	28800015 	stw	r2,0(r5)
   8aa38:	f800283a 	ret
   8aa3c:	0081ffc4 	movi	r2,2047
   8aa40:	40800f26 	beq	r8,r2,8aa80 <__unpack_d+0xf0>
   8aa44:	480cd63a 	srli	r6,r9,24
   8aa48:	5006923a 	slli	r3,r10,8
   8aa4c:	4804923a 	slli	r2,r9,8
   8aa50:	0009883a 	mov	r4,zero
   8aa54:	30c6b03a 	or	r3,r6,r3
   8aa58:	01440034 	movhi	r5,4096
   8aa5c:	110cb03a 	or	r6,r2,r4
   8aa60:	423f0044 	addi	r8,r8,-1023
   8aa64:	194eb03a 	or	r7,r3,r5
   8aa68:	008000c4 	movi	r2,3
   8aa6c:	69c00415 	stw	r7,16(r13)
   8aa70:	6a000215 	stw	r8,8(r13)
   8aa74:	68800015 	stw	r2,0(r13)
   8aa78:	69800315 	stw	r6,12(r13)
   8aa7c:	f800283a 	ret
   8aa80:	4a84b03a 	or	r2,r9,r10
   8aa84:	1000031e 	bne	r2,zero,8aa94 <__unpack_d+0x104>
   8aa88:	00800104 	movi	r2,4
   8aa8c:	28800015 	stw	r2,0(r5)
   8aa90:	f800283a 	ret
   8aa94:	0009883a 	mov	r4,zero
   8aa98:	01400234 	movhi	r5,8
   8aa9c:	4904703a 	and	r2,r9,r4
   8aaa0:	5146703a 	and	r3,r10,r5
   8aaa4:	10c4b03a 	or	r2,r2,r3
   8aaa8:	10000526 	beq	r2,zero,8aac0 <__unpack_d+0x130>
   8aaac:	00800044 	movi	r2,1
   8aab0:	68800015 	stw	r2,0(r13)
   8aab4:	6b000415 	stw	r12,16(r13)
   8aab8:	6ac00315 	stw	r11,12(r13)
   8aabc:	f800283a 	ret
   8aac0:	68000015 	stw	zero,0(r13)
   8aac4:	003ffb06 	br	8aab4 <__unpack_d+0x124>

0008aac8 <__fpcmp_parts_d>:
   8aac8:	21800017 	ldw	r6,0(r4)
   8aacc:	00c00044 	movi	r3,1
   8aad0:	19800a2e 	bgeu	r3,r6,8aafc <__fpcmp_parts_d+0x34>
   8aad4:	28800017 	ldw	r2,0(r5)
   8aad8:	1880082e 	bgeu	r3,r2,8aafc <__fpcmp_parts_d+0x34>
   8aadc:	00c00104 	movi	r3,4
   8aae0:	30c02626 	beq	r6,r3,8ab7c <__fpcmp_parts_d+0xb4>
   8aae4:	10c02226 	beq	r2,r3,8ab70 <__fpcmp_parts_d+0xa8>
   8aae8:	00c00084 	movi	r3,2
   8aaec:	30c00526 	beq	r6,r3,8ab04 <__fpcmp_parts_d+0x3c>
   8aaf0:	10c0071e 	bne	r2,r3,8ab10 <__fpcmp_parts_d+0x48>
   8aaf4:	20800117 	ldw	r2,4(r4)
   8aaf8:	1000091e 	bne	r2,zero,8ab20 <__fpcmp_parts_d+0x58>
   8aafc:	00800044 	movi	r2,1
   8ab00:	f800283a 	ret
   8ab04:	10c01a1e 	bne	r2,r3,8ab70 <__fpcmp_parts_d+0xa8>
   8ab08:	0005883a 	mov	r2,zero
   8ab0c:	f800283a 	ret
   8ab10:	22000117 	ldw	r8,4(r4)
   8ab14:	28800117 	ldw	r2,4(r5)
   8ab18:	40800326 	beq	r8,r2,8ab28 <__fpcmp_parts_d+0x60>
   8ab1c:	403ff726 	beq	r8,zero,8aafc <__fpcmp_parts_d+0x34>
   8ab20:	00bfffc4 	movi	r2,-1
   8ab24:	f800283a 	ret
   8ab28:	20c00217 	ldw	r3,8(r4)
   8ab2c:	28800217 	ldw	r2,8(r5)
   8ab30:	10fffa16 	blt	r2,r3,8ab1c <__fpcmp_parts_d+0x54>
   8ab34:	18800916 	blt	r3,r2,8ab5c <__fpcmp_parts_d+0x94>
   8ab38:	21c00417 	ldw	r7,16(r4)
   8ab3c:	28c00417 	ldw	r3,16(r5)
   8ab40:	21800317 	ldw	r6,12(r4)
   8ab44:	28800317 	ldw	r2,12(r5)
   8ab48:	19fff436 	bltu	r3,r7,8ab1c <__fpcmp_parts_d+0x54>
   8ab4c:	38c00526 	beq	r7,r3,8ab64 <__fpcmp_parts_d+0x9c>
   8ab50:	38c00236 	bltu	r7,r3,8ab5c <__fpcmp_parts_d+0x94>
   8ab54:	19ffec1e 	bne	r3,r7,8ab08 <__fpcmp_parts_d+0x40>
   8ab58:	30bfeb2e 	bgeu	r6,r2,8ab08 <__fpcmp_parts_d+0x40>
   8ab5c:	403fe71e 	bne	r8,zero,8aafc <__fpcmp_parts_d+0x34>
   8ab60:	003fef06 	br	8ab20 <__fpcmp_parts_d+0x58>
   8ab64:	11bffa2e 	bgeu	r2,r6,8ab50 <__fpcmp_parts_d+0x88>
   8ab68:	403fe426 	beq	r8,zero,8aafc <__fpcmp_parts_d+0x34>
   8ab6c:	003fec06 	br	8ab20 <__fpcmp_parts_d+0x58>
   8ab70:	28800117 	ldw	r2,4(r5)
   8ab74:	103fe11e 	bne	r2,zero,8aafc <__fpcmp_parts_d+0x34>
   8ab78:	003fe906 	br	8ab20 <__fpcmp_parts_d+0x58>
   8ab7c:	11bfdd1e 	bne	r2,r6,8aaf4 <__fpcmp_parts_d+0x2c>
   8ab80:	28c00117 	ldw	r3,4(r5)
   8ab84:	20800117 	ldw	r2,4(r4)
   8ab88:	1885c83a 	sub	r2,r3,r2
   8ab8c:	f800283a 	ret

0008ab90 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8ab90:	defff804 	addi	sp,sp,-32
   8ab94:	dfc00715 	stw	ra,28(sp)
   8ab98:	df000615 	stw	fp,24(sp)
   8ab9c:	df000604 	addi	fp,sp,24
   8aba0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8aba4:	e0bffc17 	ldw	r2,-16(fp)
   8aba8:	1004803a 	cmplt	r2,r2,zero
   8abac:	1000091e 	bne	r2,zero,8abd4 <close+0x44>
   8abb0:	e13ffc17 	ldw	r4,-16(fp)
   8abb4:	01400304 	movi	r5,12
   8abb8:	0080f440 	call	80f44 <__mulsi3>
   8abbc:	1007883a 	mov	r3,r2
   8abc0:	008002b4 	movhi	r2,10
   8abc4:	10a11604 	addi	r2,r2,-31656
   8abc8:	1887883a 	add	r3,r3,r2
   8abcc:	e0ffff15 	stw	r3,-4(fp)
   8abd0:	00000106 	br	8abd8 <close+0x48>
   8abd4:	e03fff15 	stw	zero,-4(fp)
   8abd8:	e0bfff17 	ldw	r2,-4(fp)
   8abdc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8abe0:	e0bffb17 	ldw	r2,-20(fp)
   8abe4:	1005003a 	cmpeq	r2,r2,zero
   8abe8:	10001d1e 	bne	r2,zero,8ac60 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8abec:	e0bffb17 	ldw	r2,-20(fp)
   8abf0:	10800017 	ldw	r2,0(r2)
   8abf4:	10800417 	ldw	r2,16(r2)
   8abf8:	1005003a 	cmpeq	r2,r2,zero
   8abfc:	1000071e 	bne	r2,zero,8ac1c <close+0x8c>
   8ac00:	e0bffb17 	ldw	r2,-20(fp)
   8ac04:	10800017 	ldw	r2,0(r2)
   8ac08:	10800417 	ldw	r2,16(r2)
   8ac0c:	e13ffb17 	ldw	r4,-20(fp)
   8ac10:	103ee83a 	callr	r2
   8ac14:	e0bffe15 	stw	r2,-8(fp)
   8ac18:	00000106 	br	8ac20 <close+0x90>
   8ac1c:	e03ffe15 	stw	zero,-8(fp)
   8ac20:	e0bffe17 	ldw	r2,-8(fp)
   8ac24:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8ac28:	e13ffc17 	ldw	r4,-16(fp)
   8ac2c:	008b85c0 	call	8b85c <alt_release_fd>
    if (rval < 0)
   8ac30:	e0bffa17 	ldw	r2,-24(fp)
   8ac34:	1004403a 	cmpge	r2,r2,zero
   8ac38:	1000071e 	bne	r2,zero,8ac58 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8ac3c:	008ac900 	call	8ac90 <alt_get_errno>
   8ac40:	e0fffa17 	ldw	r3,-24(fp)
   8ac44:	00c7c83a 	sub	r3,zero,r3
   8ac48:	10c00015 	stw	r3,0(r2)
      return -1;
   8ac4c:	00bfffc4 	movi	r2,-1
   8ac50:	e0bffd15 	stw	r2,-12(fp)
   8ac54:	00000806 	br	8ac78 <close+0xe8>
    }
    return 0;
   8ac58:	e03ffd15 	stw	zero,-12(fp)
   8ac5c:	00000606 	br	8ac78 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8ac60:	008ac900 	call	8ac90 <alt_get_errno>
   8ac64:	1007883a 	mov	r3,r2
   8ac68:	00801444 	movi	r2,81
   8ac6c:	18800015 	stw	r2,0(r3)
    return -1;
   8ac70:	00bfffc4 	movi	r2,-1
   8ac74:	e0bffd15 	stw	r2,-12(fp)
   8ac78:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8ac7c:	e037883a 	mov	sp,fp
   8ac80:	dfc00117 	ldw	ra,4(sp)
   8ac84:	df000017 	ldw	fp,0(sp)
   8ac88:	dec00204 	addi	sp,sp,8
   8ac8c:	f800283a 	ret

0008ac90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ac90:	defffd04 	addi	sp,sp,-12
   8ac94:	dfc00215 	stw	ra,8(sp)
   8ac98:	df000115 	stw	fp,4(sp)
   8ac9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8aca0:	008002b4 	movhi	r2,10
   8aca4:	10a5a804 	addi	r2,r2,-26976
   8aca8:	10800017 	ldw	r2,0(r2)
   8acac:	1005003a 	cmpeq	r2,r2,zero
   8acb0:	1000061e 	bne	r2,zero,8accc <alt_get_errno+0x3c>
   8acb4:	008002b4 	movhi	r2,10
   8acb8:	10a5a804 	addi	r2,r2,-26976
   8acbc:	10800017 	ldw	r2,0(r2)
   8acc0:	103ee83a 	callr	r2
   8acc4:	e0bfff15 	stw	r2,-4(fp)
   8acc8:	00000306 	br	8acd8 <alt_get_errno+0x48>
   8accc:	008002b4 	movhi	r2,10
   8acd0:	10ac9704 	addi	r2,r2,-19876
   8acd4:	e0bfff15 	stw	r2,-4(fp)
   8acd8:	e0bfff17 	ldw	r2,-4(fp)
}
   8acdc:	e037883a 	mov	sp,fp
   8ace0:	dfc00117 	ldw	ra,4(sp)
   8ace4:	df000017 	ldw	fp,0(sp)
   8ace8:	dec00204 	addi	sp,sp,8
   8acec:	f800283a 	ret

0008acf0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8acf0:	defffc04 	addi	sp,sp,-16
   8acf4:	df000315 	stw	fp,12(sp)
   8acf8:	df000304 	addi	fp,sp,12
   8acfc:	e13ffd15 	stw	r4,-12(fp)
   8ad00:	e17ffe15 	stw	r5,-8(fp)
   8ad04:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8ad08:	e0bfff17 	ldw	r2,-4(fp)
}
   8ad0c:	e037883a 	mov	sp,fp
   8ad10:	df000017 	ldw	fp,0(sp)
   8ad14:	dec00104 	addi	sp,sp,4
   8ad18:	f800283a 	ret

0008ad1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8ad1c:	defff904 	addi	sp,sp,-28
   8ad20:	dfc00615 	stw	ra,24(sp)
   8ad24:	df000515 	stw	fp,20(sp)
   8ad28:	df000504 	addi	fp,sp,20
   8ad2c:	e13ffc15 	stw	r4,-16(fp)
   8ad30:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ad34:	e0bffc17 	ldw	r2,-16(fp)
   8ad38:	1004803a 	cmplt	r2,r2,zero
   8ad3c:	1000091e 	bne	r2,zero,8ad64 <fstat+0x48>
   8ad40:	e13ffc17 	ldw	r4,-16(fp)
   8ad44:	01400304 	movi	r5,12
   8ad48:	0080f440 	call	80f44 <__mulsi3>
   8ad4c:	1007883a 	mov	r3,r2
   8ad50:	008002b4 	movhi	r2,10
   8ad54:	10a11604 	addi	r2,r2,-31656
   8ad58:	1887883a 	add	r3,r3,r2
   8ad5c:	e0ffff15 	stw	r3,-4(fp)
   8ad60:	00000106 	br	8ad68 <fstat+0x4c>
   8ad64:	e03fff15 	stw	zero,-4(fp)
   8ad68:	e0bfff17 	ldw	r2,-4(fp)
   8ad6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ad70:	e0bffb17 	ldw	r2,-20(fp)
   8ad74:	1005003a 	cmpeq	r2,r2,zero
   8ad78:	1000121e 	bne	r2,zero,8adc4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8ad7c:	e0bffb17 	ldw	r2,-20(fp)
   8ad80:	10800017 	ldw	r2,0(r2)
   8ad84:	10800817 	ldw	r2,32(r2)
   8ad88:	1005003a 	cmpeq	r2,r2,zero
   8ad8c:	1000081e 	bne	r2,zero,8adb0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8ad90:	e0bffb17 	ldw	r2,-20(fp)
   8ad94:	10800017 	ldw	r2,0(r2)
   8ad98:	10800817 	ldw	r2,32(r2)
   8ad9c:	e13ffb17 	ldw	r4,-20(fp)
   8ada0:	e17ffd17 	ldw	r5,-12(fp)
   8ada4:	103ee83a 	callr	r2
   8ada8:	e0bffe15 	stw	r2,-8(fp)
   8adac:	00000b06 	br	8addc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8adb0:	e0fffd17 	ldw	r3,-12(fp)
   8adb4:	00880004 	movi	r2,8192
   8adb8:	18800115 	stw	r2,4(r3)
      return 0;
   8adbc:	e03ffe15 	stw	zero,-8(fp)
   8adc0:	00000606 	br	8addc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8adc4:	008adf40 	call	8adf4 <alt_get_errno>
   8adc8:	1007883a 	mov	r3,r2
   8adcc:	00801444 	movi	r2,81
   8add0:	18800015 	stw	r2,0(r3)
    return -1;
   8add4:	00bfffc4 	movi	r2,-1
   8add8:	e0bffe15 	stw	r2,-8(fp)
   8addc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8ade0:	e037883a 	mov	sp,fp
   8ade4:	dfc00117 	ldw	ra,4(sp)
   8ade8:	df000017 	ldw	fp,0(sp)
   8adec:	dec00204 	addi	sp,sp,8
   8adf0:	f800283a 	ret

0008adf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8adf4:	defffd04 	addi	sp,sp,-12
   8adf8:	dfc00215 	stw	ra,8(sp)
   8adfc:	df000115 	stw	fp,4(sp)
   8ae00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ae04:	008002b4 	movhi	r2,10
   8ae08:	10a5a804 	addi	r2,r2,-26976
   8ae0c:	10800017 	ldw	r2,0(r2)
   8ae10:	1005003a 	cmpeq	r2,r2,zero
   8ae14:	1000061e 	bne	r2,zero,8ae30 <alt_get_errno+0x3c>
   8ae18:	008002b4 	movhi	r2,10
   8ae1c:	10a5a804 	addi	r2,r2,-26976
   8ae20:	10800017 	ldw	r2,0(r2)
   8ae24:	103ee83a 	callr	r2
   8ae28:	e0bfff15 	stw	r2,-4(fp)
   8ae2c:	00000306 	br	8ae3c <alt_get_errno+0x48>
   8ae30:	008002b4 	movhi	r2,10
   8ae34:	10ac9704 	addi	r2,r2,-19876
   8ae38:	e0bfff15 	stw	r2,-4(fp)
   8ae3c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ae40:	e037883a 	mov	sp,fp
   8ae44:	dfc00117 	ldw	ra,4(sp)
   8ae48:	df000017 	ldw	fp,0(sp)
   8ae4c:	dec00204 	addi	sp,sp,8
   8ae50:	f800283a 	ret

0008ae54 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8ae54:	deffef04 	addi	sp,sp,-68
   8ae58:	df001015 	stw	fp,64(sp)
   8ae5c:	df001004 	addi	fp,sp,64
   8ae60:	e13ffc15 	stw	r4,-16(fp)
   8ae64:	e17ffd15 	stw	r5,-12(fp)
   8ae68:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8ae6c:	00bffa84 	movi	r2,-22
   8ae70:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8ae74:	e0bffc17 	ldw	r2,-16(fp)
   8ae78:	10800828 	cmpgeui	r2,r2,32
   8ae7c:	1000601e 	bne	r2,zero,8b000 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ae80:	0005303a 	rdctl	r2,status
   8ae84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ae88:	e0fff917 	ldw	r3,-28(fp)
   8ae8c:	00bfff84 	movi	r2,-2
   8ae90:	1884703a 	and	r2,r3,r2
   8ae94:	1001703a 	wrctl	status,r2
  
  return context;
   8ae98:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8ae9c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8aea0:	e0bffc17 	ldw	r2,-16(fp)
   8aea4:	00c002f4 	movhi	r3,11
   8aea8:	18e9d504 	addi	r3,r3,-22700
   8aeac:	100490fa 	slli	r2,r2,3
   8aeb0:	10c7883a 	add	r3,r2,r3
   8aeb4:	e0bffe17 	ldw	r2,-8(fp)
   8aeb8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8aebc:	e0bffc17 	ldw	r2,-16(fp)
   8aec0:	00c002f4 	movhi	r3,11
   8aec4:	18e9d504 	addi	r3,r3,-22700
   8aec8:	100490fa 	slli	r2,r2,3
   8aecc:	10c5883a 	add	r2,r2,r3
   8aed0:	10c00104 	addi	r3,r2,4
   8aed4:	e0bffd17 	ldw	r2,-12(fp)
   8aed8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8aedc:	e0bffe17 	ldw	r2,-8(fp)
   8aee0:	1005003a 	cmpeq	r2,r2,zero
   8aee4:	1000201e 	bne	r2,zero,8af68 <alt_irq_register+0x114>
   8aee8:	e0bffc17 	ldw	r2,-16(fp)
   8aeec:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aef0:	0005303a 	rdctl	r2,status
   8aef4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aef8:	e0fff617 	ldw	r3,-40(fp)
   8aefc:	00bfff84 	movi	r2,-2
   8af00:	1884703a 	and	r2,r3,r2
   8af04:	1001703a 	wrctl	status,r2
  
  return context;
   8af08:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8af0c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8af10:	e0fff717 	ldw	r3,-36(fp)
   8af14:	00800044 	movi	r2,1
   8af18:	10c4983a 	sll	r2,r2,r3
   8af1c:	1007883a 	mov	r3,r2
   8af20:	008002b4 	movhi	r2,10
   8af24:	10ac9904 	addi	r2,r2,-19868
   8af28:	10800017 	ldw	r2,0(r2)
   8af2c:	1886b03a 	or	r3,r3,r2
   8af30:	008002b4 	movhi	r2,10
   8af34:	10ac9904 	addi	r2,r2,-19868
   8af38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8af3c:	008002b4 	movhi	r2,10
   8af40:	10ac9904 	addi	r2,r2,-19868
   8af44:	10800017 	ldw	r2,0(r2)
   8af48:	100170fa 	wrctl	ienable,r2
   8af4c:	e0bff817 	ldw	r2,-32(fp)
   8af50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8af54:	e0bff517 	ldw	r2,-44(fp)
   8af58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8af5c:	0005883a 	mov	r2,zero
   8af60:	e0bfff15 	stw	r2,-4(fp)
   8af64:	00002006 	br	8afe8 <alt_irq_register+0x194>
   8af68:	e0bffc17 	ldw	r2,-16(fp)
   8af6c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8af70:	0005303a 	rdctl	r2,status
   8af74:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8af78:	e0fff217 	ldw	r3,-56(fp)
   8af7c:	00bfff84 	movi	r2,-2
   8af80:	1884703a 	and	r2,r3,r2
   8af84:	1001703a 	wrctl	status,r2
  
  return context;
   8af88:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8af8c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8af90:	e0fff317 	ldw	r3,-52(fp)
   8af94:	00800044 	movi	r2,1
   8af98:	10c4983a 	sll	r2,r2,r3
   8af9c:	0084303a 	nor	r2,zero,r2
   8afa0:	1007883a 	mov	r3,r2
   8afa4:	008002b4 	movhi	r2,10
   8afa8:	10ac9904 	addi	r2,r2,-19868
   8afac:	10800017 	ldw	r2,0(r2)
   8afb0:	1886703a 	and	r3,r3,r2
   8afb4:	008002b4 	movhi	r2,10
   8afb8:	10ac9904 	addi	r2,r2,-19868
   8afbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8afc0:	008002b4 	movhi	r2,10
   8afc4:	10ac9904 	addi	r2,r2,-19868
   8afc8:	10800017 	ldw	r2,0(r2)
   8afcc:	100170fa 	wrctl	ienable,r2
   8afd0:	e0bff417 	ldw	r2,-48(fp)
   8afd4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8afd8:	e0bff117 	ldw	r2,-60(fp)
   8afdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8afe0:	0005883a 	mov	r2,zero
   8afe4:	e0bfff15 	stw	r2,-4(fp)
   8afe8:	e0bfff17 	ldw	r2,-4(fp)
   8afec:	e0bffb15 	stw	r2,-20(fp)
   8aff0:	e0bffa17 	ldw	r2,-24(fp)
   8aff4:	e0bff015 	stw	r2,-64(fp)
   8aff8:	e0bff017 	ldw	r2,-64(fp)
   8affc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8b000:	e0bffb17 	ldw	r2,-20(fp)
}
   8b004:	e037883a 	mov	sp,fp
   8b008:	df000017 	ldw	fp,0(sp)
   8b00c:	dec00104 	addi	sp,sp,4
   8b010:	f800283a 	ret

0008b014 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b014:	deffeb04 	addi	sp,sp,-84
   8b018:	dfc01415 	stw	ra,80(sp)
   8b01c:	df001315 	stw	fp,76(sp)
   8b020:	df001304 	addi	fp,sp,76
   8b024:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b028:	e0bffd17 	ldw	r2,-12(fp)
   8b02c:	1004803a 	cmplt	r2,r2,zero
   8b030:	1000091e 	bne	r2,zero,8b058 <isatty+0x44>
   8b034:	e13ffd17 	ldw	r4,-12(fp)
   8b038:	01400304 	movi	r5,12
   8b03c:	0080f440 	call	80f44 <__mulsi3>
   8b040:	1007883a 	mov	r3,r2
   8b044:	008002b4 	movhi	r2,10
   8b048:	10a11604 	addi	r2,r2,-31656
   8b04c:	1887883a 	add	r3,r3,r2
   8b050:	e0ffff15 	stw	r3,-4(fp)
   8b054:	00000106 	br	8b05c <isatty+0x48>
   8b058:	e03fff15 	stw	zero,-4(fp)
   8b05c:	e0bfff17 	ldw	r2,-4(fp)
   8b060:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8b064:	e0bfed17 	ldw	r2,-76(fp)
   8b068:	1005003a 	cmpeq	r2,r2,zero
   8b06c:	10000f1e 	bne	r2,zero,8b0ac <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b070:	e0bfed17 	ldw	r2,-76(fp)
   8b074:	10800017 	ldw	r2,0(r2)
   8b078:	10800817 	ldw	r2,32(r2)
   8b07c:	1004c03a 	cmpne	r2,r2,zero
   8b080:	1000031e 	bne	r2,zero,8b090 <isatty+0x7c>
    {
      return 1;
   8b084:	00800044 	movi	r2,1
   8b088:	e0bffe15 	stw	r2,-8(fp)
   8b08c:	00000c06 	br	8b0c0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b090:	e17fee04 	addi	r5,fp,-72
   8b094:	e13ffd17 	ldw	r4,-12(fp)
   8b098:	008ad1c0 	call	8ad1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b09c:	e0bfef17 	ldw	r2,-68(fp)
   8b0a0:	10880020 	cmpeqi	r2,r2,8192
   8b0a4:	e0bffe15 	stw	r2,-8(fp)
   8b0a8:	00000506 	br	8b0c0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b0ac:	008b0d80 	call	8b0d8 <alt_get_errno>
   8b0b0:	1007883a 	mov	r3,r2
   8b0b4:	00801444 	movi	r2,81
   8b0b8:	18800015 	stw	r2,0(r3)
    return 0;
   8b0bc:	e03ffe15 	stw	zero,-8(fp)
   8b0c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b0c4:	e037883a 	mov	sp,fp
   8b0c8:	dfc00117 	ldw	ra,4(sp)
   8b0cc:	df000017 	ldw	fp,0(sp)
   8b0d0:	dec00204 	addi	sp,sp,8
   8b0d4:	f800283a 	ret

0008b0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b0d8:	defffd04 	addi	sp,sp,-12
   8b0dc:	dfc00215 	stw	ra,8(sp)
   8b0e0:	df000115 	stw	fp,4(sp)
   8b0e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b0e8:	008002b4 	movhi	r2,10
   8b0ec:	10a5a804 	addi	r2,r2,-26976
   8b0f0:	10800017 	ldw	r2,0(r2)
   8b0f4:	1005003a 	cmpeq	r2,r2,zero
   8b0f8:	1000061e 	bne	r2,zero,8b114 <alt_get_errno+0x3c>
   8b0fc:	008002b4 	movhi	r2,10
   8b100:	10a5a804 	addi	r2,r2,-26976
   8b104:	10800017 	ldw	r2,0(r2)
   8b108:	103ee83a 	callr	r2
   8b10c:	e0bfff15 	stw	r2,-4(fp)
   8b110:	00000306 	br	8b120 <alt_get_errno+0x48>
   8b114:	008002b4 	movhi	r2,10
   8b118:	10ac9704 	addi	r2,r2,-19876
   8b11c:	e0bfff15 	stw	r2,-4(fp)
   8b120:	e0bfff17 	ldw	r2,-4(fp)
}
   8b124:	e037883a 	mov	sp,fp
   8b128:	dfc00117 	ldw	ra,4(sp)
   8b12c:	df000017 	ldw	fp,0(sp)
   8b130:	dec00204 	addi	sp,sp,8
   8b134:	f800283a 	ret

0008b138 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b138:	defffe04 	addi	sp,sp,-8
   8b13c:	dfc00115 	stw	ra,4(sp)
   8b140:	df000015 	stw	fp,0(sp)
   8b144:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8b148:	010002b4 	movhi	r4,10
   8b14c:	2125cc04 	addi	r4,r4,-26832
   8b150:	01400274 	movhi	r5,9
   8b154:	295f0704 	addi	r5,r5,31772
   8b158:	018002b4 	movhi	r6,10
   8b15c:	31a5cc04 	addi	r6,r6,-26832
   8b160:	008b1b80 	call	8b1b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8b164:	01000234 	movhi	r4,8
   8b168:	21000804 	addi	r4,r4,32
   8b16c:	01400234 	movhi	r5,8
   8b170:	29400804 	addi	r5,r5,32
   8b174:	01800234 	movhi	r6,8
   8b178:	31806f04 	addi	r6,r6,444
   8b17c:	008b1b80 	call	8b1b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8b180:	01000274 	movhi	r4,9
   8b184:	211c3a04 	addi	r4,r4,28904
   8b188:	01400274 	movhi	r5,9
   8b18c:	295c3a04 	addi	r5,r5,28904
   8b190:	01800274 	movhi	r6,9
   8b194:	319f0704 	addi	r6,r6,31772
   8b198:	008b1b80 	call	8b1b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b19c:	00956b00 	call	956b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8b1a0:	009593c0 	call	9593c <alt_icache_flush_all>
}
   8b1a4:	e037883a 	mov	sp,fp
   8b1a8:	dfc00117 	ldw	ra,4(sp)
   8b1ac:	df000017 	ldw	fp,0(sp)
   8b1b0:	dec00204 	addi	sp,sp,8
   8b1b4:	f800283a 	ret

0008b1b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8b1b8:	defffc04 	addi	sp,sp,-16
   8b1bc:	df000315 	stw	fp,12(sp)
   8b1c0:	df000304 	addi	fp,sp,12
   8b1c4:	e13ffd15 	stw	r4,-12(fp)
   8b1c8:	e17ffe15 	stw	r5,-8(fp)
   8b1cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8b1d0:	e0fffe17 	ldw	r3,-8(fp)
   8b1d4:	e0bffd17 	ldw	r2,-12(fp)
   8b1d8:	18800e26 	beq	r3,r2,8b214 <alt_load_section+0x5c>
  {
    while( to != end )
   8b1dc:	00000a06 	br	8b208 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8b1e0:	e0bffd17 	ldw	r2,-12(fp)
   8b1e4:	10c00017 	ldw	r3,0(r2)
   8b1e8:	e0bffe17 	ldw	r2,-8(fp)
   8b1ec:	10c00015 	stw	r3,0(r2)
   8b1f0:	e0bffe17 	ldw	r2,-8(fp)
   8b1f4:	10800104 	addi	r2,r2,4
   8b1f8:	e0bffe15 	stw	r2,-8(fp)
   8b1fc:	e0bffd17 	ldw	r2,-12(fp)
   8b200:	10800104 	addi	r2,r2,4
   8b204:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8b208:	e0fffe17 	ldw	r3,-8(fp)
   8b20c:	e0bfff17 	ldw	r2,-4(fp)
   8b210:	18bff31e 	bne	r3,r2,8b1e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8b214:	e037883a 	mov	sp,fp
   8b218:	df000017 	ldw	fp,0(sp)
   8b21c:	dec00104 	addi	sp,sp,4
   8b220:	f800283a 	ret

0008b224 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b224:	defff804 	addi	sp,sp,-32
   8b228:	dfc00715 	stw	ra,28(sp)
   8b22c:	df000615 	stw	fp,24(sp)
   8b230:	df000604 	addi	fp,sp,24
   8b234:	e13ffc15 	stw	r4,-16(fp)
   8b238:	e17ffd15 	stw	r5,-12(fp)
   8b23c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b240:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b244:	e0bffc17 	ldw	r2,-16(fp)
   8b248:	1004803a 	cmplt	r2,r2,zero
   8b24c:	1000091e 	bne	r2,zero,8b274 <lseek+0x50>
   8b250:	e13ffc17 	ldw	r4,-16(fp)
   8b254:	01400304 	movi	r5,12
   8b258:	0080f440 	call	80f44 <__mulsi3>
   8b25c:	1007883a 	mov	r3,r2
   8b260:	008002b4 	movhi	r2,10
   8b264:	10a11604 	addi	r2,r2,-31656
   8b268:	1887883a 	add	r3,r3,r2
   8b26c:	e0ffff15 	stw	r3,-4(fp)
   8b270:	00000106 	br	8b278 <lseek+0x54>
   8b274:	e03fff15 	stw	zero,-4(fp)
   8b278:	e0bfff17 	ldw	r2,-4(fp)
   8b27c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8b280:	e0bffb17 	ldw	r2,-20(fp)
   8b284:	1005003a 	cmpeq	r2,r2,zero
   8b288:	1000111e 	bne	r2,zero,8b2d0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b28c:	e0bffb17 	ldw	r2,-20(fp)
   8b290:	10800017 	ldw	r2,0(r2)
   8b294:	10800717 	ldw	r2,28(r2)
   8b298:	1005003a 	cmpeq	r2,r2,zero
   8b29c:	1000091e 	bne	r2,zero,8b2c4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b2a0:	e0bffb17 	ldw	r2,-20(fp)
   8b2a4:	10800017 	ldw	r2,0(r2)
   8b2a8:	10800717 	ldw	r2,28(r2)
   8b2ac:	e13ffb17 	ldw	r4,-20(fp)
   8b2b0:	e17ffd17 	ldw	r5,-12(fp)
   8b2b4:	e1bffe17 	ldw	r6,-8(fp)
   8b2b8:	103ee83a 	callr	r2
   8b2bc:	e0bffa15 	stw	r2,-24(fp)
   8b2c0:	00000506 	br	8b2d8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b2c4:	00bfde84 	movi	r2,-134
   8b2c8:	e0bffa15 	stw	r2,-24(fp)
   8b2cc:	00000206 	br	8b2d8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b2d0:	00bfebc4 	movi	r2,-81
   8b2d4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8b2d8:	e0bffa17 	ldw	r2,-24(fp)
   8b2dc:	1004403a 	cmpge	r2,r2,zero
   8b2e0:	1000071e 	bne	r2,zero,8b300 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8b2e4:	008b3180 	call	8b318 <alt_get_errno>
   8b2e8:	1007883a 	mov	r3,r2
   8b2ec:	e0bffa17 	ldw	r2,-24(fp)
   8b2f0:	0085c83a 	sub	r2,zero,r2
   8b2f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   8b2f8:	00bfffc4 	movi	r2,-1
   8b2fc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8b300:	e0bffa17 	ldw	r2,-24(fp)
}
   8b304:	e037883a 	mov	sp,fp
   8b308:	dfc00117 	ldw	ra,4(sp)
   8b30c:	df000017 	ldw	fp,0(sp)
   8b310:	dec00204 	addi	sp,sp,8
   8b314:	f800283a 	ret

0008b318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b318:	defffd04 	addi	sp,sp,-12
   8b31c:	dfc00215 	stw	ra,8(sp)
   8b320:	df000115 	stw	fp,4(sp)
   8b324:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b328:	008002b4 	movhi	r2,10
   8b32c:	10a5a804 	addi	r2,r2,-26976
   8b330:	10800017 	ldw	r2,0(r2)
   8b334:	1005003a 	cmpeq	r2,r2,zero
   8b338:	1000061e 	bne	r2,zero,8b354 <alt_get_errno+0x3c>
   8b33c:	008002b4 	movhi	r2,10
   8b340:	10a5a804 	addi	r2,r2,-26976
   8b344:	10800017 	ldw	r2,0(r2)
   8b348:	103ee83a 	callr	r2
   8b34c:	e0bfff15 	stw	r2,-4(fp)
   8b350:	00000306 	br	8b360 <alt_get_errno+0x48>
   8b354:	008002b4 	movhi	r2,10
   8b358:	10ac9704 	addi	r2,r2,-19876
   8b35c:	e0bfff15 	stw	r2,-4(fp)
   8b360:	e0bfff17 	ldw	r2,-4(fp)
}
   8b364:	e037883a 	mov	sp,fp
   8b368:	dfc00117 	ldw	ra,4(sp)
   8b36c:	df000017 	ldw	fp,0(sp)
   8b370:	dec00204 	addi	sp,sp,8
   8b374:	f800283a 	ret

0008b378 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b378:	defffb04 	addi	sp,sp,-20
   8b37c:	dfc00415 	stw	ra,16(sp)
   8b380:	df000315 	stw	fp,12(sp)
   8b384:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b388:	0009883a 	mov	r4,zero
   8b38c:	00940e00 	call	940e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8b390:	008c71c0 	call	8c71c <OSInit>
   8b394:	01000044 	movi	r4,1
   8b398:	00915e40 	call	915e4 <OSSemCreate>
   8b39c:	1007883a 	mov	r3,r2
   8b3a0:	008002b4 	movhi	r2,10
   8b3a4:	10ac9e04 	addi	r2,r2,-19848
   8b3a8:	10c00015 	stw	r3,0(r2)
   8b3ac:	01000044 	movi	r4,1
   8b3b0:	00915e40 	call	915e4 <OSSemCreate>
   8b3b4:	1007883a 	mov	r3,r2
   8b3b8:	008002b4 	movhi	r2,10
   8b3bc:	10aca004 	addi	r2,r2,-19840
   8b3c0:	10c00015 	stw	r3,0(r2)
   8b3c4:	008002b4 	movhi	r2,10
   8b3c8:	10ac9804 	addi	r2,r2,-19872
   8b3cc:	e0bffd15 	stw	r2,-12(fp)
   8b3d0:	00800044 	movi	r2,1
   8b3d4:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   8b3d8:	e13ffe0b 	ldhu	r4,-8(fp)
   8b3dc:	00915e40 	call	915e4 <OSSemCreate>
   8b3e0:	1007883a 	mov	r3,r2
   8b3e4:	e0bffd17 	ldw	r2,-12(fp)
   8b3e8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b3ec:	00941140 	call	94114 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b3f0:	01000274 	movhi	r4,9
   8b3f4:	211eae04 	addi	r4,r4,31416
   8b3f8:	01400274 	movhi	r5,9
   8b3fc:	295eae04 	addi	r5,r5,31416
   8b400:	01800274 	movhi	r6,9
   8b404:	319eae04 	addi	r6,r6,31416
   8b408:	0095cfc0 	call	95cfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b40c:	00957e00 	call	957e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b410:	01000274 	movhi	r4,9
   8b414:	21161104 	addi	r4,r4,22596
   8b418:	009692c0 	call	9692c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b41c:	d126fe17 	ldw	r4,-25608(gp)
   8b420:	d166ff17 	ldw	r5,-25604(gp)
   8b424:	d1a70017 	ldw	r6,-25600(gp)
   8b428:	00809940 	call	80994 <main>
   8b42c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b430:	01000044 	movi	r4,1
   8b434:	008ab900 	call	8ab90 <close>
  exit (result);
   8b438:	e13fff17 	ldw	r4,-4(fp)
   8b43c:	00969400 	call	96940 <exit>

0008b440 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8b440:	defff204 	addi	sp,sp,-56
   8b444:	dfc00a15 	stw	ra,40(sp)
   8b448:	df000915 	stw	fp,36(sp)
   8b44c:	df000904 	addi	fp,sp,36
   8b450:	e1400215 	stw	r5,8(fp)
   8b454:	e1800315 	stw	r6,12(fp)
   8b458:	e1c00415 	stw	r7,16(fp)
   8b45c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   8b460:	e0800204 	addi	r2,fp,8
   8b464:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8b468:	e0bfff17 	ldw	r2,-4(fp)
   8b46c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   8b470:	00007806 	br	8b654 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8b474:	e0bffc07 	ldb	r2,-16(fp)
   8b478:	10800960 	cmpeqi	r2,r2,37
   8b47c:	1000031e 	bne	r2,zero,8b48c <alt_printf+0x4c>
        {
            alt_putchar(c);
   8b480:	e13ffc07 	ldb	r4,-16(fp)
   8b484:	008b6980 	call	8b698 <alt_putchar>
   8b488:	00007206 	br	8b654 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8b48c:	e0bffd17 	ldw	r2,-12(fp)
   8b490:	10800003 	ldbu	r2,0(r2)
   8b494:	e0bffc05 	stb	r2,-16(fp)
   8b498:	e0bffc07 	ldb	r2,-16(fp)
   8b49c:	1004c03a 	cmpne	r2,r2,zero
   8b4a0:	1007883a 	mov	r3,r2
   8b4a4:	e0bffd17 	ldw	r2,-12(fp)
   8b4a8:	10800044 	addi	r2,r2,1
   8b4ac:	e0bffd15 	stw	r2,-12(fp)
   8b4b0:	18803fcc 	andi	r2,r3,255
   8b4b4:	1005003a 	cmpeq	r2,r2,zero
   8b4b8:	1000721e 	bne	r2,zero,8b684 <alt_printf+0x244>
            {
                if (c == '%')
   8b4bc:	e0bffc07 	ldb	r2,-16(fp)
   8b4c0:	10800958 	cmpnei	r2,r2,37
   8b4c4:	1000031e 	bne	r2,zero,8b4d4 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8b4c8:	e13ffc07 	ldb	r4,-16(fp)
   8b4cc:	008b6980 	call	8b698 <alt_putchar>
   8b4d0:	00006006 	br	8b654 <alt_printf+0x214>
                } 
                else if (c == 'c')
   8b4d4:	e0bffc07 	ldb	r2,-16(fp)
   8b4d8:	108018d8 	cmpnei	r2,r2,99
   8b4dc:	1000091e 	bne	r2,zero,8b504 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   8b4e0:	e0fffe17 	ldw	r3,-8(fp)
   8b4e4:	18800104 	addi	r2,r3,4
   8b4e8:	e0bffe15 	stw	r2,-8(fp)
   8b4ec:	1805883a 	mov	r2,r3
   8b4f0:	10800017 	ldw	r2,0(r2)
   8b4f4:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   8b4f8:	e13ffb17 	ldw	r4,-20(fp)
   8b4fc:	008b6980 	call	8b698 <alt_putchar>
   8b500:	00005406 	br	8b654 <alt_printf+0x214>
                }
                else if (c == 'x')
   8b504:	e0bffc07 	ldb	r2,-16(fp)
   8b508:	10801e18 	cmpnei	r2,r2,120
   8b50c:	1000371e 	bne	r2,zero,8b5ec <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8b510:	e0fffe17 	ldw	r3,-8(fp)
   8b514:	18800104 	addi	r2,r3,4
   8b518:	e0bffe15 	stw	r2,-8(fp)
   8b51c:	1805883a 	mov	r2,r3
   8b520:	10800017 	ldw	r2,0(r2)
   8b524:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8b528:	e0bffa17 	ldw	r2,-24(fp)
   8b52c:	1004c03a 	cmpne	r2,r2,zero
   8b530:	1000031e 	bne	r2,zero,8b540 <alt_printf+0x100>
                    {
                        alt_putchar('0');
   8b534:	01000c04 	movi	r4,48
   8b538:	008b6980 	call	8b698 <alt_putchar>
                        continue;
   8b53c:	00004506 	br	8b654 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8b540:	00800704 	movi	r2,28
   8b544:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   8b548:	00000306 	br	8b558 <alt_printf+0x118>
                        digit_shift -= 4;
   8b54c:	e0bff817 	ldw	r2,-32(fp)
   8b550:	10bfff04 	addi	r2,r2,-4
   8b554:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8b558:	00c003c4 	movi	r3,15
   8b55c:	e0bff817 	ldw	r2,-32(fp)
   8b560:	1884983a 	sll	r2,r3,r2
   8b564:	1007883a 	mov	r3,r2
   8b568:	e0bffa17 	ldw	r2,-24(fp)
   8b56c:	1884703a 	and	r2,r3,r2
   8b570:	1005003a 	cmpeq	r2,r2,zero
   8b574:	103ff51e 	bne	r2,zero,8b54c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8b578:	00001806 	br	8b5dc <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8b57c:	00c003c4 	movi	r3,15
   8b580:	e0bff817 	ldw	r2,-32(fp)
   8b584:	1884983a 	sll	r2,r3,r2
   8b588:	1007883a 	mov	r3,r2
   8b58c:	e0bffa17 	ldw	r2,-24(fp)
   8b590:	1886703a 	and	r3,r3,r2
   8b594:	e0bff817 	ldw	r2,-32(fp)
   8b598:	1884d83a 	srl	r2,r3,r2
   8b59c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   8b5a0:	e0bff917 	ldw	r2,-28(fp)
   8b5a4:	108002a8 	cmpgeui	r2,r2,10
   8b5a8:	1000041e 	bne	r2,zero,8b5bc <alt_printf+0x17c>
                            c = '0' + digit;
   8b5ac:	e0bff917 	ldw	r2,-28(fp)
   8b5b0:	10800c04 	addi	r2,r2,48
   8b5b4:	e0bffc05 	stb	r2,-16(fp)
   8b5b8:	00000306 	br	8b5c8 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   8b5bc:	e0bff917 	ldw	r2,-28(fp)
   8b5c0:	108015c4 	addi	r2,r2,87
   8b5c4:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   8b5c8:	e13ffc07 	ldb	r4,-16(fp)
   8b5cc:	008b6980 	call	8b698 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8b5d0:	e0bff817 	ldw	r2,-32(fp)
   8b5d4:	10bfff04 	addi	r2,r2,-4
   8b5d8:	e0bff815 	stw	r2,-32(fp)
   8b5dc:	e0bff817 	ldw	r2,-32(fp)
   8b5e0:	1004403a 	cmpge	r2,r2,zero
   8b5e4:	103fe51e 	bne	r2,zero,8b57c <alt_printf+0x13c>
   8b5e8:	00001a06 	br	8b654 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8b5ec:	e0bffc07 	ldb	r2,-16(fp)
   8b5f0:	10801cd8 	cmpnei	r2,r2,115
   8b5f4:	1000171e 	bne	r2,zero,8b654 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8b5f8:	e0fffe17 	ldw	r3,-8(fp)
   8b5fc:	18800104 	addi	r2,r3,4
   8b600:	e0bffe15 	stw	r2,-8(fp)
   8b604:	1805883a 	mov	r2,r3
   8b608:	10800017 	ldw	r2,0(r2)
   8b60c:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   8b610:	00000906 	br	8b638 <alt_printf+0x1f8>
                      alt_putchar(*s++);
   8b614:	e0bff717 	ldw	r2,-36(fp)
   8b618:	10800003 	ldbu	r2,0(r2)
   8b61c:	11003fcc 	andi	r4,r2,255
   8b620:	2100201c 	xori	r4,r4,128
   8b624:	213fe004 	addi	r4,r4,-128
   8b628:	e0bff717 	ldw	r2,-36(fp)
   8b62c:	10800044 	addi	r2,r2,1
   8b630:	e0bff715 	stw	r2,-36(fp)
   8b634:	008b6980 	call	8b698 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8b638:	e0bff717 	ldw	r2,-36(fp)
   8b63c:	10800003 	ldbu	r2,0(r2)
   8b640:	10803fcc 	andi	r2,r2,255
   8b644:	1080201c 	xori	r2,r2,128
   8b648:	10bfe004 	addi	r2,r2,-128
   8b64c:	1004c03a 	cmpne	r2,r2,zero
   8b650:	103ff01e 	bne	r2,zero,8b614 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8b654:	e0bffd17 	ldw	r2,-12(fp)
   8b658:	10800003 	ldbu	r2,0(r2)
   8b65c:	e0bffc05 	stb	r2,-16(fp)
   8b660:	e0bffc07 	ldb	r2,-16(fp)
   8b664:	1004c03a 	cmpne	r2,r2,zero
   8b668:	1007883a 	mov	r3,r2
   8b66c:	e0bffd17 	ldw	r2,-12(fp)
   8b670:	10800044 	addi	r2,r2,1
   8b674:	e0bffd15 	stw	r2,-12(fp)
   8b678:	18803fcc 	andi	r2,r3,255
   8b67c:	1004c03a 	cmpne	r2,r2,zero
   8b680:	103f7c1e 	bne	r2,zero,8b474 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   8b684:	e037883a 	mov	sp,fp
   8b688:	dfc00117 	ldw	ra,4(sp)
   8b68c:	df000017 	ldw	fp,0(sp)
   8b690:	dec00504 	addi	sp,sp,20
   8b694:	f800283a 	ret

0008b698 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8b698:	defffd04 	addi	sp,sp,-12
   8b69c:	dfc00215 	stw	ra,8(sp)
   8b6a0:	df000115 	stw	fp,4(sp)
   8b6a4:	df000104 	addi	fp,sp,4
   8b6a8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8b6ac:	008002b4 	movhi	r2,10
   8b6b0:	10a59d04 	addi	r2,r2,-27020
   8b6b4:	10800017 	ldw	r2,0(r2)
   8b6b8:	11400217 	ldw	r5,8(r2)
   8b6bc:	e13fff17 	ldw	r4,-4(fp)
   8b6c0:	00969ec0 	call	969ec <putc>
#endif
}
   8b6c4:	e037883a 	mov	sp,fp
   8b6c8:	dfc00117 	ldw	ra,4(sp)
   8b6cc:	df000017 	ldw	fp,0(sp)
   8b6d0:	dec00204 	addi	sp,sp,8
   8b6d4:	f800283a 	ret

0008b6d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b6d8:	defff704 	addi	sp,sp,-36
   8b6dc:	dfc00815 	stw	ra,32(sp)
   8b6e0:	df000715 	stw	fp,28(sp)
   8b6e4:	df000704 	addi	fp,sp,28
   8b6e8:	e13ffb15 	stw	r4,-20(fp)
   8b6ec:	e17ffc15 	stw	r5,-16(fp)
   8b6f0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b6f4:	e0bffb17 	ldw	r2,-20(fp)
   8b6f8:	1004803a 	cmplt	r2,r2,zero
   8b6fc:	1000091e 	bne	r2,zero,8b724 <read+0x4c>
   8b700:	e13ffb17 	ldw	r4,-20(fp)
   8b704:	01400304 	movi	r5,12
   8b708:	0080f440 	call	80f44 <__mulsi3>
   8b70c:	1007883a 	mov	r3,r2
   8b710:	008002b4 	movhi	r2,10
   8b714:	10a11604 	addi	r2,r2,-31656
   8b718:	1887883a 	add	r3,r3,r2
   8b71c:	e0ffff15 	stw	r3,-4(fp)
   8b720:	00000106 	br	8b728 <read+0x50>
   8b724:	e03fff15 	stw	zero,-4(fp)
   8b728:	e0bfff17 	ldw	r2,-4(fp)
   8b72c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b730:	e0bffa17 	ldw	r2,-24(fp)
   8b734:	1005003a 	cmpeq	r2,r2,zero
   8b738:	1000241e 	bne	r2,zero,8b7cc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b73c:	e0bffa17 	ldw	r2,-24(fp)
   8b740:	10800217 	ldw	r2,8(r2)
   8b744:	108000cc 	andi	r2,r2,3
   8b748:	10800060 	cmpeqi	r2,r2,1
   8b74c:	10001a1e 	bne	r2,zero,8b7b8 <read+0xe0>
   8b750:	e0bffa17 	ldw	r2,-24(fp)
   8b754:	10800017 	ldw	r2,0(r2)
   8b758:	10800517 	ldw	r2,20(r2)
   8b75c:	1005003a 	cmpeq	r2,r2,zero
   8b760:	1000151e 	bne	r2,zero,8b7b8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b764:	e0bffa17 	ldw	r2,-24(fp)
   8b768:	10800017 	ldw	r2,0(r2)
   8b76c:	10800517 	ldw	r2,20(r2)
   8b770:	e17ffc17 	ldw	r5,-16(fp)
   8b774:	e1bffd17 	ldw	r6,-12(fp)
   8b778:	e13ffa17 	ldw	r4,-24(fp)
   8b77c:	103ee83a 	callr	r2
   8b780:	e0bff915 	stw	r2,-28(fp)
   8b784:	e0bff917 	ldw	r2,-28(fp)
   8b788:	1004403a 	cmpge	r2,r2,zero
   8b78c:	1000071e 	bne	r2,zero,8b7ac <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b790:	008b7fc0 	call	8b7fc <alt_get_errno>
   8b794:	e0fff917 	ldw	r3,-28(fp)
   8b798:	00c7c83a 	sub	r3,zero,r3
   8b79c:	10c00015 	stw	r3,0(r2)
          return -1;
   8b7a0:	00bfffc4 	movi	r2,-1
   8b7a4:	e0bffe15 	stw	r2,-8(fp)
   8b7a8:	00000e06 	br	8b7e4 <read+0x10c>
        }
        return rval;
   8b7ac:	e0bff917 	ldw	r2,-28(fp)
   8b7b0:	e0bffe15 	stw	r2,-8(fp)
   8b7b4:	00000b06 	br	8b7e4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b7b8:	008b7fc0 	call	8b7fc <alt_get_errno>
   8b7bc:	1007883a 	mov	r3,r2
   8b7c0:	00800344 	movi	r2,13
   8b7c4:	18800015 	stw	r2,0(r3)
   8b7c8:	00000406 	br	8b7dc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b7cc:	008b7fc0 	call	8b7fc <alt_get_errno>
   8b7d0:	1007883a 	mov	r3,r2
   8b7d4:	00801444 	movi	r2,81
   8b7d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b7dc:	00bfffc4 	movi	r2,-1
   8b7e0:	e0bffe15 	stw	r2,-8(fp)
   8b7e4:	e0bffe17 	ldw	r2,-8(fp)
}
   8b7e8:	e037883a 	mov	sp,fp
   8b7ec:	dfc00117 	ldw	ra,4(sp)
   8b7f0:	df000017 	ldw	fp,0(sp)
   8b7f4:	dec00204 	addi	sp,sp,8
   8b7f8:	f800283a 	ret

0008b7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b7fc:	defffd04 	addi	sp,sp,-12
   8b800:	dfc00215 	stw	ra,8(sp)
   8b804:	df000115 	stw	fp,4(sp)
   8b808:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b80c:	008002b4 	movhi	r2,10
   8b810:	10a5a804 	addi	r2,r2,-26976
   8b814:	10800017 	ldw	r2,0(r2)
   8b818:	1005003a 	cmpeq	r2,r2,zero
   8b81c:	1000061e 	bne	r2,zero,8b838 <alt_get_errno+0x3c>
   8b820:	008002b4 	movhi	r2,10
   8b824:	10a5a804 	addi	r2,r2,-26976
   8b828:	10800017 	ldw	r2,0(r2)
   8b82c:	103ee83a 	callr	r2
   8b830:	e0bfff15 	stw	r2,-4(fp)
   8b834:	00000306 	br	8b844 <alt_get_errno+0x48>
   8b838:	008002b4 	movhi	r2,10
   8b83c:	10ac9704 	addi	r2,r2,-19876
   8b840:	e0bfff15 	stw	r2,-4(fp)
   8b844:	e0bfff17 	ldw	r2,-4(fp)
}
   8b848:	e037883a 	mov	sp,fp
   8b84c:	dfc00117 	ldw	ra,4(sp)
   8b850:	df000017 	ldw	fp,0(sp)
   8b854:	dec00204 	addi	sp,sp,8
   8b858:	f800283a 	ret

0008b85c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b85c:	defffc04 	addi	sp,sp,-16
   8b860:	dfc00315 	stw	ra,12(sp)
   8b864:	df000215 	stw	fp,8(sp)
   8b868:	dc000115 	stw	r16,4(sp)
   8b86c:	df000104 	addi	fp,sp,4
   8b870:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b874:	e0bfff17 	ldw	r2,-4(fp)
   8b878:	108000d0 	cmplti	r2,r2,3
   8b87c:	10000f1e 	bne	r2,zero,8b8bc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b880:	e13fff17 	ldw	r4,-4(fp)
   8b884:	040002b4 	movhi	r16,10
   8b888:	84211604 	addi	r16,r16,-31656
   8b88c:	01400304 	movi	r5,12
   8b890:	0080f440 	call	80f44 <__mulsi3>
   8b894:	1405883a 	add	r2,r2,r16
   8b898:	10800204 	addi	r2,r2,8
   8b89c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b8a0:	e13fff17 	ldw	r4,-4(fp)
   8b8a4:	040002b4 	movhi	r16,10
   8b8a8:	84211604 	addi	r16,r16,-31656
   8b8ac:	01400304 	movi	r5,12
   8b8b0:	0080f440 	call	80f44 <__mulsi3>
   8b8b4:	1405883a 	add	r2,r2,r16
   8b8b8:	10000015 	stw	zero,0(r2)
  }
}
   8b8bc:	e037883a 	mov	sp,fp
   8b8c0:	dfc00217 	ldw	ra,8(sp)
   8b8c4:	df000117 	ldw	fp,4(sp)
   8b8c8:	dc000017 	ldw	r16,0(sp)
   8b8cc:	dec00304 	addi	sp,sp,12
   8b8d0:	f800283a 	ret

0008b8d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b8d4:	defff804 	addi	sp,sp,-32
   8b8d8:	df000715 	stw	fp,28(sp)
   8b8dc:	df000704 	addi	fp,sp,28
   8b8e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8e4:	0005303a 	rdctl	r2,status
   8b8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8ec:	e0fffb17 	ldw	r3,-20(fp)
   8b8f0:	00bfff84 	movi	r2,-2
   8b8f4:	1884703a 	and	r2,r3,r2
   8b8f8:	1001703a 	wrctl	status,r2
  
  return context;
   8b8fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b900:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b904:	d0a00e17 	ldw	r2,-32712(gp)
   8b908:	10c000c4 	addi	r3,r2,3
   8b90c:	00bfff04 	movi	r2,-4
   8b910:	1884703a 	and	r2,r3,r2
   8b914:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b918:	d0e00e17 	ldw	r3,-32712(gp)
   8b91c:	e0bffe17 	ldw	r2,-8(fp)
   8b920:	1887883a 	add	r3,r3,r2
   8b924:	00800434 	movhi	r2,16
   8b928:	10800004 	addi	r2,r2,0
   8b92c:	10c0072e 	bgeu	r2,r3,8b94c <sbrk+0x78>
   8b930:	e0bffd17 	ldw	r2,-12(fp)
   8b934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b938:	e0bffa17 	ldw	r2,-24(fp)
   8b93c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b940:	00bfffc4 	movi	r2,-1
   8b944:	e0bfff15 	stw	r2,-4(fp)
   8b948:	00000c06 	br	8b97c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8b94c:	d0a00e17 	ldw	r2,-32712(gp)
   8b950:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8b954:	d0e00e17 	ldw	r3,-32712(gp)
   8b958:	e0bffe17 	ldw	r2,-8(fp)
   8b95c:	1885883a 	add	r2,r3,r2
   8b960:	d0a00e15 	stw	r2,-32712(gp)
   8b964:	e0bffd17 	ldw	r2,-12(fp)
   8b968:	e0bff915 	stw	r2,-28(fp)
   8b96c:	e0bff917 	ldw	r2,-28(fp)
   8b970:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b974:	e0bffc17 	ldw	r2,-16(fp)
   8b978:	e0bfff15 	stw	r2,-4(fp)
   8b97c:	e0bfff17 	ldw	r2,-4(fp)
} 
   8b980:	e037883a 	mov	sp,fp
   8b984:	df000017 	ldw	fp,0(sp)
   8b988:	dec00104 	addi	sp,sp,4
   8b98c:	f800283a 	ret

0008b990 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b990:	defff704 	addi	sp,sp,-36
   8b994:	dfc00815 	stw	ra,32(sp)
   8b998:	df000715 	stw	fp,28(sp)
   8b99c:	df000704 	addi	fp,sp,28
   8b9a0:	e13ffb15 	stw	r4,-20(fp)
   8b9a4:	e17ffc15 	stw	r5,-16(fp)
   8b9a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b9ac:	e0bffb17 	ldw	r2,-20(fp)
   8b9b0:	1004803a 	cmplt	r2,r2,zero
   8b9b4:	1000091e 	bne	r2,zero,8b9dc <write+0x4c>
   8b9b8:	e13ffb17 	ldw	r4,-20(fp)
   8b9bc:	01400304 	movi	r5,12
   8b9c0:	0080f440 	call	80f44 <__mulsi3>
   8b9c4:	1007883a 	mov	r3,r2
   8b9c8:	008002b4 	movhi	r2,10
   8b9cc:	10a11604 	addi	r2,r2,-31656
   8b9d0:	1887883a 	add	r3,r3,r2
   8b9d4:	e0ffff15 	stw	r3,-4(fp)
   8b9d8:	00000106 	br	8b9e0 <write+0x50>
   8b9dc:	e03fff15 	stw	zero,-4(fp)
   8b9e0:	e0bfff17 	ldw	r2,-4(fp)
   8b9e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b9e8:	e0bffa17 	ldw	r2,-24(fp)
   8b9ec:	1005003a 	cmpeq	r2,r2,zero
   8b9f0:	1000241e 	bne	r2,zero,8ba84 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b9f4:	e0bffa17 	ldw	r2,-24(fp)
   8b9f8:	10800217 	ldw	r2,8(r2)
   8b9fc:	108000cc 	andi	r2,r2,3
   8ba00:	1005003a 	cmpeq	r2,r2,zero
   8ba04:	10001a1e 	bne	r2,zero,8ba70 <write+0xe0>
   8ba08:	e0bffa17 	ldw	r2,-24(fp)
   8ba0c:	10800017 	ldw	r2,0(r2)
   8ba10:	10800617 	ldw	r2,24(r2)
   8ba14:	1005003a 	cmpeq	r2,r2,zero
   8ba18:	1000151e 	bne	r2,zero,8ba70 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8ba1c:	e0bffa17 	ldw	r2,-24(fp)
   8ba20:	10800017 	ldw	r2,0(r2)
   8ba24:	10800617 	ldw	r2,24(r2)
   8ba28:	e17ffc17 	ldw	r5,-16(fp)
   8ba2c:	e1bffd17 	ldw	r6,-12(fp)
   8ba30:	e13ffa17 	ldw	r4,-24(fp)
   8ba34:	103ee83a 	callr	r2
   8ba38:	e0bff915 	stw	r2,-28(fp)
   8ba3c:	e0bff917 	ldw	r2,-28(fp)
   8ba40:	1004403a 	cmpge	r2,r2,zero
   8ba44:	1000071e 	bne	r2,zero,8ba64 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8ba48:	008bab40 	call	8bab4 <alt_get_errno>
   8ba4c:	e0fff917 	ldw	r3,-28(fp)
   8ba50:	00c7c83a 	sub	r3,zero,r3
   8ba54:	10c00015 	stw	r3,0(r2)
        return -1;
   8ba58:	00bfffc4 	movi	r2,-1
   8ba5c:	e0bffe15 	stw	r2,-8(fp)
   8ba60:	00000e06 	br	8ba9c <write+0x10c>
      }
      return rval;
   8ba64:	e0bff917 	ldw	r2,-28(fp)
   8ba68:	e0bffe15 	stw	r2,-8(fp)
   8ba6c:	00000b06 	br	8ba9c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8ba70:	008bab40 	call	8bab4 <alt_get_errno>
   8ba74:	1007883a 	mov	r3,r2
   8ba78:	00800344 	movi	r2,13
   8ba7c:	18800015 	stw	r2,0(r3)
   8ba80:	00000406 	br	8ba94 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8ba84:	008bab40 	call	8bab4 <alt_get_errno>
   8ba88:	1007883a 	mov	r3,r2
   8ba8c:	00801444 	movi	r2,81
   8ba90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ba94:	00bfffc4 	movi	r2,-1
   8ba98:	e0bffe15 	stw	r2,-8(fp)
   8ba9c:	e0bffe17 	ldw	r2,-8(fp)
}
   8baa0:	e037883a 	mov	sp,fp
   8baa4:	dfc00117 	ldw	ra,4(sp)
   8baa8:	df000017 	ldw	fp,0(sp)
   8baac:	dec00204 	addi	sp,sp,8
   8bab0:	f800283a 	ret

0008bab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bab4:	defffd04 	addi	sp,sp,-12
   8bab8:	dfc00215 	stw	ra,8(sp)
   8babc:	df000115 	stw	fp,4(sp)
   8bac0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bac4:	008002b4 	movhi	r2,10
   8bac8:	10a5a804 	addi	r2,r2,-26976
   8bacc:	10800017 	ldw	r2,0(r2)
   8bad0:	1005003a 	cmpeq	r2,r2,zero
   8bad4:	1000061e 	bne	r2,zero,8baf0 <alt_get_errno+0x3c>
   8bad8:	008002b4 	movhi	r2,10
   8badc:	10a5a804 	addi	r2,r2,-26976
   8bae0:	10800017 	ldw	r2,0(r2)
   8bae4:	103ee83a 	callr	r2
   8bae8:	e0bfff15 	stw	r2,-4(fp)
   8baec:	00000306 	br	8bafc <alt_get_errno+0x48>
   8baf0:	008002b4 	movhi	r2,10
   8baf4:	10ac9704 	addi	r2,r2,-19876
   8baf8:	e0bfff15 	stw	r2,-4(fp)
   8bafc:	e0bfff17 	ldw	r2,-4(fp)
}
   8bb00:	e037883a 	mov	sp,fp
   8bb04:	dfc00117 	ldw	ra,4(sp)
   8bb08:	df000017 	ldw	fp,0(sp)
   8bb0c:	dec00204 	addi	sp,sp,8
   8bb10:	f800283a 	ret

0008bb14 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   8bb14:	deffdf04 	addi	sp,sp,-132
   8bb18:	dfc02015 	stw	ra,128(sp)
   8bb1c:	df001f15 	stw	fp,124(sp)
   8bb20:	df001f04 	addi	fp,sp,124
   8bb24:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8bb28:	e17fe204 	addi	r5,fp,-120
   8bb2c:	01003fc4 	movi	r4,255
   8bb30:	009396c0 	call	9396c <OSTaskQuery>
   8bb34:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8bb38:	e0bffe83 	ldbu	r2,-6(fp)
   8bb3c:	10803fcc 	andi	r2,r2,255
   8bb40:	1004c03a 	cmpne	r2,r2,zero
   8bb44:	1000191e 	bne	r2,zero,8bbac <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   8bb48:	e0bfee83 	ldbu	r2,-70(fp)
   8bb4c:	10803fcc 	andi	r2,r2,255
   8bb50:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   8bb54:	d1270217 	ldw	r4,-25592(gp)
   8bb58:	e17ffd04 	addi	r5,fp,-12
   8bb5c:	0091eb80 	call	91eb8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   8bb60:	e0bffe43 	ldbu	r2,-7(fp)
   8bb64:	10803fcc 	andi	r2,r2,255
   8bb68:	1005003a 	cmpeq	r2,r2,zero
   8bb6c:	1000071e 	bne	r2,zero,8bb8c <__env_lock+0x78>
   8bb70:	d0e00f17 	ldw	r3,-32708(gp)
   8bb74:	e0bfe117 	ldw	r2,-124(fp)
   8bb78:	10c0041e 	bne	r2,r3,8bb8c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   8bb7c:	d0a70117 	ldw	r2,-25596(gp)
   8bb80:	10800044 	addi	r2,r2,1
   8bb84:	d0a70115 	stw	r2,-25596(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   8bb88:	00000806 	br	8bbac <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8bb8c:	d1270217 	ldw	r4,-25592(gp)
   8bb90:	e1bffe84 	addi	r6,fp,-6
   8bb94:	000b883a 	mov	r5,zero
   8bb98:	00919980 	call	91998 <OSSemPend>
    locks  = 1;
   8bb9c:	00800044 	movi	r2,1
   8bba0:	d0a70115 	stw	r2,-25596(gp)
    lockid = id;
   8bba4:	e0bfe117 	ldw	r2,-124(fp)
   8bba8:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8bbac:	e037883a 	mov	sp,fp
   8bbb0:	dfc00117 	ldw	ra,4(sp)
   8bbb4:	df000017 	ldw	fp,0(sp)
   8bbb8:	dec00204 	addi	sp,sp,8
   8bbbc:	f800283a 	ret

0008bbc0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8bbc0:	defffd04 	addi	sp,sp,-12
   8bbc4:	dfc00215 	stw	ra,8(sp)
   8bbc8:	df000115 	stw	fp,4(sp)
   8bbcc:	df000104 	addi	fp,sp,4
   8bbd0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   8bbd4:	d0a70117 	ldw	r2,-25596(gp)
   8bbd8:	1005003a 	cmpeq	r2,r2,zero
   8bbdc:	10000a1e 	bne	r2,zero,8bc08 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8bbe0:	d0a70117 	ldw	r2,-25596(gp)
   8bbe4:	10bfffc4 	addi	r2,r2,-1
   8bbe8:	d0a70115 	stw	r2,-25596(gp)
   8bbec:	d0a70117 	ldw	r2,-25596(gp)
   8bbf0:	1004c03a 	cmpne	r2,r2,zero
   8bbf4:	1000041e 	bne	r2,zero,8bc08 <__env_unlock+0x48>
  {
    lockid = -1;
   8bbf8:	00bfffc4 	movi	r2,-1
   8bbfc:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   8bc00:	d1270217 	ldw	r4,-25592(gp)
   8bc04:	0091d900 	call	91d90 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8bc08:	e037883a 	mov	sp,fp
   8bc0c:	dfc00117 	ldw	ra,4(sp)
   8bc10:	df000017 	ldw	fp,0(sp)
   8bc14:	dec00204 	addi	sp,sp,8
   8bc18:	f800283a 	ret

0008bc1c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8bc1c:	deffdb04 	addi	sp,sp,-148
   8bc20:	dfc02415 	stw	ra,144(sp)
   8bc24:	df002315 	stw	fp,140(sp)
   8bc28:	df002304 	addi	fp,sp,140
   8bc2c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8bc30:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   8bc34:	008002b4 	movhi	r2,10
   8bc38:	10aca144 	addi	r2,r2,-19835
   8bc3c:	10800003 	ldbu	r2,0(r2)
   8bc40:	10803fcc 	andi	r2,r2,255
   8bc44:	10800058 	cmpnei	r2,r2,1
   8bc48:	1000311e 	bne	r2,zero,8bd10 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8bc4c:	e17fe204 	addi	r5,fp,-120
   8bc50:	01003fc4 	movi	r4,255
   8bc54:	009396c0 	call	9396c <OSTaskQuery>
   8bc58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8bc5c:	e0bffe83 	ldbu	r2,-6(fp)
   8bc60:	10803fcc 	andi	r2,r2,255
   8bc64:	1004c03a 	cmpne	r2,r2,zero
   8bc68:	1000291e 	bne	r2,zero,8bd10 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   8bc6c:	e0bfee83 	ldbu	r2,-70(fp)
   8bc70:	10803fcc 	andi	r2,r2,255
   8bc74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   8bc78:	d1270417 	ldw	r4,-25584(gp)
   8bc7c:	e17ffd04 	addi	r5,fp,-12
   8bc80:	0091eb80 	call	91eb8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc84:	0005303a 	rdctl	r2,status
   8bc88:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc8c:	e0ffdf17 	ldw	r3,-132(fp)
   8bc90:	00bfff84 	movi	r2,-2
   8bc94:	1884703a 	and	r2,r3,r2
   8bc98:	1001703a 	wrctl	status,r2
  
  return context;
   8bc9c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   8bca0:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   8bca4:	e0bffd0b 	ldhu	r2,-12(fp)
   8bca8:	10bfffcc 	andi	r2,r2,65535
   8bcac:	1004c03a 	cmpne	r2,r2,zero
   8bcb0:	10000b1e 	bne	r2,zero,8bce0 <__malloc_lock+0xc4>
   8bcb4:	d0e01017 	ldw	r3,-32704(gp)
   8bcb8:	e0bfe117 	ldw	r2,-124(fp)
   8bcbc:	10c0081e 	bne	r2,r3,8bce0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   8bcc0:	d0a70317 	ldw	r2,-25588(gp)
   8bcc4:	10800044 	addi	r2,r2,1
   8bcc8:	d0a70315 	stw	r2,-25588(gp)
   8bccc:	e0bfe017 	ldw	r2,-128(fp)
   8bcd0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bcd4:	e0bfde17 	ldw	r2,-136(fp)
   8bcd8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   8bcdc:	00000c06 	br	8bd10 <__malloc_lock+0xf4>
   8bce0:	e0bfe017 	ldw	r2,-128(fp)
   8bce4:	e0bfdd15 	stw	r2,-140(fp)
   8bce8:	e0bfdd17 	ldw	r2,-140(fp)
   8bcec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   8bcf0:	d1270417 	ldw	r4,-25584(gp)
   8bcf4:	e1bffe84 	addi	r6,fp,-6
   8bcf8:	000b883a 	mov	r5,zero
   8bcfc:	00919980 	call	91998 <OSSemPend>
    locks  = 1;
   8bd00:	00800044 	movi	r2,1
   8bd04:	d0a70315 	stw	r2,-25588(gp)
    lockid = id;
   8bd08:	e0bfe117 	ldw	r2,-124(fp)
   8bd0c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8bd10:	e037883a 	mov	sp,fp
   8bd14:	dfc00117 	ldw	ra,4(sp)
   8bd18:	df000017 	ldw	fp,0(sp)
   8bd1c:	dec00204 	addi	sp,sp,8
   8bd20:	f800283a 	ret

0008bd24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8bd24:	defff804 	addi	sp,sp,-32
   8bd28:	dfc00715 	stw	ra,28(sp)
   8bd2c:	df000615 	stw	fp,24(sp)
   8bd30:	df000604 	addi	fp,sp,24
   8bd34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8bd38:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8bd3c:	008002b4 	movhi	r2,10
   8bd40:	10aca144 	addi	r2,r2,-19835
   8bd44:	10800003 	ldbu	r2,0(r2)
   8bd48:	10803fcc 	andi	r2,r2,255
   8bd4c:	10800058 	cmpnei	r2,r2,1
   8bd50:	1000231e 	bne	r2,zero,8bde0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bd54:	0005303a 	rdctl	r2,status
   8bd58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bd5c:	e0fffd17 	ldw	r3,-12(fp)
   8bd60:	00bfff84 	movi	r2,-2
   8bd64:	1884703a 	and	r2,r3,r2
   8bd68:	1001703a 	wrctl	status,r2
  
  return context;
   8bd6c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   8bd70:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   8bd74:	d0a70317 	ldw	r2,-25588(gp)
   8bd78:	1004c03a 	cmpne	r2,r2,zero
   8bd7c:	1000051e 	bne	r2,zero,8bd94 <__malloc_unlock+0x70>
   8bd80:	e0bffe17 	ldw	r2,-8(fp)
   8bd84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bd88:	e0bffc17 	ldw	r2,-16(fp)
   8bd8c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   8bd90:	00001306 	br	8bde0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   8bd94:	d0a70317 	ldw	r2,-25588(gp)
   8bd98:	10bfffc4 	addi	r2,r2,-1
   8bd9c:	d0a70315 	stw	r2,-25588(gp)
   8bda0:	d0a70317 	ldw	r2,-25588(gp)
   8bda4:	1004c03a 	cmpne	r2,r2,zero
   8bda8:	1000091e 	bne	r2,zero,8bdd0 <__malloc_unlock+0xac>
  {
    lockid = -1;
   8bdac:	00bfffc4 	movi	r2,-1
   8bdb0:	d0a01015 	stw	r2,-32704(gp)
   8bdb4:	e0bffe17 	ldw	r2,-8(fp)
   8bdb8:	e0bffb15 	stw	r2,-20(fp)
   8bdbc:	e0bffb17 	ldw	r2,-20(fp)
   8bdc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   8bdc4:	d1270417 	ldw	r4,-25584(gp)
   8bdc8:	0091d900 	call	91d90 <OSSemPost>
   8bdcc:	00000406 	br	8bde0 <__malloc_unlock+0xbc>
   8bdd0:	e0bffe17 	ldw	r2,-8(fp)
   8bdd4:	e0bffa15 	stw	r2,-24(fp)
   8bdd8:	e0bffa17 	ldw	r2,-24(fp)
   8bddc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8bde0:	e037883a 	mov	sp,fp
   8bde4:	dfc00117 	ldw	ra,4(sp)
   8bde8:	df000017 	ldw	fp,0(sp)
   8bdec:	dec00204 	addi	sp,sp,8
   8bdf0:	f800283a 	ret

0008bdf4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8bdf4:	defff604 	addi	sp,sp,-40
   8bdf8:	dfc00915 	stw	ra,36(sp)
   8bdfc:	df000815 	stw	fp,32(sp)
   8be00:	df000804 	addi	fp,sp,32
   8be04:	e13ffc15 	stw	r4,-16(fp)
   8be08:	e17ffd15 	stw	r5,-12(fp)
   8be0c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8be10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8be14:	e0bffe17 	ldw	r2,-8(fp)
   8be18:	1004c03a 	cmpne	r2,r2,zero
   8be1c:	1000021e 	bne	r2,zero,8be28 <OSEventNameGet+0x34>
        return (0);
   8be20:	e03fff15 	stw	zero,-4(fp)
   8be24:	00003906 	br	8bf0c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8be28:	e0bffc17 	ldw	r2,-16(fp)
   8be2c:	1004c03a 	cmpne	r2,r2,zero
   8be30:	1000051e 	bne	r2,zero,8be48 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8be34:	e0fffe17 	ldw	r3,-8(fp)
   8be38:	00800104 	movi	r2,4
   8be3c:	18800005 	stb	r2,0(r3)
        return (0);
   8be40:	e03fff15 	stw	zero,-4(fp)
   8be44:	00003106 	br	8bf0c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8be48:	e0bffd17 	ldw	r2,-12(fp)
   8be4c:	1004c03a 	cmpne	r2,r2,zero
   8be50:	1000051e 	bne	r2,zero,8be68 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8be54:	e0fffe17 	ldw	r3,-8(fp)
   8be58:	00800304 	movi	r2,12
   8be5c:	18800005 	stb	r2,0(r3)
        return (0);
   8be60:	e03fff15 	stw	zero,-4(fp)
   8be64:	00002906 	br	8bf0c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8be68:	d0a71303 	ldbu	r2,-25524(gp)
   8be6c:	10803fcc 	andi	r2,r2,255
   8be70:	1005003a 	cmpeq	r2,r2,zero
   8be74:	1000051e 	bne	r2,zero,8be8c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   8be78:	e0fffe17 	ldw	r3,-8(fp)
   8be7c:	00800444 	movi	r2,17
   8be80:	18800005 	stb	r2,0(r3)
        return (0);
   8be84:	e03fff15 	stw	zero,-4(fp)
   8be88:	00002006 	br	8bf0c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   8be8c:	e0bffc17 	ldw	r2,-16(fp)
   8be90:	10800003 	ldbu	r2,0(r2)
   8be94:	10803fcc 	andi	r2,r2,255
   8be98:	10bfffc4 	addi	r2,r2,-1
   8be9c:	10800128 	cmpgeui	r2,r2,4
   8bea0:	1000161e 	bne	r2,zero,8befc <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bea4:	0005303a 	rdctl	r2,status
   8bea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8beac:	e0fff917 	ldw	r3,-28(fp)
   8beb0:	00bfff84 	movi	r2,-2
   8beb4:	1884703a 	and	r2,r3,r2
   8beb8:	1001703a 	wrctl	status,r2
  
  return context;
   8bebc:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   8bec0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   8bec4:	e0bffc17 	ldw	r2,-16(fp)
   8bec8:	11400384 	addi	r5,r2,14
   8becc:	e13ffd17 	ldw	r4,-12(fp)
   8bed0:	008d9780 	call	8d978 <OS_StrCopy>
   8bed4:	e0bffb05 	stb	r2,-20(fp)
   8bed8:	e0bffa17 	ldw	r2,-24(fp)
   8bedc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bee0:	e0bff817 	ldw	r2,-32(fp)
   8bee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8bee8:	e0bffe17 	ldw	r2,-8(fp)
   8beec:	10000005 	stb	zero,0(r2)
    return (len);
   8bef0:	e0bffb03 	ldbu	r2,-20(fp)
   8bef4:	e0bfff15 	stw	r2,-4(fp)
   8bef8:	00000406 	br	8bf0c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8befc:	e0fffe17 	ldw	r3,-8(fp)
   8bf00:	00800044 	movi	r2,1
   8bf04:	18800005 	stb	r2,0(r3)
             return (0);
   8bf08:	e03fff15 	stw	zero,-4(fp)
   8bf0c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   8bf10:	e037883a 	mov	sp,fp
   8bf14:	dfc00117 	ldw	ra,4(sp)
   8bf18:	df000017 	ldw	fp,0(sp)
   8bf1c:	dec00204 	addi	sp,sp,8
   8bf20:	f800283a 	ret

0008bf24 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8bf24:	defff604 	addi	sp,sp,-40
   8bf28:	dfc00915 	stw	ra,36(sp)
   8bf2c:	df000815 	stw	fp,32(sp)
   8bf30:	df000804 	addi	fp,sp,32
   8bf34:	e13ffd15 	stw	r4,-12(fp)
   8bf38:	e17ffe15 	stw	r5,-8(fp)
   8bf3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8bf40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8bf44:	e0bfff17 	ldw	r2,-4(fp)
   8bf48:	1005003a 	cmpeq	r2,r2,zero
   8bf4c:	1000411e 	bne	r2,zero,8c054 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8bf50:	e0bffd17 	ldw	r2,-12(fp)
   8bf54:	1004c03a 	cmpne	r2,r2,zero
   8bf58:	1000041e 	bne	r2,zero,8bf6c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   8bf5c:	e0ffff17 	ldw	r3,-4(fp)
   8bf60:	00800104 	movi	r2,4
   8bf64:	18800005 	stb	r2,0(r3)
        return;
   8bf68:	00003a06 	br	8c054 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8bf6c:	e0bffe17 	ldw	r2,-8(fp)
   8bf70:	1004c03a 	cmpne	r2,r2,zero
   8bf74:	1000041e 	bne	r2,zero,8bf88 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8bf78:	e0ffff17 	ldw	r3,-4(fp)
   8bf7c:	00800304 	movi	r2,12
   8bf80:	18800005 	stb	r2,0(r3)
        return;
   8bf84:	00003306 	br	8c054 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8bf88:	d0a71303 	ldbu	r2,-25524(gp)
   8bf8c:	10803fcc 	andi	r2,r2,255
   8bf90:	1005003a 	cmpeq	r2,r2,zero
   8bf94:	1000041e 	bne	r2,zero,8bfa8 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   8bf98:	e0ffff17 	ldw	r3,-4(fp)
   8bf9c:	00800484 	movi	r2,18
   8bfa0:	18800005 	stb	r2,0(r3)
        return;
   8bfa4:	00002b06 	br	8c054 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   8bfa8:	e0bffd17 	ldw	r2,-12(fp)
   8bfac:	10800003 	ldbu	r2,0(r2)
   8bfb0:	10803fcc 	andi	r2,r2,255
   8bfb4:	10bfffc4 	addi	r2,r2,-1
   8bfb8:	10800128 	cmpgeui	r2,r2,4
   8bfbc:	10000f1e 	bne	r2,zero,8bffc <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bfc0:	0005303a 	rdctl	r2,status
   8bfc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bfc8:	e0fffa17 	ldw	r3,-24(fp)
   8bfcc:	00bfff84 	movi	r2,-2
   8bfd0:	1884703a 	and	r2,r3,r2
   8bfd4:	1001703a 	wrctl	status,r2
  
  return context;
   8bfd8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   8bfdc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   8bfe0:	e13ffe17 	ldw	r4,-8(fp)
   8bfe4:	008d9f80 	call	8d9f8 <OS_StrLen>
   8bfe8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   8bfec:	e0bffc03 	ldbu	r2,-16(fp)
   8bff0:	10800828 	cmpgeui	r2,r2,32
   8bff4:	1000051e 	bne	r2,zero,8c00c <OSEventNameSet+0xe8>
   8bff8:	00000c06 	br	8c02c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8bffc:	e0ffff17 	ldw	r3,-4(fp)
   8c000:	00800044 	movi	r2,1
   8c004:	18800005 	stb	r2,0(r3)
             return;
   8c008:	00001206 	br	8c054 <OSEventNameSet+0x130>
   8c00c:	e0bffb17 	ldw	r2,-20(fp)
   8c010:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c014:	e0bff917 	ldw	r2,-28(fp)
   8c018:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8c01c:	e0ffff17 	ldw	r3,-4(fp)
   8c020:	008002c4 	movi	r2,11
   8c024:	18800005 	stb	r2,0(r3)
        return;
   8c028:	00000a06 	br	8c054 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8c02c:	e0bffd17 	ldw	r2,-12(fp)
   8c030:	11000384 	addi	r4,r2,14
   8c034:	e17ffe17 	ldw	r5,-8(fp)
   8c038:	008d9780 	call	8d978 <OS_StrCopy>
   8c03c:	e0bffb17 	ldw	r2,-20(fp)
   8c040:	e0bff815 	stw	r2,-32(fp)
   8c044:	e0bff817 	ldw	r2,-32(fp)
   8c048:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8c04c:	e0bfff17 	ldw	r2,-4(fp)
   8c050:	10000005 	stb	zero,0(r2)
}
   8c054:	e037883a 	mov	sp,fp
   8c058:	dfc00117 	ldw	ra,4(sp)
   8c05c:	df000017 	ldw	fp,0(sp)
   8c060:	dec00204 	addi	sp,sp,8
   8c064:	f800283a 	ret

0008c068 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   8c068:	deffe704 	addi	sp,sp,-100
   8c06c:	dfc01815 	stw	ra,96(sp)
   8c070:	df001715 	stw	fp,92(sp)
   8c074:	df001704 	addi	fp,sp,92
   8c078:	e13ff615 	stw	r4,-40(fp)
   8c07c:	e17ff715 	stw	r5,-36(fp)
   8c080:	e1bff815 	stw	r6,-32(fp)
   8c084:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   8c088:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8c08c:	e0800217 	ldw	r2,8(fp)
   8c090:	1004c03a 	cmpne	r2,r2,zero
   8c094:	1000021e 	bne	r2,zero,8c0a0 <OSEventPendMulti+0x38>
        return (0);
   8c098:	e03fff15 	stw	zero,-4(fp)
   8c09c:	00019906 	br	8c704 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   8c0a0:	e0bff617 	ldw	r2,-40(fp)
   8c0a4:	1004c03a 	cmpne	r2,r2,zero
   8c0a8:	1000051e 	bne	r2,zero,8c0c0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   8c0ac:	e0c00217 	ldw	r3,8(fp)
   8c0b0:	00800104 	movi	r2,4
   8c0b4:	18800005 	stb	r2,0(r3)
        return (0);
   8c0b8:	e03fff15 	stw	zero,-4(fp)
   8c0bc:	00019106 	br	8c704 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   8c0c0:	e0bff717 	ldw	r2,-36(fp)
   8c0c4:	1004c03a 	cmpne	r2,r2,zero
   8c0c8:	1000051e 	bne	r2,zero,8c0e0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   8c0cc:	e0c00217 	ldw	r3,8(fp)
   8c0d0:	00800104 	movi	r2,4
   8c0d4:	18800005 	stb	r2,0(r3)
        return (0);
   8c0d8:	e03fff15 	stw	zero,-4(fp)
   8c0dc:	00018906 	br	8c704 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   8c0e0:	e0bff817 	ldw	r2,-32(fp)
   8c0e4:	1004c03a 	cmpne	r2,r2,zero
   8c0e8:	1000051e 	bne	r2,zero,8c100 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   8c0ec:	e0c00217 	ldw	r3,8(fp)
   8c0f0:	00800104 	movi	r2,4
   8c0f4:	18800005 	stb	r2,0(r3)
        return (0);
   8c0f8:	e03fff15 	stw	zero,-4(fp)
   8c0fc:	00018106 	br	8c704 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   8c100:	e0bff717 	ldw	r2,-36(fp)
   8c104:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   8c108:	e0bff617 	ldw	r2,-40(fp)
   8c10c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   8c110:	e0bff517 	ldw	r2,-44(fp)
   8c114:	10800017 	ldw	r2,0(r2)
   8c118:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   8c11c:	00001806 	br	8c180 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   8c120:	e0bff417 	ldw	r2,-48(fp)
   8c124:	10800003 	ldbu	r2,0(r2)
   8c128:	10803fcc 	andi	r2,r2,255
   8c12c:	e0bffe15 	stw	r2,-8(fp)
   8c130:	e0fffe17 	ldw	r3,-8(fp)
   8c134:	188000a0 	cmpeqi	r2,r3,2
   8c138:	10000b1e 	bne	r2,zero,8c168 <OSEventPendMulti+0x100>
   8c13c:	e0fffe17 	ldw	r3,-8(fp)
   8c140:	188000e0 	cmpeqi	r2,r3,3
   8c144:	1000081e 	bne	r2,zero,8c168 <OSEventPendMulti+0x100>
   8c148:	e0fffe17 	ldw	r3,-8(fp)
   8c14c:	18800060 	cmpeqi	r2,r3,1
   8c150:	1000051e 	bne	r2,zero,8c168 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   8c154:	e0c00217 	ldw	r3,8(fp)
   8c158:	00800044 	movi	r2,1
   8c15c:	18800005 	stb	r2,0(r3)
                 return (0);
   8c160:	e03fff15 	stw	zero,-4(fp)
   8c164:	00016706 	br	8c704 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8c168:	e0bff517 	ldw	r2,-44(fp)
   8c16c:	10800104 	addi	r2,r2,4
   8c170:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8c174:	e0bff517 	ldw	r2,-44(fp)
   8c178:	10800017 	ldw	r2,0(r2)
   8c17c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   8c180:	e0bff417 	ldw	r2,-48(fp)
   8c184:	1004c03a 	cmpne	r2,r2,zero
   8c188:	103fe51e 	bne	r2,zero,8c120 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8c18c:	d0a71303 	ldbu	r2,-25524(gp)
   8c190:	10803fcc 	andi	r2,r2,255
   8c194:	1005003a 	cmpeq	r2,r2,zero
   8c198:	1000051e 	bne	r2,zero,8c1b0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8c19c:	e0c00217 	ldw	r3,8(fp)
   8c1a0:	00800084 	movi	r2,2
   8c1a4:	18800005 	stb	r2,0(r3)
        return (0);
   8c1a8:	e03fff15 	stw	zero,-4(fp)
   8c1ac:	00015506 	br	8c704 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   8c1b0:	d0a70503 	ldbu	r2,-25580(gp)
   8c1b4:	10803fcc 	andi	r2,r2,255
   8c1b8:	1005003a 	cmpeq	r2,r2,zero
   8c1bc:	1000051e 	bne	r2,zero,8c1d4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   8c1c0:	e0c00217 	ldw	r3,8(fp)
   8c1c4:	00800344 	movi	r2,13
   8c1c8:	18800005 	stb	r2,0(r3)
        return (0);
   8c1cc:	e03fff15 	stw	zero,-4(fp)
   8c1d0:	00014c06 	br	8c704 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c1d4:	0005303a 	rdctl	r2,status
   8c1d8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c1dc:	e0ffef17 	ldw	r3,-68(fp)
   8c1e0:	00bfff84 	movi	r2,-2
   8c1e4:	1884703a 	and	r2,r3,r2
   8c1e8:	1001703a 	wrctl	status,r2
  
  return context;
   8c1ec:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8c1f0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   8c1f4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   8c1f8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   8c1fc:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   8c200:	e0bff617 	ldw	r2,-40(fp)
   8c204:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   8c208:	e0bff517 	ldw	r2,-44(fp)
   8c20c:	10800017 	ldw	r2,0(r2)
   8c210:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8c214:	00008f06 	br	8c454 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   8c218:	e0bff417 	ldw	r2,-48(fp)
   8c21c:	10800003 	ldbu	r2,0(r2)
   8c220:	10803fcc 	andi	r2,r2,255
   8c224:	e0bffd15 	stw	r2,-12(fp)
   8c228:	e0fffd17 	ldw	r3,-12(fp)
   8c22c:	188000a0 	cmpeqi	r2,r3,2
   8c230:	1000441e 	bne	r2,zero,8c344 <OSEventPendMulti+0x2dc>
   8c234:	e0fffd17 	ldw	r3,-12(fp)
   8c238:	188000e0 	cmpeqi	r2,r3,3
   8c23c:	1000041e 	bne	r2,zero,8c250 <OSEventPendMulti+0x1e8>
   8c240:	e0fffd17 	ldw	r3,-12(fp)
   8c244:	18800060 	cmpeqi	r2,r3,1
   8c248:	1000211e 	bne	r2,zero,8c2d0 <OSEventPendMulti+0x268>
   8c24c:	00006f06 	br	8c40c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   8c250:	e0bff417 	ldw	r2,-48(fp)
   8c254:	1080020b 	ldhu	r2,8(r2)
   8c258:	10bfffcc 	andi	r2,r2,65535
   8c25c:	1005003a 	cmpeq	r2,r2,zero
   8c260:	1000171e 	bne	r2,zero,8c2c0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   8c264:	e0bff417 	ldw	r2,-48(fp)
   8c268:	1080020b 	ldhu	r2,8(r2)
   8c26c:	10bfffc4 	addi	r2,r2,-1
   8c270:	1007883a 	mov	r3,r2
   8c274:	e0bff417 	ldw	r2,-48(fp)
   8c278:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8c27c:	e0fff717 	ldw	r3,-36(fp)
   8c280:	e0bff417 	ldw	r2,-48(fp)
   8c284:	18800015 	stw	r2,0(r3)
   8c288:	e0bff717 	ldw	r2,-36(fp)
   8c28c:	10800104 	addi	r2,r2,4
   8c290:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   8c294:	00800044 	movi	r2,1
   8c298:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8c29c:	e0bff817 	ldw	r2,-32(fp)
   8c2a0:	10000015 	stw	zero,0(r2)
   8c2a4:	e0bff817 	ldw	r2,-32(fp)
   8c2a8:	10800104 	addi	r2,r2,4
   8c2ac:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   8c2b0:	e0bff18b 	ldhu	r2,-58(fp)
   8c2b4:	10800044 	addi	r2,r2,1
   8c2b8:	e0bff18d 	sth	r2,-58(fp)
   8c2bc:	00005f06 	br	8c43c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8c2c0:	e0bff103 	ldbu	r2,-60(fp)
   8c2c4:	10800054 	ori	r2,r2,1
   8c2c8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8c2cc:	00005b06 	br	8c43c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8c2d0:	e0bff417 	ldw	r2,-48(fp)
   8c2d4:	10800117 	ldw	r2,4(r2)
   8c2d8:	1005003a 	cmpeq	r2,r2,zero
   8c2dc:	1000151e 	bne	r2,zero,8c334 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8c2e0:	e0bff417 	ldw	r2,-48(fp)
   8c2e4:	10c00117 	ldw	r3,4(r2)
   8c2e8:	e0bff817 	ldw	r2,-32(fp)
   8c2ec:	10c00015 	stw	r3,0(r2)
   8c2f0:	e0bff817 	ldw	r2,-32(fp)
   8c2f4:	10800104 	addi	r2,r2,4
   8c2f8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   8c2fc:	e0bff417 	ldw	r2,-48(fp)
   8c300:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   8c304:	e0fff717 	ldw	r3,-36(fp)
   8c308:	e0bff417 	ldw	r2,-48(fp)
   8c30c:	18800015 	stw	r2,0(r3)
   8c310:	e0bff717 	ldw	r2,-36(fp)
   8c314:	10800104 	addi	r2,r2,4
   8c318:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   8c31c:	00800044 	movi	r2,1
   8c320:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8c324:	e0bff18b 	ldhu	r2,-58(fp)
   8c328:	10800044 	addi	r2,r2,1
   8c32c:	e0bff18d 	sth	r2,-58(fp)
   8c330:	00004206 	br	8c43c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   8c334:	e0bff103 	ldbu	r2,-60(fp)
   8c338:	10800094 	ori	r2,r2,2
   8c33c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8c340:	00003e06 	br	8c43c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   8c344:	e0bff417 	ldw	r2,-48(fp)
   8c348:	10800117 	ldw	r2,4(r2)
   8c34c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   8c350:	e0bff317 	ldw	r2,-52(fp)
   8c354:	1080058b 	ldhu	r2,22(r2)
   8c358:	10bfffcc 	andi	r2,r2,65535
   8c35c:	1005003a 	cmpeq	r2,r2,zero
   8c360:	1000261e 	bne	r2,zero,8c3fc <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   8c364:	e0bff317 	ldw	r2,-52(fp)
   8c368:	11000417 	ldw	r4,16(r2)
   8c36c:	20c00017 	ldw	r3,0(r4)
   8c370:	e0bff817 	ldw	r2,-32(fp)
   8c374:	10c00015 	stw	r3,0(r2)
   8c378:	e0bff817 	ldw	r2,-32(fp)
   8c37c:	10800104 	addi	r2,r2,4
   8c380:	e0bff815 	stw	r2,-32(fp)
   8c384:	20c00104 	addi	r3,r4,4
   8c388:	e0bff317 	ldw	r2,-52(fp)
   8c38c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8c390:	e0bff317 	ldw	r2,-52(fp)
   8c394:	10c00417 	ldw	r3,16(r2)
   8c398:	e0bff317 	ldw	r2,-52(fp)
   8c39c:	10800217 	ldw	r2,8(r2)
   8c3a0:	1880041e 	bne	r3,r2,8c3b4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   8c3a4:	e0bff317 	ldw	r2,-52(fp)
   8c3a8:	10c00117 	ldw	r3,4(r2)
   8c3ac:	e0bff317 	ldw	r2,-52(fp)
   8c3b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   8c3b4:	e0bff317 	ldw	r2,-52(fp)
   8c3b8:	1080058b 	ldhu	r2,22(r2)
   8c3bc:	10bfffc4 	addi	r2,r2,-1
   8c3c0:	1007883a 	mov	r3,r2
   8c3c4:	e0bff317 	ldw	r2,-52(fp)
   8c3c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   8c3cc:	e0fff717 	ldw	r3,-36(fp)
   8c3d0:	e0bff417 	ldw	r2,-48(fp)
   8c3d4:	18800015 	stw	r2,0(r3)
   8c3d8:	e0bff717 	ldw	r2,-36(fp)
   8c3dc:	10800104 	addi	r2,r2,4
   8c3e0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   8c3e4:	00800044 	movi	r2,1
   8c3e8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8c3ec:	e0bff18b 	ldhu	r2,-58(fp)
   8c3f0:	10800044 	addi	r2,r2,1
   8c3f4:	e0bff18d 	sth	r2,-58(fp)
   8c3f8:	00001006 	br	8c43c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   8c3fc:	e0bff103 	ldbu	r2,-60(fp)
   8c400:	10800114 	ori	r2,r2,4
   8c404:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8c408:	00000c06 	br	8c43c <OSEventPendMulti+0x3d4>
   8c40c:	e0bff017 	ldw	r2,-64(fp)
   8c410:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c414:	e0bfee17 	ldw	r2,-72(fp)
   8c418:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8c41c:	e0bff717 	ldw	r2,-36(fp)
   8c420:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   8c424:	e0c00217 	ldw	r3,8(fp)
   8c428:	00800044 	movi	r2,1
   8c42c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   8c430:	e0bff18b 	ldhu	r2,-58(fp)
   8c434:	e0bfff15 	stw	r2,-4(fp)
   8c438:	0000b206 	br	8c704 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8c43c:	e0bff517 	ldw	r2,-44(fp)
   8c440:	10800104 	addi	r2,r2,4
   8c444:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8c448:	e0bff517 	ldw	r2,-44(fp)
   8c44c:	10800017 	ldw	r2,0(r2)
   8c450:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8c454:	e0bff417 	ldw	r2,-48(fp)
   8c458:	1004c03a 	cmpne	r2,r2,zero
   8c45c:	103f6e1e 	bne	r2,zero,8c218 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   8c460:	e0bff203 	ldbu	r2,-56(fp)
   8c464:	10800058 	cmpnei	r2,r2,1
   8c468:	10000b1e 	bne	r2,zero,8c498 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8c46c:	e0bff717 	ldw	r2,-36(fp)
   8c470:	10000015 	stw	zero,0(r2)
   8c474:	e0bff017 	ldw	r2,-64(fp)
   8c478:	e0bfed15 	stw	r2,-76(fp)
   8c47c:	e0bfed17 	ldw	r2,-76(fp)
   8c480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   8c484:	e0800217 	ldw	r2,8(fp)
   8c488:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8c48c:	e0fff18b 	ldhu	r3,-58(fp)
   8c490:	e0ffff15 	stw	r3,-4(fp)
   8c494:	00009b06 	br	8c704 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   8c498:	d1271417 	ldw	r4,-25520(gp)
   8c49c:	d0a71417 	ldw	r2,-25520(gp)
   8c4a0:	10c00c03 	ldbu	r3,48(r2)
   8c4a4:	e0bff103 	ldbu	r2,-60(fp)
   8c4a8:	1884b03a 	or	r2,r3,r2
   8c4ac:	1007883a 	mov	r3,r2
   8c4b0:	00bfe004 	movi	r2,-128
   8c4b4:	1884b03a 	or	r2,r3,r2
   8c4b8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8c4bc:	d0a71417 	ldw	r2,-25520(gp)
   8c4c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   8c4c4:	d0e71417 	ldw	r3,-25520(gp)
   8c4c8:	e0bff90b 	ldhu	r2,-28(fp)
   8c4cc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8c4d0:	e13ff617 	ldw	r4,-40(fp)
   8c4d4:	008d0980 	call	8d098 <OS_EventTaskWaitMulti>
   8c4d8:	e0bff017 	ldw	r2,-64(fp)
   8c4dc:	e0bfec15 	stw	r2,-80(fp)
   8c4e0:	e0bfec17 	ldw	r2,-80(fp)
   8c4e4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   8c4e8:	008d8340 	call	8d834 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c4ec:	0005303a 	rdctl	r2,status
   8c4f0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c4f4:	e0ffeb17 	ldw	r3,-84(fp)
   8c4f8:	00bfff84 	movi	r2,-2
   8c4fc:	1884703a 	and	r2,r3,r2
   8c500:	1001703a 	wrctl	status,r2
  
  return context;
   8c504:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   8c508:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   8c50c:	d0a71417 	ldw	r2,-25520(gp)
   8c510:	10800c43 	ldbu	r2,49(r2)
   8c514:	10803fcc 	andi	r2,r2,255
   8c518:	e0bffc15 	stw	r2,-16(fp)
   8c51c:	e0fffc17 	ldw	r3,-16(fp)
   8c520:	1805003a 	cmpeq	r2,r3,zero
   8c524:	1000041e 	bne	r2,zero,8c538 <OSEventPendMulti+0x4d0>
   8c528:	e0fffc17 	ldw	r3,-16(fp)
   8c52c:	188000a0 	cmpeqi	r2,r3,2
   8c530:	1000011e 	bne	r2,zero,8c538 <OSEventPendMulti+0x4d0>
   8c534:	00001906 	br	8c59c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   8c538:	d0a71417 	ldw	r2,-25520(gp)
   8c53c:	10800717 	ldw	r2,28(r2)
   8c540:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   8c544:	e0bff417 	ldw	r2,-48(fp)
   8c548:	1005003a 	cmpeq	r2,r2,zero
   8c54c:	10000c1e 	bne	r2,zero,8c580 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   8c550:	e0fff717 	ldw	r3,-36(fp)
   8c554:	e0bff417 	ldw	r2,-48(fp)
   8c558:	18800015 	stw	r2,0(r3)
   8c55c:	e0bff717 	ldw	r2,-36(fp)
   8c560:	10800104 	addi	r2,r2,4
   8c564:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   8c568:	e0bff717 	ldw	r2,-36(fp)
   8c56c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   8c570:	e0bff18b 	ldhu	r2,-58(fp)
   8c574:	10800044 	addi	r2,r2,1
   8c578:	e0bff18d 	sth	r2,-58(fp)
   8c57c:	00000a06 	br	8c5a8 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   8c580:	d0a71417 	ldw	r2,-25520(gp)
   8c584:	00c00044 	movi	r3,1
   8c588:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8c58c:	d1271417 	ldw	r4,-25520(gp)
   8c590:	e17ff617 	ldw	r5,-40(fp)
   8c594:	008d2a40 	call	8d2a4 <OS_EventTaskRemoveMulti>
             }
			 break;
   8c598:	00000306 	br	8c5a8 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8c59c:	d1271417 	ldw	r4,-25520(gp)
   8c5a0:	e17ff617 	ldw	r5,-40(fp)
   8c5a4:	008d2a40 	call	8d2a4 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   8c5a8:	d0a71417 	ldw	r2,-25520(gp)
   8c5ac:	10800c43 	ldbu	r2,49(r2)
   8c5b0:	10803fcc 	andi	r2,r2,255
   8c5b4:	e0bffb15 	stw	r2,-20(fp)
   8c5b8:	e0fffb17 	ldw	r3,-20(fp)
   8c5bc:	1805003a 	cmpeq	r2,r3,zero
   8c5c0:	1000041e 	bne	r2,zero,8c5d4 <OSEventPendMulti+0x56c>
   8c5c4:	e0fffb17 	ldw	r3,-20(fp)
   8c5c8:	188000a0 	cmpeqi	r2,r3,2
   8c5cc:	10002c1e 	bne	r2,zero,8c680 <OSEventPendMulti+0x618>
   8c5d0:	00003406 	br	8c6a4 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   8c5d4:	e0bff417 	ldw	r2,-48(fp)
   8c5d8:	10800003 	ldbu	r2,0(r2)
   8c5dc:	10803fcc 	andi	r2,r2,255
   8c5e0:	e0bffa15 	stw	r2,-24(fp)
   8c5e4:	e0fffa17 	ldw	r3,-24(fp)
   8c5e8:	18800050 	cmplti	r2,r3,1
   8c5ec:	1000151e 	bne	r2,zero,8c644 <OSEventPendMulti+0x5dc>
   8c5f0:	e0fffa17 	ldw	r3,-24(fp)
   8c5f4:	188000d0 	cmplti	r2,r3,3
   8c5f8:	10000a1e 	bne	r2,zero,8c624 <OSEventPendMulti+0x5bc>
   8c5fc:	e0fffa17 	ldw	r3,-24(fp)
   8c600:	188000e0 	cmpeqi	r2,r3,3
   8c604:	1000011e 	bne	r2,zero,8c60c <OSEventPendMulti+0x5a4>
   8c608:	00000e06 	br	8c644 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   8c60c:	e0bff817 	ldw	r2,-32(fp)
   8c610:	10000015 	stw	zero,0(r2)
   8c614:	e0bff817 	ldw	r2,-32(fp)
   8c618:	10800104 	addi	r2,r2,4
   8c61c:	e0bff815 	stw	r2,-32(fp)
                      break;
   8c620:	00001406 	br	8c674 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   8c624:	d0a71417 	ldw	r2,-25520(gp)
   8c628:	10c00917 	ldw	r3,36(r2)
   8c62c:	e0bff817 	ldw	r2,-32(fp)
   8c630:	10c00015 	stw	r3,0(r2)
   8c634:	e0bff817 	ldw	r2,-32(fp)
   8c638:	10800104 	addi	r2,r2,4
   8c63c:	e0bff815 	stw	r2,-32(fp)
                      break;
   8c640:	00000c06 	br	8c674 <OSEventPendMulti+0x60c>
   8c644:	e0bff017 	ldw	r2,-64(fp)
   8c648:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c64c:	e0bfea17 	ldw	r2,-88(fp)
   8c650:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   8c654:	e0bff717 	ldw	r2,-36(fp)
   8c658:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   8c65c:	e0c00217 	ldw	r3,8(fp)
   8c660:	00800044 	movi	r2,1
   8c664:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   8c668:	e0bff18b 	ldhu	r2,-58(fp)
   8c66c:	e0bfff15 	stw	r2,-4(fp)
   8c670:	00002406 	br	8c704 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   8c674:	e0800217 	ldw	r2,8(fp)
   8c678:	10000005 	stb	zero,0(r2)
             break;
   8c67c:	00001106 	br	8c6c4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   8c680:	e0bff817 	ldw	r2,-32(fp)
   8c684:	10000015 	stw	zero,0(r2)
   8c688:	e0bff817 	ldw	r2,-32(fp)
   8c68c:	10800104 	addi	r2,r2,4
   8c690:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   8c694:	e0c00217 	ldw	r3,8(fp)
   8c698:	00800384 	movi	r2,14
   8c69c:	18800005 	stb	r2,0(r3)
             break;
   8c6a0:	00000806 	br	8c6c4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   8c6a4:	e0bff817 	ldw	r2,-32(fp)
   8c6a8:	10000015 	stw	zero,0(r2)
   8c6ac:	e0bff817 	ldw	r2,-32(fp)
   8c6b0:	10800104 	addi	r2,r2,4
   8c6b4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   8c6b8:	e0c00217 	ldw	r3,8(fp)
   8c6bc:	00800284 	movi	r2,10
   8c6c0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   8c6c4:	d0a71417 	ldw	r2,-25520(gp)
   8c6c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   8c6cc:	d0a71417 	ldw	r2,-25520(gp)
   8c6d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   8c6d4:	d0a71417 	ldw	r2,-25520(gp)
   8c6d8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8c6dc:	d0a71417 	ldw	r2,-25520(gp)
   8c6e0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   8c6e4:	d0a71417 	ldw	r2,-25520(gp)
   8c6e8:	10000915 	stw	zero,36(r2)
   8c6ec:	e0bff017 	ldw	r2,-64(fp)
   8c6f0:	e0bfe915 	stw	r2,-92(fp)
   8c6f4:	e0bfe917 	ldw	r2,-92(fp)
   8c6f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   8c6fc:	e0fff18b 	ldhu	r3,-58(fp)
   8c700:	e0ffff15 	stw	r3,-4(fp)
   8c704:	e0bfff17 	ldw	r2,-4(fp)
}
   8c708:	e037883a 	mov	sp,fp
   8c70c:	dfc00117 	ldw	ra,4(sp)
   8c710:	df000017 	ldw	fp,0(sp)
   8c714:	dec00204 	addi	sp,sp,8
   8c718:	f800283a 	ret

0008c71c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   8c71c:	defffe04 	addi	sp,sp,-8
   8c720:	dfc00115 	stw	ra,4(sp)
   8c724:	df000015 	stw	fp,0(sp)
   8c728:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   8c72c:	00966940 	call	96694 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   8c730:	008d4ec0 	call	8d4ec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   8c734:	008d5300 	call	8d530 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   8c738:	008d6940 	call	8d694 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   8c73c:	008d4100 	call	8d410 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   8c740:	008f7440 	call	8f744 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   8c744:	009011c0 	call	9011c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   8c748:	00914780 	call	91478 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   8c74c:	008d59c0 	call	8d59c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   8c750:	008d6180 	call	8d618 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   8c754:	00966b00 	call	966b0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   8c758:	008df1c0 	call	8df1c <OSDebugInit>
#endif
}
   8c75c:	e037883a 	mov	sp,fp
   8c760:	dfc00117 	ldw	ra,4(sp)
   8c764:	df000017 	ldw	fp,0(sp)
   8c768:	dec00204 	addi	sp,sp,8
   8c76c:	f800283a 	ret

0008c770 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   8c770:	defffc04 	addi	sp,sp,-16
   8c774:	df000315 	stw	fp,12(sp)
   8c778:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8c77c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   8c780:	d0a70543 	ldbu	r2,-25579(gp)
   8c784:	10803fcc 	andi	r2,r2,255
   8c788:	10800058 	cmpnei	r2,r2,1
   8c78c:	1000131e 	bne	r2,zero,8c7dc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c790:	0005303a 	rdctl	r2,status
   8c794:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c798:	e0fffe17 	ldw	r3,-8(fp)
   8c79c:	00bfff84 	movi	r2,-2
   8c7a0:	1884703a 	and	r2,r3,r2
   8c7a4:	1001703a 	wrctl	status,r2
  
  return context;
   8c7a8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8c7ac:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   8c7b0:	d0a71303 	ldbu	r2,-25524(gp)
   8c7b4:	10803fcc 	andi	r2,r2,255
   8c7b8:	10803fe0 	cmpeqi	r2,r2,255
   8c7bc:	1000031e 	bne	r2,zero,8c7cc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8c7c0:	d0a71303 	ldbu	r2,-25524(gp)
   8c7c4:	10800044 	addi	r2,r2,1
   8c7c8:	d0a71305 	stb	r2,-25524(gp)
   8c7cc:	e0bfff17 	ldw	r2,-4(fp)
   8c7d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c7d4:	e0bffd17 	ldw	r2,-12(fp)
   8c7d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   8c7dc:	e037883a 	mov	sp,fp
   8c7e0:	df000017 	ldw	fp,0(sp)
   8c7e4:	dec00104 	addi	sp,sp,4
   8c7e8:	f800283a 	ret

0008c7ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   8c7ec:	defffb04 	addi	sp,sp,-20
   8c7f0:	dfc00415 	stw	ra,16(sp)
   8c7f4:	df000315 	stw	fp,12(sp)
   8c7f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8c7fc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8c800:	d0a70543 	ldbu	r2,-25579(gp)
   8c804:	10803fcc 	andi	r2,r2,255
   8c808:	10800058 	cmpnei	r2,r2,1
   8c80c:	1000321e 	bne	r2,zero,8c8d8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c810:	0005303a 	rdctl	r2,status
   8c814:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c818:	e0fffe17 	ldw	r3,-8(fp)
   8c81c:	00bfff84 	movi	r2,-2
   8c820:	1884703a 	and	r2,r3,r2
   8c824:	1001703a 	wrctl	status,r2
  
  return context;
   8c828:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8c82c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   8c830:	d0a71303 	ldbu	r2,-25524(gp)
   8c834:	10803fcc 	andi	r2,r2,255
   8c838:	1005003a 	cmpeq	r2,r2,zero
   8c83c:	1000031e 	bne	r2,zero,8c84c <OSIntExit+0x60>
            OSIntNesting--;
   8c840:	d0a71303 	ldbu	r2,-25524(gp)
   8c844:	10bfffc4 	addi	r2,r2,-1
   8c848:	d0a71305 	stb	r2,-25524(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   8c84c:	d0a71303 	ldbu	r2,-25524(gp)
   8c850:	10803fcc 	andi	r2,r2,255
   8c854:	1004c03a 	cmpne	r2,r2,zero
   8c858:	10001b1e 	bne	r2,zero,8c8c8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   8c85c:	d0a70503 	ldbu	r2,-25580(gp)
   8c860:	10803fcc 	andi	r2,r2,255
   8c864:	1004c03a 	cmpne	r2,r2,zero
   8c868:	1000171e 	bne	r2,zero,8c8c8 <OSIntExit+0xdc>
                OS_SchedNew();
   8c86c:	008d9080 	call	8d908 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   8c870:	d0a70703 	ldbu	r2,-25572(gp)
   8c874:	d0e70743 	ldbu	r3,-25571(gp)
   8c878:	11003fcc 	andi	r4,r2,255
   8c87c:	18803fcc 	andi	r2,r3,255
   8c880:	20801126 	beq	r4,r2,8c8c8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   8c884:	d0a70703 	ldbu	r2,-25572(gp)
   8c888:	10803fcc 	andi	r2,r2,255
   8c88c:	00c002f4 	movhi	r3,11
   8c890:	18e9c004 	addi	r3,r3,-22784
   8c894:	1085883a 	add	r2,r2,r2
   8c898:	1085883a 	add	r2,r2,r2
   8c89c:	10c5883a 	add	r2,r2,r3
   8c8a0:	10800017 	ldw	r2,0(r2)
   8c8a4:	d0a70f15 	stw	r2,-25540(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   8c8a8:	d0e70f17 	ldw	r3,-25540(gp)
   8c8ac:	18800e17 	ldw	r2,56(r3)
   8c8b0:	10800044 	addi	r2,r2,1
   8c8b4:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   8c8b8:	d0a70a17 	ldw	r2,-25560(gp)
   8c8bc:	10800044 	addi	r2,r2,1
   8c8c0:	d0a70a15 	stw	r2,-25560(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   8c8c4:	00962200 	call	96220 <OSCtxSw>
   8c8c8:	e0bfff17 	ldw	r2,-4(fp)
   8c8cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c8d0:	e0bffd17 	ldw	r2,-12(fp)
   8c8d4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8c8d8:	e037883a 	mov	sp,fp
   8c8dc:	dfc00117 	ldw	ra,4(sp)
   8c8e0:	df000017 	ldw	fp,0(sp)
   8c8e4:	dec00204 	addi	sp,sp,8
   8c8e8:	f800283a 	ret

0008c8ec <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   8c8ec:	defffc04 	addi	sp,sp,-16
   8c8f0:	df000315 	stw	fp,12(sp)
   8c8f4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8c8f8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   8c8fc:	d0a70543 	ldbu	r2,-25579(gp)
   8c900:	10803fcc 	andi	r2,r2,255
   8c904:	10800058 	cmpnei	r2,r2,1
   8c908:	1000171e 	bne	r2,zero,8c968 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c90c:	0005303a 	rdctl	r2,status
   8c910:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c914:	e0fffe17 	ldw	r3,-8(fp)
   8c918:	00bfff84 	movi	r2,-2
   8c91c:	1884703a 	and	r2,r3,r2
   8c920:	1001703a 	wrctl	status,r2
  
  return context;
   8c924:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8c928:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   8c92c:	d0a71303 	ldbu	r2,-25524(gp)
   8c930:	10803fcc 	andi	r2,r2,255
   8c934:	1004c03a 	cmpne	r2,r2,zero
   8c938:	1000071e 	bne	r2,zero,8c958 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   8c93c:	d0a70503 	ldbu	r2,-25580(gp)
   8c940:	10803fcc 	andi	r2,r2,255
   8c944:	10803fe0 	cmpeqi	r2,r2,255
   8c948:	1000031e 	bne	r2,zero,8c958 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   8c94c:	d0a70503 	ldbu	r2,-25580(gp)
   8c950:	10800044 	addi	r2,r2,1
   8c954:	d0a70505 	stb	r2,-25580(gp)
   8c958:	e0bfff17 	ldw	r2,-4(fp)
   8c95c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c960:	e0bffd17 	ldw	r2,-12(fp)
   8c964:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8c968:	e037883a 	mov	sp,fp
   8c96c:	df000017 	ldw	fp,0(sp)
   8c970:	dec00104 	addi	sp,sp,4
   8c974:	f800283a 	ret

0008c978 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   8c978:	defff804 	addi	sp,sp,-32
   8c97c:	dfc00715 	stw	ra,28(sp)
   8c980:	df000615 	stw	fp,24(sp)
   8c984:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8c988:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   8c98c:	d0a70543 	ldbu	r2,-25579(gp)
   8c990:	10803fcc 	andi	r2,r2,255
   8c994:	10800058 	cmpnei	r2,r2,1
   8c998:	10002b1e 	bne	r2,zero,8ca48 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c99c:	0005303a 	rdctl	r2,status
   8c9a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c9a4:	e0fffe17 	ldw	r3,-8(fp)
   8c9a8:	00bfff84 	movi	r2,-2
   8c9ac:	1884703a 	and	r2,r3,r2
   8c9b0:	1001703a 	wrctl	status,r2
  
  return context;
   8c9b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8c9b8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   8c9bc:	d0a70503 	ldbu	r2,-25580(gp)
   8c9c0:	10803fcc 	andi	r2,r2,255
   8c9c4:	1005003a 	cmpeq	r2,r2,zero
   8c9c8:	10001b1e 	bne	r2,zero,8ca38 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   8c9cc:	d0a70503 	ldbu	r2,-25580(gp)
   8c9d0:	10bfffc4 	addi	r2,r2,-1
   8c9d4:	d0a70505 	stb	r2,-25580(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   8c9d8:	d0a70503 	ldbu	r2,-25580(gp)
   8c9dc:	10803fcc 	andi	r2,r2,255
   8c9e0:	1004c03a 	cmpne	r2,r2,zero
   8c9e4:	10000f1e 	bne	r2,zero,8ca24 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   8c9e8:	d0a71303 	ldbu	r2,-25524(gp)
   8c9ec:	10803fcc 	andi	r2,r2,255
   8c9f0:	1004c03a 	cmpne	r2,r2,zero
   8c9f4:	1000061e 	bne	r2,zero,8ca10 <OSSchedUnlock+0x98>
   8c9f8:	e0bfff17 	ldw	r2,-4(fp)
   8c9fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ca00:	e0bffd17 	ldw	r2,-12(fp)
   8ca04:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   8ca08:	008d8340 	call	8d834 <OS_Sched>
   8ca0c:	00000e06 	br	8ca48 <OSSchedUnlock+0xd0>
   8ca10:	e0bfff17 	ldw	r2,-4(fp)
   8ca14:	e0bffc15 	stw	r2,-16(fp)
   8ca18:	e0bffc17 	ldw	r2,-16(fp)
   8ca1c:	1001703a 	wrctl	status,r2
   8ca20:	00000906 	br	8ca48 <OSSchedUnlock+0xd0>
   8ca24:	e0bfff17 	ldw	r2,-4(fp)
   8ca28:	e0bffb15 	stw	r2,-20(fp)
   8ca2c:	e0bffb17 	ldw	r2,-20(fp)
   8ca30:	1001703a 	wrctl	status,r2
   8ca34:	00000406 	br	8ca48 <OSSchedUnlock+0xd0>
   8ca38:	e0bfff17 	ldw	r2,-4(fp)
   8ca3c:	e0bffa15 	stw	r2,-24(fp)
   8ca40:	e0bffa17 	ldw	r2,-24(fp)
   8ca44:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   8ca48:	e037883a 	mov	sp,fp
   8ca4c:	dfc00117 	ldw	ra,4(sp)
   8ca50:	df000017 	ldw	fp,0(sp)
   8ca54:	dec00204 	addi	sp,sp,8
   8ca58:	f800283a 	ret

0008ca5c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   8ca5c:	defffe04 	addi	sp,sp,-8
   8ca60:	dfc00115 	stw	ra,4(sp)
   8ca64:	df000015 	stw	fp,0(sp)
   8ca68:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   8ca6c:	d0a70543 	ldbu	r2,-25579(gp)
   8ca70:	10803fcc 	andi	r2,r2,255
   8ca74:	1004c03a 	cmpne	r2,r2,zero
   8ca78:	10000f1e 	bne	r2,zero,8cab8 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   8ca7c:	008d9080 	call	8d908 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   8ca80:	d0a70703 	ldbu	r2,-25572(gp)
   8ca84:	d0a70745 	stb	r2,-25571(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   8ca88:	d0a70703 	ldbu	r2,-25572(gp)
   8ca8c:	10803fcc 	andi	r2,r2,255
   8ca90:	00c002f4 	movhi	r3,11
   8ca94:	18e9c004 	addi	r3,r3,-22784
   8ca98:	1085883a 	add	r2,r2,r2
   8ca9c:	1085883a 	add	r2,r2,r2
   8caa0:	10c5883a 	add	r2,r2,r3
   8caa4:	10800017 	ldw	r2,0(r2)
   8caa8:	d0a70f15 	stw	r2,-25540(gp)
        OSTCBCur      = OSTCBHighRdy;
   8caac:	d0a70f17 	ldw	r2,-25540(gp)
   8cab0:	d0a71415 	stw	r2,-25520(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   8cab4:	00962ac0 	call	962ac <OSStartHighRdy>
    }
}
   8cab8:	e037883a 	mov	sp,fp
   8cabc:	dfc00117 	ldw	ra,4(sp)
   8cac0:	df000017 	ldw	fp,0(sp)
   8cac4:	dec00204 	addi	sp,sp,8
   8cac8:	f800283a 	ret

0008cacc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   8cacc:	defff904 	addi	sp,sp,-28
   8cad0:	dfc00615 	stw	ra,24(sp)
   8cad4:	df000515 	stw	fp,20(sp)
   8cad8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8cadc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8cae0:	01000084 	movi	r4,2
   8cae4:	0093b2c0 	call	93b2c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cae8:	0005303a 	rdctl	r2,status
   8caec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8caf0:	e0fffe17 	ldw	r3,-8(fp)
   8caf4:	00bfff84 	movi	r2,-2
   8caf8:	1884703a 	and	r2,r3,r2
   8cafc:	1001703a 	wrctl	status,r2
  
  return context;
   8cb00:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   8cb04:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   8cb08:	d0270615 	stw	zero,-25576(gp)
   8cb0c:	e0bfff17 	ldw	r2,-4(fp)
   8cb10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb14:	e0bffd17 	ldw	r2,-12(fp)
   8cb18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8cb1c:	01001904 	movi	r4,100
   8cb20:	0093b2c0 	call	93b2c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cb24:	0005303a 	rdctl	r2,status
   8cb28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cb2c:	e0fffc17 	ldw	r3,-16(fp)
   8cb30:	00bfff84 	movi	r2,-2
   8cb34:	1884703a 	and	r2,r3,r2
   8cb38:	1001703a 	wrctl	status,r2
  
  return context;
   8cb3c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   8cb40:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   8cb44:	d0a70617 	ldw	r2,-25576(gp)
   8cb48:	d0a70b15 	stw	r2,-25556(gp)
    OSStatRdy    = OS_TRUE;
   8cb4c:	00800044 	movi	r2,1
   8cb50:	d0a71705 	stb	r2,-25508(gp)
   8cb54:	e0bfff17 	ldw	r2,-4(fp)
   8cb58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cb5c:	e0bffb17 	ldw	r2,-20(fp)
   8cb60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8cb64:	e037883a 	mov	sp,fp
   8cb68:	dfc00117 	ldw	ra,4(sp)
   8cb6c:	df000017 	ldw	fp,0(sp)
   8cb70:	dec00204 	addi	sp,sp,8
   8cb74:	f800283a 	ret

0008cb78 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   8cb78:	defff604 	addi	sp,sp,-40
   8cb7c:	dfc00915 	stw	ra,36(sp)
   8cb80:	df000815 	stw	fp,32(sp)
   8cb84:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8cb88:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8cb8c:	00966780 	call	96678 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cb90:	0005303a 	rdctl	r2,status
   8cb94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cb98:	e0fffb17 	ldw	r3,-20(fp)
   8cb9c:	00bfff84 	movi	r2,-2
   8cba0:	1884703a 	and	r2,r3,r2
   8cba4:	1001703a 	wrctl	status,r2
  
  return context;
   8cba8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8cbac:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   8cbb0:	d0a71517 	ldw	r2,-25516(gp)
   8cbb4:	10800044 	addi	r2,r2,1
   8cbb8:	d0a71515 	stw	r2,-25516(gp)
   8cbbc:	e0bffc17 	ldw	r2,-16(fp)
   8cbc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cbc4:	e0bffa17 	ldw	r2,-24(fp)
   8cbc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   8cbcc:	d0a70543 	ldbu	r2,-25579(gp)
   8cbd0:	10803fcc 	andi	r2,r2,255
   8cbd4:	10800058 	cmpnei	r2,r2,1
   8cbd8:	1000721e 	bne	r2,zero,8cda4 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   8cbdc:	d0a70903 	ldbu	r2,-25564(gp)
   8cbe0:	10803fcc 	andi	r2,r2,255
   8cbe4:	e0bfff15 	stw	r2,-4(fp)
   8cbe8:	e0ffff17 	ldw	r3,-4(fp)
   8cbec:	18800060 	cmpeqi	r2,r3,1
   8cbf0:	10000a1e 	bne	r2,zero,8cc1c <OSTimeTick+0xa4>
   8cbf4:	e0ffff17 	ldw	r3,-4(fp)
   8cbf8:	188000a0 	cmpeqi	r2,r3,2
   8cbfc:	1000091e 	bne	r2,zero,8cc24 <OSTimeTick+0xac>
   8cc00:	e0ffff17 	ldw	r3,-4(fp)
   8cc04:	1805003a 	cmpeq	r2,r3,zero
   8cc08:	1000011e 	bne	r2,zero,8cc10 <OSTimeTick+0x98>
   8cc0c:	00000a06 	br	8cc38 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8cc10:	00800044 	movi	r2,1
   8cc14:	e0bffd05 	stb	r2,-12(fp)
                 break;
   8cc18:	00000a06 	br	8cc44 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8cc1c:	e03ffd05 	stb	zero,-12(fp)
                 break;
   8cc20:	00000806 	br	8cc44 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   8cc24:	00800044 	movi	r2,1
   8cc28:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8cc2c:	00800044 	movi	r2,1
   8cc30:	d0a70905 	stb	r2,-25564(gp)
                 break;
   8cc34:	00000306 	br	8cc44 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   8cc38:	00800044 	movi	r2,1
   8cc3c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   8cc40:	d0270905 	stb	zero,-25564(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   8cc44:	e0bffd03 	ldbu	r2,-12(fp)
   8cc48:	1005003a 	cmpeq	r2,r2,zero
   8cc4c:	1000551e 	bne	r2,zero,8cda4 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   8cc50:	d0a70817 	ldw	r2,-25568(gp)
   8cc54:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8cc58:	00004d06 	br	8cd90 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cc5c:	0005303a 	rdctl	r2,status
   8cc60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cc64:	e0fff917 	ldw	r3,-28(fp)
   8cc68:	00bfff84 	movi	r2,-2
   8cc6c:	1884703a 	and	r2,r3,r2
   8cc70:	1001703a 	wrctl	status,r2
  
  return context;
   8cc74:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   8cc78:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8cc7c:	e0bffe17 	ldw	r2,-8(fp)
   8cc80:	10800b8b 	ldhu	r2,46(r2)
   8cc84:	10bfffcc 	andi	r2,r2,65535
   8cc88:	1005003a 	cmpeq	r2,r2,zero
   8cc8c:	1000391e 	bne	r2,zero,8cd74 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   8cc90:	e0bffe17 	ldw	r2,-8(fp)
   8cc94:	10800b8b 	ldhu	r2,46(r2)
   8cc98:	10bfffc4 	addi	r2,r2,-1
   8cc9c:	1007883a 	mov	r3,r2
   8cca0:	e0bffe17 	ldw	r2,-8(fp)
   8cca4:	10c00b8d 	sth	r3,46(r2)
   8cca8:	e0bffe17 	ldw	r2,-8(fp)
   8ccac:	10800b8b 	ldhu	r2,46(r2)
   8ccb0:	10bfffcc 	andi	r2,r2,65535
   8ccb4:	1004c03a 	cmpne	r2,r2,zero
   8ccb8:	10002e1e 	bne	r2,zero,8cd74 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8ccbc:	e0bffe17 	ldw	r2,-8(fp)
   8ccc0:	10800c03 	ldbu	r2,48(r2)
   8ccc4:	10803fcc 	andi	r2,r2,255
   8ccc8:	10800dcc 	andi	r2,r2,55
   8cccc:	1005003a 	cmpeq	r2,r2,zero
   8ccd0:	10000b1e 	bne	r2,zero,8cd00 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   8ccd4:	e0bffe17 	ldw	r2,-8(fp)
   8ccd8:	10c00c03 	ldbu	r3,48(r2)
   8ccdc:	00bff204 	movi	r2,-56
   8cce0:	1884703a 	and	r2,r3,r2
   8cce4:	1007883a 	mov	r3,r2
   8cce8:	e0bffe17 	ldw	r2,-8(fp)
   8ccec:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   8ccf0:	e0fffe17 	ldw	r3,-8(fp)
   8ccf4:	00800044 	movi	r2,1
   8ccf8:	18800c45 	stb	r2,49(r3)
   8ccfc:	00000206 	br	8cd08 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8cd00:	e0bffe17 	ldw	r2,-8(fp)
   8cd04:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   8cd08:	e0bffe17 	ldw	r2,-8(fp)
   8cd0c:	10800c03 	ldbu	r2,48(r2)
   8cd10:	10803fcc 	andi	r2,r2,255
   8cd14:	1080020c 	andi	r2,r2,8
   8cd18:	1004c03a 	cmpne	r2,r2,zero
   8cd1c:	1000151e 	bne	r2,zero,8cd74 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   8cd20:	e0bffe17 	ldw	r2,-8(fp)
   8cd24:	10c00d83 	ldbu	r3,54(r2)
   8cd28:	d0a71103 	ldbu	r2,-25532(gp)
   8cd2c:	1884b03a 	or	r2,r3,r2
   8cd30:	d0a71105 	stb	r2,-25532(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8cd34:	e0bffe17 	ldw	r2,-8(fp)
   8cd38:	10800d03 	ldbu	r2,52(r2)
   8cd3c:	11003fcc 	andi	r4,r2,255
   8cd40:	e0bffe17 	ldw	r2,-8(fp)
   8cd44:	10800d03 	ldbu	r2,52(r2)
   8cd48:	10c03fcc 	andi	r3,r2,255
   8cd4c:	d0a71144 	addi	r2,gp,-25531
   8cd50:	1885883a 	add	r2,r3,r2
   8cd54:	10c00003 	ldbu	r3,0(r2)
   8cd58:	e0bffe17 	ldw	r2,-8(fp)
   8cd5c:	10800d43 	ldbu	r2,53(r2)
   8cd60:	1884b03a 	or	r2,r3,r2
   8cd64:	1007883a 	mov	r3,r2
   8cd68:	d0a71144 	addi	r2,gp,-25531
   8cd6c:	2085883a 	add	r2,r4,r2
   8cd70:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   8cd74:	e0bffe17 	ldw	r2,-8(fp)
   8cd78:	10800517 	ldw	r2,20(r2)
   8cd7c:	e0bffe15 	stw	r2,-8(fp)
   8cd80:	e0bffc17 	ldw	r2,-16(fp)
   8cd84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cd88:	e0bff817 	ldw	r2,-32(fp)
   8cd8c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8cd90:	e0bffe17 	ldw	r2,-8(fp)
   8cd94:	10800c83 	ldbu	r2,50(r2)
   8cd98:	10803fcc 	andi	r2,r2,255
   8cd9c:	10800518 	cmpnei	r2,r2,20
   8cda0:	103fae1e 	bne	r2,zero,8cc5c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   8cda4:	e037883a 	mov	sp,fp
   8cda8:	dfc00117 	ldw	ra,4(sp)
   8cdac:	df000017 	ldw	fp,0(sp)
   8cdb0:	dec00204 	addi	sp,sp,8
   8cdb4:	f800283a 	ret

0008cdb8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   8cdb8:	deffff04 	addi	sp,sp,-4
   8cdbc:	df000015 	stw	fp,0(sp)
   8cdc0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   8cdc4:	00804784 	movi	r2,286
}
   8cdc8:	e037883a 	mov	sp,fp
   8cdcc:	df000017 	ldw	fp,0(sp)
   8cdd0:	dec00104 	addi	sp,sp,4
   8cdd4:	f800283a 	ret

0008cdd8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   8cdd8:	deffff04 	addi	sp,sp,-4
   8cddc:	df000015 	stw	fp,0(sp)
   8cde0:	d839883a 	mov	fp,sp
}
   8cde4:	e037883a 	mov	sp,fp
   8cde8:	df000017 	ldw	fp,0(sp)
   8cdec:	dec00104 	addi	sp,sp,4
   8cdf0:	f800283a 	ret

0008cdf4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   8cdf4:	defff804 	addi	sp,sp,-32
   8cdf8:	dfc00715 	stw	ra,28(sp)
   8cdfc:	df000615 	stw	fp,24(sp)
   8ce00:	df000604 	addi	fp,sp,24
   8ce04:	e13ffc15 	stw	r4,-16(fp)
   8ce08:	e17ffd15 	stw	r5,-12(fp)
   8ce0c:	e1bffe05 	stb	r6,-8(fp)
   8ce10:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   8ce14:	e0bffc17 	ldw	r2,-16(fp)
   8ce18:	10800283 	ldbu	r2,10(r2)
   8ce1c:	10c03fcc 	andi	r3,r2,255
   8ce20:	00800274 	movhi	r2,9
   8ce24:	109eb304 	addi	r2,r2,31436
   8ce28:	10c5883a 	add	r2,r2,r3
   8ce2c:	10800003 	ldbu	r2,0(r2)
   8ce30:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   8ce34:	e0fffa83 	ldbu	r3,-22(fp)
   8ce38:	e0bffc17 	ldw	r2,-16(fp)
   8ce3c:	1885883a 	add	r2,r3,r2
   8ce40:	10800204 	addi	r2,r2,8
   8ce44:	108000c3 	ldbu	r2,3(r2)
   8ce48:	10c03fcc 	andi	r3,r2,255
   8ce4c:	00800274 	movhi	r2,9
   8ce50:	109eb304 	addi	r2,r2,31436
   8ce54:	10c5883a 	add	r2,r2,r3
   8ce58:	10800003 	ldbu	r2,0(r2)
   8ce5c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   8ce60:	e0bffa83 	ldbu	r2,-22(fp)
   8ce64:	100490fa 	slli	r2,r2,3
   8ce68:	1007883a 	mov	r3,r2
   8ce6c:	e0bffa43 	ldbu	r2,-23(fp)
   8ce70:	1885883a 	add	r2,r3,r2
   8ce74:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   8ce78:	e0bffa03 	ldbu	r2,-24(fp)
   8ce7c:	00c002f4 	movhi	r3,11
   8ce80:	18e9c004 	addi	r3,r3,-22784
   8ce84:	1085883a 	add	r2,r2,r2
   8ce88:	1085883a 	add	r2,r2,r2
   8ce8c:	10c5883a 	add	r2,r2,r3
   8ce90:	10800017 	ldw	r2,0(r2)
   8ce94:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   8ce98:	e0bffb17 	ldw	r2,-20(fp)
   8ce9c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   8cea0:	e0fffb17 	ldw	r3,-20(fp)
   8cea4:	e0bffd17 	ldw	r2,-12(fp)
   8cea8:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8ceac:	e0bffb17 	ldw	r2,-20(fp)
   8ceb0:	10800c03 	ldbu	r2,48(r2)
   8ceb4:	1007883a 	mov	r3,r2
   8ceb8:	e0bffe03 	ldbu	r2,-8(fp)
   8cebc:	0084303a 	nor	r2,zero,r2
   8cec0:	1884703a 	and	r2,r3,r2
   8cec4:	1007883a 	mov	r3,r2
   8cec8:	e0bffb17 	ldw	r2,-20(fp)
   8cecc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   8ced0:	e0fffb17 	ldw	r3,-20(fp)
   8ced4:	e0bfff03 	ldbu	r2,-4(fp)
   8ced8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   8cedc:	e0bffb17 	ldw	r2,-20(fp)
   8cee0:	10800c03 	ldbu	r2,48(r2)
   8cee4:	10803fcc 	andi	r2,r2,255
   8cee8:	1080020c 	andi	r2,r2,8
   8ceec:	1004c03a 	cmpne	r2,r2,zero
   8cef0:	1000111e 	bne	r2,zero,8cf38 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   8cef4:	e0bffb17 	ldw	r2,-20(fp)
   8cef8:	10c00d83 	ldbu	r3,54(r2)
   8cefc:	d0a71103 	ldbu	r2,-25532(gp)
   8cf00:	1884b03a 	or	r2,r3,r2
   8cf04:	d0a71105 	stb	r2,-25532(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   8cf08:	e13ffa83 	ldbu	r4,-22(fp)
   8cf0c:	e0fffa83 	ldbu	r3,-22(fp)
   8cf10:	d0a71144 	addi	r2,gp,-25531
   8cf14:	1885883a 	add	r2,r3,r2
   8cf18:	10c00003 	ldbu	r3,0(r2)
   8cf1c:	e0bffb17 	ldw	r2,-20(fp)
   8cf20:	10800d43 	ldbu	r2,53(r2)
   8cf24:	1884b03a 	or	r2,r3,r2
   8cf28:	1007883a 	mov	r3,r2
   8cf2c:	d0a71144 	addi	r2,gp,-25531
   8cf30:	2085883a 	add	r2,r4,r2
   8cf34:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   8cf38:	e13ffb17 	ldw	r4,-20(fp)
   8cf3c:	e17ffc17 	ldw	r5,-16(fp)
   8cf40:	008d1ec0 	call	8d1ec <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   8cf44:	e0bffb17 	ldw	r2,-20(fp)
   8cf48:	10800817 	ldw	r2,32(r2)
   8cf4c:	1005003a 	cmpeq	r2,r2,zero
   8cf50:	1000071e 	bne	r2,zero,8cf70 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8cf54:	e0bffb17 	ldw	r2,-20(fp)
   8cf58:	11400817 	ldw	r5,32(r2)
   8cf5c:	e13ffb17 	ldw	r4,-20(fp)
   8cf60:	008d2a40 	call	8d2a4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   8cf64:	e0fffb17 	ldw	r3,-20(fp)
   8cf68:	e0bffc17 	ldw	r2,-16(fp)
   8cf6c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   8cf70:	e0bffa03 	ldbu	r2,-24(fp)
}
   8cf74:	e037883a 	mov	sp,fp
   8cf78:	dfc00117 	ldw	ra,4(sp)
   8cf7c:	df000017 	ldw	fp,0(sp)
   8cf80:	dec00204 	addi	sp,sp,8
   8cf84:	f800283a 	ret

0008cf88 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   8cf88:	defffd04 	addi	sp,sp,-12
   8cf8c:	df000215 	stw	fp,8(sp)
   8cf90:	df000204 	addi	fp,sp,8
   8cf94:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   8cf98:	d0e71417 	ldw	r3,-25520(gp)
   8cf9c:	e0bfff17 	ldw	r2,-4(fp)
   8cfa0:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   8cfa4:	d0a71417 	ldw	r2,-25520(gp)
   8cfa8:	10800d03 	ldbu	r2,52(r2)
   8cfac:	11003fcc 	andi	r4,r2,255
   8cfb0:	d0a71417 	ldw	r2,-25520(gp)
   8cfb4:	10800d03 	ldbu	r2,52(r2)
   8cfb8:	10c03fcc 	andi	r3,r2,255
   8cfbc:	e0bfff17 	ldw	r2,-4(fp)
   8cfc0:	1885883a 	add	r2,r3,r2
   8cfc4:	10800204 	addi	r2,r2,8
   8cfc8:	10c000c3 	ldbu	r3,3(r2)
   8cfcc:	d0a71417 	ldw	r2,-25520(gp)
   8cfd0:	10800d43 	ldbu	r2,53(r2)
   8cfd4:	1884b03a 	or	r2,r3,r2
   8cfd8:	1007883a 	mov	r3,r2
   8cfdc:	e0bfff17 	ldw	r2,-4(fp)
   8cfe0:	2085883a 	add	r2,r4,r2
   8cfe4:	10800204 	addi	r2,r2,8
   8cfe8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8cfec:	e0bfff17 	ldw	r2,-4(fp)
   8cff0:	10c00283 	ldbu	r3,10(r2)
   8cff4:	d0a71417 	ldw	r2,-25520(gp)
   8cff8:	10800d83 	ldbu	r2,54(r2)
   8cffc:	1884b03a 	or	r2,r3,r2
   8d000:	1007883a 	mov	r3,r2
   8d004:	e0bfff17 	ldw	r2,-4(fp)
   8d008:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8d00c:	d0a71417 	ldw	r2,-25520(gp)
   8d010:	10800d03 	ldbu	r2,52(r2)
   8d014:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8d018:	e13ffe03 	ldbu	r4,-8(fp)
   8d01c:	e0fffe03 	ldbu	r3,-8(fp)
   8d020:	d0a71144 	addi	r2,gp,-25531
   8d024:	1885883a 	add	r2,r3,r2
   8d028:	10800003 	ldbu	r2,0(r2)
   8d02c:	1007883a 	mov	r3,r2
   8d030:	d0a71417 	ldw	r2,-25520(gp)
   8d034:	10800d43 	ldbu	r2,53(r2)
   8d038:	0084303a 	nor	r2,zero,r2
   8d03c:	1884703a 	and	r2,r3,r2
   8d040:	1007883a 	mov	r3,r2
   8d044:	d0a71144 	addi	r2,gp,-25531
   8d048:	2085883a 	add	r2,r4,r2
   8d04c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8d050:	e0fffe03 	ldbu	r3,-8(fp)
   8d054:	d0a71144 	addi	r2,gp,-25531
   8d058:	1885883a 	add	r2,r3,r2
   8d05c:	10800003 	ldbu	r2,0(r2)
   8d060:	10803fcc 	andi	r2,r2,255
   8d064:	1004c03a 	cmpne	r2,r2,zero
   8d068:	1000071e 	bne	r2,zero,8d088 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8d06c:	d0a71417 	ldw	r2,-25520(gp)
   8d070:	10800d83 	ldbu	r2,54(r2)
   8d074:	0084303a 	nor	r2,zero,r2
   8d078:	1007883a 	mov	r3,r2
   8d07c:	d0a71103 	ldbu	r2,-25532(gp)
   8d080:	1884703a 	and	r2,r3,r2
   8d084:	d0a71105 	stb	r2,-25532(gp)
    }
}
   8d088:	e037883a 	mov	sp,fp
   8d08c:	df000017 	ldw	fp,0(sp)
   8d090:	dec00104 	addi	sp,sp,4
   8d094:	f800283a 	ret

0008d098 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   8d098:	defffb04 	addi	sp,sp,-20
   8d09c:	df000415 	stw	fp,16(sp)
   8d0a0:	df000404 	addi	fp,sp,16
   8d0a4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   8d0a8:	d0a71417 	ldw	r2,-25520(gp)
   8d0ac:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   8d0b0:	d0e71417 	ldw	r3,-25520(gp)
   8d0b4:	e0bfff17 	ldw	r2,-4(fp)
   8d0b8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   8d0bc:	e0bfff17 	ldw	r2,-4(fp)
   8d0c0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   8d0c4:	e0bffe17 	ldw	r2,-8(fp)
   8d0c8:	10800017 	ldw	r2,0(r2)
   8d0cc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8d0d0:	00002006 	br	8d154 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   8d0d4:	d0a71417 	ldw	r2,-25520(gp)
   8d0d8:	10800d03 	ldbu	r2,52(r2)
   8d0dc:	11003fcc 	andi	r4,r2,255
   8d0e0:	d0a71417 	ldw	r2,-25520(gp)
   8d0e4:	10800d03 	ldbu	r2,52(r2)
   8d0e8:	10c03fcc 	andi	r3,r2,255
   8d0ec:	e0bffd17 	ldw	r2,-12(fp)
   8d0f0:	1885883a 	add	r2,r3,r2
   8d0f4:	10800204 	addi	r2,r2,8
   8d0f8:	10c000c3 	ldbu	r3,3(r2)
   8d0fc:	d0a71417 	ldw	r2,-25520(gp)
   8d100:	10800d43 	ldbu	r2,53(r2)
   8d104:	1884b03a 	or	r2,r3,r2
   8d108:	1007883a 	mov	r3,r2
   8d10c:	e0bffd17 	ldw	r2,-12(fp)
   8d110:	2085883a 	add	r2,r4,r2
   8d114:	10800204 	addi	r2,r2,8
   8d118:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8d11c:	e0bffd17 	ldw	r2,-12(fp)
   8d120:	10c00283 	ldbu	r3,10(r2)
   8d124:	d0a71417 	ldw	r2,-25520(gp)
   8d128:	10800d83 	ldbu	r2,54(r2)
   8d12c:	1884b03a 	or	r2,r3,r2
   8d130:	1007883a 	mov	r3,r2
   8d134:	e0bffd17 	ldw	r2,-12(fp)
   8d138:	10c00285 	stb	r3,10(r2)
        pevents++;
   8d13c:	e0bffe17 	ldw	r2,-8(fp)
   8d140:	10800104 	addi	r2,r2,4
   8d144:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   8d148:	e0bffe17 	ldw	r2,-8(fp)
   8d14c:	10800017 	ldw	r2,0(r2)
   8d150:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8d154:	e0bffd17 	ldw	r2,-12(fp)
   8d158:	1004c03a 	cmpne	r2,r2,zero
   8d15c:	103fdd1e 	bne	r2,zero,8d0d4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8d160:	d0a71417 	ldw	r2,-25520(gp)
   8d164:	10800d03 	ldbu	r2,52(r2)
   8d168:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8d16c:	e13ffc03 	ldbu	r4,-16(fp)
   8d170:	e0fffc03 	ldbu	r3,-16(fp)
   8d174:	d0a71144 	addi	r2,gp,-25531
   8d178:	1885883a 	add	r2,r3,r2
   8d17c:	10800003 	ldbu	r2,0(r2)
   8d180:	1007883a 	mov	r3,r2
   8d184:	d0a71417 	ldw	r2,-25520(gp)
   8d188:	10800d43 	ldbu	r2,53(r2)
   8d18c:	0084303a 	nor	r2,zero,r2
   8d190:	1884703a 	and	r2,r3,r2
   8d194:	1007883a 	mov	r3,r2
   8d198:	d0a71144 	addi	r2,gp,-25531
   8d19c:	2085883a 	add	r2,r4,r2
   8d1a0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8d1a4:	e0fffc03 	ldbu	r3,-16(fp)
   8d1a8:	d0a71144 	addi	r2,gp,-25531
   8d1ac:	1885883a 	add	r2,r3,r2
   8d1b0:	10800003 	ldbu	r2,0(r2)
   8d1b4:	10803fcc 	andi	r2,r2,255
   8d1b8:	1004c03a 	cmpne	r2,r2,zero
   8d1bc:	1000071e 	bne	r2,zero,8d1dc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8d1c0:	d0a71417 	ldw	r2,-25520(gp)
   8d1c4:	10800d83 	ldbu	r2,54(r2)
   8d1c8:	0084303a 	nor	r2,zero,r2
   8d1cc:	1007883a 	mov	r3,r2
   8d1d0:	d0a71103 	ldbu	r2,-25532(gp)
   8d1d4:	1884703a 	and	r2,r3,r2
   8d1d8:	d0a71105 	stb	r2,-25532(gp)
    }
}
   8d1dc:	e037883a 	mov	sp,fp
   8d1e0:	df000017 	ldw	fp,0(sp)
   8d1e4:	dec00104 	addi	sp,sp,4
   8d1e8:	f800283a 	ret

0008d1ec <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   8d1ec:	defffc04 	addi	sp,sp,-16
   8d1f0:	df000315 	stw	fp,12(sp)
   8d1f4:	df000304 	addi	fp,sp,12
   8d1f8:	e13ffe15 	stw	r4,-8(fp)
   8d1fc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   8d200:	e0bffe17 	ldw	r2,-8(fp)
   8d204:	10800d03 	ldbu	r2,52(r2)
   8d208:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   8d20c:	e13ffd03 	ldbu	r4,-12(fp)
   8d210:	e0fffd03 	ldbu	r3,-12(fp)
   8d214:	e0bfff17 	ldw	r2,-4(fp)
   8d218:	1885883a 	add	r2,r3,r2
   8d21c:	10800204 	addi	r2,r2,8
   8d220:	108000c3 	ldbu	r2,3(r2)
   8d224:	1007883a 	mov	r3,r2
   8d228:	e0bffe17 	ldw	r2,-8(fp)
   8d22c:	10800d43 	ldbu	r2,53(r2)
   8d230:	0084303a 	nor	r2,zero,r2
   8d234:	1884703a 	and	r2,r3,r2
   8d238:	1007883a 	mov	r3,r2
   8d23c:	e0bfff17 	ldw	r2,-4(fp)
   8d240:	2085883a 	add	r2,r4,r2
   8d244:	10800204 	addi	r2,r2,8
   8d248:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8d24c:	e0fffd03 	ldbu	r3,-12(fp)
   8d250:	e0bfff17 	ldw	r2,-4(fp)
   8d254:	1885883a 	add	r2,r3,r2
   8d258:	10800204 	addi	r2,r2,8
   8d25c:	108000c3 	ldbu	r2,3(r2)
   8d260:	10803fcc 	andi	r2,r2,255
   8d264:	1004c03a 	cmpne	r2,r2,zero
   8d268:	10000a1e 	bne	r2,zero,8d294 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8d26c:	e0bfff17 	ldw	r2,-4(fp)
   8d270:	10800283 	ldbu	r2,10(r2)
   8d274:	1007883a 	mov	r3,r2
   8d278:	e0bffe17 	ldw	r2,-8(fp)
   8d27c:	10800d83 	ldbu	r2,54(r2)
   8d280:	0084303a 	nor	r2,zero,r2
   8d284:	1884703a 	and	r2,r3,r2
   8d288:	1007883a 	mov	r3,r2
   8d28c:	e0bfff17 	ldw	r2,-4(fp)
   8d290:	10c00285 	stb	r3,10(r2)
    }
}
   8d294:	e037883a 	mov	sp,fp
   8d298:	df000017 	ldw	fp,0(sp)
   8d29c:	dec00104 	addi	sp,sp,4
   8d2a0:	f800283a 	ret

0008d2a4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   8d2a4:	defffa04 	addi	sp,sp,-24
   8d2a8:	df000515 	stw	fp,20(sp)
   8d2ac:	df000504 	addi	fp,sp,20
   8d2b0:	e13ffe15 	stw	r4,-8(fp)
   8d2b4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   8d2b8:	e0bffe17 	ldw	r2,-8(fp)
   8d2bc:	10800d03 	ldbu	r2,52(r2)
   8d2c0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   8d2c4:	e0bffe17 	ldw	r2,-8(fp)
   8d2c8:	10800d83 	ldbu	r2,54(r2)
   8d2cc:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   8d2d0:	e0bffe17 	ldw	r2,-8(fp)
   8d2d4:	10800d43 	ldbu	r2,53(r2)
   8d2d8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   8d2dc:	e0bfff17 	ldw	r2,-4(fp)
   8d2e0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   8d2e4:	e0bffd17 	ldw	r2,-12(fp)
   8d2e8:	10800017 	ldw	r2,0(r2)
   8d2ec:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8d2f0:	00002606 	br	8d38c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   8d2f4:	e13ffb83 	ldbu	r4,-18(fp)
   8d2f8:	e0fffb83 	ldbu	r3,-18(fp)
   8d2fc:	e0bffc17 	ldw	r2,-16(fp)
   8d300:	1885883a 	add	r2,r3,r2
   8d304:	10800204 	addi	r2,r2,8
   8d308:	108000c3 	ldbu	r2,3(r2)
   8d30c:	1007883a 	mov	r3,r2
   8d310:	e0bffb03 	ldbu	r2,-20(fp)
   8d314:	0084303a 	nor	r2,zero,r2
   8d318:	1884703a 	and	r2,r3,r2
   8d31c:	1007883a 	mov	r3,r2
   8d320:	e0bffc17 	ldw	r2,-16(fp)
   8d324:	2085883a 	add	r2,r4,r2
   8d328:	10800204 	addi	r2,r2,8
   8d32c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   8d330:	e0fffb83 	ldbu	r3,-18(fp)
   8d334:	e0bffc17 	ldw	r2,-16(fp)
   8d338:	1885883a 	add	r2,r3,r2
   8d33c:	10800204 	addi	r2,r2,8
   8d340:	108000c3 	ldbu	r2,3(r2)
   8d344:	10803fcc 	andi	r2,r2,255
   8d348:	1004c03a 	cmpne	r2,r2,zero
   8d34c:	1000091e 	bne	r2,zero,8d374 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   8d350:	e0bffc17 	ldw	r2,-16(fp)
   8d354:	10800283 	ldbu	r2,10(r2)
   8d358:	1007883a 	mov	r3,r2
   8d35c:	e0bffb43 	ldbu	r2,-19(fp)
   8d360:	0084303a 	nor	r2,zero,r2
   8d364:	1884703a 	and	r2,r3,r2
   8d368:	1007883a 	mov	r3,r2
   8d36c:	e0bffc17 	ldw	r2,-16(fp)
   8d370:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   8d374:	e0bffd17 	ldw	r2,-12(fp)
   8d378:	10800104 	addi	r2,r2,4
   8d37c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   8d380:	e0bffd17 	ldw	r2,-12(fp)
   8d384:	10800017 	ldw	r2,0(r2)
   8d388:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8d38c:	e0bffc17 	ldw	r2,-16(fp)
   8d390:	1004c03a 	cmpne	r2,r2,zero
   8d394:	103fd71e 	bne	r2,zero,8d2f4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   8d398:	e037883a 	mov	sp,fp
   8d39c:	df000017 	ldw	fp,0(sp)
   8d3a0:	dec00104 	addi	sp,sp,4
   8d3a4:	f800283a 	ret

0008d3a8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   8d3a8:	defffc04 	addi	sp,sp,-16
   8d3ac:	df000315 	stw	fp,12(sp)
   8d3b0:	df000304 	addi	fp,sp,12
   8d3b4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   8d3b8:	e0bfff17 	ldw	r2,-4(fp)
   8d3bc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8d3c0:	e0bfff17 	ldw	r2,-4(fp)
   8d3c4:	108002c4 	addi	r2,r2,11
   8d3c8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8d3cc:	e03ffd05 	stb	zero,-12(fp)
   8d3d0:	00000806 	br	8d3f4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   8d3d4:	e0bffe17 	ldw	r2,-8(fp)
   8d3d8:	10000005 	stb	zero,0(r2)
   8d3dc:	e0bffe17 	ldw	r2,-8(fp)
   8d3e0:	10800044 	addi	r2,r2,1
   8d3e4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8d3e8:	e0bffd03 	ldbu	r2,-12(fp)
   8d3ec:	10800044 	addi	r2,r2,1
   8d3f0:	e0bffd05 	stb	r2,-12(fp)
   8d3f4:	e0bffd03 	ldbu	r2,-12(fp)
   8d3f8:	108000f0 	cmpltui	r2,r2,3
   8d3fc:	103ff51e 	bne	r2,zero,8d3d4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   8d400:	e037883a 	mov	sp,fp
   8d404:	df000017 	ldw	fp,0(sp)
   8d408:	dec00104 	addi	sp,sp,4
   8d40c:	f800283a 	ret

0008d410 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8d410:	defffb04 	addi	sp,sp,-20
   8d414:	dfc00415 	stw	ra,16(sp)
   8d418:	df000315 	stw	fp,12(sp)
   8d41c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8d420:	010002f4 	movhi	r4,11
   8d424:	2125ac04 	addi	r4,r4,-26960
   8d428:	0142d004 	movi	r5,2880
   8d42c:	008d7740 	call	8d774 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   8d430:	008002f4 	movhi	r2,11
   8d434:	10a5ac04 	addi	r2,r2,-26960
   8d438:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8d43c:	008002f4 	movhi	r2,11
   8d440:	10a5b804 	addi	r2,r2,-26912
   8d444:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8d448:	e03fff0d 	sth	zero,-4(fp)
   8d44c:	00001306 	br	8d49c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8d450:	e0bffe17 	ldw	r2,-8(fp)
   8d454:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   8d458:	e0fffe17 	ldw	r3,-8(fp)
   8d45c:	e0bffd17 	ldw	r2,-12(fp)
   8d460:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   8d464:	e0fffe17 	ldw	r3,-8(fp)
   8d468:	00800fc4 	movi	r2,63
   8d46c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   8d470:	e0bffe17 	ldw	r2,-8(fp)
   8d474:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   8d478:	e0bffe17 	ldw	r2,-8(fp)
   8d47c:	10800c04 	addi	r2,r2,48
   8d480:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   8d484:	e0bffd17 	ldw	r2,-12(fp)
   8d488:	10800c04 	addi	r2,r2,48
   8d48c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8d490:	e0bfff0b 	ldhu	r2,-4(fp)
   8d494:	10800044 	addi	r2,r2,1
   8d498:	e0bfff0d 	sth	r2,-4(fp)
   8d49c:	e0bfff0b 	ldhu	r2,-4(fp)
   8d4a0:	10800ef0 	cmpltui	r2,r2,59
   8d4a4:	103fea1e 	bne	r2,zero,8d450 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   8d4a8:	e0bffe17 	ldw	r2,-8(fp)
   8d4ac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8d4b0:	e0bffe17 	ldw	r2,-8(fp)
   8d4b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   8d4b8:	e0fffe17 	ldw	r3,-8(fp)
   8d4bc:	00800fc4 	movi	r2,63
   8d4c0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   8d4c4:	e0bffe17 	ldw	r2,-8(fp)
   8d4c8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   8d4cc:	008002f4 	movhi	r2,11
   8d4d0:	10a5ac04 	addi	r2,r2,-26960
   8d4d4:	d0a71215 	stw	r2,-25528(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   8d4d8:	e037883a 	mov	sp,fp
   8d4dc:	dfc00117 	ldw	ra,4(sp)
   8d4e0:	df000017 	ldw	fp,0(sp)
   8d4e4:	dec00204 	addi	sp,sp,8
   8d4e8:	f800283a 	ret

0008d4ec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   8d4ec:	deffff04 	addi	sp,sp,-4
   8d4f0:	df000015 	stw	fp,0(sp)
   8d4f4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   8d4f8:	d0271515 	stw	zero,-25516(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   8d4fc:	d0271305 	stb	zero,-25524(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8d500:	d0270505 	stb	zero,-25580(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   8d504:	d0270d45 	stb	zero,-25547(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   8d508:	d0270545 	stb	zero,-25579(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   8d50c:	d0270a15 	stw	zero,-25560(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8d510:	d0270615 	stw	zero,-25576(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   8d514:	d0271815 	stw	zero,-25504(gp)
    OSIdleCtrMax  = 0L;
   8d518:	d0270b15 	stw	zero,-25556(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   8d51c:	d0271705 	stb	zero,-25508(gp)
#endif
}
   8d520:	e037883a 	mov	sp,fp
   8d524:	df000017 	ldw	fp,0(sp)
   8d528:	dec00104 	addi	sp,sp,4
   8d52c:	f800283a 	ret

0008d530 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   8d530:	defffd04 	addi	sp,sp,-12
   8d534:	df000215 	stw	fp,8(sp)
   8d538:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   8d53c:	d0271105 	stb	zero,-25532(gp)
    prdytbl       = &OSRdyTbl[0];
   8d540:	d0a71144 	addi	r2,gp,-25531
   8d544:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8d548:	e03fff05 	stb	zero,-4(fp)
   8d54c:	00000806 	br	8d570 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   8d550:	e0bffe17 	ldw	r2,-8(fp)
   8d554:	10000005 	stb	zero,0(r2)
   8d558:	e0bffe17 	ldw	r2,-8(fp)
   8d55c:	10800044 	addi	r2,r2,1
   8d560:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8d564:	e0bfff03 	ldbu	r2,-4(fp)
   8d568:	10800044 	addi	r2,r2,1
   8d56c:	e0bfff05 	stb	r2,-4(fp)
   8d570:	e0bfff03 	ldbu	r2,-4(fp)
   8d574:	108000f0 	cmpltui	r2,r2,3
   8d578:	103ff51e 	bne	r2,zero,8d550 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   8d57c:	d0270745 	stb	zero,-25571(gp)
    OSPrioHighRdy = 0;
   8d580:	d0270705 	stb	zero,-25572(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   8d584:	d0270f15 	stw	zero,-25540(gp)
    OSTCBCur      = (OS_TCB *)0;
   8d588:	d0271415 	stw	zero,-25520(gp)
}
   8d58c:	e037883a 	mov	sp,fp
   8d590:	df000017 	ldw	fp,0(sp)
   8d594:	dec00104 	addi	sp,sp,4
   8d598:	f800283a 	ret

0008d59c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   8d59c:	defff804 	addi	sp,sp,-32
   8d5a0:	dfc00715 	stw	ra,28(sp)
   8d5a4:	df000615 	stw	fp,24(sp)
   8d5a8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   8d5ac:	018002f4 	movhi	r6,11
   8d5b0:	31a5ab04 	addi	r6,r6,-26964
   8d5b4:	00bfffd4 	movui	r2,65535
   8d5b8:	d8800015 	stw	r2,0(sp)
   8d5bc:	008002f4 	movhi	r2,11
   8d5c0:	10a3ac04 	addi	r2,r2,-29008
   8d5c4:	d8800115 	stw	r2,4(sp)
   8d5c8:	00808004 	movi	r2,512
   8d5cc:	d8800215 	stw	r2,8(sp)
   8d5d0:	d8000315 	stw	zero,12(sp)
   8d5d4:	008000c4 	movi	r2,3
   8d5d8:	d8800415 	stw	r2,16(sp)
   8d5dc:	01000274 	movhi	r4,9
   8d5e0:	21369404 	addi	r4,r4,-9648
   8d5e4:	000b883a 	mov	r5,zero
   8d5e8:	01c00504 	movi	r7,20
   8d5ec:	00928340 	call	92834 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   8d5f0:	01400274 	movhi	r5,9
   8d5f4:	295ef304 	addi	r5,r5,31692
   8d5f8:	01000504 	movi	r4,20
   8d5fc:	e1bfff04 	addi	r6,fp,-4
   8d600:	00931680 	call	93168 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   8d604:	e037883a 	mov	sp,fp
   8d608:	dfc00117 	ldw	ra,4(sp)
   8d60c:	df000017 	ldw	fp,0(sp)
   8d610:	dec00204 	addi	sp,sp,8
   8d614:	f800283a 	ret

0008d618 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   8d618:	defff804 	addi	sp,sp,-32
   8d61c:	dfc00715 	stw	ra,28(sp)
   8d620:	df000615 	stw	fp,24(sp)
   8d624:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   8d628:	018002f4 	movhi	r6,11
   8d62c:	31a33304 	addi	r6,r6,-29492
   8d630:	00bfff94 	movui	r2,65534
   8d634:	d8800015 	stw	r2,0(sp)
   8d638:	008002f4 	movhi	r2,11
   8d63c:	10a13404 	addi	r2,r2,-31536
   8d640:	d8800115 	stw	r2,4(sp)
   8d644:	00808004 	movi	r2,512
   8d648:	d8800215 	stw	r2,8(sp)
   8d64c:	d8000315 	stw	zero,12(sp)
   8d650:	008000c4 	movi	r2,3
   8d654:	d8800415 	stw	r2,16(sp)
   8d658:	01000274 	movhi	r4,9
   8d65c:	2136ab04 	addi	r4,r4,-9556
   8d660:	000b883a 	mov	r5,zero
   8d664:	01c004c4 	movi	r7,19
   8d668:	00928340 	call	92834 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   8d66c:	01400274 	movhi	r5,9
   8d670:	295ef704 	addi	r5,r5,31708
   8d674:	010004c4 	movi	r4,19
   8d678:	e1bfff04 	addi	r6,fp,-4
   8d67c:	00931680 	call	93168 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   8d680:	e037883a 	mov	sp,fp
   8d684:	dfc00117 	ldw	ra,4(sp)
   8d688:	df000017 	ldw	fp,0(sp)
   8d68c:	dec00204 	addi	sp,sp,8
   8d690:	f800283a 	ret

0008d694 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   8d694:	defffb04 	addi	sp,sp,-20
   8d698:	dfc00415 	stw	ra,16(sp)
   8d69c:	df000315 	stw	fp,12(sp)
   8d6a0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   8d6a4:	010002f4 	movhi	r4,11
   8d6a8:	21287c04 	addi	r4,r4,-24080
   8d6ac:	01414404 	movi	r5,1296
   8d6b0:	008d7740 	call	8d774 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   8d6b4:	010002f4 	movhi	r4,11
   8d6b8:	2129c004 	addi	r4,r4,-22784
   8d6bc:	01401504 	movi	r5,84
   8d6c0:	008d7740 	call	8d774 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   8d6c4:	008002f4 	movhi	r2,11
   8d6c8:	10a87c04 	addi	r2,r2,-24080
   8d6cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   8d6d0:	008002f4 	movhi	r2,11
   8d6d4:	10a89704 	addi	r2,r2,-23972
   8d6d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8d6dc:	e03fff05 	stb	zero,-4(fp)
   8d6e0:	00001106 	br	8d728 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   8d6e4:	e0fffe17 	ldw	r3,-8(fp)
   8d6e8:	e0bffd17 	ldw	r2,-12(fp)
   8d6ec:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   8d6f0:	e0fffe17 	ldw	r3,-8(fp)
   8d6f4:	00800fc4 	movi	r2,63
   8d6f8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8d6fc:	e0bffe17 	ldw	r2,-8(fp)
   8d700:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   8d704:	e0bffe17 	ldw	r2,-8(fp)
   8d708:	10801b04 	addi	r2,r2,108
   8d70c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   8d710:	e0bffd17 	ldw	r2,-12(fp)
   8d714:	10801b04 	addi	r2,r2,108
   8d718:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8d71c:	e0bfff03 	ldbu	r2,-4(fp)
   8d720:	10800044 	addi	r2,r2,1
   8d724:	e0bfff05 	stb	r2,-4(fp)
   8d728:	e0bfff03 	ldbu	r2,-4(fp)
   8d72c:	108002f0 	cmpltui	r2,r2,11
   8d730:	103fec1e 	bne	r2,zero,8d6e4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   8d734:	e0bffe17 	ldw	r2,-8(fp)
   8d738:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   8d73c:	e0fffe17 	ldw	r3,-8(fp)
   8d740:	00800fc4 	movi	r2,63
   8d744:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8d748:	e0bffe17 	ldw	r2,-8(fp)
   8d74c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   8d750:	d0270815 	stw	zero,-25568(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   8d754:	008002f4 	movhi	r2,11
   8d758:	10a87c04 	addi	r2,r2,-24080
   8d75c:	d0a70c15 	stw	r2,-25552(gp)
}
   8d760:	e037883a 	mov	sp,fp
   8d764:	dfc00117 	ldw	ra,4(sp)
   8d768:	df000017 	ldw	fp,0(sp)
   8d76c:	dec00204 	addi	sp,sp,8
   8d770:	f800283a 	ret

0008d774 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   8d774:	defffd04 	addi	sp,sp,-12
   8d778:	df000215 	stw	fp,8(sp)
   8d77c:	df000204 	addi	fp,sp,8
   8d780:	e13ffe15 	stw	r4,-8(fp)
   8d784:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   8d788:	00000806 	br	8d7ac <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   8d78c:	e0bffe17 	ldw	r2,-8(fp)
   8d790:	10000005 	stb	zero,0(r2)
   8d794:	e0bffe17 	ldw	r2,-8(fp)
   8d798:	10800044 	addi	r2,r2,1
   8d79c:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8d7a0:	e0bfff0b 	ldhu	r2,-4(fp)
   8d7a4:	10bfffc4 	addi	r2,r2,-1
   8d7a8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   8d7ac:	e0bfff0b 	ldhu	r2,-4(fp)
   8d7b0:	1004c03a 	cmpne	r2,r2,zero
   8d7b4:	103ff51e 	bne	r2,zero,8d78c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   8d7b8:	e037883a 	mov	sp,fp
   8d7bc:	df000017 	ldw	fp,0(sp)
   8d7c0:	dec00104 	addi	sp,sp,4
   8d7c4:	f800283a 	ret

0008d7c8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   8d7c8:	defffc04 	addi	sp,sp,-16
   8d7cc:	df000315 	stw	fp,12(sp)
   8d7d0:	df000304 	addi	fp,sp,12
   8d7d4:	e13ffd15 	stw	r4,-12(fp)
   8d7d8:	e17ffe15 	stw	r5,-8(fp)
   8d7dc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   8d7e0:	00000d06 	br	8d818 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   8d7e4:	e0bffe17 	ldw	r2,-8(fp)
   8d7e8:	10c00003 	ldbu	r3,0(r2)
   8d7ec:	e0bffd17 	ldw	r2,-12(fp)
   8d7f0:	10c00005 	stb	r3,0(r2)
   8d7f4:	e0bffd17 	ldw	r2,-12(fp)
   8d7f8:	10800044 	addi	r2,r2,1
   8d7fc:	e0bffd15 	stw	r2,-12(fp)
   8d800:	e0bffe17 	ldw	r2,-8(fp)
   8d804:	10800044 	addi	r2,r2,1
   8d808:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8d80c:	e0bfff0b 	ldhu	r2,-4(fp)
   8d810:	10bfffc4 	addi	r2,r2,-1
   8d814:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   8d818:	e0bfff0b 	ldhu	r2,-4(fp)
   8d81c:	1004c03a 	cmpne	r2,r2,zero
   8d820:	103ff01e 	bne	r2,zero,8d7e4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   8d824:	e037883a 	mov	sp,fp
   8d828:	df000017 	ldw	fp,0(sp)
   8d82c:	dec00104 	addi	sp,sp,4
   8d830:	f800283a 	ret

0008d834 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   8d834:	defffb04 	addi	sp,sp,-20
   8d838:	dfc00415 	stw	ra,16(sp)
   8d83c:	df000315 	stw	fp,12(sp)
   8d840:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8d844:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d848:	0005303a 	rdctl	r2,status
   8d84c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d850:	e0fffe17 	ldw	r3,-8(fp)
   8d854:	00bfff84 	movi	r2,-2
   8d858:	1884703a 	and	r2,r3,r2
   8d85c:	1001703a 	wrctl	status,r2
  
  return context;
   8d860:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   8d864:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   8d868:	d0a71303 	ldbu	r2,-25524(gp)
   8d86c:	10803fcc 	andi	r2,r2,255
   8d870:	1004c03a 	cmpne	r2,r2,zero
   8d874:	10001b1e 	bne	r2,zero,8d8e4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   8d878:	d0a70503 	ldbu	r2,-25580(gp)
   8d87c:	10803fcc 	andi	r2,r2,255
   8d880:	1004c03a 	cmpne	r2,r2,zero
   8d884:	1000171e 	bne	r2,zero,8d8e4 <OS_Sched+0xb0>
            OS_SchedNew();
   8d888:	008d9080 	call	8d908 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   8d88c:	d0a70703 	ldbu	r2,-25572(gp)
   8d890:	d0e70743 	ldbu	r3,-25571(gp)
   8d894:	11003fcc 	andi	r4,r2,255
   8d898:	18803fcc 	andi	r2,r3,255
   8d89c:	20801126 	beq	r4,r2,8d8e4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   8d8a0:	d0a70703 	ldbu	r2,-25572(gp)
   8d8a4:	10803fcc 	andi	r2,r2,255
   8d8a8:	00c002f4 	movhi	r3,11
   8d8ac:	18e9c004 	addi	r3,r3,-22784
   8d8b0:	1085883a 	add	r2,r2,r2
   8d8b4:	1085883a 	add	r2,r2,r2
   8d8b8:	10c5883a 	add	r2,r2,r3
   8d8bc:	10800017 	ldw	r2,0(r2)
   8d8c0:	d0a70f15 	stw	r2,-25540(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   8d8c4:	d0e70f17 	ldw	r3,-25540(gp)
   8d8c8:	18800e17 	ldw	r2,56(r3)
   8d8cc:	10800044 	addi	r2,r2,1
   8d8d0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   8d8d4:	d0a70a17 	ldw	r2,-25560(gp)
   8d8d8:	10800044 	addi	r2,r2,1
   8d8dc:	d0a70a15 	stw	r2,-25560(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   8d8e0:	00962200 	call	96220 <OSCtxSw>
   8d8e4:	e0bfff17 	ldw	r2,-4(fp)
   8d8e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d8ec:	e0bffd17 	ldw	r2,-12(fp)
   8d8f0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   8d8f4:	e037883a 	mov	sp,fp
   8d8f8:	dfc00117 	ldw	ra,4(sp)
   8d8fc:	df000017 	ldw	fp,0(sp)
   8d900:	dec00204 	addi	sp,sp,8
   8d904:	f800283a 	ret

0008d908 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   8d908:	defffe04 	addi	sp,sp,-8
   8d90c:	df000115 	stw	fp,4(sp)
   8d910:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   8d914:	d0a71103 	ldbu	r2,-25532(gp)
   8d918:	10c03fcc 	andi	r3,r2,255
   8d91c:	00800274 	movhi	r2,9
   8d920:	109eb304 	addi	r2,r2,31436
   8d924:	10c5883a 	add	r2,r2,r3
   8d928:	10800003 	ldbu	r2,0(r2)
   8d92c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   8d930:	e0bfff03 	ldbu	r2,-4(fp)
   8d934:	100490fa 	slli	r2,r2,3
   8d938:	1009883a 	mov	r4,r2
   8d93c:	e0ffff03 	ldbu	r3,-4(fp)
   8d940:	d0a71144 	addi	r2,gp,-25531
   8d944:	1885883a 	add	r2,r3,r2
   8d948:	10800003 	ldbu	r2,0(r2)
   8d94c:	10c03fcc 	andi	r3,r2,255
   8d950:	00800274 	movhi	r2,9
   8d954:	109eb304 	addi	r2,r2,31436
   8d958:	10c5883a 	add	r2,r2,r3
   8d95c:	10800003 	ldbu	r2,0(r2)
   8d960:	2085883a 	add	r2,r4,r2
   8d964:	d0a70705 	stb	r2,-25572(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   8d968:	e037883a 	mov	sp,fp
   8d96c:	df000017 	ldw	fp,0(sp)
   8d970:	dec00104 	addi	sp,sp,4
   8d974:	f800283a 	ret

0008d978 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   8d978:	defffc04 	addi	sp,sp,-16
   8d97c:	df000315 	stw	fp,12(sp)
   8d980:	df000304 	addi	fp,sp,12
   8d984:	e13ffe15 	stw	r4,-8(fp)
   8d988:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   8d98c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   8d990:	00000d06 	br	8d9c8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   8d994:	e0bfff17 	ldw	r2,-4(fp)
   8d998:	10c00003 	ldbu	r3,0(r2)
   8d99c:	e0bffe17 	ldw	r2,-8(fp)
   8d9a0:	10c00005 	stb	r3,0(r2)
   8d9a4:	e0bffe17 	ldw	r2,-8(fp)
   8d9a8:	10800044 	addi	r2,r2,1
   8d9ac:	e0bffe15 	stw	r2,-8(fp)
   8d9b0:	e0bfff17 	ldw	r2,-4(fp)
   8d9b4:	10800044 	addi	r2,r2,1
   8d9b8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8d9bc:	e0bffd03 	ldbu	r2,-12(fp)
   8d9c0:	10800044 	addi	r2,r2,1
   8d9c4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8d9c8:	e0bfff17 	ldw	r2,-4(fp)
   8d9cc:	10800003 	ldbu	r2,0(r2)
   8d9d0:	10803fcc 	andi	r2,r2,255
   8d9d4:	1004c03a 	cmpne	r2,r2,zero
   8d9d8:	103fee1e 	bne	r2,zero,8d994 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   8d9dc:	e0bffe17 	ldw	r2,-8(fp)
   8d9e0:	10000005 	stb	zero,0(r2)
    return (len);
   8d9e4:	e0bffd03 	ldbu	r2,-12(fp)
}
   8d9e8:	e037883a 	mov	sp,fp
   8d9ec:	df000017 	ldw	fp,0(sp)
   8d9f0:	dec00104 	addi	sp,sp,4
   8d9f4:	f800283a 	ret

0008d9f8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   8d9f8:	defffd04 	addi	sp,sp,-12
   8d9fc:	df000215 	stw	fp,8(sp)
   8da00:	df000204 	addi	fp,sp,8
   8da04:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   8da08:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   8da0c:	00000606 	br	8da28 <OS_StrLen+0x30>
        psrc++;
   8da10:	e0bfff17 	ldw	r2,-4(fp)
   8da14:	10800044 	addi	r2,r2,1
   8da18:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8da1c:	e0bffe03 	ldbu	r2,-8(fp)
   8da20:	10800044 	addi	r2,r2,1
   8da24:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8da28:	e0bfff17 	ldw	r2,-4(fp)
   8da2c:	10800003 	ldbu	r2,0(r2)
   8da30:	10803fcc 	andi	r2,r2,255
   8da34:	1004c03a 	cmpne	r2,r2,zero
   8da38:	103ff51e 	bne	r2,zero,8da10 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   8da3c:	e0bffe03 	ldbu	r2,-8(fp)
}
   8da40:	e037883a 	mov	sp,fp
   8da44:	df000017 	ldw	fp,0(sp)
   8da48:	dec00104 	addi	sp,sp,4
   8da4c:	f800283a 	ret

0008da50 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   8da50:	defffa04 	addi	sp,sp,-24
   8da54:	dfc00515 	stw	ra,20(sp)
   8da58:	df000415 	stw	fp,16(sp)
   8da5c:	df000404 	addi	fp,sp,16
   8da60:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8da64:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8da68:	0005303a 	rdctl	r2,status
   8da6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8da70:	e0fffd17 	ldw	r3,-12(fp)
   8da74:	00bfff84 	movi	r2,-2
   8da78:	1884703a 	and	r2,r3,r2
   8da7c:	1001703a 	wrctl	status,r2
  
  return context;
   8da80:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   8da84:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   8da88:	d0a70617 	ldw	r2,-25576(gp)
   8da8c:	10800044 	addi	r2,r2,1
   8da90:	d0a70615 	stw	r2,-25576(gp)
   8da94:	e0bffe17 	ldw	r2,-8(fp)
   8da98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8da9c:	e0bffc17 	ldw	r2,-16(fp)
   8daa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   8daa4:	00966cc0 	call	966cc <OSTaskIdleHook>
    }
   8daa8:	003fef06 	br	8da68 <OS_TaskIdle+0x18>

0008daac <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   8daac:	defffa04 	addi	sp,sp,-24
   8dab0:	dfc00515 	stw	ra,20(sp)
   8dab4:	df000415 	stw	fp,16(sp)
   8dab8:	df000404 	addi	fp,sp,16
   8dabc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8dac0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8dac4:	00000206 	br	8dad0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   8dac8:	01003204 	movi	r4,200
   8dacc:	0093b2c0 	call	93b2c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8dad0:	d0a71703 	ldbu	r2,-25508(gp)
   8dad4:	10803fcc 	andi	r2,r2,255
   8dad8:	1005003a 	cmpeq	r2,r2,zero
   8dadc:	103ffa1e 	bne	r2,zero,8dac8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   8dae0:	d1270b17 	ldw	r4,-25556(gp)
   8dae4:	01401904 	movi	r5,100
   8dae8:	008a5ec0 	call	8a5ec <__udivsi3>
   8daec:	d0a70b15 	stw	r2,-25556(gp)
    if (OSIdleCtrMax == 0L) {
   8daf0:	d0a70b17 	ldw	r2,-25556(gp)
   8daf4:	1004c03a 	cmpne	r2,r2,zero
   8daf8:	1000031e 	bne	r2,zero,8db08 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   8dafc:	d0270d05 	stb	zero,-25548(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   8db00:	01003fc4 	movi	r4,255
   8db04:	00937400 	call	93740 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8db08:	0005303a 	rdctl	r2,status
   8db0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8db10:	e0fffd17 	ldw	r3,-12(fp)
   8db14:	00bfff84 	movi	r2,-2
   8db18:	1884703a 	and	r2,r3,r2
   8db1c:	1001703a 	wrctl	status,r2
  
  return context;
   8db20:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   8db24:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   8db28:	d0a70617 	ldw	r2,-25576(gp)
   8db2c:	d0a71815 	stw	r2,-25504(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   8db30:	d0270615 	stw	zero,-25576(gp)
   8db34:	e0bffe17 	ldw	r2,-8(fp)
   8db38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8db3c:	e0bffc17 	ldw	r2,-16(fp)
   8db40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   8db44:	d1271817 	ldw	r4,-25504(gp)
   8db48:	d1670b17 	ldw	r5,-25556(gp)
   8db4c:	008a5ec0 	call	8a5ec <__udivsi3>
   8db50:	1007883a 	mov	r3,r2
   8db54:	00801904 	movi	r2,100
   8db58:	10c5c83a 	sub	r2,r2,r3
   8db5c:	d0a70d05 	stb	r2,-25548(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   8db60:	009665c0 	call	9665c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   8db64:	008db740 	call	8db74 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   8db68:	01001904 	movi	r4,100
   8db6c:	0093b2c0 	call	93b2c <OSTimeDly>
    }
   8db70:	003fe506 	br	8db08 <OS_TaskStat+0x5c>

0008db74 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   8db74:	defffa04 	addi	sp,sp,-24
   8db78:	dfc00515 	stw	ra,20(sp)
   8db7c:	df000415 	stw	fp,16(sp)
   8db80:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8db84:	e03ffc05 	stb	zero,-16(fp)
   8db88:	00002406 	br	8dc1c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   8db8c:	e13ffc03 	ldbu	r4,-16(fp)
   8db90:	e17ffe04 	addi	r5,fp,-8
   8db94:	00935440 	call	93544 <OSTaskStkChk>
   8db98:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   8db9c:	e0bffc43 	ldbu	r2,-15(fp)
   8dba0:	1004c03a 	cmpne	r2,r2,zero
   8dba4:	10001a1e 	bne	r2,zero,8dc10 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   8dba8:	e0bffc03 	ldbu	r2,-16(fp)
   8dbac:	00c002f4 	movhi	r3,11
   8dbb0:	18e9c004 	addi	r3,r3,-22784
   8dbb4:	1085883a 	add	r2,r2,r2
   8dbb8:	1085883a 	add	r2,r2,r2
   8dbbc:	10c5883a 	add	r2,r2,r3
   8dbc0:	10800017 	ldw	r2,0(r2)
   8dbc4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   8dbc8:	e0bffd17 	ldw	r2,-12(fp)
   8dbcc:	1005003a 	cmpeq	r2,r2,zero
   8dbd0:	10000f1e 	bne	r2,zero,8dc10 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   8dbd4:	e0bffd17 	ldw	r2,-12(fp)
   8dbd8:	10800060 	cmpeqi	r2,r2,1
   8dbdc:	10000c1e 	bne	r2,zero,8dc10 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   8dbe0:	e0bffd17 	ldw	r2,-12(fp)
   8dbe4:	10c00217 	ldw	r3,8(r2)
   8dbe8:	e0bffd17 	ldw	r2,-12(fp)
   8dbec:	10800317 	ldw	r2,12(r2)
   8dbf0:	1085883a 	add	r2,r2,r2
   8dbf4:	1085883a 	add	r2,r2,r2
   8dbf8:	1887883a 	add	r3,r3,r2
   8dbfc:	e0bffd17 	ldw	r2,-12(fp)
   8dc00:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   8dc04:	e0ffff17 	ldw	r3,-4(fp)
   8dc08:	e0bffd17 	ldw	r2,-12(fp)
   8dc0c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8dc10:	e0bffc03 	ldbu	r2,-16(fp)
   8dc14:	10800044 	addi	r2,r2,1
   8dc18:	e0bffc05 	stb	r2,-16(fp)
   8dc1c:	e0bffc03 	ldbu	r2,-16(fp)
   8dc20:	10800570 	cmpltui	r2,r2,21
   8dc24:	103fd91e 	bne	r2,zero,8db8c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   8dc28:	e037883a 	mov	sp,fp
   8dc2c:	dfc00117 	ldw	ra,4(sp)
   8dc30:	df000017 	ldw	fp,0(sp)
   8dc34:	dec00204 	addi	sp,sp,8
   8dc38:	f800283a 	ret

0008dc3c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   8dc3c:	defff104 	addi	sp,sp,-60
   8dc40:	dfc00e15 	stw	ra,56(sp)
   8dc44:	df000d15 	stw	fp,52(sp)
   8dc48:	df000d04 	addi	fp,sp,52
   8dc4c:	e17ffb15 	stw	r5,-20(fp)
   8dc50:	e1bffc15 	stw	r6,-16(fp)
   8dc54:	e0800417 	ldw	r2,16(fp)
   8dc58:	e13ffa05 	stb	r4,-24(fp)
   8dc5c:	e1fffd0d 	sth	r7,-12(fp)
   8dc60:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8dc64:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dc68:	0005303a 	rdctl	r2,status
   8dc6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc70:	e0fff717 	ldw	r3,-36(fp)
   8dc74:	00bfff84 	movi	r2,-2
   8dc78:	1884703a 	and	r2,r3,r2
   8dc7c:	1001703a 	wrctl	status,r2
  
  return context;
   8dc80:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   8dc84:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   8dc88:	d0a70c17 	ldw	r2,-25552(gp)
   8dc8c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   8dc90:	e0bff917 	ldw	r2,-28(fp)
   8dc94:	1005003a 	cmpeq	r2,r2,zero
   8dc98:	1000941e 	bne	r2,zero,8deec <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   8dc9c:	e0bff917 	ldw	r2,-28(fp)
   8dca0:	10800517 	ldw	r2,20(r2)
   8dca4:	d0a70c15 	stw	r2,-25552(gp)
   8dca8:	e0bff817 	ldw	r2,-32(fp)
   8dcac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dcb0:	e0bff617 	ldw	r2,-40(fp)
   8dcb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   8dcb8:	e0fff917 	ldw	r3,-28(fp)
   8dcbc:	e0bffb17 	ldw	r2,-20(fp)
   8dcc0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   8dcc4:	e0fff917 	ldw	r3,-28(fp)
   8dcc8:	e0bffa03 	ldbu	r2,-24(fp)
   8dccc:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   8dcd0:	e0bff917 	ldw	r2,-28(fp)
   8dcd4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   8dcd8:	e0bff917 	ldw	r2,-28(fp)
   8dcdc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   8dce0:	e0bff917 	ldw	r2,-28(fp)
   8dce4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   8dce8:	e0fff917 	ldw	r3,-28(fp)
   8dcec:	e0800317 	ldw	r2,12(fp)
   8dcf0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   8dcf4:	e0fff917 	ldw	r3,-28(fp)
   8dcf8:	e0800217 	ldw	r2,8(fp)
   8dcfc:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   8dd00:	e0fff917 	ldw	r3,-28(fp)
   8dd04:	e0bffc17 	ldw	r2,-16(fp)
   8dd08:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   8dd0c:	e0fff917 	ldw	r3,-28(fp)
   8dd10:	e0bffe0b 	ldhu	r2,-8(fp)
   8dd14:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   8dd18:	e0fff917 	ldw	r3,-28(fp)
   8dd1c:	e0bffd0b 	ldhu	r2,-12(fp)
   8dd20:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   8dd24:	e0bff917 	ldw	r2,-28(fp)
   8dd28:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   8dd2c:	e0bffa03 	ldbu	r2,-24(fp)
   8dd30:	1004d0fa 	srli	r2,r2,3
   8dd34:	1007883a 	mov	r3,r2
   8dd38:	e0bff917 	ldw	r2,-28(fp)
   8dd3c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   8dd40:	e0bffa03 	ldbu	r2,-24(fp)
   8dd44:	108001cc 	andi	r2,r2,7
   8dd48:	1007883a 	mov	r3,r2
   8dd4c:	e0bff917 	ldw	r2,-28(fp)
   8dd50:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   8dd54:	e0bff917 	ldw	r2,-28(fp)
   8dd58:	10800d03 	ldbu	r2,52(r2)
   8dd5c:	10c03fcc 	andi	r3,r2,255
   8dd60:	00800044 	movi	r2,1
   8dd64:	10c4983a 	sll	r2,r2,r3
   8dd68:	1007883a 	mov	r3,r2
   8dd6c:	e0bff917 	ldw	r2,-28(fp)
   8dd70:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   8dd74:	e0bff917 	ldw	r2,-28(fp)
   8dd78:	10800cc3 	ldbu	r2,51(r2)
   8dd7c:	10c03fcc 	andi	r3,r2,255
   8dd80:	00800044 	movi	r2,1
   8dd84:	10c4983a 	sll	r2,r2,r3
   8dd88:	1007883a 	mov	r3,r2
   8dd8c:	e0bff917 	ldw	r2,-28(fp)
   8dd90:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   8dd94:	e0bff917 	ldw	r2,-28(fp)
   8dd98:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   8dd9c:	e0bff917 	ldw	r2,-28(fp)
   8dda0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   8dda4:	e0bff917 	ldw	r2,-28(fp)
   8dda8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   8ddac:	e0bff917 	ldw	r2,-28(fp)
   8ddb0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   8ddb4:	e0bff917 	ldw	r2,-28(fp)
   8ddb8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   8ddbc:	e0bff917 	ldw	r2,-28(fp)
   8ddc0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   8ddc4:	e0bff917 	ldw	r2,-28(fp)
   8ddc8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   8ddcc:	e0bff917 	ldw	r2,-28(fp)
   8ddd0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   8ddd4:	e0bff917 	ldw	r2,-28(fp)
   8ddd8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   8dddc:	e0fff917 	ldw	r3,-28(fp)
   8dde0:	00800fc4 	movi	r2,63
   8dde4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   8dde8:	e0bff917 	ldw	r2,-28(fp)
   8ddec:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   8ddf0:	e13ff917 	ldw	r4,-28(fp)
   8ddf4:	00966e80 	call	966e8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   8ddf8:	e13ff917 	ldw	r4,-28(fp)
   8ddfc:	00966000 	call	96600 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8de00:	0005303a 	rdctl	r2,status
   8de04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8de08:	e0fff517 	ldw	r3,-44(fp)
   8de0c:	00bfff84 	movi	r2,-2
   8de10:	1884703a 	and	r2,r3,r2
   8de14:	1001703a 	wrctl	status,r2
  
  return context;
   8de18:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   8de1c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   8de20:	e0bffa03 	ldbu	r2,-24(fp)
   8de24:	00c002f4 	movhi	r3,11
   8de28:	18e9c004 	addi	r3,r3,-22784
   8de2c:	1085883a 	add	r2,r2,r2
   8de30:	1085883a 	add	r2,r2,r2
   8de34:	10c7883a 	add	r3,r2,r3
   8de38:	e0bff917 	ldw	r2,-28(fp)
   8de3c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   8de40:	d0e70817 	ldw	r3,-25568(gp)
   8de44:	e0bff917 	ldw	r2,-28(fp)
   8de48:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   8de4c:	e0bff917 	ldw	r2,-28(fp)
   8de50:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   8de54:	d0a70817 	ldw	r2,-25568(gp)
   8de58:	1005003a 	cmpeq	r2,r2,zero
   8de5c:	1000031e 	bne	r2,zero,8de6c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   8de60:	d0e70817 	ldw	r3,-25568(gp)
   8de64:	e0bff917 	ldw	r2,-28(fp)
   8de68:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   8de6c:	e0bff917 	ldw	r2,-28(fp)
   8de70:	d0a70815 	stw	r2,-25568(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   8de74:	e0bff917 	ldw	r2,-28(fp)
   8de78:	10c00d83 	ldbu	r3,54(r2)
   8de7c:	d0a71103 	ldbu	r2,-25532(gp)
   8de80:	1884b03a 	or	r2,r3,r2
   8de84:	d0a71105 	stb	r2,-25532(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8de88:	e0bff917 	ldw	r2,-28(fp)
   8de8c:	10800d03 	ldbu	r2,52(r2)
   8de90:	11003fcc 	andi	r4,r2,255
   8de94:	e0bff917 	ldw	r2,-28(fp)
   8de98:	10800d03 	ldbu	r2,52(r2)
   8de9c:	10c03fcc 	andi	r3,r2,255
   8dea0:	d0a71144 	addi	r2,gp,-25531
   8dea4:	1885883a 	add	r2,r3,r2
   8dea8:	10c00003 	ldbu	r3,0(r2)
   8deac:	e0bff917 	ldw	r2,-28(fp)
   8deb0:	10800d43 	ldbu	r2,53(r2)
   8deb4:	1884b03a 	or	r2,r3,r2
   8deb8:	1007883a 	mov	r3,r2
   8debc:	d0a71144 	addi	r2,gp,-25531
   8dec0:	2085883a 	add	r2,r4,r2
   8dec4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   8dec8:	d0a70d43 	ldbu	r2,-25547(gp)
   8decc:	10800044 	addi	r2,r2,1
   8ded0:	d0a70d45 	stb	r2,-25547(gp)
   8ded4:	e0bff817 	ldw	r2,-32(fp)
   8ded8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dedc:	e0bff417 	ldw	r2,-48(fp)
   8dee0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   8dee4:	e03fff15 	stw	zero,-4(fp)
   8dee8:	00000606 	br	8df04 <OS_TCBInit+0x2c8>
   8deec:	e0bff817 	ldw	r2,-32(fp)
   8def0:	e0bff315 	stw	r2,-52(fp)
   8def4:	e0bff317 	ldw	r2,-52(fp)
   8def8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   8defc:	00801084 	movi	r2,66
   8df00:	e0bfff15 	stw	r2,-4(fp)
   8df04:	e0bfff17 	ldw	r2,-4(fp)
}
   8df08:	e037883a 	mov	sp,fp
   8df0c:	dfc00117 	ldw	ra,4(sp)
   8df10:	df000017 	ldw	fp,0(sp)
   8df14:	dec00204 	addi	sp,sp,8
   8df18:	f800283a 	ret

0008df1c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   8df1c:	defffe04 	addi	sp,sp,-8
   8df20:	df000115 	stw	fp,4(sp)
   8df24:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   8df28:	d0a01104 	addi	r2,gp,-32700
   8df2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   8df30:	d0a01204 	addi	r2,gp,-32696
   8df34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   8df38:	d0a01384 	addi	r2,gp,-32690
   8df3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   8df40:	d0a01404 	addi	r2,gp,-32688
   8df44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   8df48:	d0a01304 	addi	r2,gp,-32692
   8df4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   8df50:	d0a01484 	addi	r2,gp,-32686
   8df54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   8df58:	d0a01504 	addi	r2,gp,-32684
   8df5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   8df60:	d0a01584 	addi	r2,gp,-32682
   8df64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   8df68:	d0a01604 	addi	r2,gp,-32680
   8df6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   8df70:	d0a01684 	addi	r2,gp,-32678
   8df74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   8df78:	d0a01704 	addi	r2,gp,-32676
   8df7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   8df80:	d0a01784 	addi	r2,gp,-32674
   8df84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   8df88:	d0a01804 	addi	r2,gp,-32672
   8df8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   8df90:	d0a01884 	addi	r2,gp,-32670
   8df94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   8df98:	d0a01904 	addi	r2,gp,-32668
   8df9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   8dfa0:	d0a01984 	addi	r2,gp,-32666
   8dfa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   8dfa8:	d0a01a04 	addi	r2,gp,-32664
   8dfac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   8dfb0:	d0a01a84 	addi	r2,gp,-32662
   8dfb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   8dfb8:	d0a01b04 	addi	r2,gp,-32660
   8dfbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   8dfc0:	d0a01b84 	addi	r2,gp,-32658
   8dfc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   8dfc8:	d0a01c04 	addi	r2,gp,-32656
   8dfcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   8dfd0:	d0a01c84 	addi	r2,gp,-32654
   8dfd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   8dfd8:	d0a01d04 	addi	r2,gp,-32652
   8dfdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   8dfe0:	d0a01d84 	addi	r2,gp,-32650
   8dfe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   8dfe8:	d0a01e04 	addi	r2,gp,-32648
   8dfec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   8dff0:	d0a01e84 	addi	r2,gp,-32646
   8dff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   8dff8:	d0a01f04 	addi	r2,gp,-32644
   8dffc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   8e000:	d0a01f84 	addi	r2,gp,-32642
   8e004:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   8e008:	d0a02004 	addi	r2,gp,-32640
   8e00c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   8e010:	d0a02084 	addi	r2,gp,-32638
   8e014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   8e018:	d0a02104 	addi	r2,gp,-32636
   8e01c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   8e020:	d0a02184 	addi	r2,gp,-32634
   8e024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   8e028:	d0a02204 	addi	r2,gp,-32632
   8e02c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   8e030:	d0a02284 	addi	r2,gp,-32630
   8e034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   8e038:	d0a02304 	addi	r2,gp,-32628
   8e03c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   8e040:	d0a02384 	addi	r2,gp,-32626
   8e044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   8e048:	d0a02404 	addi	r2,gp,-32624
   8e04c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   8e050:	d0a02484 	addi	r2,gp,-32622
   8e054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   8e058:	d0a02504 	addi	r2,gp,-32620
   8e05c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   8e060:	d0a02584 	addi	r2,gp,-32618
   8e064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   8e068:	d0a02604 	addi	r2,gp,-32616
   8e06c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   8e070:	d0a02684 	addi	r2,gp,-32614
   8e074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   8e078:	d0a02704 	addi	r2,gp,-32612
   8e07c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   8e080:	d0a02784 	addi	r2,gp,-32610
   8e084:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   8e088:	d0a02804 	addi	r2,gp,-32608
   8e08c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   8e090:	d0a02d04 	addi	r2,gp,-32588
   8e094:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   8e098:	e037883a 	mov	sp,fp
   8e09c:	df000017 	ldw	fp,0(sp)
   8e0a0:	dec00104 	addi	sp,sp,4
   8e0a4:	f800283a 	ret

0008e0a8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   8e0a8:	defff104 	addi	sp,sp,-60
   8e0ac:	df000e15 	stw	fp,56(sp)
   8e0b0:	df000e04 	addi	fp,sp,56
   8e0b4:	e13ffa15 	stw	r4,-24(fp)
   8e0b8:	e1fffd15 	stw	r7,-12(fp)
   8e0bc:	e17ffb0d 	sth	r5,-20(fp)
   8e0c0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8e0c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8e0c8:	e0bffd17 	ldw	r2,-12(fp)
   8e0cc:	1004c03a 	cmpne	r2,r2,zero
   8e0d0:	1000021e 	bne	r2,zero,8e0dc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   8e0d4:	e03fff15 	stw	zero,-4(fp)
   8e0d8:	0000bb06 	br	8e3c8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8e0dc:	e0bffa17 	ldw	r2,-24(fp)
   8e0e0:	1004c03a 	cmpne	r2,r2,zero
   8e0e4:	1000051e 	bne	r2,zero,8e0fc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8e0e8:	e0fffd17 	ldw	r3,-12(fp)
   8e0ec:	00801b84 	movi	r2,110
   8e0f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8e0f4:	e03fff15 	stw	zero,-4(fp)
   8e0f8:	0000b306 	br	8e3c8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   8e0fc:	e0bffa17 	ldw	r2,-24(fp)
   8e100:	10800003 	ldbu	r2,0(r2)
   8e104:	10803fcc 	andi	r2,r2,255
   8e108:	10800160 	cmpeqi	r2,r2,5
   8e10c:	1000051e 	bne	r2,zero,8e124 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8e110:	e0fffd17 	ldw	r3,-12(fp)
   8e114:	00800044 	movi	r2,1
   8e118:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8e11c:	e03fff15 	stw	zero,-4(fp)
   8e120:	0000a906 	br	8e3c8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   8e124:	e0fffc03 	ldbu	r3,-16(fp)
   8e128:	00bfe004 	movi	r2,-128
   8e12c:	1884703a 	and	r2,r3,r2
   8e130:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   8e134:	e0bff943 	ldbu	r2,-27(fp)
   8e138:	1005003a 	cmpeq	r2,r2,zero
   8e13c:	1000061e 	bne	r2,zero,8e158 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   8e140:	e0bffc03 	ldbu	r2,-16(fp)
   8e144:	10801fcc 	andi	r2,r2,127
   8e148:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   8e14c:	00800044 	movi	r2,1
   8e150:	e0bff905 	stb	r2,-28(fp)
   8e154:	00000106 	br	8e15c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   8e158:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   8e15c:	e0bffd17 	ldw	r2,-12(fp)
   8e160:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e164:	0005303a 	rdctl	r2,status
   8e168:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e16c:	e0fff717 	ldw	r3,-36(fp)
   8e170:	00bfff84 	movi	r2,-2
   8e174:	1884703a 	and	r2,r3,r2
   8e178:	1001703a 	wrctl	status,r2
  
  return context;
   8e17c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8e180:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   8e184:	e0bffc03 	ldbu	r2,-16(fp)
   8e188:	e0bffe15 	stw	r2,-8(fp)
   8e18c:	e0fffe17 	ldw	r3,-8(fp)
   8e190:	18800060 	cmpeqi	r2,r3,1
   8e194:	1000651e 	bne	r2,zero,8e32c <OSFlagAccept+0x284>
   8e198:	e0fffe17 	ldw	r3,-8(fp)
   8e19c:	18800088 	cmpgei	r2,r3,2
   8e1a0:	1000041e 	bne	r2,zero,8e1b4 <OSFlagAccept+0x10c>
   8e1a4:	e0fffe17 	ldw	r3,-8(fp)
   8e1a8:	1805003a 	cmpeq	r2,r3,zero
   8e1ac:	1000421e 	bne	r2,zero,8e2b8 <OSFlagAccept+0x210>
   8e1b0:	00007b06 	br	8e3a0 <OSFlagAccept+0x2f8>
   8e1b4:	e0fffe17 	ldw	r3,-8(fp)
   8e1b8:	188000a0 	cmpeqi	r2,r3,2
   8e1bc:	1000041e 	bne	r2,zero,8e1d0 <OSFlagAccept+0x128>
   8e1c0:	e0fffe17 	ldw	r3,-8(fp)
   8e1c4:	188000e0 	cmpeqi	r2,r3,3
   8e1c8:	10001e1e 	bne	r2,zero,8e244 <OSFlagAccept+0x19c>
   8e1cc:	00007406 	br	8e3a0 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8e1d0:	e0bffa17 	ldw	r2,-24(fp)
   8e1d4:	10c0020b 	ldhu	r3,8(r2)
   8e1d8:	e0bffb0b 	ldhu	r2,-20(fp)
   8e1dc:	1884703a 	and	r2,r3,r2
   8e1e0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8e1e4:	e0fff98b 	ldhu	r3,-26(fp)
   8e1e8:	e0bffb0b 	ldhu	r2,-20(fp)
   8e1ec:	18800d1e 	bne	r3,r2,8e224 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8e1f0:	e0bff903 	ldbu	r2,-28(fp)
   8e1f4:	10800058 	cmpnei	r2,r2,1
   8e1f8:	10000d1e 	bne	r2,zero,8e230 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   8e1fc:	e0bffa17 	ldw	r2,-24(fp)
   8e200:	1080020b 	ldhu	r2,8(r2)
   8e204:	1007883a 	mov	r3,r2
   8e208:	e0bff98b 	ldhu	r2,-26(fp)
   8e20c:	0084303a 	nor	r2,zero,r2
   8e210:	1884703a 	and	r2,r3,r2
   8e214:	1007883a 	mov	r3,r2
   8e218:	e0bffa17 	ldw	r2,-24(fp)
   8e21c:	10c0020d 	sth	r3,8(r2)
   8e220:	00000306 	br	8e230 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8e224:	e0fffd17 	ldw	r3,-12(fp)
   8e228:	00801c04 	movi	r2,112
   8e22c:	18800005 	stb	r2,0(r3)
   8e230:	e0bff817 	ldw	r2,-32(fp)
   8e234:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e238:	e0bff617 	ldw	r2,-40(fp)
   8e23c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8e240:	00005f06 	br	8e3c0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8e244:	e0bffa17 	ldw	r2,-24(fp)
   8e248:	10c0020b 	ldhu	r3,8(r2)
   8e24c:	e0bffb0b 	ldhu	r2,-20(fp)
   8e250:	1884703a 	and	r2,r3,r2
   8e254:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   8e258:	e0bff98b 	ldhu	r2,-26(fp)
   8e25c:	1005003a 	cmpeq	r2,r2,zero
   8e260:	10000d1e 	bne	r2,zero,8e298 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8e264:	e0bff903 	ldbu	r2,-28(fp)
   8e268:	10800058 	cmpnei	r2,r2,1
   8e26c:	10000d1e 	bne	r2,zero,8e2a4 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   8e270:	e0bffa17 	ldw	r2,-24(fp)
   8e274:	1080020b 	ldhu	r2,8(r2)
   8e278:	1007883a 	mov	r3,r2
   8e27c:	e0bff98b 	ldhu	r2,-26(fp)
   8e280:	0084303a 	nor	r2,zero,r2
   8e284:	1884703a 	and	r2,r3,r2
   8e288:	1007883a 	mov	r3,r2
   8e28c:	e0bffa17 	ldw	r2,-24(fp)
   8e290:	10c0020d 	sth	r3,8(r2)
   8e294:	00000306 	br	8e2a4 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8e298:	e0fffd17 	ldw	r3,-12(fp)
   8e29c:	00801c04 	movi	r2,112
   8e2a0:	18800005 	stb	r2,0(r3)
   8e2a4:	e0bff817 	ldw	r2,-32(fp)
   8e2a8:	e0bff515 	stw	r2,-44(fp)
   8e2ac:	e0bff517 	ldw	r2,-44(fp)
   8e2b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8e2b4:	00004206 	br	8e3c0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   8e2b8:	e0bffa17 	ldw	r2,-24(fp)
   8e2bc:	1080020b 	ldhu	r2,8(r2)
   8e2c0:	0084303a 	nor	r2,zero,r2
   8e2c4:	1007883a 	mov	r3,r2
   8e2c8:	e0bffb0b 	ldhu	r2,-20(fp)
   8e2cc:	1884703a 	and	r2,r3,r2
   8e2d0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8e2d4:	e0fff98b 	ldhu	r3,-26(fp)
   8e2d8:	e0bffb0b 	ldhu	r2,-20(fp)
   8e2dc:	18800b1e 	bne	r3,r2,8e30c <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8e2e0:	e0bff903 	ldbu	r2,-28(fp)
   8e2e4:	10800058 	cmpnei	r2,r2,1
   8e2e8:	10000b1e 	bne	r2,zero,8e318 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8e2ec:	e0bffa17 	ldw	r2,-24(fp)
   8e2f0:	10c0020b 	ldhu	r3,8(r2)
   8e2f4:	e0bff98b 	ldhu	r2,-26(fp)
   8e2f8:	1884b03a 	or	r2,r3,r2
   8e2fc:	1007883a 	mov	r3,r2
   8e300:	e0bffa17 	ldw	r2,-24(fp)
   8e304:	10c0020d 	sth	r3,8(r2)
   8e308:	00000306 	br	8e318 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8e30c:	e0fffd17 	ldw	r3,-12(fp)
   8e310:	00801c04 	movi	r2,112
   8e314:	18800005 	stb	r2,0(r3)
   8e318:	e0bff817 	ldw	r2,-32(fp)
   8e31c:	e0bff415 	stw	r2,-48(fp)
   8e320:	e0bff417 	ldw	r2,-48(fp)
   8e324:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8e328:	00002506 	br	8e3c0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8e32c:	e0bffa17 	ldw	r2,-24(fp)
   8e330:	1080020b 	ldhu	r2,8(r2)
   8e334:	0084303a 	nor	r2,zero,r2
   8e338:	1007883a 	mov	r3,r2
   8e33c:	e0bffb0b 	ldhu	r2,-20(fp)
   8e340:	1884703a 	and	r2,r3,r2
   8e344:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8e348:	e0bff98b 	ldhu	r2,-26(fp)
   8e34c:	1005003a 	cmpeq	r2,r2,zero
   8e350:	10000b1e 	bne	r2,zero,8e380 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8e354:	e0bff903 	ldbu	r2,-28(fp)
   8e358:	10800058 	cmpnei	r2,r2,1
   8e35c:	10000b1e 	bne	r2,zero,8e38c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   8e360:	e0bffa17 	ldw	r2,-24(fp)
   8e364:	10c0020b 	ldhu	r3,8(r2)
   8e368:	e0bff98b 	ldhu	r2,-26(fp)
   8e36c:	1884b03a 	or	r2,r3,r2
   8e370:	1007883a 	mov	r3,r2
   8e374:	e0bffa17 	ldw	r2,-24(fp)
   8e378:	10c0020d 	sth	r3,8(r2)
   8e37c:	00000306 	br	8e38c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8e380:	e0fffd17 	ldw	r3,-12(fp)
   8e384:	00801c04 	movi	r2,112
   8e388:	18800005 	stb	r2,0(r3)
   8e38c:	e0bff817 	ldw	r2,-32(fp)
   8e390:	e0bff315 	stw	r2,-52(fp)
   8e394:	e0bff317 	ldw	r2,-52(fp)
   8e398:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8e39c:	00000806 	br	8e3c0 <OSFlagAccept+0x318>
   8e3a0:	e0bff817 	ldw	r2,-32(fp)
   8e3a4:	e0bff215 	stw	r2,-56(fp)
   8e3a8:	e0bff217 	ldw	r2,-56(fp)
   8e3ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8e3b0:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   8e3b4:	e0fffd17 	ldw	r3,-12(fp)
   8e3b8:	00801bc4 	movi	r2,111
   8e3bc:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   8e3c0:	e0bff98b 	ldhu	r2,-26(fp)
   8e3c4:	e0bfff15 	stw	r2,-4(fp)
   8e3c8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e3cc:	e037883a 	mov	sp,fp
   8e3d0:	df000017 	ldw	fp,0(sp)
   8e3d4:	dec00104 	addi	sp,sp,4
   8e3d8:	f800283a 	ret

0008e3dc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   8e3dc:	defff704 	addi	sp,sp,-36
   8e3e0:	df000815 	stw	fp,32(sp)
   8e3e4:	df000804 	addi	fp,sp,32
   8e3e8:	e17ffe15 	stw	r5,-8(fp)
   8e3ec:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   8e3f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   8e3f4:	e0bffe17 	ldw	r2,-8(fp)
   8e3f8:	1004c03a 	cmpne	r2,r2,zero
   8e3fc:	1000021e 	bne	r2,zero,8e408 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   8e400:	e03fff15 	stw	zero,-4(fp)
   8e404:	00003f06 	br	8e504 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   8e408:	008002b4 	movhi	r2,10
   8e40c:	10acaf04 	addi	r2,r2,-19780
   8e410:	10800003 	ldbu	r2,0(r2)
   8e414:	10803fcc 	andi	r2,r2,255
   8e418:	1005003a 	cmpeq	r2,r2,zero
   8e41c:	1000051e 	bne	r2,zero,8e434 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   8e420:	e0fffe17 	ldw	r3,-8(fp)
   8e424:	00800404 	movi	r2,16
   8e428:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   8e42c:	e03fff15 	stw	zero,-4(fp)
   8e430:	00003406 	br	8e504 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e434:	0005303a 	rdctl	r2,status
   8e438:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e43c:	e0fffa17 	ldw	r3,-24(fp)
   8e440:	00bfff84 	movi	r2,-2
   8e444:	1884703a 	and	r2,r3,r2
   8e448:	1001703a 	wrctl	status,r2
  
  return context;
   8e44c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8e450:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   8e454:	008002b4 	movhi	r2,10
   8e458:	10acb204 	addi	r2,r2,-19768
   8e45c:	10800017 	ldw	r2,0(r2)
   8e460:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   8e464:	e0bffc17 	ldw	r2,-16(fp)
   8e468:	1005003a 	cmpeq	r2,r2,zero
   8e46c:	10001c1e 	bne	r2,zero,8e4e0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   8e470:	008002b4 	movhi	r2,10
   8e474:	10acb204 	addi	r2,r2,-19768
   8e478:	10800017 	ldw	r2,0(r2)
   8e47c:	10800117 	ldw	r2,4(r2)
   8e480:	1007883a 	mov	r3,r2
   8e484:	008002b4 	movhi	r2,10
   8e488:	10acb204 	addi	r2,r2,-19768
   8e48c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   8e490:	e0fffc17 	ldw	r3,-16(fp)
   8e494:	00800144 	movi	r2,5
   8e498:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   8e49c:	e0fffc17 	ldw	r3,-16(fp)
   8e4a0:	e0bffd0b 	ldhu	r2,-12(fp)
   8e4a4:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   8e4a8:	e0bffc17 	ldw	r2,-16(fp)
   8e4ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   8e4b0:	e0fffc17 	ldw	r3,-16(fp)
   8e4b4:	00800fc4 	movi	r2,63
   8e4b8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8e4bc:	e0bffc17 	ldw	r2,-16(fp)
   8e4c0:	100002c5 	stb	zero,11(r2)
   8e4c4:	e0bffb17 	ldw	r2,-20(fp)
   8e4c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e4cc:	e0bff917 	ldw	r2,-28(fp)
   8e4d0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   8e4d4:	e0bffe17 	ldw	r2,-8(fp)
   8e4d8:	10000005 	stb	zero,0(r2)
   8e4dc:	00000706 	br	8e4fc <OSFlagCreate+0x120>
   8e4e0:	e0bffb17 	ldw	r2,-20(fp)
   8e4e4:	e0bff815 	stw	r2,-32(fp)
   8e4e8:	e0bff817 	ldw	r2,-32(fp)
   8e4ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   8e4f0:	e0fffe17 	ldw	r3,-8(fp)
   8e4f4:	00801c84 	movi	r2,114
   8e4f8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   8e4fc:	e0bffc17 	ldw	r2,-16(fp)
   8e500:	e0bfff15 	stw	r2,-4(fp)
   8e504:	e0bfff17 	ldw	r2,-4(fp)
}
   8e508:	e037883a 	mov	sp,fp
   8e50c:	df000017 	ldw	fp,0(sp)
   8e510:	dec00104 	addi	sp,sp,4
   8e514:	f800283a 	ret

0008e518 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   8e518:	defff004 	addi	sp,sp,-64
   8e51c:	dfc00f15 	stw	ra,60(sp)
   8e520:	df000e15 	stw	fp,56(sp)
   8e524:	df000e04 	addi	fp,sp,56
   8e528:	e13ffb15 	stw	r4,-20(fp)
   8e52c:	e1bffd15 	stw	r6,-12(fp)
   8e530:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8e534:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8e538:	e0bffd17 	ldw	r2,-12(fp)
   8e53c:	1004c03a 	cmpne	r2,r2,zero
   8e540:	1000031e 	bne	r2,zero,8e550 <OSFlagDel+0x38>
        return (pgrp);
   8e544:	e0bffb17 	ldw	r2,-20(fp)
   8e548:	e0bfff15 	stw	r2,-4(fp)
   8e54c:	00009606 	br	8e7a8 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8e550:	e0bffb17 	ldw	r2,-20(fp)
   8e554:	1004c03a 	cmpne	r2,r2,zero
   8e558:	1000061e 	bne	r2,zero,8e574 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8e55c:	e0fffd17 	ldw	r3,-12(fp)
   8e560:	00801b84 	movi	r2,110
   8e564:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8e568:	e0fffb17 	ldw	r3,-20(fp)
   8e56c:	e0ffff15 	stw	r3,-4(fp)
   8e570:	00008d06 	br	8e7a8 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8e574:	008002b4 	movhi	r2,10
   8e578:	10acaf04 	addi	r2,r2,-19780
   8e57c:	10800003 	ldbu	r2,0(r2)
   8e580:	10803fcc 	andi	r2,r2,255
   8e584:	1005003a 	cmpeq	r2,r2,zero
   8e588:	1000061e 	bne	r2,zero,8e5a4 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   8e58c:	e0fffd17 	ldw	r3,-12(fp)
   8e590:	008003c4 	movi	r2,15
   8e594:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8e598:	e0bffb17 	ldw	r2,-20(fp)
   8e59c:	e0bfff15 	stw	r2,-4(fp)
   8e5a0:	00008106 	br	8e7a8 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   8e5a4:	e0bffb17 	ldw	r2,-20(fp)
   8e5a8:	10800003 	ldbu	r2,0(r2)
   8e5ac:	10803fcc 	andi	r2,r2,255
   8e5b0:	10800160 	cmpeqi	r2,r2,5
   8e5b4:	1000061e 	bne	r2,zero,8e5d0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   8e5b8:	e0fffd17 	ldw	r3,-12(fp)
   8e5bc:	00800044 	movi	r2,1
   8e5c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8e5c4:	e0fffb17 	ldw	r3,-20(fp)
   8e5c8:	e0ffff15 	stw	r3,-4(fp)
   8e5cc:	00007606 	br	8e7a8 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e5d0:	0005303a 	rdctl	r2,status
   8e5d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e5d8:	e0fff617 	ldw	r3,-40(fp)
   8e5dc:	00bfff84 	movi	r2,-2
   8e5e0:	1884703a 	and	r2,r3,r2
   8e5e4:	1001703a 	wrctl	status,r2
  
  return context;
   8e5e8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   8e5ec:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   8e5f0:	e0bffb17 	ldw	r2,-20(fp)
   8e5f4:	10800117 	ldw	r2,4(r2)
   8e5f8:	1005003a 	cmpeq	r2,r2,zero
   8e5fc:	1000031e 	bne	r2,zero,8e60c <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   8e600:	00800044 	movi	r2,1
   8e604:	e0bffa05 	stb	r2,-24(fp)
   8e608:	00000106 	br	8e610 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   8e60c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   8e610:	e0bffc03 	ldbu	r2,-16(fp)
   8e614:	e0bffe15 	stw	r2,-8(fp)
   8e618:	e0fffe17 	ldw	r3,-8(fp)
   8e61c:	1805003a 	cmpeq	r2,r3,zero
   8e620:	1000041e 	bne	r2,zero,8e634 <OSFlagDel+0x11c>
   8e624:	e0fffe17 	ldw	r3,-8(fp)
   8e628:	18800060 	cmpeqi	r2,r3,1
   8e62c:	1000281e 	bne	r2,zero,8e6d0 <OSFlagDel+0x1b8>
   8e630:	00005206 	br	8e77c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   8e634:	e0bffa03 	ldbu	r2,-24(fp)
   8e638:	1004c03a 	cmpne	r2,r2,zero
   8e63c:	10001a1e 	bne	r2,zero,8e6a8 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   8e640:	e0fffb17 	ldw	r3,-20(fp)
   8e644:	00800fc4 	movi	r2,63
   8e648:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8e64c:	e0bffb17 	ldw	r2,-20(fp)
   8e650:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8e654:	e0bffb17 	ldw	r2,-20(fp)
   8e658:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   8e65c:	008002b4 	movhi	r2,10
   8e660:	10acb204 	addi	r2,r2,-19768
   8e664:	10c00017 	ldw	r3,0(r2)
   8e668:	e0bffb17 	ldw	r2,-20(fp)
   8e66c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   8e670:	e0bffb17 	ldw	r2,-20(fp)
   8e674:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   8e678:	00c002b4 	movhi	r3,10
   8e67c:	18ecb204 	addi	r3,r3,-19768
   8e680:	e0bffb17 	ldw	r2,-20(fp)
   8e684:	18800015 	stw	r2,0(r3)
   8e688:	e0bff717 	ldw	r2,-36(fp)
   8e68c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e690:	e0bff517 	ldw	r2,-44(fp)
   8e694:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   8e698:	e0bffd17 	ldw	r2,-12(fp)
   8e69c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   8e6a0:	e03ff815 	stw	zero,-32(fp)
   8e6a4:	00003e06 	br	8e7a0 <OSFlagDel+0x288>
   8e6a8:	e0bff717 	ldw	r2,-36(fp)
   8e6ac:	e0bff415 	stw	r2,-48(fp)
   8e6b0:	e0bff417 	ldw	r2,-48(fp)
   8e6b4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   8e6b8:	e0fffd17 	ldw	r3,-12(fp)
   8e6bc:	00801244 	movi	r2,73
   8e6c0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   8e6c4:	e0bffb17 	ldw	r2,-20(fp)
   8e6c8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   8e6cc:	00003406 	br	8e7a0 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8e6d0:	e0bffb17 	ldw	r2,-20(fp)
   8e6d4:	10800117 	ldw	r2,4(r2)
   8e6d8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   8e6dc:	00000606 	br	8e6f8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   8e6e0:	e13ff917 	ldw	r4,-28(fp)
   8e6e4:	000b883a 	mov	r5,zero
   8e6e8:	008f8280 	call	8f828 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   8e6ec:	e0bff917 	ldw	r2,-28(fp)
   8e6f0:	10800017 	ldw	r2,0(r2)
   8e6f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   8e6f8:	e0bff917 	ldw	r2,-28(fp)
   8e6fc:	1004c03a 	cmpne	r2,r2,zero
   8e700:	103ff71e 	bne	r2,zero,8e6e0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   8e704:	e0fffb17 	ldw	r3,-20(fp)
   8e708:	00800fc4 	movi	r2,63
   8e70c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8e710:	e0bffb17 	ldw	r2,-20(fp)
   8e714:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8e718:	e0bffb17 	ldw	r2,-20(fp)
   8e71c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   8e720:	008002b4 	movhi	r2,10
   8e724:	10acb204 	addi	r2,r2,-19768
   8e728:	10c00017 	ldw	r3,0(r2)
   8e72c:	e0bffb17 	ldw	r2,-20(fp)
   8e730:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   8e734:	e0bffb17 	ldw	r2,-20(fp)
   8e738:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   8e73c:	00c002b4 	movhi	r3,10
   8e740:	18ecb204 	addi	r3,r3,-19768
   8e744:	e0bffb17 	ldw	r2,-20(fp)
   8e748:	18800015 	stw	r2,0(r3)
   8e74c:	e0bff717 	ldw	r2,-36(fp)
   8e750:	e0bff315 	stw	r2,-52(fp)
   8e754:	e0bff317 	ldw	r2,-52(fp)
   8e758:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   8e75c:	e0bffa03 	ldbu	r2,-24(fp)
   8e760:	10800058 	cmpnei	r2,r2,1
   8e764:	1000011e 	bne	r2,zero,8e76c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   8e768:	008d8340 	call	8d834 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   8e76c:	e0bffd17 	ldw	r2,-12(fp)
   8e770:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   8e774:	e03ff815 	stw	zero,-32(fp)
             break;
   8e778:	00000906 	br	8e7a0 <OSFlagDel+0x288>
   8e77c:	e0bff717 	ldw	r2,-36(fp)
   8e780:	e0bff215 	stw	r2,-56(fp)
   8e784:	e0bff217 	ldw	r2,-56(fp)
   8e788:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   8e78c:	e0fffd17 	ldw	r3,-12(fp)
   8e790:	008001c4 	movi	r2,7
   8e794:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   8e798:	e0bffb17 	ldw	r2,-20(fp)
   8e79c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   8e7a0:	e0bff817 	ldw	r2,-32(fp)
   8e7a4:	e0bfff15 	stw	r2,-4(fp)
   8e7a8:	e0bfff17 	ldw	r2,-4(fp)
}
   8e7ac:	e037883a 	mov	sp,fp
   8e7b0:	dfc00117 	ldw	ra,4(sp)
   8e7b4:	df000017 	ldw	fp,0(sp)
   8e7b8:	dec00204 	addi	sp,sp,8
   8e7bc:	f800283a 	ret

0008e7c0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   8e7c0:	defff504 	addi	sp,sp,-44
   8e7c4:	dfc00a15 	stw	ra,40(sp)
   8e7c8:	df000915 	stw	fp,36(sp)
   8e7cc:	df000904 	addi	fp,sp,36
   8e7d0:	e13ffc15 	stw	r4,-16(fp)
   8e7d4:	e17ffd15 	stw	r5,-12(fp)
   8e7d8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e7dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8e7e0:	e0bffe17 	ldw	r2,-8(fp)
   8e7e4:	1004c03a 	cmpne	r2,r2,zero
   8e7e8:	1000021e 	bne	r2,zero,8e7f4 <OSFlagNameGet+0x34>
        return (0);
   8e7ec:	e03fff15 	stw	zero,-4(fp)
   8e7f0:	00003e06 	br	8e8ec <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   8e7f4:	e0bffc17 	ldw	r2,-16(fp)
   8e7f8:	1004c03a 	cmpne	r2,r2,zero
   8e7fc:	1000051e 	bne	r2,zero,8e814 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8e800:	e0fffe17 	ldw	r3,-8(fp)
   8e804:	00801b84 	movi	r2,110
   8e808:	18800005 	stb	r2,0(r3)
        return (0);
   8e80c:	e03fff15 	stw	zero,-4(fp)
   8e810:	00003606 	br	8e8ec <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8e814:	e0bffd17 	ldw	r2,-12(fp)
   8e818:	1004c03a 	cmpne	r2,r2,zero
   8e81c:	1000051e 	bne	r2,zero,8e834 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8e820:	e0fffe17 	ldw	r3,-8(fp)
   8e824:	00800304 	movi	r2,12
   8e828:	18800005 	stb	r2,0(r3)
        return (0);
   8e82c:	e03fff15 	stw	zero,-4(fp)
   8e830:	00002e06 	br	8e8ec <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8e834:	008002b4 	movhi	r2,10
   8e838:	10acaf04 	addi	r2,r2,-19780
   8e83c:	10800003 	ldbu	r2,0(r2)
   8e840:	10803fcc 	andi	r2,r2,255
   8e844:	1005003a 	cmpeq	r2,r2,zero
   8e848:	1000051e 	bne	r2,zero,8e860 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   8e84c:	e0fffe17 	ldw	r3,-8(fp)
   8e850:	00800444 	movi	r2,17
   8e854:	18800005 	stb	r2,0(r3)
        return (0);
   8e858:	e03fff15 	stw	zero,-4(fp)
   8e85c:	00002306 	br	8e8ec <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e860:	0005303a 	rdctl	r2,status
   8e864:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e868:	e0fff917 	ldw	r3,-28(fp)
   8e86c:	00bfff84 	movi	r2,-2
   8e870:	1884703a 	and	r2,r3,r2
   8e874:	1001703a 	wrctl	status,r2
  
  return context;
   8e878:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8e87c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   8e880:	e0bffc17 	ldw	r2,-16(fp)
   8e884:	10800003 	ldbu	r2,0(r2)
   8e888:	10803fcc 	andi	r2,r2,255
   8e88c:	10800160 	cmpeqi	r2,r2,5
   8e890:	1000091e 	bne	r2,zero,8e8b8 <OSFlagNameGet+0xf8>
   8e894:	e0bffa17 	ldw	r2,-24(fp)
   8e898:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e89c:	e0bff817 	ldw	r2,-32(fp)
   8e8a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   8e8a4:	e0fffe17 	ldw	r3,-8(fp)
   8e8a8:	00800044 	movi	r2,1
   8e8ac:	18800005 	stb	r2,0(r3)
        return (0);
   8e8b0:	e03fff15 	stw	zero,-4(fp)
   8e8b4:	00000d06 	br	8e8ec <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   8e8b8:	e0bffc17 	ldw	r2,-16(fp)
   8e8bc:	11400284 	addi	r5,r2,10
   8e8c0:	e13ffd17 	ldw	r4,-12(fp)
   8e8c4:	008d9780 	call	8d978 <OS_StrCopy>
   8e8c8:	e0bffb05 	stb	r2,-20(fp)
   8e8cc:	e0bffa17 	ldw	r2,-24(fp)
   8e8d0:	e0bff715 	stw	r2,-36(fp)
   8e8d4:	e0bff717 	ldw	r2,-36(fp)
   8e8d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8e8dc:	e0bffe17 	ldw	r2,-8(fp)
   8e8e0:	10000005 	stb	zero,0(r2)
    return (len);
   8e8e4:	e0bffb03 	ldbu	r2,-20(fp)
   8e8e8:	e0bfff15 	stw	r2,-4(fp)
   8e8ec:	e0bfff17 	ldw	r2,-4(fp)
}
   8e8f0:	e037883a 	mov	sp,fp
   8e8f4:	dfc00117 	ldw	ra,4(sp)
   8e8f8:	df000017 	ldw	fp,0(sp)
   8e8fc:	dec00204 	addi	sp,sp,8
   8e900:	f800283a 	ret

0008e904 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   8e904:	defff504 	addi	sp,sp,-44
   8e908:	dfc00a15 	stw	ra,40(sp)
   8e90c:	df000915 	stw	fp,36(sp)
   8e910:	df000904 	addi	fp,sp,36
   8e914:	e13ffd15 	stw	r4,-12(fp)
   8e918:	e17ffe15 	stw	r5,-8(fp)
   8e91c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e920:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8e924:	e0bfff17 	ldw	r2,-4(fp)
   8e928:	1005003a 	cmpeq	r2,r2,zero
   8e92c:	1000451e 	bne	r2,zero,8ea44 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   8e930:	e0bffd17 	ldw	r2,-12(fp)
   8e934:	1004c03a 	cmpne	r2,r2,zero
   8e938:	1000041e 	bne	r2,zero,8e94c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8e93c:	e0ffff17 	ldw	r3,-4(fp)
   8e940:	00801b84 	movi	r2,110
   8e944:	18800005 	stb	r2,0(r3)
        return;
   8e948:	00003e06 	br	8ea44 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8e94c:	e0bffe17 	ldw	r2,-8(fp)
   8e950:	1004c03a 	cmpne	r2,r2,zero
   8e954:	1000041e 	bne	r2,zero,8e968 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8e958:	e0ffff17 	ldw	r3,-4(fp)
   8e95c:	00800304 	movi	r2,12
   8e960:	18800005 	stb	r2,0(r3)
        return;
   8e964:	00003706 	br	8ea44 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8e968:	008002b4 	movhi	r2,10
   8e96c:	10acaf04 	addi	r2,r2,-19780
   8e970:	10800003 	ldbu	r2,0(r2)
   8e974:	10803fcc 	andi	r2,r2,255
   8e978:	1005003a 	cmpeq	r2,r2,zero
   8e97c:	1000041e 	bne	r2,zero,8e990 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   8e980:	e0ffff17 	ldw	r3,-4(fp)
   8e984:	00800484 	movi	r2,18
   8e988:	18800005 	stb	r2,0(r3)
        return;
   8e98c:	00002d06 	br	8ea44 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e990:	0005303a 	rdctl	r2,status
   8e994:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e998:	e0fffa17 	ldw	r3,-24(fp)
   8e99c:	00bfff84 	movi	r2,-2
   8e9a0:	1884703a 	and	r2,r3,r2
   8e9a4:	1001703a 	wrctl	status,r2
  
  return context;
   8e9a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8e9ac:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   8e9b0:	e0bffd17 	ldw	r2,-12(fp)
   8e9b4:	10800003 	ldbu	r2,0(r2)
   8e9b8:	10803fcc 	andi	r2,r2,255
   8e9bc:	10800160 	cmpeqi	r2,r2,5
   8e9c0:	1000081e 	bne	r2,zero,8e9e4 <OSFlagNameSet+0xe0>
   8e9c4:	e0bffb17 	ldw	r2,-20(fp)
   8e9c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e9cc:	e0bff917 	ldw	r2,-28(fp)
   8e9d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   8e9d4:	e0ffff17 	ldw	r3,-4(fp)
   8e9d8:	00800044 	movi	r2,1
   8e9dc:	18800005 	stb	r2,0(r3)
        return;
   8e9e0:	00001806 	br	8ea44 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   8e9e4:	e13ffe17 	ldw	r4,-8(fp)
   8e9e8:	008d9f80 	call	8d9f8 <OS_StrLen>
   8e9ec:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   8e9f0:	e0bffc03 	ldbu	r2,-16(fp)
   8e9f4:	10800830 	cmpltui	r2,r2,32
   8e9f8:	1000081e 	bne	r2,zero,8ea1c <OSFlagNameSet+0x118>
   8e9fc:	e0bffb17 	ldw	r2,-20(fp)
   8ea00:	e0bff815 	stw	r2,-32(fp)
   8ea04:	e0bff817 	ldw	r2,-32(fp)
   8ea08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   8ea0c:	e0ffff17 	ldw	r3,-4(fp)
   8ea10:	00801cc4 	movi	r2,115
   8ea14:	18800005 	stb	r2,0(r3)
        return;
   8ea18:	00000a06 	br	8ea44 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   8ea1c:	e0bffd17 	ldw	r2,-12(fp)
   8ea20:	11000284 	addi	r4,r2,10
   8ea24:	e17ffe17 	ldw	r5,-8(fp)
   8ea28:	008d9780 	call	8d978 <OS_StrCopy>
   8ea2c:	e0bffb17 	ldw	r2,-20(fp)
   8ea30:	e0bff715 	stw	r2,-36(fp)
   8ea34:	e0bff717 	ldw	r2,-36(fp)
   8ea38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ea3c:	e0bfff17 	ldw	r2,-4(fp)
   8ea40:	10000005 	stb	zero,0(r2)
    return;
}
   8ea44:	e037883a 	mov	sp,fp
   8ea48:	dfc00117 	ldw	ra,4(sp)
   8ea4c:	df000017 	ldw	fp,0(sp)
   8ea50:	dec00204 	addi	sp,sp,8
   8ea54:	f800283a 	ret

0008ea58 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   8ea58:	deffe004 	addi	sp,sp,-128
   8ea5c:	dfc01f15 	stw	ra,124(sp)
   8ea60:	df001e15 	stw	fp,120(sp)
   8ea64:	df001e04 	addi	fp,sp,120
   8ea68:	e13ff915 	stw	r4,-28(fp)
   8ea6c:	e17ffa0d 	sth	r5,-24(fp)
   8ea70:	e1bffb05 	stb	r6,-20(fp)
   8ea74:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8ea78:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8ea7c:	e0800217 	ldw	r2,8(fp)
   8ea80:	1004c03a 	cmpne	r2,r2,zero
   8ea84:	1000021e 	bne	r2,zero,8ea90 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   8ea88:	e03fff15 	stw	zero,-4(fp)
   8ea8c:	00017d06 	br	8f084 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8ea90:	e0bff917 	ldw	r2,-28(fp)
   8ea94:	1004c03a 	cmpne	r2,r2,zero
   8ea98:	1000051e 	bne	r2,zero,8eab0 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8ea9c:	e0c00217 	ldw	r3,8(fp)
   8eaa0:	00801b84 	movi	r2,110
   8eaa4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8eaa8:	e03fff15 	stw	zero,-4(fp)
   8eaac:	00017506 	br	8f084 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8eab0:	008002b4 	movhi	r2,10
   8eab4:	10acaf04 	addi	r2,r2,-19780
   8eab8:	10800003 	ldbu	r2,0(r2)
   8eabc:	10803fcc 	andi	r2,r2,255
   8eac0:	1005003a 	cmpeq	r2,r2,zero
   8eac4:	1000051e 	bne	r2,zero,8eadc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   8eac8:	e0c00217 	ldw	r3,8(fp)
   8eacc:	00800084 	movi	r2,2
   8ead0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8ead4:	e03fff15 	stw	zero,-4(fp)
   8ead8:	00016a06 	br	8f084 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   8eadc:	008002b4 	movhi	r2,10
   8eae0:	10aca104 	addi	r2,r2,-19836
   8eae4:	10800003 	ldbu	r2,0(r2)
   8eae8:	10803fcc 	andi	r2,r2,255
   8eaec:	1005003a 	cmpeq	r2,r2,zero
   8eaf0:	1000051e 	bne	r2,zero,8eb08 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   8eaf4:	e0c00217 	ldw	r3,8(fp)
   8eaf8:	00800344 	movi	r2,13
   8eafc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8eb00:	e03fff15 	stw	zero,-4(fp)
   8eb04:	00015f06 	br	8f084 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   8eb08:	e0bff917 	ldw	r2,-28(fp)
   8eb0c:	10800003 	ldbu	r2,0(r2)
   8eb10:	10803fcc 	andi	r2,r2,255
   8eb14:	10800160 	cmpeqi	r2,r2,5
   8eb18:	1000051e 	bne	r2,zero,8eb30 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   8eb1c:	e0c00217 	ldw	r3,8(fp)
   8eb20:	00800044 	movi	r2,1
   8eb24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8eb28:	e03fff15 	stw	zero,-4(fp)
   8eb2c:	00015506 	br	8f084 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   8eb30:	e0fffb03 	ldbu	r3,-20(fp)
   8eb34:	00bfe004 	movi	r2,-128
   8eb38:	1884703a 	and	r2,r3,r2
   8eb3c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   8eb40:	e0bff283 	ldbu	r2,-54(fp)
   8eb44:	1005003a 	cmpeq	r2,r2,zero
   8eb48:	1000071e 	bne	r2,zero,8eb68 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   8eb4c:	00c01fc4 	movi	r3,127
   8eb50:	e0bffb03 	ldbu	r2,-20(fp)
   8eb54:	10c4703a 	and	r2,r2,r3
   8eb58:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   8eb5c:	00800044 	movi	r2,1
   8eb60:	e0bff205 	stb	r2,-56(fp)
   8eb64:	00000106 	br	8eb6c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   8eb68:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eb6c:	0005303a 	rdctl	r2,status
   8eb70:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eb74:	e0fff017 	ldw	r3,-64(fp)
   8eb78:	00bfff84 	movi	r2,-2
   8eb7c:	1884703a 	and	r2,r3,r2
   8eb80:	1001703a 	wrctl	status,r2
  
  return context;
   8eb84:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   8eb88:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   8eb8c:	e0bffb03 	ldbu	r2,-20(fp)
   8eb90:	e0bffe15 	stw	r2,-8(fp)
   8eb94:	e0fffe17 	ldw	r3,-8(fp)
   8eb98:	18800060 	cmpeqi	r2,r3,1
   8eb9c:	1000981e 	bne	r2,zero,8ee00 <OSFlagPend+0x3a8>
   8eba0:	e0fffe17 	ldw	r3,-8(fp)
   8eba4:	18800088 	cmpgei	r2,r3,2
   8eba8:	1000041e 	bne	r2,zero,8ebbc <OSFlagPend+0x164>
   8ebac:	e0fffe17 	ldw	r3,-8(fp)
   8ebb0:	1805003a 	cmpeq	r2,r3,zero
   8ebb4:	1000641e 	bne	r2,zero,8ed48 <OSFlagPend+0x2f0>
   8ebb8:	0000bf06 	br	8eeb8 <OSFlagPend+0x460>
   8ebbc:	e0fffe17 	ldw	r3,-8(fp)
   8ebc0:	188000a0 	cmpeqi	r2,r3,2
   8ebc4:	1000041e 	bne	r2,zero,8ebd8 <OSFlagPend+0x180>
   8ebc8:	e0fffe17 	ldw	r3,-8(fp)
   8ebcc:	188000e0 	cmpeqi	r2,r3,3
   8ebd0:	10002f1e 	bne	r2,zero,8ec90 <OSFlagPend+0x238>
   8ebd4:	0000b806 	br	8eeb8 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   8ebd8:	e0bff917 	ldw	r2,-28(fp)
   8ebdc:	10c0020b 	ldhu	r3,8(r2)
   8ebe0:	e0bffa0b 	ldhu	r2,-24(fp)
   8ebe4:	1884703a 	and	r2,r3,r2
   8ebe8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8ebec:	e0fff30b 	ldhu	r3,-52(fp)
   8ebf0:	e0bffa0b 	ldhu	r2,-24(fp)
   8ebf4:	18801a1e 	bne	r3,r2,8ec60 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8ebf8:	e0bff203 	ldbu	r2,-56(fp)
   8ebfc:	10800058 	cmpnei	r2,r2,1
   8ec00:	1000091e 	bne	r2,zero,8ec28 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   8ec04:	e0bff917 	ldw	r2,-28(fp)
   8ec08:	1080020b 	ldhu	r2,8(r2)
   8ec0c:	1007883a 	mov	r3,r2
   8ec10:	e0bff30b 	ldhu	r2,-52(fp)
   8ec14:	0084303a 	nor	r2,zero,r2
   8ec18:	1884703a 	and	r2,r3,r2
   8ec1c:	1007883a 	mov	r3,r2
   8ec20:	e0bff917 	ldw	r2,-28(fp)
   8ec24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8ec28:	008002b4 	movhi	r2,10
   8ec2c:	10acb004 	addi	r2,r2,-19776
   8ec30:	10c00017 	ldw	r3,0(r2)
   8ec34:	e0bff30b 	ldhu	r2,-52(fp)
   8ec38:	18800b0d 	sth	r2,44(r3)
   8ec3c:	e0bff117 	ldw	r2,-60(fp)
   8ec40:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ec44:	e0bfef17 	ldw	r2,-68(fp)
   8ec48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8ec4c:	e0800217 	ldw	r2,8(fp)
   8ec50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8ec54:	e0bff30b 	ldhu	r2,-52(fp)
   8ec58:	e0bfff15 	stw	r2,-4(fp)
   8ec5c:	00010906 	br	8f084 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8ec60:	e1bffa0b 	ldhu	r6,-24(fp)
   8ec64:	e1fffb03 	ldbu	r7,-20(fp)
   8ec68:	e0bffc0b 	ldhu	r2,-16(fp)
   8ec6c:	e17ff404 	addi	r5,fp,-48
   8ec70:	d8800015 	stw	r2,0(sp)
   8ec74:	e13ff917 	ldw	r4,-28(fp)
   8ec78:	008f5800 	call	8f580 <OS_FlagBlock>
   8ec7c:	e0bff117 	ldw	r2,-60(fp)
   8ec80:	e0bfee15 	stw	r2,-72(fp)
   8ec84:	e0bfee17 	ldw	r2,-72(fp)
   8ec88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8ec8c:	00009506 	br	8eee4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   8ec90:	e0bff917 	ldw	r2,-28(fp)
   8ec94:	10c0020b 	ldhu	r3,8(r2)
   8ec98:	e0bffa0b 	ldhu	r2,-24(fp)
   8ec9c:	1884703a 	and	r2,r3,r2
   8eca0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   8eca4:	e0bff30b 	ldhu	r2,-52(fp)
   8eca8:	1005003a 	cmpeq	r2,r2,zero
   8ecac:	10001a1e 	bne	r2,zero,8ed18 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8ecb0:	e0bff203 	ldbu	r2,-56(fp)
   8ecb4:	10800058 	cmpnei	r2,r2,1
   8ecb8:	1000091e 	bne	r2,zero,8ece0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   8ecbc:	e0bff917 	ldw	r2,-28(fp)
   8ecc0:	1080020b 	ldhu	r2,8(r2)
   8ecc4:	1007883a 	mov	r3,r2
   8ecc8:	e0bff30b 	ldhu	r2,-52(fp)
   8eccc:	0084303a 	nor	r2,zero,r2
   8ecd0:	1884703a 	and	r2,r3,r2
   8ecd4:	1007883a 	mov	r3,r2
   8ecd8:	e0bff917 	ldw	r2,-28(fp)
   8ecdc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8ece0:	008002b4 	movhi	r2,10
   8ece4:	10acb004 	addi	r2,r2,-19776
   8ece8:	10c00017 	ldw	r3,0(r2)
   8ecec:	e0bff30b 	ldhu	r2,-52(fp)
   8ecf0:	18800b0d 	sth	r2,44(r3)
   8ecf4:	e0bff117 	ldw	r2,-60(fp)
   8ecf8:	e0bfed15 	stw	r2,-76(fp)
   8ecfc:	e0bfed17 	ldw	r2,-76(fp)
   8ed00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8ed04:	e0800217 	ldw	r2,8(fp)
   8ed08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8ed0c:	e0fff30b 	ldhu	r3,-52(fp)
   8ed10:	e0ffff15 	stw	r3,-4(fp)
   8ed14:	0000db06 	br	8f084 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8ed18:	e1bffa0b 	ldhu	r6,-24(fp)
   8ed1c:	e1fffb03 	ldbu	r7,-20(fp)
   8ed20:	e0bffc0b 	ldhu	r2,-16(fp)
   8ed24:	e17ff404 	addi	r5,fp,-48
   8ed28:	d8800015 	stw	r2,0(sp)
   8ed2c:	e13ff917 	ldw	r4,-28(fp)
   8ed30:	008f5800 	call	8f580 <OS_FlagBlock>
   8ed34:	e0bff117 	ldw	r2,-60(fp)
   8ed38:	e0bfec15 	stw	r2,-80(fp)
   8ed3c:	e0bfec17 	ldw	r2,-80(fp)
   8ed40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8ed44:	00006706 	br	8eee4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   8ed48:	e0bff917 	ldw	r2,-28(fp)
   8ed4c:	1080020b 	ldhu	r2,8(r2)
   8ed50:	0084303a 	nor	r2,zero,r2
   8ed54:	1007883a 	mov	r3,r2
   8ed58:	e0bffa0b 	ldhu	r2,-24(fp)
   8ed5c:	1884703a 	and	r2,r3,r2
   8ed60:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8ed64:	e0fff30b 	ldhu	r3,-52(fp)
   8ed68:	e0bffa0b 	ldhu	r2,-24(fp)
   8ed6c:	1880181e 	bne	r3,r2,8edd0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8ed70:	e0bff203 	ldbu	r2,-56(fp)
   8ed74:	10800058 	cmpnei	r2,r2,1
   8ed78:	1000071e 	bne	r2,zero,8ed98 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8ed7c:	e0bff917 	ldw	r2,-28(fp)
   8ed80:	10c0020b 	ldhu	r3,8(r2)
   8ed84:	e0bff30b 	ldhu	r2,-52(fp)
   8ed88:	1884b03a 	or	r2,r3,r2
   8ed8c:	1007883a 	mov	r3,r2
   8ed90:	e0bff917 	ldw	r2,-28(fp)
   8ed94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8ed98:	008002b4 	movhi	r2,10
   8ed9c:	10acb004 	addi	r2,r2,-19776
   8eda0:	10c00017 	ldw	r3,0(r2)
   8eda4:	e0bff30b 	ldhu	r2,-52(fp)
   8eda8:	18800b0d 	sth	r2,44(r3)
   8edac:	e0bff117 	ldw	r2,-60(fp)
   8edb0:	e0bfeb15 	stw	r2,-84(fp)
   8edb4:	e0bfeb17 	ldw	r2,-84(fp)
   8edb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8edbc:	e0800217 	ldw	r2,8(fp)
   8edc0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8edc4:	e0bff30b 	ldhu	r2,-52(fp)
   8edc8:	e0bfff15 	stw	r2,-4(fp)
   8edcc:	0000ad06 	br	8f084 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8edd0:	e1bffa0b 	ldhu	r6,-24(fp)
   8edd4:	e1fffb03 	ldbu	r7,-20(fp)
   8edd8:	e0bffc0b 	ldhu	r2,-16(fp)
   8eddc:	e17ff404 	addi	r5,fp,-48
   8ede0:	d8800015 	stw	r2,0(sp)
   8ede4:	e13ff917 	ldw	r4,-28(fp)
   8ede8:	008f5800 	call	8f580 <OS_FlagBlock>
   8edec:	e0bff117 	ldw	r2,-60(fp)
   8edf0:	e0bfea15 	stw	r2,-88(fp)
   8edf4:	e0bfea17 	ldw	r2,-88(fp)
   8edf8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8edfc:	00003906 	br	8eee4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8ee00:	e0bff917 	ldw	r2,-28(fp)
   8ee04:	1080020b 	ldhu	r2,8(r2)
   8ee08:	0084303a 	nor	r2,zero,r2
   8ee0c:	1007883a 	mov	r3,r2
   8ee10:	e0bffa0b 	ldhu	r2,-24(fp)
   8ee14:	1884703a 	and	r2,r3,r2
   8ee18:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8ee1c:	e0bff30b 	ldhu	r2,-52(fp)
   8ee20:	1005003a 	cmpeq	r2,r2,zero
   8ee24:	1000181e 	bne	r2,zero,8ee88 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8ee28:	e0bff203 	ldbu	r2,-56(fp)
   8ee2c:	10800058 	cmpnei	r2,r2,1
   8ee30:	1000071e 	bne	r2,zero,8ee50 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   8ee34:	e0bff917 	ldw	r2,-28(fp)
   8ee38:	10c0020b 	ldhu	r3,8(r2)
   8ee3c:	e0bff30b 	ldhu	r2,-52(fp)
   8ee40:	1884b03a 	or	r2,r3,r2
   8ee44:	1007883a 	mov	r3,r2
   8ee48:	e0bff917 	ldw	r2,-28(fp)
   8ee4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   8ee50:	008002b4 	movhi	r2,10
   8ee54:	10acb004 	addi	r2,r2,-19776
   8ee58:	10c00017 	ldw	r3,0(r2)
   8ee5c:	e0bff30b 	ldhu	r2,-52(fp)
   8ee60:	18800b0d 	sth	r2,44(r3)
   8ee64:	e0bff117 	ldw	r2,-60(fp)
   8ee68:	e0bfe915 	stw	r2,-92(fp)
   8ee6c:	e0bfe917 	ldw	r2,-92(fp)
   8ee70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   8ee74:	e0800217 	ldw	r2,8(fp)
   8ee78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   8ee7c:	e0fff30b 	ldhu	r3,-52(fp)
   8ee80:	e0ffff15 	stw	r3,-4(fp)
   8ee84:	00007f06 	br	8f084 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   8ee88:	e1bffa0b 	ldhu	r6,-24(fp)
   8ee8c:	e1fffb03 	ldbu	r7,-20(fp)
   8ee90:	e0bffc0b 	ldhu	r2,-16(fp)
   8ee94:	e17ff404 	addi	r5,fp,-48
   8ee98:	d8800015 	stw	r2,0(sp)
   8ee9c:	e13ff917 	ldw	r4,-28(fp)
   8eea0:	008f5800 	call	8f580 <OS_FlagBlock>
   8eea4:	e0bff117 	ldw	r2,-60(fp)
   8eea8:	e0bfe815 	stw	r2,-96(fp)
   8eeac:	e0bfe817 	ldw	r2,-96(fp)
   8eeb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   8eeb4:	00000b06 	br	8eee4 <OSFlagPend+0x48c>
   8eeb8:	e0bff117 	ldw	r2,-60(fp)
   8eebc:	e0bfe715 	stw	r2,-100(fp)
   8eec0:	e0bfe717 	ldw	r2,-100(fp)
   8eec4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8eec8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   8eecc:	e0c00217 	ldw	r3,8(fp)
   8eed0:	00801bc4 	movi	r2,111
   8eed4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   8eed8:	e0bff30b 	ldhu	r2,-52(fp)
   8eedc:	e0bfff15 	stw	r2,-4(fp)
   8eee0:	00006806 	br	8f084 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   8eee4:	008d8340 	call	8d834 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eee8:	0005303a 	rdctl	r2,status
   8eeec:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eef0:	e0ffe617 	ldw	r3,-104(fp)
   8eef4:	00bfff84 	movi	r2,-2
   8eef8:	1884703a 	and	r2,r3,r2
   8eefc:	1001703a 	wrctl	status,r2
  
  return context;
   8ef00:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   8ef04:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   8ef08:	008002b4 	movhi	r2,10
   8ef0c:	10acb004 	addi	r2,r2,-19776
   8ef10:	10800017 	ldw	r2,0(r2)
   8ef14:	10800c43 	ldbu	r2,49(r2)
   8ef18:	10803fcc 	andi	r2,r2,255
   8ef1c:	1005003a 	cmpeq	r2,r2,zero
   8ef20:	1000221e 	bne	r2,zero,8efac <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   8ef24:	008002b4 	movhi	r2,10
   8ef28:	10acb004 	addi	r2,r2,-19776
   8ef2c:	10800017 	ldw	r2,0(r2)
   8ef30:	10800c43 	ldbu	r2,49(r2)
   8ef34:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8ef38:	008002b4 	movhi	r2,10
   8ef3c:	10acb004 	addi	r2,r2,-19776
   8ef40:	10800017 	ldw	r2,0(r2)
   8ef44:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   8ef48:	e13ff404 	addi	r4,fp,-48
   8ef4c:	008f9380 	call	8f938 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   8ef50:	008002b4 	movhi	r2,10
   8ef54:	10acb004 	addi	r2,r2,-19776
   8ef58:	10800017 	ldw	r2,0(r2)
   8ef5c:	10000c05 	stb	zero,48(r2)
   8ef60:	e0bff117 	ldw	r2,-60(fp)
   8ef64:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef68:	e0bfe517 	ldw	r2,-108(fp)
   8ef6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   8ef70:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   8ef74:	e0bff243 	ldbu	r2,-55(fp)
   8ef78:	108000a0 	cmpeqi	r2,r2,2
   8ef7c:	1000011e 	bne	r2,zero,8ef84 <OSFlagPend+0x52c>
   8ef80:	00000406 	br	8ef94 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   8ef84:	e0c00217 	ldw	r3,8(fp)
   8ef88:	00800384 	movi	r2,14
   8ef8c:	18800005 	stb	r2,0(r3)
                 break;
   8ef90:	00000306 	br	8efa0 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   8ef94:	e0c00217 	ldw	r3,8(fp)
   8ef98:	00800284 	movi	r2,10
   8ef9c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   8efa0:	e0fff30b 	ldhu	r3,-52(fp)
   8efa4:	e0ffff15 	stw	r3,-4(fp)
   8efa8:	00003606 	br	8f084 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   8efac:	008002b4 	movhi	r2,10
   8efb0:	10acb004 	addi	r2,r2,-19776
   8efb4:	10800017 	ldw	r2,0(r2)
   8efb8:	10800b0b 	ldhu	r2,44(r2)
   8efbc:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   8efc0:	e0bff203 	ldbu	r2,-56(fp)
   8efc4:	10800058 	cmpnei	r2,r2,1
   8efc8:	1000261e 	bne	r2,zero,8f064 <OSFlagPend+0x60c>
        switch (wait_type) {
   8efcc:	e0bffb03 	ldbu	r2,-20(fp)
   8efd0:	e0bffd15 	stw	r2,-12(fp)
   8efd4:	e0fffd17 	ldw	r3,-12(fp)
   8efd8:	1804803a 	cmplt	r2,r3,zero
   8efdc:	1000181e 	bne	r2,zero,8f040 <OSFlagPend+0x5e8>
   8efe0:	e0fffd17 	ldw	r3,-12(fp)
   8efe4:	18800090 	cmplti	r2,r3,2
   8efe8:	10000d1e 	bne	r2,zero,8f020 <OSFlagPend+0x5c8>
   8efec:	e0fffd17 	ldw	r3,-12(fp)
   8eff0:	18800108 	cmpgei	r2,r3,4
   8eff4:	1000121e 	bne	r2,zero,8f040 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   8eff8:	e0bff917 	ldw	r2,-28(fp)
   8effc:	1080020b 	ldhu	r2,8(r2)
   8f000:	1007883a 	mov	r3,r2
   8f004:	e0bff30b 	ldhu	r2,-52(fp)
   8f008:	0084303a 	nor	r2,zero,r2
   8f00c:	1884703a 	and	r2,r3,r2
   8f010:	1007883a 	mov	r3,r2
   8f014:	e0bff917 	ldw	r2,-28(fp)
   8f018:	10c0020d 	sth	r3,8(r2)
                 break;
   8f01c:	00001106 	br	8f064 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   8f020:	e0bff917 	ldw	r2,-28(fp)
   8f024:	10c0020b 	ldhu	r3,8(r2)
   8f028:	e0bff30b 	ldhu	r2,-52(fp)
   8f02c:	1884b03a 	or	r2,r3,r2
   8f030:	1007883a 	mov	r3,r2
   8f034:	e0bff917 	ldw	r2,-28(fp)
   8f038:	10c0020d 	sth	r3,8(r2)
                 break;
   8f03c:	00000906 	br	8f064 <OSFlagPend+0x60c>
   8f040:	e0bff117 	ldw	r2,-60(fp)
   8f044:	e0bfe415 	stw	r2,-112(fp)
   8f048:	e0bfe417 	ldw	r2,-112(fp)
   8f04c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   8f050:	e0c00217 	ldw	r3,8(fp)
   8f054:	00801bc4 	movi	r2,111
   8f058:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   8f05c:	e03fff15 	stw	zero,-4(fp)
   8f060:	00000806 	br	8f084 <OSFlagPend+0x62c>
   8f064:	e0bff117 	ldw	r2,-60(fp)
   8f068:	e0bfe315 	stw	r2,-116(fp)
   8f06c:	e0bfe317 	ldw	r2,-116(fp)
   8f070:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   8f074:	e0800217 	ldw	r2,8(fp)
   8f078:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   8f07c:	e0bff30b 	ldhu	r2,-52(fp)
   8f080:	e0bfff15 	stw	r2,-4(fp)
   8f084:	e0bfff17 	ldw	r2,-4(fp)
}
   8f088:	e037883a 	mov	sp,fp
   8f08c:	dfc00117 	ldw	ra,4(sp)
   8f090:	df000017 	ldw	fp,0(sp)
   8f094:	dec00204 	addi	sp,sp,8
   8f098:	f800283a 	ret

0008f09c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   8f09c:	defffb04 	addi	sp,sp,-20
   8f0a0:	df000415 	stw	fp,16(sp)
   8f0a4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8f0a8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f0ac:	0005303a 	rdctl	r2,status
   8f0b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f0b4:	e0fffd17 	ldw	r3,-12(fp)
   8f0b8:	00bfff84 	movi	r2,-2
   8f0bc:	1884703a 	and	r2,r3,r2
   8f0c0:	1001703a 	wrctl	status,r2
  
  return context;
   8f0c4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   8f0c8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   8f0cc:	008002b4 	movhi	r2,10
   8f0d0:	10acb004 	addi	r2,r2,-19776
   8f0d4:	10800017 	ldw	r2,0(r2)
   8f0d8:	10800b0b 	ldhu	r2,44(r2)
   8f0dc:	e0bfff0d 	sth	r2,-4(fp)
   8f0e0:	e0bffe17 	ldw	r2,-8(fp)
   8f0e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f0e8:	e0bffc17 	ldw	r2,-16(fp)
   8f0ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   8f0f0:	e0bfff0b 	ldhu	r2,-4(fp)
}
   8f0f4:	e037883a 	mov	sp,fp
   8f0f8:	df000017 	ldw	fp,0(sp)
   8f0fc:	dec00104 	addi	sp,sp,4
   8f100:	f800283a 	ret

0008f104 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   8f104:	deffed04 	addi	sp,sp,-76
   8f108:	dfc01215 	stw	ra,72(sp)
   8f10c:	df001115 	stw	fp,68(sp)
   8f110:	df001104 	addi	fp,sp,68
   8f114:	e13ff915 	stw	r4,-28(fp)
   8f118:	e1fffc15 	stw	r7,-16(fp)
   8f11c:	e17ffa0d 	sth	r5,-24(fp)
   8f120:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   8f124:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   8f128:	e0bffc17 	ldw	r2,-16(fp)
   8f12c:	1004c03a 	cmpne	r2,r2,zero
   8f130:	1000021e 	bne	r2,zero,8f13c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   8f134:	e03fff15 	stw	zero,-4(fp)
   8f138:	0000d606 	br	8f494 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   8f13c:	e0bff917 	ldw	r2,-28(fp)
   8f140:	1004c03a 	cmpne	r2,r2,zero
   8f144:	1000051e 	bne	r2,zero,8f15c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8f148:	e0fffc17 	ldw	r3,-16(fp)
   8f14c:	00801b84 	movi	r2,110
   8f150:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8f154:	e03fff15 	stw	zero,-4(fp)
   8f158:	0000ce06 	br	8f494 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   8f15c:	e0bff917 	ldw	r2,-28(fp)
   8f160:	10800003 	ldbu	r2,0(r2)
   8f164:	10803fcc 	andi	r2,r2,255
   8f168:	10800160 	cmpeqi	r2,r2,5
   8f16c:	1000051e 	bne	r2,zero,8f184 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   8f170:	e0fffc17 	ldw	r3,-16(fp)
   8f174:	00800044 	movi	r2,1
   8f178:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8f17c:	e03fff15 	stw	zero,-4(fp)
   8f180:	0000c406 	br	8f494 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f184:	0005303a 	rdctl	r2,status
   8f188:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f18c:	e0fff417 	ldw	r3,-48(fp)
   8f190:	00bfff84 	movi	r2,-2
   8f194:	1884703a 	and	r2,r3,r2
   8f198:	1001703a 	wrctl	status,r2
  
  return context;
   8f19c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   8f1a0:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   8f1a4:	e0bffb03 	ldbu	r2,-20(fp)
   8f1a8:	e0bffe15 	stw	r2,-8(fp)
   8f1ac:	e0fffe17 	ldw	r3,-8(fp)
   8f1b0:	1805003a 	cmpeq	r2,r3,zero
   8f1b4:	1000041e 	bne	r2,zero,8f1c8 <OSFlagPost+0xc4>
   8f1b8:	e0fffe17 	ldw	r3,-8(fp)
   8f1bc:	18800060 	cmpeqi	r2,r3,1
   8f1c0:	10000b1e 	bne	r2,zero,8f1f0 <OSFlagPost+0xec>
   8f1c4:	00001206 	br	8f210 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   8f1c8:	e0bff917 	ldw	r2,-28(fp)
   8f1cc:	1080020b 	ldhu	r2,8(r2)
   8f1d0:	1007883a 	mov	r3,r2
   8f1d4:	e0bffa0b 	ldhu	r2,-24(fp)
   8f1d8:	0084303a 	nor	r2,zero,r2
   8f1dc:	1884703a 	and	r2,r3,r2
   8f1e0:	1007883a 	mov	r3,r2
   8f1e4:	e0bff917 	ldw	r2,-28(fp)
   8f1e8:	10c0020d 	sth	r3,8(r2)
             break;
   8f1ec:	00001106 	br	8f234 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   8f1f0:	e0bff917 	ldw	r2,-28(fp)
   8f1f4:	10c0020b 	ldhu	r3,8(r2)
   8f1f8:	e0bffa0b 	ldhu	r2,-24(fp)
   8f1fc:	1884b03a 	or	r2,r3,r2
   8f200:	1007883a 	mov	r3,r2
   8f204:	e0bff917 	ldw	r2,-28(fp)
   8f208:	10c0020d 	sth	r3,8(r2)
             break;
   8f20c:	00000906 	br	8f234 <OSFlagPost+0x130>
   8f210:	e0bff517 	ldw	r2,-44(fp)
   8f214:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f218:	e0bff317 	ldw	r2,-52(fp)
   8f21c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   8f220:	e0fffc17 	ldw	r3,-16(fp)
   8f224:	00801c44 	movi	r2,113
   8f228:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   8f22c:	e03fff15 	stw	zero,-4(fp)
   8f230:	00009806 	br	8f494 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   8f234:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8f238:	e0bff917 	ldw	r2,-28(fp)
   8f23c:	10800117 	ldw	r2,4(r2)
   8f240:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   8f244:	00007506 	br	8f41c <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   8f248:	e0bff817 	ldw	r2,-32(fp)
   8f24c:	10800483 	ldbu	r2,18(r2)
   8f250:	10803fcc 	andi	r2,r2,255
   8f254:	e0bffd15 	stw	r2,-12(fp)
   8f258:	e0fffd17 	ldw	r3,-12(fp)
   8f25c:	18800060 	cmpeqi	r2,r3,1
   8f260:	10004d1e 	bne	r2,zero,8f398 <OSFlagPost+0x294>
   8f264:	e0fffd17 	ldw	r3,-12(fp)
   8f268:	18800088 	cmpgei	r2,r3,2
   8f26c:	1000041e 	bne	r2,zero,8f280 <OSFlagPost+0x17c>
   8f270:	e0fffd17 	ldw	r3,-12(fp)
   8f274:	1805003a 	cmpeq	r2,r3,zero
   8f278:	1000301e 	bne	r2,zero,8f33c <OSFlagPost+0x238>
   8f27c:	00005b06 	br	8f3ec <OSFlagPost+0x2e8>
   8f280:	e0fffd17 	ldw	r3,-12(fp)
   8f284:	188000a0 	cmpeqi	r2,r3,2
   8f288:	1000041e 	bne	r2,zero,8f29c <OSFlagPost+0x198>
   8f28c:	e0fffd17 	ldw	r3,-12(fp)
   8f290:	188000e0 	cmpeqi	r2,r3,3
   8f294:	1000161e 	bne	r2,zero,8f2f0 <OSFlagPost+0x1ec>
   8f298:	00005406 	br	8f3ec <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8f29c:	e0bff917 	ldw	r2,-28(fp)
   8f2a0:	10c0020b 	ldhu	r3,8(r2)
   8f2a4:	e0bff817 	ldw	r2,-32(fp)
   8f2a8:	1080040b 	ldhu	r2,16(r2)
   8f2ac:	1884703a 	and	r2,r3,r2
   8f2b0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   8f2b4:	e0bff817 	ldw	r2,-32(fp)
   8f2b8:	1080040b 	ldhu	r2,16(r2)
   8f2bc:	10ffffcc 	andi	r3,r2,65535
   8f2c0:	e0bff68b 	ldhu	r2,-38(fp)
   8f2c4:	1880521e 	bne	r3,r2,8f410 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8f2c8:	e17ff68b 	ldhu	r5,-38(fp)
   8f2cc:	e13ff817 	ldw	r4,-32(fp)
   8f2d0:	008f8280 	call	8f828 <OS_FlagTaskRdy>
   8f2d4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8f2d8:	e0bff603 	ldbu	r2,-40(fp)
   8f2dc:	10800058 	cmpnei	r2,r2,1
   8f2e0:	10004b1e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8f2e4:	00800044 	movi	r2,1
   8f2e8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8f2ec:	00004806 	br	8f410 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8f2f0:	e0bff917 	ldw	r2,-28(fp)
   8f2f4:	10c0020b 	ldhu	r3,8(r2)
   8f2f8:	e0bff817 	ldw	r2,-32(fp)
   8f2fc:	1080040b 	ldhu	r2,16(r2)
   8f300:	1884703a 	and	r2,r3,r2
   8f304:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   8f308:	e0bff68b 	ldhu	r2,-38(fp)
   8f30c:	1005003a 	cmpeq	r2,r2,zero
   8f310:	10003f1e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8f314:	e17ff68b 	ldhu	r5,-38(fp)
   8f318:	e13ff817 	ldw	r4,-32(fp)
   8f31c:	008f8280 	call	8f828 <OS_FlagTaskRdy>
   8f320:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8f324:	e0bff603 	ldbu	r2,-40(fp)
   8f328:	10800058 	cmpnei	r2,r2,1
   8f32c:	1000381e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8f330:	00800044 	movi	r2,1
   8f334:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8f338:	00003506 	br	8f410 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8f33c:	e0bff917 	ldw	r2,-28(fp)
   8f340:	1080020b 	ldhu	r2,8(r2)
   8f344:	0084303a 	nor	r2,zero,r2
   8f348:	1007883a 	mov	r3,r2
   8f34c:	e0bff817 	ldw	r2,-32(fp)
   8f350:	1080040b 	ldhu	r2,16(r2)
   8f354:	1884703a 	and	r2,r3,r2
   8f358:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   8f35c:	e0bff817 	ldw	r2,-32(fp)
   8f360:	1080040b 	ldhu	r2,16(r2)
   8f364:	10ffffcc 	andi	r3,r2,65535
   8f368:	e0bff68b 	ldhu	r2,-38(fp)
   8f36c:	1880281e 	bne	r3,r2,8f410 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8f370:	e17ff68b 	ldhu	r5,-38(fp)
   8f374:	e13ff817 	ldw	r4,-32(fp)
   8f378:	008f8280 	call	8f828 <OS_FlagTaskRdy>
   8f37c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8f380:	e0bff603 	ldbu	r2,-40(fp)
   8f384:	10800058 	cmpnei	r2,r2,1
   8f388:	1000211e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8f38c:	00800044 	movi	r2,1
   8f390:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8f394:	00001e06 	br	8f410 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   8f398:	e0bff917 	ldw	r2,-28(fp)
   8f39c:	1080020b 	ldhu	r2,8(r2)
   8f3a0:	0084303a 	nor	r2,zero,r2
   8f3a4:	1007883a 	mov	r3,r2
   8f3a8:	e0bff817 	ldw	r2,-32(fp)
   8f3ac:	1080040b 	ldhu	r2,16(r2)
   8f3b0:	1884703a 	and	r2,r3,r2
   8f3b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   8f3b8:	e0bff68b 	ldhu	r2,-38(fp)
   8f3bc:	1005003a 	cmpeq	r2,r2,zero
   8f3c0:	1000131e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   8f3c4:	e17ff68b 	ldhu	r5,-38(fp)
   8f3c8:	e13ff817 	ldw	r4,-32(fp)
   8f3cc:	008f8280 	call	8f828 <OS_FlagTaskRdy>
   8f3d0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   8f3d4:	e0bff603 	ldbu	r2,-40(fp)
   8f3d8:	10800058 	cmpnei	r2,r2,1
   8f3dc:	10000c1e 	bne	r2,zero,8f410 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   8f3e0:	00800044 	movi	r2,1
   8f3e4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   8f3e8:	00000906 	br	8f410 <OSFlagPost+0x30c>
   8f3ec:	e0bff517 	ldw	r2,-44(fp)
   8f3f0:	e0bff215 	stw	r2,-56(fp)
   8f3f4:	e0bff217 	ldw	r2,-56(fp)
   8f3f8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   8f3fc:	e0fffc17 	ldw	r3,-16(fp)
   8f400:	00801bc4 	movi	r2,111
   8f404:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   8f408:	e03fff15 	stw	zero,-4(fp)
   8f40c:	00002106 	br	8f494 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   8f410:	e0bff817 	ldw	r2,-32(fp)
   8f414:	10800017 	ldw	r2,0(r2)
   8f418:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   8f41c:	e0bff817 	ldw	r2,-32(fp)
   8f420:	1004c03a 	cmpne	r2,r2,zero
   8f424:	103f881e 	bne	r2,zero,8f248 <OSFlagPost+0x144>
   8f428:	e0bff517 	ldw	r2,-44(fp)
   8f42c:	e0bff115 	stw	r2,-60(fp)
   8f430:	e0bff117 	ldw	r2,-60(fp)
   8f434:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   8f438:	e0bff783 	ldbu	r2,-34(fp)
   8f43c:	10800058 	cmpnei	r2,r2,1
   8f440:	1000011e 	bne	r2,zero,8f448 <OSFlagPost+0x344>
        OS_Sched();
   8f444:	008d8340 	call	8d834 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f448:	0005303a 	rdctl	r2,status
   8f44c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f450:	e0fff017 	ldw	r3,-64(fp)
   8f454:	00bfff84 	movi	r2,-2
   8f458:	1884703a 	and	r2,r3,r2
   8f45c:	1001703a 	wrctl	status,r2
  
  return context;
   8f460:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   8f464:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   8f468:	e0bff917 	ldw	r2,-28(fp)
   8f46c:	1080020b 	ldhu	r2,8(r2)
   8f470:	e0bff70d 	sth	r2,-36(fp)
   8f474:	e0bff517 	ldw	r2,-44(fp)
   8f478:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f47c:	e0bfef17 	ldw	r2,-68(fp)
   8f480:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   8f484:	e0bffc17 	ldw	r2,-16(fp)
   8f488:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   8f48c:	e0bff70b 	ldhu	r2,-36(fp)
   8f490:	e0bfff15 	stw	r2,-4(fp)
   8f494:	e0bfff17 	ldw	r2,-4(fp)
}
   8f498:	e037883a 	mov	sp,fp
   8f49c:	dfc00117 	ldw	ra,4(sp)
   8f4a0:	df000017 	ldw	fp,0(sp)
   8f4a4:	dec00204 	addi	sp,sp,8
   8f4a8:	f800283a 	ret

0008f4ac <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   8f4ac:	defff804 	addi	sp,sp,-32
   8f4b0:	df000715 	stw	fp,28(sp)
   8f4b4:	df000704 	addi	fp,sp,28
   8f4b8:	e13ffd15 	stw	r4,-12(fp)
   8f4bc:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   8f4c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   8f4c4:	e0bffe17 	ldw	r2,-8(fp)
   8f4c8:	1004c03a 	cmpne	r2,r2,zero
   8f4cc:	1000021e 	bne	r2,zero,8f4d8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   8f4d0:	e03fff15 	stw	zero,-4(fp)
   8f4d4:	00002506 	br	8f56c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   8f4d8:	e0bffd17 	ldw	r2,-12(fp)
   8f4dc:	1004c03a 	cmpne	r2,r2,zero
   8f4e0:	1000051e 	bne	r2,zero,8f4f8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8f4e4:	e0fffe17 	ldw	r3,-8(fp)
   8f4e8:	00801b84 	movi	r2,110
   8f4ec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8f4f0:	e03fff15 	stw	zero,-4(fp)
   8f4f4:	00001d06 	br	8f56c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   8f4f8:	e0bffd17 	ldw	r2,-12(fp)
   8f4fc:	10800003 	ldbu	r2,0(r2)
   8f500:	10803fcc 	andi	r2,r2,255
   8f504:	10800160 	cmpeqi	r2,r2,5
   8f508:	1000051e 	bne	r2,zero,8f520 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   8f50c:	e0fffe17 	ldw	r3,-8(fp)
   8f510:	00800044 	movi	r2,1
   8f514:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8f518:	e03fff15 	stw	zero,-4(fp)
   8f51c:	00001306 	br	8f56c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f520:	0005303a 	rdctl	r2,status
   8f524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f528:	e0fffa17 	ldw	r3,-24(fp)
   8f52c:	00bfff84 	movi	r2,-2
   8f530:	1884703a 	and	r2,r3,r2
   8f534:	1001703a 	wrctl	status,r2
  
  return context;
   8f538:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8f53c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   8f540:	e0bffd17 	ldw	r2,-12(fp)
   8f544:	1080020b 	ldhu	r2,8(r2)
   8f548:	e0bffc0d 	sth	r2,-16(fp)
   8f54c:	e0bffb17 	ldw	r2,-20(fp)
   8f550:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f554:	e0bff917 	ldw	r2,-28(fp)
   8f558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8f55c:	e0bffe17 	ldw	r2,-8(fp)
   8f560:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   8f564:	e0bffc0b 	ldhu	r2,-16(fp)
   8f568:	e0bfff15 	stw	r2,-4(fp)
   8f56c:	e0bfff17 	ldw	r2,-4(fp)
}
   8f570:	e037883a 	mov	sp,fp
   8f574:	df000017 	ldw	fp,0(sp)
   8f578:	dec00104 	addi	sp,sp,4
   8f57c:	f800283a 	ret

0008f580 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   8f580:	defff804 	addi	sp,sp,-32
   8f584:	df000715 	stw	fp,28(sp)
   8f588:	df000704 	addi	fp,sp,28
   8f58c:	e13ffb15 	stw	r4,-20(fp)
   8f590:	e17ffc15 	stw	r5,-16(fp)
   8f594:	e0800117 	ldw	r2,4(fp)
   8f598:	e1bffd0d 	sth	r6,-12(fp)
   8f59c:	e1fffe05 	stb	r7,-8(fp)
   8f5a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   8f5a4:	008002b4 	movhi	r2,10
   8f5a8:	10acb004 	addi	r2,r2,-19776
   8f5ac:	10c00017 	ldw	r3,0(r2)
   8f5b0:	008002b4 	movhi	r2,10
   8f5b4:	10acb004 	addi	r2,r2,-19776
   8f5b8:	10800017 	ldw	r2,0(r2)
   8f5bc:	10800c03 	ldbu	r2,48(r2)
   8f5c0:	10800814 	ori	r2,r2,32
   8f5c4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   8f5c8:	008002b4 	movhi	r2,10
   8f5cc:	10acb004 	addi	r2,r2,-19776
   8f5d0:	10800017 	ldw	r2,0(r2)
   8f5d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   8f5d8:	008002b4 	movhi	r2,10
   8f5dc:	10acb004 	addi	r2,r2,-19776
   8f5e0:	10c00017 	ldw	r3,0(r2)
   8f5e4:	e0bfff0b 	ldhu	r2,-4(fp)
   8f5e8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   8f5ec:	008002b4 	movhi	r2,10
   8f5f0:	10acb004 	addi	r2,r2,-19776
   8f5f4:	10c00017 	ldw	r3,0(r2)
   8f5f8:	e0bffc17 	ldw	r2,-16(fp)
   8f5fc:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   8f600:	e0fffc17 	ldw	r3,-16(fp)
   8f604:	e0bffd0b 	ldhu	r2,-12(fp)
   8f608:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   8f60c:	e0fffc17 	ldw	r3,-16(fp)
   8f610:	e0bffe03 	ldbu	r2,-8(fp)
   8f614:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   8f618:	008002b4 	movhi	r2,10
   8f61c:	10acb004 	addi	r2,r2,-19776
   8f620:	10c00017 	ldw	r3,0(r2)
   8f624:	e0bffc17 	ldw	r2,-16(fp)
   8f628:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   8f62c:	e0bffb17 	ldw	r2,-20(fp)
   8f630:	10c00117 	ldw	r3,4(r2)
   8f634:	e0bffc17 	ldw	r2,-16(fp)
   8f638:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   8f63c:	e0bffc17 	ldw	r2,-16(fp)
   8f640:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   8f644:	e0fffc17 	ldw	r3,-16(fp)
   8f648:	e0bffb17 	ldw	r2,-20(fp)
   8f64c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   8f650:	e0bffb17 	ldw	r2,-20(fp)
   8f654:	10800117 	ldw	r2,4(r2)
   8f658:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   8f65c:	e0bffa17 	ldw	r2,-24(fp)
   8f660:	1005003a 	cmpeq	r2,r2,zero
   8f664:	1000031e 	bne	r2,zero,8f674 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   8f668:	e0fffa17 	ldw	r3,-24(fp)
   8f66c:	e0bffc17 	ldw	r2,-16(fp)
   8f670:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   8f674:	e0fffb17 	ldw	r3,-20(fp)
   8f678:	e0bffc17 	ldw	r2,-16(fp)
   8f67c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   8f680:	008002b4 	movhi	r2,10
   8f684:	10acb004 	addi	r2,r2,-19776
   8f688:	10800017 	ldw	r2,0(r2)
   8f68c:	10800d03 	ldbu	r2,52(r2)
   8f690:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   8f694:	e13ff903 	ldbu	r4,-28(fp)
   8f698:	e0fff903 	ldbu	r3,-28(fp)
   8f69c:	008002b4 	movhi	r2,10
   8f6a0:	10acad44 	addi	r2,r2,-19787
   8f6a4:	10c5883a 	add	r2,r2,r3
   8f6a8:	10800003 	ldbu	r2,0(r2)
   8f6ac:	1007883a 	mov	r3,r2
   8f6b0:	008002b4 	movhi	r2,10
   8f6b4:	10acb004 	addi	r2,r2,-19776
   8f6b8:	10800017 	ldw	r2,0(r2)
   8f6bc:	10800d43 	ldbu	r2,53(r2)
   8f6c0:	0084303a 	nor	r2,zero,r2
   8f6c4:	1884703a 	and	r2,r3,r2
   8f6c8:	1007883a 	mov	r3,r2
   8f6cc:	008002b4 	movhi	r2,10
   8f6d0:	10acad44 	addi	r2,r2,-19787
   8f6d4:	1105883a 	add	r2,r2,r4
   8f6d8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   8f6dc:	e0fff903 	ldbu	r3,-28(fp)
   8f6e0:	008002b4 	movhi	r2,10
   8f6e4:	10acad44 	addi	r2,r2,-19787
   8f6e8:	10c5883a 	add	r2,r2,r3
   8f6ec:	10800003 	ldbu	r2,0(r2)
   8f6f0:	10803fcc 	andi	r2,r2,255
   8f6f4:	1004c03a 	cmpne	r2,r2,zero
   8f6f8:	10000e1e 	bne	r2,zero,8f734 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   8f6fc:	008002b4 	movhi	r2,10
   8f700:	10acb004 	addi	r2,r2,-19776
   8f704:	10800017 	ldw	r2,0(r2)
   8f708:	10800d83 	ldbu	r2,54(r2)
   8f70c:	0084303a 	nor	r2,zero,r2
   8f710:	1007883a 	mov	r3,r2
   8f714:	008002b4 	movhi	r2,10
   8f718:	10acad04 	addi	r2,r2,-19788
   8f71c:	10800003 	ldbu	r2,0(r2)
   8f720:	1884703a 	and	r2,r3,r2
   8f724:	1007883a 	mov	r3,r2
   8f728:	008002b4 	movhi	r2,10
   8f72c:	10acad04 	addi	r2,r2,-19788
   8f730:	10c00005 	stb	r3,0(r2)
    }
}
   8f734:	e037883a 	mov	sp,fp
   8f738:	df000017 	ldw	fp,0(sp)
   8f73c:	dec00104 	addi	sp,sp,4
   8f740:	f800283a 	ret

0008f744 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   8f744:	defffb04 	addi	sp,sp,-20
   8f748:	dfc00415 	stw	ra,16(sp)
   8f74c:	df000315 	stw	fp,12(sp)
   8f750:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   8f754:	010002b4 	movhi	r4,10
   8f758:	211d4c04 	addi	r4,r4,30000
   8f75c:	0140dc04 	movi	r5,880
   8f760:	008d7740 	call	8d774 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   8f764:	008002b4 	movhi	r2,10
   8f768:	109d4c04 	addi	r2,r2,30000
   8f76c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   8f770:	008002b4 	movhi	r2,10
   8f774:	109d5704 	addi	r2,r2,30044
   8f778:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   8f77c:	e03fff0d 	sth	zero,-4(fp)
   8f780:	00001306 	br	8f7d0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8f784:	e0bffe17 	ldw	r2,-8(fp)
   8f788:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   8f78c:	e0fffe17 	ldw	r3,-8(fp)
   8f790:	e0bffd17 	ldw	r2,-12(fp)
   8f794:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   8f798:	e0fffe17 	ldw	r3,-8(fp)
   8f79c:	00800fc4 	movi	r2,63
   8f7a0:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   8f7a4:	e0bffe17 	ldw	r2,-8(fp)
   8f7a8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   8f7ac:	e0bffe17 	ldw	r2,-8(fp)
   8f7b0:	10800b04 	addi	r2,r2,44
   8f7b4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   8f7b8:	e0bffd17 	ldw	r2,-12(fp)
   8f7bc:	10800b04 	addi	r2,r2,44
   8f7c0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   8f7c4:	e0bfff0b 	ldhu	r2,-4(fp)
   8f7c8:	10800044 	addi	r2,r2,1
   8f7cc:	e0bfff0d 	sth	r2,-4(fp)
   8f7d0:	e0bfff0b 	ldhu	r2,-4(fp)
   8f7d4:	108004f0 	cmpltui	r2,r2,19
   8f7d8:	103fea1e 	bne	r2,zero,8f784 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   8f7dc:	e0bffe17 	ldw	r2,-8(fp)
   8f7e0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   8f7e4:	e0bffe17 	ldw	r2,-8(fp)
   8f7e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   8f7ec:	e0fffe17 	ldw	r3,-8(fp)
   8f7f0:	00800fc4 	movi	r2,63
   8f7f4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   8f7f8:	e0bffe17 	ldw	r2,-8(fp)
   8f7fc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   8f800:	00c002b4 	movhi	r3,10
   8f804:	18ecb204 	addi	r3,r3,-19768
   8f808:	008002b4 	movhi	r2,10
   8f80c:	109d4c04 	addi	r2,r2,30000
   8f810:	18800015 	stw	r2,0(r3)
#endif
}
   8f814:	e037883a 	mov	sp,fp
   8f818:	dfc00117 	ldw	ra,4(sp)
   8f81c:	df000017 	ldw	fp,0(sp)
   8f820:	dec00204 	addi	sp,sp,8
   8f824:	f800283a 	ret

0008f828 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   8f828:	defffa04 	addi	sp,sp,-24
   8f82c:	dfc00515 	stw	ra,20(sp)
   8f830:	df000415 	stw	fp,16(sp)
   8f834:	df000404 	addi	fp,sp,16
   8f838:	e13ffe15 	stw	r4,-8(fp)
   8f83c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   8f840:	e0bffe17 	ldw	r2,-8(fp)
   8f844:	10800217 	ldw	r2,8(r2)
   8f848:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   8f84c:	e0bffd17 	ldw	r2,-12(fp)
   8f850:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   8f854:	e0fffd17 	ldw	r3,-12(fp)
   8f858:	e0bfff0b 	ldhu	r2,-4(fp)
   8f85c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   8f860:	e0bffd17 	ldw	r2,-12(fp)
   8f864:	10c00c03 	ldbu	r3,48(r2)
   8f868:	00bff7c4 	movi	r2,-33
   8f86c:	1884703a 	and	r2,r3,r2
   8f870:	1007883a 	mov	r3,r2
   8f874:	e0bffd17 	ldw	r2,-12(fp)
   8f878:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   8f87c:	e0bffd17 	ldw	r2,-12(fp)
   8f880:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   8f884:	e0bffd17 	ldw	r2,-12(fp)
   8f888:	10800c03 	ldbu	r2,48(r2)
   8f88c:	10803fcc 	andi	r2,r2,255
   8f890:	1004c03a 	cmpne	r2,r2,zero
   8f894:	10001f1e 	bne	r2,zero,8f914 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   8f898:	e0bffd17 	ldw	r2,-12(fp)
   8f89c:	10c00d83 	ldbu	r3,54(r2)
   8f8a0:	008002b4 	movhi	r2,10
   8f8a4:	10acad04 	addi	r2,r2,-19788
   8f8a8:	10800003 	ldbu	r2,0(r2)
   8f8ac:	1884b03a 	or	r2,r3,r2
   8f8b0:	1007883a 	mov	r3,r2
   8f8b4:	008002b4 	movhi	r2,10
   8f8b8:	10acad04 	addi	r2,r2,-19788
   8f8bc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8f8c0:	e0bffd17 	ldw	r2,-12(fp)
   8f8c4:	10800d03 	ldbu	r2,52(r2)
   8f8c8:	11003fcc 	andi	r4,r2,255
   8f8cc:	e0bffd17 	ldw	r2,-12(fp)
   8f8d0:	10800d03 	ldbu	r2,52(r2)
   8f8d4:	10c03fcc 	andi	r3,r2,255
   8f8d8:	008002b4 	movhi	r2,10
   8f8dc:	10acad44 	addi	r2,r2,-19787
   8f8e0:	10c5883a 	add	r2,r2,r3
   8f8e4:	10c00003 	ldbu	r3,0(r2)
   8f8e8:	e0bffd17 	ldw	r2,-12(fp)
   8f8ec:	10800d43 	ldbu	r2,53(r2)
   8f8f0:	1884b03a 	or	r2,r3,r2
   8f8f4:	1007883a 	mov	r3,r2
   8f8f8:	008002b4 	movhi	r2,10
   8f8fc:	10acad44 	addi	r2,r2,-19787
   8f900:	1105883a 	add	r2,r2,r4
   8f904:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   8f908:	00800044 	movi	r2,1
   8f90c:	e0bffc05 	stb	r2,-16(fp)
   8f910:	00000106 	br	8f918 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   8f914:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   8f918:	e13ffe17 	ldw	r4,-8(fp)
   8f91c:	008f9380 	call	8f938 <OS_FlagUnlink>
    return (sched);
   8f920:	e0bffc03 	ldbu	r2,-16(fp)
}
   8f924:	e037883a 	mov	sp,fp
   8f928:	dfc00117 	ldw	ra,4(sp)
   8f92c:	df000017 	ldw	fp,0(sp)
   8f930:	dec00204 	addi	sp,sp,8
   8f934:	f800283a 	ret

0008f938 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   8f938:	defffa04 	addi	sp,sp,-24
   8f93c:	df000515 	stw	fp,20(sp)
   8f940:	df000504 	addi	fp,sp,20
   8f944:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   8f948:	e0bfff17 	ldw	r2,-4(fp)
   8f94c:	10800117 	ldw	r2,4(r2)
   8f950:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   8f954:	e0bfff17 	ldw	r2,-4(fp)
   8f958:	10800017 	ldw	r2,0(r2)
   8f95c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   8f960:	e0bffc17 	ldw	r2,-16(fp)
   8f964:	1004c03a 	cmpne	r2,r2,zero
   8f968:	10000c1e 	bne	r2,zero,8f99c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   8f96c:	e0bfff17 	ldw	r2,-4(fp)
   8f970:	10800317 	ldw	r2,12(r2)
   8f974:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   8f978:	e0fffd17 	ldw	r3,-12(fp)
   8f97c:	e0bffb17 	ldw	r2,-20(fp)
   8f980:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   8f984:	e0bffb17 	ldw	r2,-20(fp)
   8f988:	1005003a 	cmpeq	r2,r2,zero
   8f98c:	10000c1e 	bne	r2,zero,8f9c0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   8f990:	e0bffb17 	ldw	r2,-20(fp)
   8f994:	10000115 	stw	zero,4(r2)
   8f998:	00000906 	br	8f9c0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   8f99c:	e0fffc17 	ldw	r3,-16(fp)
   8f9a0:	e0bffb17 	ldw	r2,-20(fp)
   8f9a4:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   8f9a8:	e0bffb17 	ldw	r2,-20(fp)
   8f9ac:	1005003a 	cmpeq	r2,r2,zero
   8f9b0:	1000031e 	bne	r2,zero,8f9c0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   8f9b4:	e0fffb17 	ldw	r3,-20(fp)
   8f9b8:	e0bffc17 	ldw	r2,-16(fp)
   8f9bc:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   8f9c0:	e0bfff17 	ldw	r2,-4(fp)
   8f9c4:	10800217 	ldw	r2,8(r2)
   8f9c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   8f9cc:	e0bffe17 	ldw	r2,-8(fp)
   8f9d0:	10000a15 	stw	zero,40(r2)
#endif
}
   8f9d4:	e037883a 	mov	sp,fp
   8f9d8:	df000017 	ldw	fp,0(sp)
   8f9dc:	dec00104 	addi	sp,sp,4
   8f9e0:	f800283a 	ret

0008f9e4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   8f9e4:	defff304 	addi	sp,sp,-52
   8f9e8:	df000c15 	stw	fp,48(sp)
   8f9ec:	df000c04 	addi	fp,sp,48
   8f9f0:	e13ffb15 	stw	r4,-20(fp)
   8f9f4:	e17ffc15 	stw	r5,-16(fp)
   8f9f8:	e1bffd15 	stw	r6,-12(fp)
   8f9fc:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8fa00:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8fa04:	e0bffe17 	ldw	r2,-8(fp)
   8fa08:	1004c03a 	cmpne	r2,r2,zero
   8fa0c:	1000021e 	bne	r2,zero,8fa18 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   8fa10:	e03fff15 	stw	zero,-4(fp)
   8fa14:	00007506 	br	8fbec <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   8fa18:	e0bffb17 	ldw	r2,-20(fp)
   8fa1c:	1004c03a 	cmpne	r2,r2,zero
   8fa20:	1000051e 	bne	r2,zero,8fa38 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   8fa24:	e0fffe17 	ldw	r3,-8(fp)
   8fa28:	00801884 	movi	r2,98
   8fa2c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8fa30:	e03fff15 	stw	zero,-4(fp)
   8fa34:	00006d06 	br	8fbec <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   8fa38:	e0bffb17 	ldw	r2,-20(fp)
   8fa3c:	108000cc 	andi	r2,r2,3
   8fa40:	1005003a 	cmpeq	r2,r2,zero
   8fa44:	1000051e 	bne	r2,zero,8fa5c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   8fa48:	e0fffe17 	ldw	r3,-8(fp)
   8fa4c:	00801884 	movi	r2,98
   8fa50:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8fa54:	e03fff15 	stw	zero,-4(fp)
   8fa58:	00006406 	br	8fbec <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   8fa5c:	e0bffc17 	ldw	r2,-16(fp)
   8fa60:	108000a8 	cmpgeui	r2,r2,2
   8fa64:	1000051e 	bne	r2,zero,8fa7c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   8fa68:	e0fffe17 	ldw	r3,-8(fp)
   8fa6c:	008016c4 	movi	r2,91
   8fa70:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8fa74:	e03fff15 	stw	zero,-4(fp)
   8fa78:	00005c06 	br	8fbec <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   8fa7c:	e0bffd17 	ldw	r2,-12(fp)
   8fa80:	10800128 	cmpgeui	r2,r2,4
   8fa84:	1000051e 	bne	r2,zero,8fa9c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   8fa88:	e0fffe17 	ldw	r3,-8(fp)
   8fa8c:	00801704 	movi	r2,92
   8fa90:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8fa94:	e03fff15 	stw	zero,-4(fp)
   8fa98:	00005406 	br	8fbec <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fa9c:	0005303a 	rdctl	r2,status
   8faa0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8faa4:	e0fff517 	ldw	r3,-44(fp)
   8faa8:	00bfff84 	movi	r2,-2
   8faac:	1884703a 	and	r2,r3,r2
   8fab0:	1001703a 	wrctl	status,r2
  
  return context;
   8fab4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8fab8:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   8fabc:	008002b4 	movhi	r2,10
   8fac0:	10acaa04 	addi	r2,r2,-19800
   8fac4:	10800017 	ldw	r2,0(r2)
   8fac8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   8facc:	008002b4 	movhi	r2,10
   8fad0:	10acaa04 	addi	r2,r2,-19800
   8fad4:	10800017 	ldw	r2,0(r2)
   8fad8:	1005003a 	cmpeq	r2,r2,zero
   8fadc:	1000081e 	bne	r2,zero,8fb00 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   8fae0:	008002b4 	movhi	r2,10
   8fae4:	10acaa04 	addi	r2,r2,-19800
   8fae8:	10800017 	ldw	r2,0(r2)
   8faec:	10800117 	ldw	r2,4(r2)
   8faf0:	1007883a 	mov	r3,r2
   8faf4:	008002b4 	movhi	r2,10
   8faf8:	10acaa04 	addi	r2,r2,-19800
   8fafc:	10c00015 	stw	r3,0(r2)
   8fb00:	e0bff617 	ldw	r2,-40(fp)
   8fb04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fb08:	e0bff417 	ldw	r2,-48(fp)
   8fb0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   8fb10:	e0bffa17 	ldw	r2,-24(fp)
   8fb14:	1004c03a 	cmpne	r2,r2,zero
   8fb18:	1000051e 	bne	r2,zero,8fb30 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   8fb1c:	e0fffe17 	ldw	r3,-8(fp)
   8fb20:	00801684 	movi	r2,90
   8fb24:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   8fb28:	e03fff15 	stw	zero,-4(fp)
   8fb2c:	00002f06 	br	8fbec <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   8fb30:	e0bffb17 	ldw	r2,-20(fp)
   8fb34:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   8fb38:	e0bffb17 	ldw	r2,-20(fp)
   8fb3c:	1007883a 	mov	r3,r2
   8fb40:	e0bffd17 	ldw	r2,-12(fp)
   8fb44:	1885883a 	add	r2,r3,r2
   8fb48:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   8fb4c:	e03ff715 	stw	zero,-36(fp)
   8fb50:	00000d06 	br	8fb88 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   8fb54:	e0fff817 	ldw	r3,-32(fp)
   8fb58:	e0bff917 	ldw	r2,-28(fp)
   8fb5c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   8fb60:	e0bff917 	ldw	r2,-28(fp)
   8fb64:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   8fb68:	e0bff917 	ldw	r2,-28(fp)
   8fb6c:	1007883a 	mov	r3,r2
   8fb70:	e0bffd17 	ldw	r2,-12(fp)
   8fb74:	1885883a 	add	r2,r3,r2
   8fb78:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   8fb7c:	e0bff717 	ldw	r2,-36(fp)
   8fb80:	10800044 	addi	r2,r2,1
   8fb84:	e0bff715 	stw	r2,-36(fp)
   8fb88:	e0bffc17 	ldw	r2,-16(fp)
   8fb8c:	10ffffc4 	addi	r3,r2,-1
   8fb90:	e0bff717 	ldw	r2,-36(fp)
   8fb94:	10ffef36 	bltu	r2,r3,8fb54 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   8fb98:	e0bff817 	ldw	r2,-32(fp)
   8fb9c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   8fba0:	e0fffa17 	ldw	r3,-24(fp)
   8fba4:	e0bffb17 	ldw	r2,-20(fp)
   8fba8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   8fbac:	e0fffa17 	ldw	r3,-24(fp)
   8fbb0:	e0bffb17 	ldw	r2,-20(fp)
   8fbb4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   8fbb8:	e0fffa17 	ldw	r3,-24(fp)
   8fbbc:	e0bffc17 	ldw	r2,-16(fp)
   8fbc0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   8fbc4:	e0fffa17 	ldw	r3,-24(fp)
   8fbc8:	e0bffc17 	ldw	r2,-16(fp)
   8fbcc:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   8fbd0:	e0fffa17 	ldw	r3,-24(fp)
   8fbd4:	e0bffd17 	ldw	r2,-12(fp)
   8fbd8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   8fbdc:	e0bffe17 	ldw	r2,-8(fp)
   8fbe0:	10000005 	stb	zero,0(r2)
    return (pmem);
   8fbe4:	e0bffa17 	ldw	r2,-24(fp)
   8fbe8:	e0bfff15 	stw	r2,-4(fp)
   8fbec:	e0bfff17 	ldw	r2,-4(fp)
}
   8fbf0:	e037883a 	mov	sp,fp
   8fbf4:	df000017 	ldw	fp,0(sp)
   8fbf8:	dec00104 	addi	sp,sp,4
   8fbfc:	f800283a 	ret

0008fc00 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   8fc00:	defff704 	addi	sp,sp,-36
   8fc04:	df000815 	stw	fp,32(sp)
   8fc08:	df000804 	addi	fp,sp,32
   8fc0c:	e13ffd15 	stw	r4,-12(fp)
   8fc10:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   8fc14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   8fc18:	e0bffe17 	ldw	r2,-8(fp)
   8fc1c:	1004c03a 	cmpne	r2,r2,zero
   8fc20:	1000021e 	bne	r2,zero,8fc2c <OSMemGet+0x2c>
        return ((void *)0);
   8fc24:	e03fff15 	stw	zero,-4(fp)
   8fc28:	00003106 	br	8fcf0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   8fc2c:	e0bffd17 	ldw	r2,-12(fp)
   8fc30:	1004c03a 	cmpne	r2,r2,zero
   8fc34:	1000051e 	bne	r2,zero,8fc4c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8fc38:	e0fffe17 	ldw	r3,-8(fp)
   8fc3c:	00801804 	movi	r2,96
   8fc40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   8fc44:	e03fff15 	stw	zero,-4(fp)
   8fc48:	00002906 	br	8fcf0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fc4c:	0005303a 	rdctl	r2,status
   8fc50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fc54:	e0fffa17 	ldw	r3,-24(fp)
   8fc58:	00bfff84 	movi	r2,-2
   8fc5c:	1884703a 	and	r2,r3,r2
   8fc60:	1001703a 	wrctl	status,r2
  
  return context;
   8fc64:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8fc68:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   8fc6c:	e0bffd17 	ldw	r2,-12(fp)
   8fc70:	10800417 	ldw	r2,16(r2)
   8fc74:	1005003a 	cmpeq	r2,r2,zero
   8fc78:	1000151e 	bne	r2,zero,8fcd0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   8fc7c:	e0bffd17 	ldw	r2,-12(fp)
   8fc80:	10800117 	ldw	r2,4(r2)
   8fc84:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   8fc88:	e0bffc17 	ldw	r2,-16(fp)
   8fc8c:	10c00017 	ldw	r3,0(r2)
   8fc90:	e0bffd17 	ldw	r2,-12(fp)
   8fc94:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   8fc98:	e0bffd17 	ldw	r2,-12(fp)
   8fc9c:	10800417 	ldw	r2,16(r2)
   8fca0:	10ffffc4 	addi	r3,r2,-1
   8fca4:	e0bffd17 	ldw	r2,-12(fp)
   8fca8:	10c00415 	stw	r3,16(r2)
   8fcac:	e0bffb17 	ldw	r2,-20(fp)
   8fcb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fcb4:	e0bff917 	ldw	r2,-28(fp)
   8fcb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   8fcbc:	e0bffe17 	ldw	r2,-8(fp)
   8fcc0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   8fcc4:	e0bffc17 	ldw	r2,-16(fp)
   8fcc8:	e0bfff15 	stw	r2,-4(fp)
   8fccc:	00000806 	br	8fcf0 <OSMemGet+0xf0>
   8fcd0:	e0bffb17 	ldw	r2,-20(fp)
   8fcd4:	e0bff815 	stw	r2,-32(fp)
   8fcd8:	e0bff817 	ldw	r2,-32(fp)
   8fcdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   8fce0:	e0fffe17 	ldw	r3,-8(fp)
   8fce4:	00801744 	movi	r2,93
   8fce8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   8fcec:	e03fff15 	stw	zero,-4(fp)
   8fcf0:	e0bfff17 	ldw	r2,-4(fp)
}
   8fcf4:	e037883a 	mov	sp,fp
   8fcf8:	df000017 	ldw	fp,0(sp)
   8fcfc:	dec00104 	addi	sp,sp,4
   8fd00:	f800283a 	ret

0008fd04 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   8fd04:	defff604 	addi	sp,sp,-40
   8fd08:	dfc00915 	stw	ra,36(sp)
   8fd0c:	df000815 	stw	fp,32(sp)
   8fd10:	df000804 	addi	fp,sp,32
   8fd14:	e13ffc15 	stw	r4,-16(fp)
   8fd18:	e17ffd15 	stw	r5,-12(fp)
   8fd1c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8fd20:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8fd24:	e0bffe17 	ldw	r2,-8(fp)
   8fd28:	1004c03a 	cmpne	r2,r2,zero
   8fd2c:	1000021e 	bne	r2,zero,8fd38 <OSMemNameGet+0x34>
        return (0);
   8fd30:	e03fff15 	stw	zero,-4(fp)
   8fd34:	00003006 	br	8fdf8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   8fd38:	e0bffc17 	ldw	r2,-16(fp)
   8fd3c:	1004c03a 	cmpne	r2,r2,zero
   8fd40:	1000051e 	bne	r2,zero,8fd58 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8fd44:	e0fffe17 	ldw	r3,-8(fp)
   8fd48:	00801804 	movi	r2,96
   8fd4c:	18800005 	stb	r2,0(r3)
        return (0);
   8fd50:	e03fff15 	stw	zero,-4(fp)
   8fd54:	00002806 	br	8fdf8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8fd58:	e0bffd17 	ldw	r2,-12(fp)
   8fd5c:	1004c03a 	cmpne	r2,r2,zero
   8fd60:	1000051e 	bne	r2,zero,8fd78 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8fd64:	e0fffe17 	ldw	r3,-8(fp)
   8fd68:	00800304 	movi	r2,12
   8fd6c:	18800005 	stb	r2,0(r3)
        return (0);
   8fd70:	e03fff15 	stw	zero,-4(fp)
   8fd74:	00002006 	br	8fdf8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8fd78:	008002b4 	movhi	r2,10
   8fd7c:	10acaf04 	addi	r2,r2,-19780
   8fd80:	10800003 	ldbu	r2,0(r2)
   8fd84:	10803fcc 	andi	r2,r2,255
   8fd88:	1005003a 	cmpeq	r2,r2,zero
   8fd8c:	1000051e 	bne	r2,zero,8fda4 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   8fd90:	e0fffe17 	ldw	r3,-8(fp)
   8fd94:	00800444 	movi	r2,17
   8fd98:	18800005 	stb	r2,0(r3)
        return (0);
   8fd9c:	e03fff15 	stw	zero,-4(fp)
   8fda0:	00001506 	br	8fdf8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fda4:	0005303a 	rdctl	r2,status
   8fda8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fdac:	e0fff917 	ldw	r3,-28(fp)
   8fdb0:	00bfff84 	movi	r2,-2
   8fdb4:	1884703a 	and	r2,r3,r2
   8fdb8:	1001703a 	wrctl	status,r2
  
  return context;
   8fdbc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   8fdc0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   8fdc4:	e0bffc17 	ldw	r2,-16(fp)
   8fdc8:	11400504 	addi	r5,r2,20
   8fdcc:	e13ffd17 	ldw	r4,-12(fp)
   8fdd0:	008d9780 	call	8d978 <OS_StrCopy>
   8fdd4:	e0bffb05 	stb	r2,-20(fp)
   8fdd8:	e0bffa17 	ldw	r2,-24(fp)
   8fddc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fde0:	e0bff817 	ldw	r2,-32(fp)
   8fde4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8fde8:	e0bffe17 	ldw	r2,-8(fp)
   8fdec:	10000005 	stb	zero,0(r2)
    return (len);
   8fdf0:	e0bffb03 	ldbu	r2,-20(fp)
   8fdf4:	e0bfff15 	stw	r2,-4(fp)
   8fdf8:	e0bfff17 	ldw	r2,-4(fp)
}
   8fdfc:	e037883a 	mov	sp,fp
   8fe00:	dfc00117 	ldw	ra,4(sp)
   8fe04:	df000017 	ldw	fp,0(sp)
   8fe08:	dec00204 	addi	sp,sp,8
   8fe0c:	f800283a 	ret

0008fe10 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   8fe10:	defff604 	addi	sp,sp,-40
   8fe14:	dfc00915 	stw	ra,36(sp)
   8fe18:	df000815 	stw	fp,32(sp)
   8fe1c:	df000804 	addi	fp,sp,32
   8fe20:	e13ffd15 	stw	r4,-12(fp)
   8fe24:	e17ffe15 	stw	r5,-8(fp)
   8fe28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8fe2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8fe30:	e0bfff17 	ldw	r2,-4(fp)
   8fe34:	1005003a 	cmpeq	r2,r2,zero
   8fe38:	1000381e 	bne	r2,zero,8ff1c <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   8fe3c:	e0bffd17 	ldw	r2,-12(fp)
   8fe40:	1004c03a 	cmpne	r2,r2,zero
   8fe44:	1000041e 	bne	r2,zero,8fe58 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   8fe48:	e0ffff17 	ldw	r3,-4(fp)
   8fe4c:	00801804 	movi	r2,96
   8fe50:	18800005 	stb	r2,0(r3)
        return;
   8fe54:	00003106 	br	8ff1c <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8fe58:	e0bffe17 	ldw	r2,-8(fp)
   8fe5c:	1004c03a 	cmpne	r2,r2,zero
   8fe60:	1000041e 	bne	r2,zero,8fe74 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8fe64:	e0ffff17 	ldw	r3,-4(fp)
   8fe68:	00800304 	movi	r2,12
   8fe6c:	18800005 	stb	r2,0(r3)
        return;
   8fe70:	00002a06 	br	8ff1c <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8fe74:	008002b4 	movhi	r2,10
   8fe78:	10acaf04 	addi	r2,r2,-19780
   8fe7c:	10800003 	ldbu	r2,0(r2)
   8fe80:	10803fcc 	andi	r2,r2,255
   8fe84:	1005003a 	cmpeq	r2,r2,zero
   8fe88:	1000041e 	bne	r2,zero,8fe9c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   8fe8c:	e0ffff17 	ldw	r3,-4(fp)
   8fe90:	00800484 	movi	r2,18
   8fe94:	18800005 	stb	r2,0(r3)
        return;
   8fe98:	00002006 	br	8ff1c <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fe9c:	0005303a 	rdctl	r2,status
   8fea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fea4:	e0fffa17 	ldw	r3,-24(fp)
   8fea8:	00bfff84 	movi	r2,-2
   8feac:	1884703a 	and	r2,r3,r2
   8feb0:	1001703a 	wrctl	status,r2
  
  return context;
   8feb4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8feb8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   8febc:	e13ffe17 	ldw	r4,-8(fp)
   8fec0:	008d9f80 	call	8d9f8 <OS_StrLen>
   8fec4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   8fec8:	e0bffc03 	ldbu	r2,-16(fp)
   8fecc:	10800830 	cmpltui	r2,r2,32
   8fed0:	1000081e 	bne	r2,zero,8fef4 <OSMemNameSet+0xe4>
   8fed4:	e0bffb17 	ldw	r2,-20(fp)
   8fed8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fedc:	e0bff917 	ldw	r2,-28(fp)
   8fee0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   8fee4:	e0ffff17 	ldw	r3,-4(fp)
   8fee8:	008018c4 	movi	r2,99
   8feec:	18800005 	stb	r2,0(r3)
        return;
   8fef0:	00000a06 	br	8ff1c <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   8fef4:	e0bffd17 	ldw	r2,-12(fp)
   8fef8:	11000504 	addi	r4,r2,20
   8fefc:	e17ffe17 	ldw	r5,-8(fp)
   8ff00:	008d9780 	call	8d978 <OS_StrCopy>
   8ff04:	e0bffb17 	ldw	r2,-20(fp)
   8ff08:	e0bff815 	stw	r2,-32(fp)
   8ff0c:	e0bff817 	ldw	r2,-32(fp)
   8ff10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8ff14:	e0bfff17 	ldw	r2,-4(fp)
   8ff18:	10000005 	stb	zero,0(r2)
}
   8ff1c:	e037883a 	mov	sp,fp
   8ff20:	dfc00117 	ldw	ra,4(sp)
   8ff24:	df000017 	ldw	fp,0(sp)
   8ff28:	dec00204 	addi	sp,sp,8
   8ff2c:	f800283a 	ret

0008ff30 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   8ff30:	defff804 	addi	sp,sp,-32
   8ff34:	df000715 	stw	fp,28(sp)
   8ff38:	df000704 	addi	fp,sp,28
   8ff3c:	e13ffd15 	stw	r4,-12(fp)
   8ff40:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8ff44:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   8ff48:	e0bffd17 	ldw	r2,-12(fp)
   8ff4c:	1004c03a 	cmpne	r2,r2,zero
   8ff50:	1000031e 	bne	r2,zero,8ff60 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   8ff54:	00801804 	movi	r2,96
   8ff58:	e0bfff15 	stw	r2,-4(fp)
   8ff5c:	00002b06 	br	9000c <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   8ff60:	e0bffe17 	ldw	r2,-8(fp)
   8ff64:	1004c03a 	cmpne	r2,r2,zero
   8ff68:	1000031e 	bne	r2,zero,8ff78 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   8ff6c:	008017c4 	movi	r2,95
   8ff70:	e0bfff15 	stw	r2,-4(fp)
   8ff74:	00002506 	br	9000c <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ff78:	0005303a 	rdctl	r2,status
   8ff7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ff80:	e0fffb17 	ldw	r3,-20(fp)
   8ff84:	00bfff84 	movi	r2,-2
   8ff88:	1884703a 	and	r2,r3,r2
   8ff8c:	1001703a 	wrctl	status,r2
  
  return context;
   8ff90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   8ff94:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   8ff98:	e0bffd17 	ldw	r2,-12(fp)
   8ff9c:	10c00417 	ldw	r3,16(r2)
   8ffa0:	e0bffd17 	ldw	r2,-12(fp)
   8ffa4:	10800317 	ldw	r2,12(r2)
   8ffa8:	18800736 	bltu	r3,r2,8ffc8 <OSMemPut+0x98>
   8ffac:	e0bffc17 	ldw	r2,-16(fp)
   8ffb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ffb4:	e0bffa17 	ldw	r2,-24(fp)
   8ffb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   8ffbc:	00801784 	movi	r2,94
   8ffc0:	e0bfff15 	stw	r2,-4(fp)
   8ffc4:	00001106 	br	9000c <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   8ffc8:	e0fffe17 	ldw	r3,-8(fp)
   8ffcc:	e0bffd17 	ldw	r2,-12(fp)
   8ffd0:	10800117 	ldw	r2,4(r2)
   8ffd4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   8ffd8:	e0fffd17 	ldw	r3,-12(fp)
   8ffdc:	e0bffe17 	ldw	r2,-8(fp)
   8ffe0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   8ffe4:	e0bffd17 	ldw	r2,-12(fp)
   8ffe8:	10800417 	ldw	r2,16(r2)
   8ffec:	10c00044 	addi	r3,r2,1
   8fff0:	e0bffd17 	ldw	r2,-12(fp)
   8fff4:	10c00415 	stw	r3,16(r2)
   8fff8:	e0bffc17 	ldw	r2,-16(fp)
   8fffc:	e0bff915 	stw	r2,-28(fp)
   90000:	e0bff917 	ldw	r2,-28(fp)
   90004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   90008:	e03fff15 	stw	zero,-4(fp)
   9000c:	e0bfff17 	ldw	r2,-4(fp)
}
   90010:	e037883a 	mov	sp,fp
   90014:	df000017 	ldw	fp,0(sp)
   90018:	dec00104 	addi	sp,sp,4
   9001c:	f800283a 	ret

00090020 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   90020:	defff904 	addi	sp,sp,-28
   90024:	df000615 	stw	fp,24(sp)
   90028:	df000604 	addi	fp,sp,24
   9002c:	e13ffd15 	stw	r4,-12(fp)
   90030:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90034:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   90038:	e0bffd17 	ldw	r2,-12(fp)
   9003c:	1004c03a 	cmpne	r2,r2,zero
   90040:	1000031e 	bne	r2,zero,90050 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   90044:	00801804 	movi	r2,96
   90048:	e0bfff15 	stw	r2,-4(fp)
   9004c:	00002e06 	br	90108 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   90050:	e0bffe17 	ldw	r2,-8(fp)
   90054:	1004c03a 	cmpne	r2,r2,zero
   90058:	1000031e 	bne	r2,zero,90068 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   9005c:	00801844 	movi	r2,97
   90060:	e0bfff15 	stw	r2,-4(fp)
   90064:	00002806 	br	90108 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90068:	0005303a 	rdctl	r2,status
   9006c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90070:	e0fffb17 	ldw	r3,-20(fp)
   90074:	00bfff84 	movi	r2,-2
   90078:	1884703a 	and	r2,r3,r2
   9007c:	1001703a 	wrctl	status,r2
  
  return context;
   90080:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   90084:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   90088:	e0bffd17 	ldw	r2,-12(fp)
   9008c:	10c00017 	ldw	r3,0(r2)
   90090:	e0bffe17 	ldw	r2,-8(fp)
   90094:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   90098:	e0bffd17 	ldw	r2,-12(fp)
   9009c:	10c00117 	ldw	r3,4(r2)
   900a0:	e0bffe17 	ldw	r2,-8(fp)
   900a4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   900a8:	e0bffd17 	ldw	r2,-12(fp)
   900ac:	10c00217 	ldw	r3,8(r2)
   900b0:	e0bffe17 	ldw	r2,-8(fp)
   900b4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   900b8:	e0bffd17 	ldw	r2,-12(fp)
   900bc:	10c00317 	ldw	r3,12(r2)
   900c0:	e0bffe17 	ldw	r2,-8(fp)
   900c4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   900c8:	e0bffd17 	ldw	r2,-12(fp)
   900cc:	10c00417 	ldw	r3,16(r2)
   900d0:	e0bffe17 	ldw	r2,-8(fp)
   900d4:	10c00415 	stw	r3,16(r2)
   900d8:	e0bffc17 	ldw	r2,-16(fp)
   900dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   900e0:	e0bffa17 	ldw	r2,-24(fp)
   900e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   900e8:	e0bffe17 	ldw	r2,-8(fp)
   900ec:	10c00317 	ldw	r3,12(r2)
   900f0:	e0bffe17 	ldw	r2,-8(fp)
   900f4:	10800417 	ldw	r2,16(r2)
   900f8:	1887c83a 	sub	r3,r3,r2
   900fc:	e0bffe17 	ldw	r2,-8(fp)
   90100:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   90104:	e03fff15 	stw	zero,-4(fp)
   90108:	e0bfff17 	ldw	r2,-4(fp)
}
   9010c:	e037883a 	mov	sp,fp
   90110:	df000017 	ldw	fp,0(sp)
   90114:	dec00104 	addi	sp,sp,4
   90118:	f800283a 	ret

0009011c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   9011c:	defffc04 	addi	sp,sp,-16
   90120:	dfc00315 	stw	ra,12(sp)
   90124:	df000215 	stw	fp,8(sp)
   90128:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   9012c:	010002b4 	movhi	r4,10
   90130:	211e2804 	addi	r4,r4,30880
   90134:	01430c04 	movi	r5,3120
   90138:	008d7740 	call	8d774 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   9013c:	008002b4 	movhi	r2,10
   90140:	109e2804 	addi	r2,r2,30880
   90144:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   90148:	e03ffe0d 	sth	zero,-8(fp)
   9014c:	00001406 	br	901a0 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   90150:	e13ffe0b 	ldhu	r4,-8(fp)
   90154:	01400d04 	movi	r5,52
   90158:	0080f440 	call	80f44 <__mulsi3>
   9015c:	1007883a 	mov	r3,r2
   90160:	008002b4 	movhi	r2,10
   90164:	109e3504 	addi	r2,r2,30932
   90168:	1887883a 	add	r3,r3,r2
   9016c:	e0bfff17 	ldw	r2,-4(fp)
   90170:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   90174:	e0ffff17 	ldw	r3,-4(fp)
   90178:	00800fc4 	movi	r2,63
   9017c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   90180:	e0bfff17 	ldw	r2,-4(fp)
   90184:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   90188:	e0bfff17 	ldw	r2,-4(fp)
   9018c:	10800d04 	addi	r2,r2,52
   90190:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   90194:	e0bffe0b 	ldhu	r2,-8(fp)
   90198:	10800044 	addi	r2,r2,1
   9019c:	e0bffe0d 	sth	r2,-8(fp)
   901a0:	e0bffe0b 	ldhu	r2,-8(fp)
   901a4:	10800ef0 	cmpltui	r2,r2,59
   901a8:	103fe91e 	bne	r2,zero,90150 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   901ac:	e0bfff17 	ldw	r2,-4(fp)
   901b0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   901b4:	e0ffff17 	ldw	r3,-4(fp)
   901b8:	00800fc4 	movi	r2,63
   901bc:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   901c0:	e0bfff17 	ldw	r2,-4(fp)
   901c4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   901c8:	00c002b4 	movhi	r3,10
   901cc:	18ecaa04 	addi	r3,r3,-19800
   901d0:	008002b4 	movhi	r2,10
   901d4:	109e2804 	addi	r2,r2,30880
   901d8:	18800015 	stw	r2,0(r3)
#endif
}
   901dc:	e037883a 	mov	sp,fp
   901e0:	dfc00117 	ldw	ra,4(sp)
   901e4:	df000017 	ldw	fp,0(sp)
   901e8:	dec00204 	addi	sp,sp,8
   901ec:	f800283a 	ret

000901f0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   901f0:	defff704 	addi	sp,sp,-36
   901f4:	df000815 	stw	fp,32(sp)
   901f8:	df000804 	addi	fp,sp,32
   901fc:	e13ffd15 	stw	r4,-12(fp)
   90200:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90204:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   90208:	e0bffe17 	ldw	r2,-8(fp)
   9020c:	1004c03a 	cmpne	r2,r2,zero
   90210:	1000021e 	bne	r2,zero,9021c <OSQAccept+0x2c>
        return ((void *)0);
   90214:	e03fff15 	stw	zero,-4(fp)
   90218:	00004506 	br	90330 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   9021c:	e0bffd17 	ldw	r2,-12(fp)
   90220:	1004c03a 	cmpne	r2,r2,zero
   90224:	1000051e 	bne	r2,zero,9023c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   90228:	e0fffe17 	ldw	r3,-8(fp)
   9022c:	00800104 	movi	r2,4
   90230:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   90234:	e03fff15 	stw	zero,-4(fp)
   90238:	00003d06 	br	90330 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   9023c:	e0bffd17 	ldw	r2,-12(fp)
   90240:	10800003 	ldbu	r2,0(r2)
   90244:	10803fcc 	andi	r2,r2,255
   90248:	108000a0 	cmpeqi	r2,r2,2
   9024c:	1000051e 	bne	r2,zero,90264 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   90250:	e0fffe17 	ldw	r3,-8(fp)
   90254:	00800044 	movi	r2,1
   90258:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   9025c:	e03fff15 	stw	zero,-4(fp)
   90260:	00003306 	br	90330 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90264:	0005303a 	rdctl	r2,status
   90268:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9026c:	e0fff917 	ldw	r3,-28(fp)
   90270:	00bfff84 	movi	r2,-2
   90274:	1884703a 	and	r2,r3,r2
   90278:	1001703a 	wrctl	status,r2
  
  return context;
   9027c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   90280:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   90284:	e0bffd17 	ldw	r2,-12(fp)
   90288:	10800117 	ldw	r2,4(r2)
   9028c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   90290:	e0bffb17 	ldw	r2,-20(fp)
   90294:	1080058b 	ldhu	r2,22(r2)
   90298:	10bfffcc 	andi	r2,r2,65535
   9029c:	1005003a 	cmpeq	r2,r2,zero
   902a0:	1000191e 	bne	r2,zero,90308 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   902a4:	e0bffb17 	ldw	r2,-20(fp)
   902a8:	10c00417 	ldw	r3,16(r2)
   902ac:	18800017 	ldw	r2,0(r3)
   902b0:	e0bffc15 	stw	r2,-16(fp)
   902b4:	18c00104 	addi	r3,r3,4
   902b8:	e0bffb17 	ldw	r2,-20(fp)
   902bc:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   902c0:	e0bffb17 	ldw	r2,-20(fp)
   902c4:	1080058b 	ldhu	r2,22(r2)
   902c8:	10bfffc4 	addi	r2,r2,-1
   902cc:	1007883a 	mov	r3,r2
   902d0:	e0bffb17 	ldw	r2,-20(fp)
   902d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   902d8:	e0bffb17 	ldw	r2,-20(fp)
   902dc:	10c00417 	ldw	r3,16(r2)
   902e0:	e0bffb17 	ldw	r2,-20(fp)
   902e4:	10800217 	ldw	r2,8(r2)
   902e8:	1880041e 	bne	r3,r2,902fc <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   902ec:	e0bffb17 	ldw	r2,-20(fp)
   902f0:	10c00117 	ldw	r3,4(r2)
   902f4:	e0bffb17 	ldw	r2,-20(fp)
   902f8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   902fc:	e0bffe17 	ldw	r2,-8(fp)
   90300:	10000005 	stb	zero,0(r2)
   90304:	00000406 	br	90318 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   90308:	e0fffe17 	ldw	r3,-8(fp)
   9030c:	008007c4 	movi	r2,31
   90310:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   90314:	e03ffc15 	stw	zero,-16(fp)
   90318:	e0bffa17 	ldw	r2,-24(fp)
   9031c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90320:	e0bff817 	ldw	r2,-32(fp)
   90324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   90328:	e0bffc17 	ldw	r2,-16(fp)
   9032c:	e0bfff15 	stw	r2,-4(fp)
   90330:	e0bfff17 	ldw	r2,-4(fp)
}
   90334:	e037883a 	mov	sp,fp
   90338:	df000017 	ldw	fp,0(sp)
   9033c:	dec00104 	addi	sp,sp,4
   90340:	f800283a 	ret

00090344 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   90344:	defff304 	addi	sp,sp,-52
   90348:	dfc00c15 	stw	ra,48(sp)
   9034c:	df000b15 	stw	fp,44(sp)
   90350:	df000b04 	addi	fp,sp,44
   90354:	e13ffd15 	stw	r4,-12(fp)
   90358:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9035c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   90360:	008002b4 	movhi	r2,10
   90364:	10acaf04 	addi	r2,r2,-19780
   90368:	10800003 	ldbu	r2,0(r2)
   9036c:	10803fcc 	andi	r2,r2,255
   90370:	1005003a 	cmpeq	r2,r2,zero
   90374:	1000021e 	bne	r2,zero,90380 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   90378:	e03fff15 	stw	zero,-4(fp)
   9037c:	00007006 	br	90540 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90380:	0005303a 	rdctl	r2,status
   90384:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90388:	e0fff917 	ldw	r3,-28(fp)
   9038c:	00bfff84 	movi	r2,-2
   90390:	1884703a 	and	r2,r3,r2
   90394:	1001703a 	wrctl	status,r2
  
  return context;
   90398:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   9039c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   903a0:	008002b4 	movhi	r2,10
   903a4:	10acae04 	addi	r2,r2,-19784
   903a8:	10800017 	ldw	r2,0(r2)
   903ac:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   903b0:	008002b4 	movhi	r2,10
   903b4:	10acae04 	addi	r2,r2,-19784
   903b8:	10800017 	ldw	r2,0(r2)
   903bc:	1005003a 	cmpeq	r2,r2,zero
   903c0:	1000081e 	bne	r2,zero,903e4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   903c4:	008002b4 	movhi	r2,10
   903c8:	10acae04 	addi	r2,r2,-19784
   903cc:	10800017 	ldw	r2,0(r2)
   903d0:	10800117 	ldw	r2,4(r2)
   903d4:	1007883a 	mov	r3,r2
   903d8:	008002b4 	movhi	r2,10
   903dc:	10acae04 	addi	r2,r2,-19784
   903e0:	10c00015 	stw	r3,0(r2)
   903e4:	e0bffa17 	ldw	r2,-24(fp)
   903e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   903ec:	e0bff817 	ldw	r2,-32(fp)
   903f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   903f4:	e0bffc17 	ldw	r2,-16(fp)
   903f8:	1005003a 	cmpeq	r2,r2,zero
   903fc:	10004e1e 	bne	r2,zero,90538 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90400:	0005303a 	rdctl	r2,status
   90404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90408:	e0fff717 	ldw	r3,-36(fp)
   9040c:	00bfff84 	movi	r2,-2
   90410:	1884703a 	and	r2,r3,r2
   90414:	1001703a 	wrctl	status,r2
  
  return context;
   90418:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   9041c:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   90420:	008002b4 	movhi	r2,10
   90424:	10acac04 	addi	r2,r2,-19792
   90428:	10800017 	ldw	r2,0(r2)
   9042c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   90430:	e0bffb17 	ldw	r2,-20(fp)
   90434:	1005003a 	cmpeq	r2,r2,zero
   90438:	1000311e 	bne	r2,zero,90500 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   9043c:	008002b4 	movhi	r2,10
   90440:	10acac04 	addi	r2,r2,-19792
   90444:	10800017 	ldw	r2,0(r2)
   90448:	10c00017 	ldw	r3,0(r2)
   9044c:	008002b4 	movhi	r2,10
   90450:	10acac04 	addi	r2,r2,-19792
   90454:	10c00015 	stw	r3,0(r2)
   90458:	e0bffa17 	ldw	r2,-24(fp)
   9045c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90460:	e0bff617 	ldw	r2,-40(fp)
   90464:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   90468:	e0fffb17 	ldw	r3,-20(fp)
   9046c:	e0bffd17 	ldw	r2,-12(fp)
   90470:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   90474:	e0bffe0b 	ldhu	r2,-8(fp)
   90478:	1085883a 	add	r2,r2,r2
   9047c:	1085883a 	add	r2,r2,r2
   90480:	1007883a 	mov	r3,r2
   90484:	e0bffd17 	ldw	r2,-12(fp)
   90488:	1887883a 	add	r3,r3,r2
   9048c:	e0bffb17 	ldw	r2,-20(fp)
   90490:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   90494:	e0fffb17 	ldw	r3,-20(fp)
   90498:	e0bffd17 	ldw	r2,-12(fp)
   9049c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   904a0:	e0fffb17 	ldw	r3,-20(fp)
   904a4:	e0bffd17 	ldw	r2,-12(fp)
   904a8:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   904ac:	e0fffb17 	ldw	r3,-20(fp)
   904b0:	e0bffe0b 	ldhu	r2,-8(fp)
   904b4:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   904b8:	e0bffb17 	ldw	r2,-20(fp)
   904bc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   904c0:	e0fffc17 	ldw	r3,-16(fp)
   904c4:	00800084 	movi	r2,2
   904c8:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   904cc:	e0bffc17 	ldw	r2,-16(fp)
   904d0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   904d4:	e0fffc17 	ldw	r3,-16(fp)
   904d8:	e0bffb17 	ldw	r2,-20(fp)
   904dc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   904e0:	e0fffc17 	ldw	r3,-16(fp)
   904e4:	00800fc4 	movi	r2,63
   904e8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   904ec:	e0bffc17 	ldw	r2,-16(fp)
   904f0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   904f4:	e13ffc17 	ldw	r4,-16(fp)
   904f8:	008d3a80 	call	8d3a8 <OS_EventWaitListInit>
   904fc:	00000e06 	br	90538 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   90500:	008002b4 	movhi	r2,10
   90504:	10acae04 	addi	r2,r2,-19784
   90508:	10c00017 	ldw	r3,0(r2)
   9050c:	e0bffc17 	ldw	r2,-16(fp)
   90510:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   90514:	00c002b4 	movhi	r3,10
   90518:	18ecae04 	addi	r3,r3,-19784
   9051c:	e0bffc17 	ldw	r2,-16(fp)
   90520:	18800015 	stw	r2,0(r3)
   90524:	e0bffa17 	ldw	r2,-24(fp)
   90528:	e0bff515 	stw	r2,-44(fp)
   9052c:	e0bff517 	ldw	r2,-44(fp)
   90530:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   90534:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   90538:	e0bffc17 	ldw	r2,-16(fp)
   9053c:	e0bfff15 	stw	r2,-4(fp)
   90540:	e0bfff17 	ldw	r2,-4(fp)
}
   90544:	e037883a 	mov	sp,fp
   90548:	dfc00117 	ldw	ra,4(sp)
   9054c:	df000017 	ldw	fp,0(sp)
   90550:	dec00204 	addi	sp,sp,8
   90554:	f800283a 	ret

00090558 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   90558:	defff004 	addi	sp,sp,-64
   9055c:	dfc00f15 	stw	ra,60(sp)
   90560:	df000e15 	stw	fp,56(sp)
   90564:	df000e04 	addi	fp,sp,56
   90568:	e13ffb15 	stw	r4,-20(fp)
   9056c:	e1bffd15 	stw	r6,-12(fp)
   90570:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90574:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90578:	e0bffd17 	ldw	r2,-12(fp)
   9057c:	1004c03a 	cmpne	r2,r2,zero
   90580:	1000031e 	bne	r2,zero,90590 <OSQDel+0x38>
        return (pevent);
   90584:	e0bffb17 	ldw	r2,-20(fp)
   90588:	e0bfff15 	stw	r2,-4(fp)
   9058c:	0000ac06 	br	90840 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   90590:	e0bffb17 	ldw	r2,-20(fp)
   90594:	1004c03a 	cmpne	r2,r2,zero
   90598:	1000061e 	bne	r2,zero,905b4 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   9059c:	e0fffd17 	ldw	r3,-12(fp)
   905a0:	00800104 	movi	r2,4
   905a4:	18800005 	stb	r2,0(r3)
        return (pevent);
   905a8:	e0fffb17 	ldw	r3,-20(fp)
   905ac:	e0ffff15 	stw	r3,-4(fp)
   905b0:	0000a306 	br	90840 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   905b4:	e0bffb17 	ldw	r2,-20(fp)
   905b8:	10800003 	ldbu	r2,0(r2)
   905bc:	10803fcc 	andi	r2,r2,255
   905c0:	108000a0 	cmpeqi	r2,r2,2
   905c4:	1000061e 	bne	r2,zero,905e0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   905c8:	e0fffd17 	ldw	r3,-12(fp)
   905cc:	00800044 	movi	r2,1
   905d0:	18800005 	stb	r2,0(r3)
        return (pevent);
   905d4:	e0bffb17 	ldw	r2,-20(fp)
   905d8:	e0bfff15 	stw	r2,-4(fp)
   905dc:	00009806 	br	90840 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   905e0:	008002b4 	movhi	r2,10
   905e4:	10acaf04 	addi	r2,r2,-19780
   905e8:	10800003 	ldbu	r2,0(r2)
   905ec:	10803fcc 	andi	r2,r2,255
   905f0:	1005003a 	cmpeq	r2,r2,zero
   905f4:	1000061e 	bne	r2,zero,90610 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   905f8:	e0fffd17 	ldw	r3,-12(fp)
   905fc:	008003c4 	movi	r2,15
   90600:	18800005 	stb	r2,0(r3)
        return (pevent);
   90604:	e0fffb17 	ldw	r3,-20(fp)
   90608:	e0ffff15 	stw	r3,-4(fp)
   9060c:	00008c06 	br	90840 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90610:	0005303a 	rdctl	r2,status
   90614:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90618:	e0fff617 	ldw	r3,-40(fp)
   9061c:	00bfff84 	movi	r2,-2
   90620:	1884703a 	and	r2,r3,r2
   90624:	1001703a 	wrctl	status,r2
  
  return context;
   90628:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   9062c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   90630:	e0bffb17 	ldw	r2,-20(fp)
   90634:	10800283 	ldbu	r2,10(r2)
   90638:	10803fcc 	andi	r2,r2,255
   9063c:	1005003a 	cmpeq	r2,r2,zero
   90640:	1000031e 	bne	r2,zero,90650 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   90644:	00800044 	movi	r2,1
   90648:	e0bffa05 	stb	r2,-24(fp)
   9064c:	00000106 	br	90654 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   90650:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   90654:	e0bffc03 	ldbu	r2,-16(fp)
   90658:	e0bffe15 	stw	r2,-8(fp)
   9065c:	e0fffe17 	ldw	r3,-8(fp)
   90660:	1805003a 	cmpeq	r2,r3,zero
   90664:	1000041e 	bne	r2,zero,90678 <OSQDel+0x120>
   90668:	e0fffe17 	ldw	r3,-8(fp)
   9066c:	18800060 	cmpeqi	r2,r3,1
   90670:	1000391e 	bne	r2,zero,90758 <OSQDel+0x200>
   90674:	00006706 	br	90814 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   90678:	e0bffa03 	ldbu	r2,-24(fp)
   9067c:	1004c03a 	cmpne	r2,r2,zero
   90680:	1000261e 	bne	r2,zero,9071c <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   90684:	e0fffb17 	ldw	r3,-20(fp)
   90688:	00800fc4 	movi	r2,63
   9068c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   90690:	e0bffb17 	ldw	r2,-20(fp)
   90694:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   90698:	e0bffb17 	ldw	r2,-20(fp)
   9069c:	10800117 	ldw	r2,4(r2)
   906a0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   906a4:	008002b4 	movhi	r2,10
   906a8:	10acac04 	addi	r2,r2,-19792
   906ac:	10c00017 	ldw	r3,0(r2)
   906b0:	e0bff817 	ldw	r2,-32(fp)
   906b4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   906b8:	00c002b4 	movhi	r3,10
   906bc:	18ecac04 	addi	r3,r3,-19792
   906c0:	e0bff817 	ldw	r2,-32(fp)
   906c4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   906c8:	e0bffb17 	ldw	r2,-20(fp)
   906cc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   906d0:	008002b4 	movhi	r2,10
   906d4:	10acae04 	addi	r2,r2,-19784
   906d8:	10c00017 	ldw	r3,0(r2)
   906dc:	e0bffb17 	ldw	r2,-20(fp)
   906e0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   906e4:	e0bffb17 	ldw	r2,-20(fp)
   906e8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   906ec:	00c002b4 	movhi	r3,10
   906f0:	18ecae04 	addi	r3,r3,-19784
   906f4:	e0bffb17 	ldw	r2,-20(fp)
   906f8:	18800015 	stw	r2,0(r3)
   906fc:	e0bff717 	ldw	r2,-36(fp)
   90700:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90704:	e0bff517 	ldw	r2,-44(fp)
   90708:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   9070c:	e0bffd17 	ldw	r2,-12(fp)
   90710:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   90714:	e03ff915 	stw	zero,-28(fp)
   90718:	00004706 	br	90838 <OSQDel+0x2e0>
   9071c:	e0bff717 	ldw	r2,-36(fp)
   90720:	e0bff415 	stw	r2,-48(fp)
   90724:	e0bff417 	ldw	r2,-48(fp)
   90728:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   9072c:	e0fffd17 	ldw	r3,-12(fp)
   90730:	00801244 	movi	r2,73
   90734:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   90738:	e0bffb17 	ldw	r2,-20(fp)
   9073c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   90740:	00003d06 	br	90838 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   90744:	e13ffb17 	ldw	r4,-20(fp)
   90748:	000b883a 	mov	r5,zero
   9074c:	01800104 	movi	r6,4
   90750:	000f883a 	mov	r7,zero
   90754:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   90758:	e0bffb17 	ldw	r2,-20(fp)
   9075c:	10800283 	ldbu	r2,10(r2)
   90760:	10803fcc 	andi	r2,r2,255
   90764:	1004c03a 	cmpne	r2,r2,zero
   90768:	103ff61e 	bne	r2,zero,90744 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   9076c:	e0fffb17 	ldw	r3,-20(fp)
   90770:	00800fc4 	movi	r2,63
   90774:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   90778:	e0bffb17 	ldw	r2,-20(fp)
   9077c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   90780:	e0bffb17 	ldw	r2,-20(fp)
   90784:	10800117 	ldw	r2,4(r2)
   90788:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   9078c:	008002b4 	movhi	r2,10
   90790:	10acac04 	addi	r2,r2,-19792
   90794:	10c00017 	ldw	r3,0(r2)
   90798:	e0bff817 	ldw	r2,-32(fp)
   9079c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   907a0:	00c002b4 	movhi	r3,10
   907a4:	18ecac04 	addi	r3,r3,-19792
   907a8:	e0bff817 	ldw	r2,-32(fp)
   907ac:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   907b0:	e0bffb17 	ldw	r2,-20(fp)
   907b4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   907b8:	008002b4 	movhi	r2,10
   907bc:	10acae04 	addi	r2,r2,-19784
   907c0:	10c00017 	ldw	r3,0(r2)
   907c4:	e0bffb17 	ldw	r2,-20(fp)
   907c8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   907cc:	e0bffb17 	ldw	r2,-20(fp)
   907d0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   907d4:	00c002b4 	movhi	r3,10
   907d8:	18ecae04 	addi	r3,r3,-19784
   907dc:	e0bffb17 	ldw	r2,-20(fp)
   907e0:	18800015 	stw	r2,0(r3)
   907e4:	e0bff717 	ldw	r2,-36(fp)
   907e8:	e0bff315 	stw	r2,-52(fp)
   907ec:	e0bff317 	ldw	r2,-52(fp)
   907f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   907f4:	e0bffa03 	ldbu	r2,-24(fp)
   907f8:	10800058 	cmpnei	r2,r2,1
   907fc:	1000011e 	bne	r2,zero,90804 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   90800:	008d8340 	call	8d834 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   90804:	e0bffd17 	ldw	r2,-12(fp)
   90808:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   9080c:	e03ff915 	stw	zero,-28(fp)
             break;
   90810:	00000906 	br	90838 <OSQDel+0x2e0>
   90814:	e0bff717 	ldw	r2,-36(fp)
   90818:	e0bff215 	stw	r2,-56(fp)
   9081c:	e0bff217 	ldw	r2,-56(fp)
   90820:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   90824:	e0fffd17 	ldw	r3,-12(fp)
   90828:	008001c4 	movi	r2,7
   9082c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   90830:	e0bffb17 	ldw	r2,-20(fp)
   90834:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   90838:	e0bff917 	ldw	r2,-28(fp)
   9083c:	e0bfff15 	stw	r2,-4(fp)
   90840:	e0bfff17 	ldw	r2,-4(fp)
}
   90844:	e037883a 	mov	sp,fp
   90848:	dfc00117 	ldw	ra,4(sp)
   9084c:	df000017 	ldw	fp,0(sp)
   90850:	dec00204 	addi	sp,sp,8
   90854:	f800283a 	ret

00090858 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   90858:	defff904 	addi	sp,sp,-28
   9085c:	df000615 	stw	fp,24(sp)
   90860:	df000604 	addi	fp,sp,24
   90864:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90868:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9086c:	e0bffe17 	ldw	r2,-8(fp)
   90870:	1004c03a 	cmpne	r2,r2,zero
   90874:	1000031e 	bne	r2,zero,90884 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   90878:	00800104 	movi	r2,4
   9087c:	e0bfff15 	stw	r2,-4(fp)
   90880:	00002206 	br	9090c <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   90884:	e0bffe17 	ldw	r2,-8(fp)
   90888:	10800003 	ldbu	r2,0(r2)
   9088c:	10803fcc 	andi	r2,r2,255
   90890:	108000a0 	cmpeqi	r2,r2,2
   90894:	1000031e 	bne	r2,zero,908a4 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   90898:	00800044 	movi	r2,1
   9089c:	e0bfff15 	stw	r2,-4(fp)
   908a0:	00001a06 	br	9090c <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   908a4:	0005303a 	rdctl	r2,status
   908a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   908ac:	e0fffb17 	ldw	r3,-20(fp)
   908b0:	00bfff84 	movi	r2,-2
   908b4:	1884703a 	and	r2,r3,r2
   908b8:	1001703a 	wrctl	status,r2
  
  return context;
   908bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   908c0:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   908c4:	e0bffe17 	ldw	r2,-8(fp)
   908c8:	10800117 	ldw	r2,4(r2)
   908cc:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   908d0:	e0bffd17 	ldw	r2,-12(fp)
   908d4:	10c00117 	ldw	r3,4(r2)
   908d8:	e0bffd17 	ldw	r2,-12(fp)
   908dc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   908e0:	e0bffd17 	ldw	r2,-12(fp)
   908e4:	10c00117 	ldw	r3,4(r2)
   908e8:	e0bffd17 	ldw	r2,-12(fp)
   908ec:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   908f0:	e0bffd17 	ldw	r2,-12(fp)
   908f4:	1000058d 	sth	zero,22(r2)
   908f8:	e0bffc17 	ldw	r2,-16(fp)
   908fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90900:	e0bffa17 	ldw	r2,-24(fp)
   90904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   90908:	e03fff15 	stw	zero,-4(fp)
   9090c:	e0bfff17 	ldw	r2,-4(fp)
}
   90910:	e037883a 	mov	sp,fp
   90914:	df000017 	ldw	fp,0(sp)
   90918:	dec00104 	addi	sp,sp,4
   9091c:	f800283a 	ret

00090920 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   90920:	defff104 	addi	sp,sp,-60
   90924:	dfc00e15 	stw	ra,56(sp)
   90928:	df000d15 	stw	fp,52(sp)
   9092c:	df000d04 	addi	fp,sp,52
   90930:	e13ffb15 	stw	r4,-20(fp)
   90934:	e1bffd15 	stw	r6,-12(fp)
   90938:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9093c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   90940:	e0bffd17 	ldw	r2,-12(fp)
   90944:	1004c03a 	cmpne	r2,r2,zero
   90948:	1000021e 	bne	r2,zero,90954 <OSQPend+0x34>
        return ((void *)0);
   9094c:	e03fff15 	stw	zero,-4(fp)
   90950:	0000b506 	br	90c28 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   90954:	e0bffb17 	ldw	r2,-20(fp)
   90958:	1004c03a 	cmpne	r2,r2,zero
   9095c:	1000051e 	bne	r2,zero,90974 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   90960:	e0fffd17 	ldw	r3,-12(fp)
   90964:	00800104 	movi	r2,4
   90968:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   9096c:	e03fff15 	stw	zero,-4(fp)
   90970:	0000ad06 	br	90c28 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   90974:	e0bffb17 	ldw	r2,-20(fp)
   90978:	10800003 	ldbu	r2,0(r2)
   9097c:	10803fcc 	andi	r2,r2,255
   90980:	108000a0 	cmpeqi	r2,r2,2
   90984:	1000051e 	bne	r2,zero,9099c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   90988:	e0fffd17 	ldw	r3,-12(fp)
   9098c:	00800044 	movi	r2,1
   90990:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   90994:	e03fff15 	stw	zero,-4(fp)
   90998:	0000a306 	br	90c28 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   9099c:	008002b4 	movhi	r2,10
   909a0:	10acaf04 	addi	r2,r2,-19780
   909a4:	10800003 	ldbu	r2,0(r2)
   909a8:	10803fcc 	andi	r2,r2,255
   909ac:	1005003a 	cmpeq	r2,r2,zero
   909b0:	1000051e 	bne	r2,zero,909c8 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   909b4:	e0fffd17 	ldw	r3,-12(fp)
   909b8:	00800084 	movi	r2,2
   909bc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   909c0:	e03fff15 	stw	zero,-4(fp)
   909c4:	00009806 	br	90c28 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   909c8:	008002b4 	movhi	r2,10
   909cc:	10aca104 	addi	r2,r2,-19836
   909d0:	10800003 	ldbu	r2,0(r2)
   909d4:	10803fcc 	andi	r2,r2,255
   909d8:	1005003a 	cmpeq	r2,r2,zero
   909dc:	1000051e 	bne	r2,zero,909f4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   909e0:	e0fffd17 	ldw	r3,-12(fp)
   909e4:	00800344 	movi	r2,13
   909e8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   909ec:	e03fff15 	stw	zero,-4(fp)
   909f0:	00008d06 	br	90c28 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   909f4:	0005303a 	rdctl	r2,status
   909f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   909fc:	e0fff717 	ldw	r3,-36(fp)
   90a00:	00bfff84 	movi	r2,-2
   90a04:	1884703a 	and	r2,r3,r2
   90a08:	1001703a 	wrctl	status,r2
  
  return context;
   90a0c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   90a10:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   90a14:	e0bffb17 	ldw	r2,-20(fp)
   90a18:	10800117 	ldw	r2,4(r2)
   90a1c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   90a20:	e0bff917 	ldw	r2,-28(fp)
   90a24:	1080058b 	ldhu	r2,22(r2)
   90a28:	10bfffcc 	andi	r2,r2,65535
   90a2c:	1005003a 	cmpeq	r2,r2,zero
   90a30:	10001f1e 	bne	r2,zero,90ab0 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   90a34:	e0bff917 	ldw	r2,-28(fp)
   90a38:	10c00417 	ldw	r3,16(r2)
   90a3c:	18800017 	ldw	r2,0(r3)
   90a40:	e0bffa15 	stw	r2,-24(fp)
   90a44:	18c00104 	addi	r3,r3,4
   90a48:	e0bff917 	ldw	r2,-28(fp)
   90a4c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   90a50:	e0bff917 	ldw	r2,-28(fp)
   90a54:	1080058b 	ldhu	r2,22(r2)
   90a58:	10bfffc4 	addi	r2,r2,-1
   90a5c:	1007883a 	mov	r3,r2
   90a60:	e0bff917 	ldw	r2,-28(fp)
   90a64:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   90a68:	e0bff917 	ldw	r2,-28(fp)
   90a6c:	10c00417 	ldw	r3,16(r2)
   90a70:	e0bff917 	ldw	r2,-28(fp)
   90a74:	10800217 	ldw	r2,8(r2)
   90a78:	1880041e 	bne	r3,r2,90a8c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   90a7c:	e0bff917 	ldw	r2,-28(fp)
   90a80:	10c00117 	ldw	r3,4(r2)
   90a84:	e0bff917 	ldw	r2,-28(fp)
   90a88:	10c00415 	stw	r3,16(r2)
   90a8c:	e0bff817 	ldw	r2,-32(fp)
   90a90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90a94:	e0bff617 	ldw	r2,-40(fp)
   90a98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   90a9c:	e0bffd17 	ldw	r2,-12(fp)
   90aa0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   90aa4:	e0bffa17 	ldw	r2,-24(fp)
   90aa8:	e0bfff15 	stw	r2,-4(fp)
   90aac:	00005e06 	br	90c28 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   90ab0:	008002b4 	movhi	r2,10
   90ab4:	10acb004 	addi	r2,r2,-19776
   90ab8:	10c00017 	ldw	r3,0(r2)
   90abc:	008002b4 	movhi	r2,10
   90ac0:	10acb004 	addi	r2,r2,-19776
   90ac4:	10800017 	ldw	r2,0(r2)
   90ac8:	10800c03 	ldbu	r2,48(r2)
   90acc:	10800114 	ori	r2,r2,4
   90ad0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   90ad4:	008002b4 	movhi	r2,10
   90ad8:	10acb004 	addi	r2,r2,-19776
   90adc:	10800017 	ldw	r2,0(r2)
   90ae0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   90ae4:	008002b4 	movhi	r2,10
   90ae8:	10acb004 	addi	r2,r2,-19776
   90aec:	10c00017 	ldw	r3,0(r2)
   90af0:	e0bffc0b 	ldhu	r2,-16(fp)
   90af4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   90af8:	e13ffb17 	ldw	r4,-20(fp)
   90afc:	008cf880 	call	8cf88 <OS_EventTaskWait>
   90b00:	e0bff817 	ldw	r2,-32(fp)
   90b04:	e0bff515 	stw	r2,-44(fp)
   90b08:	e0bff517 	ldw	r2,-44(fp)
   90b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   90b10:	008d8340 	call	8d834 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90b14:	0005303a 	rdctl	r2,status
   90b18:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90b1c:	e0fff417 	ldw	r3,-48(fp)
   90b20:	00bfff84 	movi	r2,-2
   90b24:	1884703a 	and	r2,r3,r2
   90b28:	1001703a 	wrctl	status,r2
  
  return context;
   90b2c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   90b30:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   90b34:	008002b4 	movhi	r2,10
   90b38:	10acb004 	addi	r2,r2,-19776
   90b3c:	10800017 	ldw	r2,0(r2)
   90b40:	10800c43 	ldbu	r2,49(r2)
   90b44:	10803fcc 	andi	r2,r2,255
   90b48:	e0bffe15 	stw	r2,-8(fp)
   90b4c:	e0fffe17 	ldw	r3,-8(fp)
   90b50:	1805003a 	cmpeq	r2,r3,zero
   90b54:	1000041e 	bne	r2,zero,90b68 <OSQPend+0x248>
   90b58:	e0fffe17 	ldw	r3,-8(fp)
   90b5c:	188000a0 	cmpeqi	r2,r3,2
   90b60:	1000091e 	bne	r2,zero,90b88 <OSQPend+0x268>
   90b64:	00000d06 	br	90b9c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   90b68:	008002b4 	movhi	r2,10
   90b6c:	10acb004 	addi	r2,r2,-19776
   90b70:	10800017 	ldw	r2,0(r2)
   90b74:	10800917 	ldw	r2,36(r2)
   90b78:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   90b7c:	e0bffd17 	ldw	r2,-12(fp)
   90b80:	10000005 	stb	zero,0(r2)
             break;
   90b84:	00000e06 	br	90bc0 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   90b88:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   90b8c:	e0fffd17 	ldw	r3,-12(fp)
   90b90:	00800384 	movi	r2,14
   90b94:	18800005 	stb	r2,0(r3)
             break;
   90b98:	00000906 	br	90bc0 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   90b9c:	008002b4 	movhi	r2,10
   90ba0:	10acb004 	addi	r2,r2,-19776
   90ba4:	11000017 	ldw	r4,0(r2)
   90ba8:	e17ffb17 	ldw	r5,-20(fp)
   90bac:	008d1ec0 	call	8d1ec <OS_EventTaskRemove>
             pmsg = (void *)0;
   90bb0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   90bb4:	e0fffd17 	ldw	r3,-12(fp)
   90bb8:	00800284 	movi	r2,10
   90bbc:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   90bc0:	008002b4 	movhi	r2,10
   90bc4:	10acb004 	addi	r2,r2,-19776
   90bc8:	10800017 	ldw	r2,0(r2)
   90bcc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   90bd0:	008002b4 	movhi	r2,10
   90bd4:	10acb004 	addi	r2,r2,-19776
   90bd8:	10800017 	ldw	r2,0(r2)
   90bdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   90be0:	008002b4 	movhi	r2,10
   90be4:	10acb004 	addi	r2,r2,-19776
   90be8:	10800017 	ldw	r2,0(r2)
   90bec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   90bf0:	008002b4 	movhi	r2,10
   90bf4:	10acb004 	addi	r2,r2,-19776
   90bf8:	10800017 	ldw	r2,0(r2)
   90bfc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   90c00:	008002b4 	movhi	r2,10
   90c04:	10acb004 	addi	r2,r2,-19776
   90c08:	10800017 	ldw	r2,0(r2)
   90c0c:	10000915 	stw	zero,36(r2)
   90c10:	e0bff817 	ldw	r2,-32(fp)
   90c14:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c18:	e0bff317 	ldw	r2,-52(fp)
   90c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   90c20:	e0bffa17 	ldw	r2,-24(fp)
   90c24:	e0bfff15 	stw	r2,-4(fp)
   90c28:	e0bfff17 	ldw	r2,-4(fp)
}
   90c2c:	e037883a 	mov	sp,fp
   90c30:	dfc00117 	ldw	ra,4(sp)
   90c34:	df000017 	ldw	fp,0(sp)
   90c38:	dec00204 	addi	sp,sp,8
   90c3c:	f800283a 	ret

00090c40 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   90c40:	defff504 	addi	sp,sp,-44
   90c44:	dfc00a15 	stw	ra,40(sp)
   90c48:	df000915 	stw	fp,36(sp)
   90c4c:	df000904 	addi	fp,sp,36
   90c50:	e13ffc15 	stw	r4,-16(fp)
   90c54:	e1bffe15 	stw	r6,-8(fp)
   90c58:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   90c5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   90c60:	e0bffe17 	ldw	r2,-8(fp)
   90c64:	1004c03a 	cmpne	r2,r2,zero
   90c68:	1000021e 	bne	r2,zero,90c74 <OSQPendAbort+0x34>
        return (0);
   90c6c:	e03fff15 	stw	zero,-4(fp)
   90c70:	00004c06 	br	90da4 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   90c74:	e0bffc17 	ldw	r2,-16(fp)
   90c78:	1004c03a 	cmpne	r2,r2,zero
   90c7c:	1000051e 	bne	r2,zero,90c94 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   90c80:	e0fffe17 	ldw	r3,-8(fp)
   90c84:	00800104 	movi	r2,4
   90c88:	18800005 	stb	r2,0(r3)
        return (0);
   90c8c:	e03fff15 	stw	zero,-4(fp)
   90c90:	00004406 	br	90da4 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   90c94:	e0bffc17 	ldw	r2,-16(fp)
   90c98:	10800003 	ldbu	r2,0(r2)
   90c9c:	10803fcc 	andi	r2,r2,255
   90ca0:	108000a0 	cmpeqi	r2,r2,2
   90ca4:	1000051e 	bne	r2,zero,90cbc <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   90ca8:	e0fffe17 	ldw	r3,-8(fp)
   90cac:	00800044 	movi	r2,1
   90cb0:	18800005 	stb	r2,0(r3)
        return (0);
   90cb4:	e03fff15 	stw	zero,-4(fp)
   90cb8:	00003a06 	br	90da4 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90cbc:	0005303a 	rdctl	r2,status
   90cc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90cc4:	e0fff917 	ldw	r3,-28(fp)
   90cc8:	00bfff84 	movi	r2,-2
   90ccc:	1884703a 	and	r2,r3,r2
   90cd0:	1001703a 	wrctl	status,r2
  
  return context;
   90cd4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   90cd8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   90cdc:	e0bffc17 	ldw	r2,-16(fp)
   90ce0:	10800283 	ldbu	r2,10(r2)
   90ce4:	10803fcc 	andi	r2,r2,255
   90ce8:	1005003a 	cmpeq	r2,r2,zero
   90cec:	1000261e 	bne	r2,zero,90d88 <OSQPendAbort+0x148>
        nbr_tasks = 0;
   90cf0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   90cf4:	e0bffd03 	ldbu	r2,-12(fp)
   90cf8:	10800060 	cmpeqi	r2,r2,1
   90cfc:	1000091e 	bne	r2,zero,90d24 <OSQPendAbort+0xe4>
   90d00:	00000e06 	br	90d3c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   90d04:	e13ffc17 	ldw	r4,-16(fp)
   90d08:	000b883a 	mov	r5,zero
   90d0c:	01800104 	movi	r6,4
   90d10:	01c00084 	movi	r7,2
   90d14:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                     nbr_tasks++;
   90d18:	e0bffb03 	ldbu	r2,-20(fp)
   90d1c:	10800044 	addi	r2,r2,1
   90d20:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   90d24:	e0bffc17 	ldw	r2,-16(fp)
   90d28:	10800283 	ldbu	r2,10(r2)
   90d2c:	10803fcc 	andi	r2,r2,255
   90d30:	1004c03a 	cmpne	r2,r2,zero
   90d34:	103ff31e 	bne	r2,zero,90d04 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   90d38:	00000806 	br	90d5c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   90d3c:	e13ffc17 	ldw	r4,-16(fp)
   90d40:	000b883a 	mov	r5,zero
   90d44:	01800104 	movi	r6,4
   90d48:	01c00084 	movi	r7,2
   90d4c:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                 nbr_tasks++;
   90d50:	e0bffb03 	ldbu	r2,-20(fp)
   90d54:	10800044 	addi	r2,r2,1
   90d58:	e0bffb05 	stb	r2,-20(fp)
   90d5c:	e0bffa17 	ldw	r2,-24(fp)
   90d60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90d64:	e0bff817 	ldw	r2,-32(fp)
   90d68:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   90d6c:	008d8340 	call	8d834 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   90d70:	e0fffe17 	ldw	r3,-8(fp)
   90d74:	00800384 	movi	r2,14
   90d78:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   90d7c:	e0bffb03 	ldbu	r2,-20(fp)
   90d80:	e0bfff15 	stw	r2,-4(fp)
   90d84:	00000706 	br	90da4 <OSQPendAbort+0x164>
   90d88:	e0bffa17 	ldw	r2,-24(fp)
   90d8c:	e0bff715 	stw	r2,-36(fp)
   90d90:	e0bff717 	ldw	r2,-36(fp)
   90d94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   90d98:	e0bffe17 	ldw	r2,-8(fp)
   90d9c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   90da0:	e03fff15 	stw	zero,-4(fp)
   90da4:	e0bfff17 	ldw	r2,-4(fp)
}
   90da8:	e037883a 	mov	sp,fp
   90dac:	dfc00117 	ldw	ra,4(sp)
   90db0:	df000017 	ldw	fp,0(sp)
   90db4:	dec00204 	addi	sp,sp,8
   90db8:	f800283a 	ret

00090dbc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   90dbc:	defff504 	addi	sp,sp,-44
   90dc0:	dfc00a15 	stw	ra,40(sp)
   90dc4:	df000915 	stw	fp,36(sp)
   90dc8:	df000904 	addi	fp,sp,36
   90dcc:	e13ffd15 	stw	r4,-12(fp)
   90dd0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   90dd4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   90dd8:	e0bffd17 	ldw	r2,-12(fp)
   90ddc:	1004c03a 	cmpne	r2,r2,zero
   90de0:	1000031e 	bne	r2,zero,90df0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   90de4:	00800104 	movi	r2,4
   90de8:	e0bfff15 	stw	r2,-4(fp)
   90dec:	00004d06 	br	90f24 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   90df0:	e0bffd17 	ldw	r2,-12(fp)
   90df4:	10800003 	ldbu	r2,0(r2)
   90df8:	10803fcc 	andi	r2,r2,255
   90dfc:	108000a0 	cmpeqi	r2,r2,2
   90e00:	1000031e 	bne	r2,zero,90e10 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   90e04:	00800044 	movi	r2,1
   90e08:	e0bfff15 	stw	r2,-4(fp)
   90e0c:	00004506 	br	90f24 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90e10:	0005303a 	rdctl	r2,status
   90e14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90e18:	e0fffa17 	ldw	r3,-24(fp)
   90e1c:	00bfff84 	movi	r2,-2
   90e20:	1884703a 	and	r2,r3,r2
   90e24:	1001703a 	wrctl	status,r2
  
  return context;
   90e28:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   90e2c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   90e30:	e0bffd17 	ldw	r2,-12(fp)
   90e34:	10800283 	ldbu	r2,10(r2)
   90e38:	10803fcc 	andi	r2,r2,255
   90e3c:	1005003a 	cmpeq	r2,r2,zero
   90e40:	10000c1e 	bne	r2,zero,90e74 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   90e44:	e13ffd17 	ldw	r4,-12(fp)
   90e48:	e17ffe17 	ldw	r5,-8(fp)
   90e4c:	01800104 	movi	r6,4
   90e50:	000f883a 	mov	r7,zero
   90e54:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
   90e58:	e0bffb17 	ldw	r2,-20(fp)
   90e5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e60:	e0bff917 	ldw	r2,-28(fp)
   90e64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   90e68:	008d8340 	call	8d834 <OS_Sched>
        return (OS_ERR_NONE);
   90e6c:	e03fff15 	stw	zero,-4(fp)
   90e70:	00002c06 	br	90f24 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   90e74:	e0bffd17 	ldw	r2,-12(fp)
   90e78:	10800117 	ldw	r2,4(r2)
   90e7c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   90e80:	e0bffc17 	ldw	r2,-16(fp)
   90e84:	10c0058b 	ldhu	r3,22(r2)
   90e88:	e0bffc17 	ldw	r2,-16(fp)
   90e8c:	1080050b 	ldhu	r2,20(r2)
   90e90:	18ffffcc 	andi	r3,r3,65535
   90e94:	10bfffcc 	andi	r2,r2,65535
   90e98:	18800736 	bltu	r3,r2,90eb8 <OSQPost+0xfc>
   90e9c:	e0bffb17 	ldw	r2,-20(fp)
   90ea0:	e0bff815 	stw	r2,-32(fp)
   90ea4:	e0bff817 	ldw	r2,-32(fp)
   90ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   90eac:	00800784 	movi	r2,30
   90eb0:	e0bfff15 	stw	r2,-4(fp)
   90eb4:	00001b06 	br	90f24 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   90eb8:	e0bffc17 	ldw	r2,-16(fp)
   90ebc:	10c00317 	ldw	r3,12(r2)
   90ec0:	e0bffe17 	ldw	r2,-8(fp)
   90ec4:	18800015 	stw	r2,0(r3)
   90ec8:	18c00104 	addi	r3,r3,4
   90ecc:	e0bffc17 	ldw	r2,-16(fp)
   90ed0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   90ed4:	e0bffc17 	ldw	r2,-16(fp)
   90ed8:	1080058b 	ldhu	r2,22(r2)
   90edc:	10800044 	addi	r2,r2,1
   90ee0:	1007883a 	mov	r3,r2
   90ee4:	e0bffc17 	ldw	r2,-16(fp)
   90ee8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   90eec:	e0bffc17 	ldw	r2,-16(fp)
   90ef0:	10c00317 	ldw	r3,12(r2)
   90ef4:	e0bffc17 	ldw	r2,-16(fp)
   90ef8:	10800217 	ldw	r2,8(r2)
   90efc:	1880041e 	bne	r3,r2,90f10 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   90f00:	e0bffc17 	ldw	r2,-16(fp)
   90f04:	10c00117 	ldw	r3,4(r2)
   90f08:	e0bffc17 	ldw	r2,-16(fp)
   90f0c:	10c00315 	stw	r3,12(r2)
   90f10:	e0bffb17 	ldw	r2,-20(fp)
   90f14:	e0bff715 	stw	r2,-36(fp)
   90f18:	e0bff717 	ldw	r2,-36(fp)
   90f1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   90f20:	e03fff15 	stw	zero,-4(fp)
   90f24:	e0bfff17 	ldw	r2,-4(fp)
}
   90f28:	e037883a 	mov	sp,fp
   90f2c:	dfc00117 	ldw	ra,4(sp)
   90f30:	df000017 	ldw	fp,0(sp)
   90f34:	dec00204 	addi	sp,sp,8
   90f38:	f800283a 	ret

00090f3c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   90f3c:	defff504 	addi	sp,sp,-44
   90f40:	dfc00a15 	stw	ra,40(sp)
   90f44:	df000915 	stw	fp,36(sp)
   90f48:	df000904 	addi	fp,sp,36
   90f4c:	e13ffd15 	stw	r4,-12(fp)
   90f50:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   90f54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   90f58:	e0bffd17 	ldw	r2,-12(fp)
   90f5c:	1004c03a 	cmpne	r2,r2,zero
   90f60:	1000031e 	bne	r2,zero,90f70 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   90f64:	00800104 	movi	r2,4
   90f68:	e0bfff15 	stw	r2,-4(fp)
   90f6c:	00004f06 	br	910ac <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   90f70:	e0bffd17 	ldw	r2,-12(fp)
   90f74:	10800003 	ldbu	r2,0(r2)
   90f78:	10803fcc 	andi	r2,r2,255
   90f7c:	108000a0 	cmpeqi	r2,r2,2
   90f80:	1000031e 	bne	r2,zero,90f90 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   90f84:	00800044 	movi	r2,1
   90f88:	e0bfff15 	stw	r2,-4(fp)
   90f8c:	00004706 	br	910ac <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90f90:	0005303a 	rdctl	r2,status
   90f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90f98:	e0fffa17 	ldw	r3,-24(fp)
   90f9c:	00bfff84 	movi	r2,-2
   90fa0:	1884703a 	and	r2,r3,r2
   90fa4:	1001703a 	wrctl	status,r2
  
  return context;
   90fa8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   90fac:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   90fb0:	e0bffd17 	ldw	r2,-12(fp)
   90fb4:	10800283 	ldbu	r2,10(r2)
   90fb8:	10803fcc 	andi	r2,r2,255
   90fbc:	1005003a 	cmpeq	r2,r2,zero
   90fc0:	10000c1e 	bne	r2,zero,90ff4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   90fc4:	e13ffd17 	ldw	r4,-12(fp)
   90fc8:	e17ffe17 	ldw	r5,-8(fp)
   90fcc:	01800104 	movi	r6,4
   90fd0:	000f883a 	mov	r7,zero
   90fd4:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
   90fd8:	e0bffb17 	ldw	r2,-20(fp)
   90fdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90fe0:	e0bff917 	ldw	r2,-28(fp)
   90fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   90fe8:	008d8340 	call	8d834 <OS_Sched>
        return (OS_ERR_NONE);
   90fec:	e03fff15 	stw	zero,-4(fp)
   90ff0:	00002e06 	br	910ac <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   90ff4:	e0bffd17 	ldw	r2,-12(fp)
   90ff8:	10800117 	ldw	r2,4(r2)
   90ffc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   91000:	e0bffc17 	ldw	r2,-16(fp)
   91004:	10c0058b 	ldhu	r3,22(r2)
   91008:	e0bffc17 	ldw	r2,-16(fp)
   9100c:	1080050b 	ldhu	r2,20(r2)
   91010:	18ffffcc 	andi	r3,r3,65535
   91014:	10bfffcc 	andi	r2,r2,65535
   91018:	18800736 	bltu	r3,r2,91038 <OSQPostFront+0xfc>
   9101c:	e0bffb17 	ldw	r2,-20(fp)
   91020:	e0bff815 	stw	r2,-32(fp)
   91024:	e0bff817 	ldw	r2,-32(fp)
   91028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   9102c:	00800784 	movi	r2,30
   91030:	e0bfff15 	stw	r2,-4(fp)
   91034:	00001d06 	br	910ac <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   91038:	e0bffc17 	ldw	r2,-16(fp)
   9103c:	10c00417 	ldw	r3,16(r2)
   91040:	e0bffc17 	ldw	r2,-16(fp)
   91044:	10800117 	ldw	r2,4(r2)
   91048:	1880041e 	bne	r3,r2,9105c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   9104c:	e0bffc17 	ldw	r2,-16(fp)
   91050:	10c00217 	ldw	r3,8(r2)
   91054:	e0bffc17 	ldw	r2,-16(fp)
   91058:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   9105c:	e0bffc17 	ldw	r2,-16(fp)
   91060:	10800417 	ldw	r2,16(r2)
   91064:	10ffff04 	addi	r3,r2,-4
   91068:	e0bffc17 	ldw	r2,-16(fp)
   9106c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   91070:	e0bffc17 	ldw	r2,-16(fp)
   91074:	10c00417 	ldw	r3,16(r2)
   91078:	e0bffe17 	ldw	r2,-8(fp)
   9107c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   91080:	e0bffc17 	ldw	r2,-16(fp)
   91084:	1080058b 	ldhu	r2,22(r2)
   91088:	10800044 	addi	r2,r2,1
   9108c:	1007883a 	mov	r3,r2
   91090:	e0bffc17 	ldw	r2,-16(fp)
   91094:	10c0058d 	sth	r3,22(r2)
   91098:	e0bffb17 	ldw	r2,-20(fp)
   9109c:	e0bff715 	stw	r2,-36(fp)
   910a0:	e0bff717 	ldw	r2,-36(fp)
   910a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   910a8:	e03fff15 	stw	zero,-4(fp)
   910ac:	e0bfff17 	ldw	r2,-4(fp)
}
   910b0:	e037883a 	mov	sp,fp
   910b4:	dfc00117 	ldw	ra,4(sp)
   910b8:	df000017 	ldw	fp,0(sp)
   910bc:	dec00204 	addi	sp,sp,8
   910c0:	f800283a 	ret

000910c4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   910c4:	defff404 	addi	sp,sp,-48
   910c8:	dfc00b15 	stw	ra,44(sp)
   910cc:	df000a15 	stw	fp,40(sp)
   910d0:	df000a04 	addi	fp,sp,40
   910d4:	e13ffc15 	stw	r4,-16(fp)
   910d8:	e17ffd15 	stw	r5,-12(fp)
   910dc:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   910e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   910e4:	e0bffc17 	ldw	r2,-16(fp)
   910e8:	1004c03a 	cmpne	r2,r2,zero
   910ec:	1000031e 	bne	r2,zero,910fc <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   910f0:	00800104 	movi	r2,4
   910f4:	e0bfff15 	stw	r2,-4(fp)
   910f8:	00007906 	br	912e0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   910fc:	e0bffc17 	ldw	r2,-16(fp)
   91100:	10800003 	ldbu	r2,0(r2)
   91104:	10803fcc 	andi	r2,r2,255
   91108:	108000a0 	cmpeqi	r2,r2,2
   9110c:	1000031e 	bne	r2,zero,9111c <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   91110:	00800044 	movi	r2,1
   91114:	e0bfff15 	stw	r2,-4(fp)
   91118:	00007106 	br	912e0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9111c:	0005303a 	rdctl	r2,status
   91120:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91124:	e0fff917 	ldw	r3,-28(fp)
   91128:	00bfff84 	movi	r2,-2
   9112c:	1884703a 	and	r2,r3,r2
   91130:	1001703a 	wrctl	status,r2
  
  return context;
   91134:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91138:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   9113c:	e0bffc17 	ldw	r2,-16(fp)
   91140:	10800283 	ldbu	r2,10(r2)
   91144:	10803fcc 	andi	r2,r2,255
   91148:	1005003a 	cmpeq	r2,r2,zero
   9114c:	1000211e 	bne	r2,zero,911d4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   91150:	e0bffe03 	ldbu	r2,-8(fp)
   91154:	1080004c 	andi	r2,r2,1
   91158:	10803fcc 	andi	r2,r2,255
   9115c:	1005003a 	cmpeq	r2,r2,zero
   91160:	10000c1e 	bne	r2,zero,91194 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   91164:	00000506 	br	9117c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   91168:	e13ffc17 	ldw	r4,-16(fp)
   9116c:	e17ffd17 	ldw	r5,-12(fp)
   91170:	01800104 	movi	r6,4
   91174:	000f883a 	mov	r7,zero
   91178:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   9117c:	e0bffc17 	ldw	r2,-16(fp)
   91180:	10800283 	ldbu	r2,10(r2)
   91184:	10803fcc 	andi	r2,r2,255
   91188:	1004c03a 	cmpne	r2,r2,zero
   9118c:	103ff61e 	bne	r2,zero,91168 <OSQPostOpt+0xa4>
   91190:	00000506 	br	911a8 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   91194:	e13ffc17 	ldw	r4,-16(fp)
   91198:	e17ffd17 	ldw	r5,-12(fp)
   9119c:	01800104 	movi	r6,4
   911a0:	000f883a 	mov	r7,zero
   911a4:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
   911a8:	e0bffa17 	ldw	r2,-24(fp)
   911ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   911b0:	e0bff817 	ldw	r2,-32(fp)
   911b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   911b8:	e0bffe03 	ldbu	r2,-8(fp)
   911bc:	1080010c 	andi	r2,r2,4
   911c0:	1004c03a 	cmpne	r2,r2,zero
   911c4:	1000011e 	bne	r2,zero,911cc <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   911c8:	008d8340 	call	8d834 <OS_Sched>
        }
        return (OS_ERR_NONE);
   911cc:	e03fff15 	stw	zero,-4(fp)
   911d0:	00004306 	br	912e0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   911d4:	e0bffc17 	ldw	r2,-16(fp)
   911d8:	10800117 	ldw	r2,4(r2)
   911dc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   911e0:	e0bffb17 	ldw	r2,-20(fp)
   911e4:	10c0058b 	ldhu	r3,22(r2)
   911e8:	e0bffb17 	ldw	r2,-20(fp)
   911ec:	1080050b 	ldhu	r2,20(r2)
   911f0:	18ffffcc 	andi	r3,r3,65535
   911f4:	10bfffcc 	andi	r2,r2,65535
   911f8:	18800736 	bltu	r3,r2,91218 <OSQPostOpt+0x154>
   911fc:	e0bffa17 	ldw	r2,-24(fp)
   91200:	e0bff715 	stw	r2,-36(fp)
   91204:	e0bff717 	ldw	r2,-36(fp)
   91208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   9120c:	00800784 	movi	r2,30
   91210:	e0bfff15 	stw	r2,-4(fp)
   91214:	00003206 	br	912e0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   91218:	e0bffe03 	ldbu	r2,-8(fp)
   9121c:	1080008c 	andi	r2,r2,2
   91220:	1005003a 	cmpeq	r2,r2,zero
   91224:	1000131e 	bne	r2,zero,91274 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   91228:	e0bffb17 	ldw	r2,-20(fp)
   9122c:	10c00417 	ldw	r3,16(r2)
   91230:	e0bffb17 	ldw	r2,-20(fp)
   91234:	10800117 	ldw	r2,4(r2)
   91238:	1880041e 	bne	r3,r2,9124c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   9123c:	e0bffb17 	ldw	r2,-20(fp)
   91240:	10c00217 	ldw	r3,8(r2)
   91244:	e0bffb17 	ldw	r2,-20(fp)
   91248:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   9124c:	e0bffb17 	ldw	r2,-20(fp)
   91250:	10800417 	ldw	r2,16(r2)
   91254:	10ffff04 	addi	r3,r2,-4
   91258:	e0bffb17 	ldw	r2,-20(fp)
   9125c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   91260:	e0bffb17 	ldw	r2,-20(fp)
   91264:	10c00417 	ldw	r3,16(r2)
   91268:	e0bffd17 	ldw	r2,-12(fp)
   9126c:	18800015 	stw	r2,0(r3)
   91270:	00001006 	br	912b4 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   91274:	e0bffb17 	ldw	r2,-20(fp)
   91278:	10c00317 	ldw	r3,12(r2)
   9127c:	e0bffd17 	ldw	r2,-12(fp)
   91280:	18800015 	stw	r2,0(r3)
   91284:	18c00104 	addi	r3,r3,4
   91288:	e0bffb17 	ldw	r2,-20(fp)
   9128c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   91290:	e0bffb17 	ldw	r2,-20(fp)
   91294:	10c00317 	ldw	r3,12(r2)
   91298:	e0bffb17 	ldw	r2,-20(fp)
   9129c:	10800217 	ldw	r2,8(r2)
   912a0:	1880041e 	bne	r3,r2,912b4 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   912a4:	e0bffb17 	ldw	r2,-20(fp)
   912a8:	10c00117 	ldw	r3,4(r2)
   912ac:	e0bffb17 	ldw	r2,-20(fp)
   912b0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   912b4:	e0bffb17 	ldw	r2,-20(fp)
   912b8:	1080058b 	ldhu	r2,22(r2)
   912bc:	10800044 	addi	r2,r2,1
   912c0:	1007883a 	mov	r3,r2
   912c4:	e0bffb17 	ldw	r2,-20(fp)
   912c8:	10c0058d 	sth	r3,22(r2)
   912cc:	e0bffa17 	ldw	r2,-24(fp)
   912d0:	e0bff615 	stw	r2,-40(fp)
   912d4:	e0bff617 	ldw	r2,-40(fp)
   912d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   912dc:	e03fff15 	stw	zero,-4(fp)
   912e0:	e0bfff17 	ldw	r2,-4(fp)
}
   912e4:	e037883a 	mov	sp,fp
   912e8:	dfc00117 	ldw	ra,4(sp)
   912ec:	df000017 	ldw	fp,0(sp)
   912f0:	dec00204 	addi	sp,sp,8
   912f4:	f800283a 	ret

000912f8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   912f8:	defff504 	addi	sp,sp,-44
   912fc:	df000a15 	stw	fp,40(sp)
   91300:	df000a04 	addi	fp,sp,40
   91304:	e13ffd15 	stw	r4,-12(fp)
   91308:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   9130c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   91310:	e0bffd17 	ldw	r2,-12(fp)
   91314:	1004c03a 	cmpne	r2,r2,zero
   91318:	1000031e 	bne	r2,zero,91328 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   9131c:	00800104 	movi	r2,4
   91320:	e0bfff15 	stw	r2,-4(fp)
   91324:	00004f06 	br	91464 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   91328:	e0bffe17 	ldw	r2,-8(fp)
   9132c:	1004c03a 	cmpne	r2,r2,zero
   91330:	1000031e 	bne	r2,zero,91340 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   91334:	00800244 	movi	r2,9
   91338:	e0bfff15 	stw	r2,-4(fp)
   9133c:	00004906 	br	91464 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   91340:	e0bffd17 	ldw	r2,-12(fp)
   91344:	10800003 	ldbu	r2,0(r2)
   91348:	10803fcc 	andi	r2,r2,255
   9134c:	108000a0 	cmpeqi	r2,r2,2
   91350:	1000031e 	bne	r2,zero,91360 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   91354:	00800044 	movi	r2,1
   91358:	e0bfff15 	stw	r2,-4(fp)
   9135c:	00004106 	br	91464 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91360:	0005303a 	rdctl	r2,status
   91364:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91368:	e0fff717 	ldw	r3,-36(fp)
   9136c:	00bfff84 	movi	r2,-2
   91370:	1884703a 	and	r2,r3,r2
   91374:	1001703a 	wrctl	status,r2
  
  return context;
   91378:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   9137c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   91380:	e0bffd17 	ldw	r2,-12(fp)
   91384:	10c00283 	ldbu	r3,10(r2)
   91388:	e0bffe17 	ldw	r2,-8(fp)
   9138c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   91390:	e0bffd17 	ldw	r2,-12(fp)
   91394:	108002c4 	addi	r2,r2,11
   91398:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   9139c:	e0bffe17 	ldw	r2,-8(fp)
   913a0:	10800204 	addi	r2,r2,8
   913a4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   913a8:	e03ffb05 	stb	zero,-20(fp)
   913ac:	00000d06 	br	913e4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   913b0:	e0bffa17 	ldw	r2,-24(fp)
   913b4:	10c00003 	ldbu	r3,0(r2)
   913b8:	e0bff917 	ldw	r2,-28(fp)
   913bc:	10c00005 	stb	r3,0(r2)
   913c0:	e0bff917 	ldw	r2,-28(fp)
   913c4:	10800044 	addi	r2,r2,1
   913c8:	e0bff915 	stw	r2,-28(fp)
   913cc:	e0bffa17 	ldw	r2,-24(fp)
   913d0:	10800044 	addi	r2,r2,1
   913d4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   913d8:	e0bffb03 	ldbu	r2,-20(fp)
   913dc:	10800044 	addi	r2,r2,1
   913e0:	e0bffb05 	stb	r2,-20(fp)
   913e4:	e0bffb03 	ldbu	r2,-20(fp)
   913e8:	108000f0 	cmpltui	r2,r2,3
   913ec:	103ff01e 	bne	r2,zero,913b0 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   913f0:	e0bffd17 	ldw	r2,-12(fp)
   913f4:	10800117 	ldw	r2,4(r2)
   913f8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   913fc:	e0bffc17 	ldw	r2,-16(fp)
   91400:	1080058b 	ldhu	r2,22(r2)
   91404:	10bfffcc 	andi	r2,r2,65535
   91408:	1005003a 	cmpeq	r2,r2,zero
   9140c:	1000061e 	bne	r2,zero,91428 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   91410:	e0bffc17 	ldw	r2,-16(fp)
   91414:	10800417 	ldw	r2,16(r2)
   91418:	10c00017 	ldw	r3,0(r2)
   9141c:	e0bffe17 	ldw	r2,-8(fp)
   91420:	10c00015 	stw	r3,0(r2)
   91424:	00000206 	br	91430 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   91428:	e0bffe17 	ldw	r2,-8(fp)
   9142c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   91430:	e0bffc17 	ldw	r2,-16(fp)
   91434:	10c0058b 	ldhu	r3,22(r2)
   91438:	e0bffe17 	ldw	r2,-8(fp)
   9143c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   91440:	e0bffc17 	ldw	r2,-16(fp)
   91444:	10c0050b 	ldhu	r3,20(r2)
   91448:	e0bffe17 	ldw	r2,-8(fp)
   9144c:	10c0018d 	sth	r3,6(r2)
   91450:	e0bff817 	ldw	r2,-32(fp)
   91454:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91458:	e0bff617 	ldw	r2,-40(fp)
   9145c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   91460:	e03fff15 	stw	zero,-4(fp)
   91464:	e0bfff17 	ldw	r2,-4(fp)
}
   91468:	e037883a 	mov	sp,fp
   9146c:	df000017 	ldw	fp,0(sp)
   91470:	dec00104 	addi	sp,sp,4
   91474:	f800283a 	ret

00091478 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   91478:	defffb04 	addi	sp,sp,-20
   9147c:	dfc00415 	stw	ra,16(sp)
   91480:	df000315 	stw	fp,12(sp)
   91484:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   91488:	010002f4 	movhi	r4,11
   9148c:	21233404 	addi	r4,r4,-29488
   91490:	01407804 	movi	r5,480
   91494:	008d7740 	call	8d774 <OS_MemClr>
    pq1 = &OSQTbl[0];
   91498:	008002f4 	movhi	r2,11
   9149c:	10a33404 	addi	r2,r2,-29488
   914a0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   914a4:	008002f4 	movhi	r2,11
   914a8:	10a33a04 	addi	r2,r2,-29464
   914ac:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   914b0:	e03fff0d 	sth	zero,-4(fp)
   914b4:	00000c06 	br	914e8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   914b8:	e0fffe17 	ldw	r3,-8(fp)
   914bc:	e0bffd17 	ldw	r2,-12(fp)
   914c0:	18800015 	stw	r2,0(r3)
        pq1++;
   914c4:	e0bffe17 	ldw	r2,-8(fp)
   914c8:	10800604 	addi	r2,r2,24
   914cc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   914d0:	e0bffd17 	ldw	r2,-12(fp)
   914d4:	10800604 	addi	r2,r2,24
   914d8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   914dc:	e0bfff0b 	ldhu	r2,-4(fp)
   914e0:	10800044 	addi	r2,r2,1
   914e4:	e0bfff0d 	sth	r2,-4(fp)
   914e8:	e0bfff0b 	ldhu	r2,-4(fp)
   914ec:	108004f0 	cmpltui	r2,r2,19
   914f0:	103ff11e 	bne	r2,zero,914b8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   914f4:	e0bffe17 	ldw	r2,-8(fp)
   914f8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   914fc:	00c002b4 	movhi	r3,10
   91500:	18ecac04 	addi	r3,r3,-19792
   91504:	008002f4 	movhi	r2,11
   91508:	10a33404 	addi	r2,r2,-29488
   9150c:	18800015 	stw	r2,0(r3)
#endif
}
   91510:	e037883a 	mov	sp,fp
   91514:	dfc00117 	ldw	ra,4(sp)
   91518:	df000017 	ldw	fp,0(sp)
   9151c:	dec00204 	addi	sp,sp,8
   91520:	f800283a 	ret

00091524 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   91524:	defff904 	addi	sp,sp,-28
   91528:	df000615 	stw	fp,24(sp)
   9152c:	df000604 	addi	fp,sp,24
   91530:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   91534:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   91538:	e0bffe17 	ldw	r2,-8(fp)
   9153c:	1004c03a 	cmpne	r2,r2,zero
   91540:	1000021e 	bne	r2,zero,9154c <OSSemAccept+0x28>
        return (0);
   91544:	e03fff15 	stw	zero,-4(fp)
   91548:	00002106 	br	915d0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9154c:	e0bffe17 	ldw	r2,-8(fp)
   91550:	10800003 	ldbu	r2,0(r2)
   91554:	10803fcc 	andi	r2,r2,255
   91558:	108000e0 	cmpeqi	r2,r2,3
   9155c:	1000021e 	bne	r2,zero,91568 <OSSemAccept+0x44>
        return (0);
   91560:	e03fff15 	stw	zero,-4(fp)
   91564:	00001a06 	br	915d0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91568:	0005303a 	rdctl	r2,status
   9156c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91570:	e0fffb17 	ldw	r3,-20(fp)
   91574:	00bfff84 	movi	r2,-2
   91578:	1884703a 	and	r2,r3,r2
   9157c:	1001703a 	wrctl	status,r2
  
  return context;
   91580:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   91584:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   91588:	e0bffe17 	ldw	r2,-8(fp)
   9158c:	1080020b 	ldhu	r2,8(r2)
   91590:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   91594:	e0bffd0b 	ldhu	r2,-12(fp)
   91598:	1005003a 	cmpeq	r2,r2,zero
   9159c:	1000061e 	bne	r2,zero,915b8 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   915a0:	e0bffe17 	ldw	r2,-8(fp)
   915a4:	1080020b 	ldhu	r2,8(r2)
   915a8:	10bfffc4 	addi	r2,r2,-1
   915ac:	1007883a 	mov	r3,r2
   915b0:	e0bffe17 	ldw	r2,-8(fp)
   915b4:	10c0020d 	sth	r3,8(r2)
   915b8:	e0bffc17 	ldw	r2,-16(fp)
   915bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   915c0:	e0bffa17 	ldw	r2,-24(fp)
   915c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   915c8:	e0bffd0b 	ldhu	r2,-12(fp)
   915cc:	e0bfff15 	stw	r2,-4(fp)
   915d0:	e0bfff17 	ldw	r2,-4(fp)
}
   915d4:	e037883a 	mov	sp,fp
   915d8:	df000017 	ldw	fp,0(sp)
   915dc:	dec00104 	addi	sp,sp,4
   915e0:	f800283a 	ret

000915e4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   915e4:	defff804 	addi	sp,sp,-32
   915e8:	dfc00715 	stw	ra,28(sp)
   915ec:	df000615 	stw	fp,24(sp)
   915f0:	df000604 	addi	fp,sp,24
   915f4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   915f8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   915fc:	008002b4 	movhi	r2,10
   91600:	10acaf04 	addi	r2,r2,-19780
   91604:	10800003 	ldbu	r2,0(r2)
   91608:	10803fcc 	andi	r2,r2,255
   9160c:	1005003a 	cmpeq	r2,r2,zero
   91610:	1000021e 	bne	r2,zero,9161c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   91614:	e03fff15 	stw	zero,-4(fp)
   91618:	00003106 	br	916e0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9161c:	0005303a 	rdctl	r2,status
   91620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91624:	e0fffb17 	ldw	r3,-20(fp)
   91628:	00bfff84 	movi	r2,-2
   9162c:	1884703a 	and	r2,r3,r2
   91630:	1001703a 	wrctl	status,r2
  
  return context;
   91634:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   91638:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   9163c:	008002b4 	movhi	r2,10
   91640:	10acae04 	addi	r2,r2,-19784
   91644:	10800017 	ldw	r2,0(r2)
   91648:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   9164c:	008002b4 	movhi	r2,10
   91650:	10acae04 	addi	r2,r2,-19784
   91654:	10800017 	ldw	r2,0(r2)
   91658:	1005003a 	cmpeq	r2,r2,zero
   9165c:	1000081e 	bne	r2,zero,91680 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   91660:	008002b4 	movhi	r2,10
   91664:	10acae04 	addi	r2,r2,-19784
   91668:	10800017 	ldw	r2,0(r2)
   9166c:	10800117 	ldw	r2,4(r2)
   91670:	1007883a 	mov	r3,r2
   91674:	008002b4 	movhi	r2,10
   91678:	10acae04 	addi	r2,r2,-19784
   9167c:	10c00015 	stw	r3,0(r2)
   91680:	e0bffc17 	ldw	r2,-16(fp)
   91684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91688:	e0bffa17 	ldw	r2,-24(fp)
   9168c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   91690:	e0bffd17 	ldw	r2,-12(fp)
   91694:	1005003a 	cmpeq	r2,r2,zero
   91698:	10000f1e 	bne	r2,zero,916d8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   9169c:	e0fffd17 	ldw	r3,-12(fp)
   916a0:	008000c4 	movi	r2,3
   916a4:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   916a8:	e0fffd17 	ldw	r3,-12(fp)
   916ac:	e0bffe0b 	ldhu	r2,-8(fp)
   916b0:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   916b4:	e0bffd17 	ldw	r2,-12(fp)
   916b8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   916bc:	e0fffd17 	ldw	r3,-12(fp)
   916c0:	00800fc4 	movi	r2,63
   916c4:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   916c8:	e0bffd17 	ldw	r2,-12(fp)
   916cc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   916d0:	e13ffd17 	ldw	r4,-12(fp)
   916d4:	008d3a80 	call	8d3a8 <OS_EventWaitListInit>
    }
    return (pevent);
   916d8:	e0bffd17 	ldw	r2,-12(fp)
   916dc:	e0bfff15 	stw	r2,-4(fp)
   916e0:	e0bfff17 	ldw	r2,-4(fp)
}
   916e4:	e037883a 	mov	sp,fp
   916e8:	dfc00117 	ldw	ra,4(sp)
   916ec:	df000017 	ldw	fp,0(sp)
   916f0:	dec00204 	addi	sp,sp,8
   916f4:	f800283a 	ret

000916f8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   916f8:	defff104 	addi	sp,sp,-60
   916fc:	dfc00e15 	stw	ra,56(sp)
   91700:	df000d15 	stw	fp,52(sp)
   91704:	df000d04 	addi	fp,sp,52
   91708:	e13ffb15 	stw	r4,-20(fp)
   9170c:	e1bffd15 	stw	r6,-12(fp)
   91710:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   91714:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   91718:	e0bffd17 	ldw	r2,-12(fp)
   9171c:	1004c03a 	cmpne	r2,r2,zero
   91720:	1000031e 	bne	r2,zero,91730 <OSSemDel+0x38>
        return (pevent);
   91724:	e0bffb17 	ldw	r2,-20(fp)
   91728:	e0bfff15 	stw	r2,-4(fp)
   9172c:	00009406 	br	91980 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   91730:	e0bffb17 	ldw	r2,-20(fp)
   91734:	1004c03a 	cmpne	r2,r2,zero
   91738:	1000061e 	bne	r2,zero,91754 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   9173c:	e0fffd17 	ldw	r3,-12(fp)
   91740:	00800104 	movi	r2,4
   91744:	18800005 	stb	r2,0(r3)
        return (pevent);
   91748:	e0fffb17 	ldw	r3,-20(fp)
   9174c:	e0ffff15 	stw	r3,-4(fp)
   91750:	00008b06 	br	91980 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   91754:	e0bffb17 	ldw	r2,-20(fp)
   91758:	10800003 	ldbu	r2,0(r2)
   9175c:	10803fcc 	andi	r2,r2,255
   91760:	108000e0 	cmpeqi	r2,r2,3
   91764:	1000061e 	bne	r2,zero,91780 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   91768:	e0fffd17 	ldw	r3,-12(fp)
   9176c:	00800044 	movi	r2,1
   91770:	18800005 	stb	r2,0(r3)
        return (pevent);
   91774:	e0bffb17 	ldw	r2,-20(fp)
   91778:	e0bfff15 	stw	r2,-4(fp)
   9177c:	00008006 	br	91980 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   91780:	008002b4 	movhi	r2,10
   91784:	10acaf04 	addi	r2,r2,-19780
   91788:	10800003 	ldbu	r2,0(r2)
   9178c:	10803fcc 	andi	r2,r2,255
   91790:	1005003a 	cmpeq	r2,r2,zero
   91794:	1000061e 	bne	r2,zero,917b0 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   91798:	e0fffd17 	ldw	r3,-12(fp)
   9179c:	008003c4 	movi	r2,15
   917a0:	18800005 	stb	r2,0(r3)
        return (pevent);
   917a4:	e0fffb17 	ldw	r3,-20(fp)
   917a8:	e0ffff15 	stw	r3,-4(fp)
   917ac:	00007406 	br	91980 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   917b0:	0005303a 	rdctl	r2,status
   917b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   917b8:	e0fff717 	ldw	r3,-36(fp)
   917bc:	00bfff84 	movi	r2,-2
   917c0:	1884703a 	and	r2,r3,r2
   917c4:	1001703a 	wrctl	status,r2
  
  return context;
   917c8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   917cc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   917d0:	e0bffb17 	ldw	r2,-20(fp)
   917d4:	10800283 	ldbu	r2,10(r2)
   917d8:	10803fcc 	andi	r2,r2,255
   917dc:	1005003a 	cmpeq	r2,r2,zero
   917e0:	1000031e 	bne	r2,zero,917f0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   917e4:	00800044 	movi	r2,1
   917e8:	e0bffa05 	stb	r2,-24(fp)
   917ec:	00000106 	br	917f4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   917f0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   917f4:	e0bffc03 	ldbu	r2,-16(fp)
   917f8:	e0bffe15 	stw	r2,-8(fp)
   917fc:	e0fffe17 	ldw	r3,-8(fp)
   91800:	1805003a 	cmpeq	r2,r3,zero
   91804:	1000041e 	bne	r2,zero,91818 <OSSemDel+0x120>
   91808:	e0fffe17 	ldw	r3,-8(fp)
   9180c:	18800060 	cmpeqi	r2,r3,1
   91810:	10002d1e 	bne	r2,zero,918c8 <OSSemDel+0x1d0>
   91814:	00004f06 	br	91954 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   91818:	e0bffa03 	ldbu	r2,-24(fp)
   9181c:	1004c03a 	cmpne	r2,r2,zero
   91820:	10001a1e 	bne	r2,zero,9188c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   91824:	e0fffb17 	ldw	r3,-20(fp)
   91828:	00800fc4 	movi	r2,63
   9182c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   91830:	e0bffb17 	ldw	r2,-20(fp)
   91834:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   91838:	e0bffb17 	ldw	r2,-20(fp)
   9183c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   91840:	008002b4 	movhi	r2,10
   91844:	10acae04 	addi	r2,r2,-19784
   91848:	10c00017 	ldw	r3,0(r2)
   9184c:	e0bffb17 	ldw	r2,-20(fp)
   91850:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   91854:	e0bffb17 	ldw	r2,-20(fp)
   91858:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   9185c:	00c002b4 	movhi	r3,10
   91860:	18ecae04 	addi	r3,r3,-19784
   91864:	e0bffb17 	ldw	r2,-20(fp)
   91868:	18800015 	stw	r2,0(r3)
   9186c:	e0bff817 	ldw	r2,-32(fp)
   91870:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91874:	e0bff617 	ldw	r2,-40(fp)
   91878:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   9187c:	e0bffd17 	ldw	r2,-12(fp)
   91880:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   91884:	e03ff915 	stw	zero,-28(fp)
   91888:	00003b06 	br	91978 <OSSemDel+0x280>
   9188c:	e0bff817 	ldw	r2,-32(fp)
   91890:	e0bff515 	stw	r2,-44(fp)
   91894:	e0bff517 	ldw	r2,-44(fp)
   91898:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   9189c:	e0fffd17 	ldw	r3,-12(fp)
   918a0:	00801244 	movi	r2,73
   918a4:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   918a8:	e0bffb17 	ldw	r2,-20(fp)
   918ac:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   918b0:	00003106 	br	91978 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   918b4:	e13ffb17 	ldw	r4,-20(fp)
   918b8:	000b883a 	mov	r5,zero
   918bc:	01800044 	movi	r6,1
   918c0:	000f883a 	mov	r7,zero
   918c4:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   918c8:	e0bffb17 	ldw	r2,-20(fp)
   918cc:	10800283 	ldbu	r2,10(r2)
   918d0:	10803fcc 	andi	r2,r2,255
   918d4:	1004c03a 	cmpne	r2,r2,zero
   918d8:	103ff61e 	bne	r2,zero,918b4 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   918dc:	e0fffb17 	ldw	r3,-20(fp)
   918e0:	00800fc4 	movi	r2,63
   918e4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   918e8:	e0bffb17 	ldw	r2,-20(fp)
   918ec:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   918f0:	e0bffb17 	ldw	r2,-20(fp)
   918f4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   918f8:	008002b4 	movhi	r2,10
   918fc:	10acae04 	addi	r2,r2,-19784
   91900:	10c00017 	ldw	r3,0(r2)
   91904:	e0bffb17 	ldw	r2,-20(fp)
   91908:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   9190c:	e0bffb17 	ldw	r2,-20(fp)
   91910:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   91914:	00c002b4 	movhi	r3,10
   91918:	18ecae04 	addi	r3,r3,-19784
   9191c:	e0bffb17 	ldw	r2,-20(fp)
   91920:	18800015 	stw	r2,0(r3)
   91924:	e0bff817 	ldw	r2,-32(fp)
   91928:	e0bff415 	stw	r2,-48(fp)
   9192c:	e0bff417 	ldw	r2,-48(fp)
   91930:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   91934:	e0bffa03 	ldbu	r2,-24(fp)
   91938:	10800058 	cmpnei	r2,r2,1
   9193c:	1000011e 	bne	r2,zero,91944 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   91940:	008d8340 	call	8d834 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   91944:	e0bffd17 	ldw	r2,-12(fp)
   91948:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   9194c:	e03ff915 	stw	zero,-28(fp)
             break;
   91950:	00000906 	br	91978 <OSSemDel+0x280>
   91954:	e0bff817 	ldw	r2,-32(fp)
   91958:	e0bff315 	stw	r2,-52(fp)
   9195c:	e0bff317 	ldw	r2,-52(fp)
   91960:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   91964:	e0fffd17 	ldw	r3,-12(fp)
   91968:	008001c4 	movi	r2,7
   9196c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   91970:	e0bffb17 	ldw	r2,-20(fp)
   91974:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   91978:	e0bff917 	ldw	r2,-28(fp)
   9197c:	e0bfff15 	stw	r2,-4(fp)
   91980:	e0bfff17 	ldw	r2,-4(fp)
}
   91984:	e037883a 	mov	sp,fp
   91988:	dfc00117 	ldw	ra,4(sp)
   9198c:	df000017 	ldw	fp,0(sp)
   91990:	dec00204 	addi	sp,sp,8
   91994:	f800283a 	ret

00091998 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   91998:	defff404 	addi	sp,sp,-48
   9199c:	dfc00b15 	stw	ra,44(sp)
   919a0:	df000a15 	stw	fp,40(sp)
   919a4:	df000a04 	addi	fp,sp,40
   919a8:	e13ffc15 	stw	r4,-16(fp)
   919ac:	e1bffe15 	stw	r6,-8(fp)
   919b0:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   919b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   919b8:	e0bffe17 	ldw	r2,-8(fp)
   919bc:	1005003a 	cmpeq	r2,r2,zero
   919c0:	10008f1e 	bne	r2,zero,91c00 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   919c4:	e0bffc17 	ldw	r2,-16(fp)
   919c8:	1004c03a 	cmpne	r2,r2,zero
   919cc:	1000041e 	bne	r2,zero,919e0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   919d0:	e0fffe17 	ldw	r3,-8(fp)
   919d4:	00800104 	movi	r2,4
   919d8:	18800005 	stb	r2,0(r3)
        return;
   919dc:	00008806 	br	91c00 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   919e0:	e0bffc17 	ldw	r2,-16(fp)
   919e4:	10800003 	ldbu	r2,0(r2)
   919e8:	10803fcc 	andi	r2,r2,255
   919ec:	108000e0 	cmpeqi	r2,r2,3
   919f0:	1000041e 	bne	r2,zero,91a04 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   919f4:	e0fffe17 	ldw	r3,-8(fp)
   919f8:	00800044 	movi	r2,1
   919fc:	18800005 	stb	r2,0(r3)
        return;
   91a00:	00007f06 	br	91c00 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   91a04:	008002b4 	movhi	r2,10
   91a08:	10acaf04 	addi	r2,r2,-19780
   91a0c:	10800003 	ldbu	r2,0(r2)
   91a10:	10803fcc 	andi	r2,r2,255
   91a14:	1005003a 	cmpeq	r2,r2,zero
   91a18:	1000041e 	bne	r2,zero,91a2c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   91a1c:	e0fffe17 	ldw	r3,-8(fp)
   91a20:	00800084 	movi	r2,2
   91a24:	18800005 	stb	r2,0(r3)
        return;
   91a28:	00007506 	br	91c00 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   91a2c:	008002b4 	movhi	r2,10
   91a30:	10aca104 	addi	r2,r2,-19836
   91a34:	10800003 	ldbu	r2,0(r2)
   91a38:	10803fcc 	andi	r2,r2,255
   91a3c:	1005003a 	cmpeq	r2,r2,zero
   91a40:	1000041e 	bne	r2,zero,91a54 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   91a44:	e0fffe17 	ldw	r3,-8(fp)
   91a48:	00800344 	movi	r2,13
   91a4c:	18800005 	stb	r2,0(r3)
        return;
   91a50:	00006b06 	br	91c00 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91a54:	0005303a 	rdctl	r2,status
   91a58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91a5c:	e0fffa17 	ldw	r3,-24(fp)
   91a60:	00bfff84 	movi	r2,-2
   91a64:	1884703a 	and	r2,r3,r2
   91a68:	1001703a 	wrctl	status,r2
  
  return context;
   91a6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   91a70:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   91a74:	e0bffc17 	ldw	r2,-16(fp)
   91a78:	1080020b 	ldhu	r2,8(r2)
   91a7c:	10bfffcc 	andi	r2,r2,65535
   91a80:	1005003a 	cmpeq	r2,r2,zero
   91a84:	10000d1e 	bne	r2,zero,91abc <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   91a88:	e0bffc17 	ldw	r2,-16(fp)
   91a8c:	1080020b 	ldhu	r2,8(r2)
   91a90:	10bfffc4 	addi	r2,r2,-1
   91a94:	1007883a 	mov	r3,r2
   91a98:	e0bffc17 	ldw	r2,-16(fp)
   91a9c:	10c0020d 	sth	r3,8(r2)
   91aa0:	e0bffb17 	ldw	r2,-20(fp)
   91aa4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91aa8:	e0bff917 	ldw	r2,-28(fp)
   91aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   91ab0:	e0bffe17 	ldw	r2,-8(fp)
   91ab4:	10000005 	stb	zero,0(r2)
        return;
   91ab8:	00005106 	br	91c00 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   91abc:	008002b4 	movhi	r2,10
   91ac0:	10acb004 	addi	r2,r2,-19776
   91ac4:	10c00017 	ldw	r3,0(r2)
   91ac8:	008002b4 	movhi	r2,10
   91acc:	10acb004 	addi	r2,r2,-19776
   91ad0:	10800017 	ldw	r2,0(r2)
   91ad4:	10800c03 	ldbu	r2,48(r2)
   91ad8:	10800054 	ori	r2,r2,1
   91adc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   91ae0:	008002b4 	movhi	r2,10
   91ae4:	10acb004 	addi	r2,r2,-19776
   91ae8:	10800017 	ldw	r2,0(r2)
   91aec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   91af0:	008002b4 	movhi	r2,10
   91af4:	10acb004 	addi	r2,r2,-19776
   91af8:	10c00017 	ldw	r3,0(r2)
   91afc:	e0bffd0b 	ldhu	r2,-12(fp)
   91b00:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   91b04:	e13ffc17 	ldw	r4,-16(fp)
   91b08:	008cf880 	call	8cf88 <OS_EventTaskWait>
   91b0c:	e0bffb17 	ldw	r2,-20(fp)
   91b10:	e0bff815 	stw	r2,-32(fp)
   91b14:	e0bff817 	ldw	r2,-32(fp)
   91b18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   91b1c:	008d8340 	call	8d834 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91b20:	0005303a 	rdctl	r2,status
   91b24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91b28:	e0fff717 	ldw	r3,-36(fp)
   91b2c:	00bfff84 	movi	r2,-2
   91b30:	1884703a 	and	r2,r3,r2
   91b34:	1001703a 	wrctl	status,r2
  
  return context;
   91b38:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   91b3c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   91b40:	008002b4 	movhi	r2,10
   91b44:	10acb004 	addi	r2,r2,-19776
   91b48:	10800017 	ldw	r2,0(r2)
   91b4c:	10800c43 	ldbu	r2,49(r2)
   91b50:	10803fcc 	andi	r2,r2,255
   91b54:	e0bfff15 	stw	r2,-4(fp)
   91b58:	e0ffff17 	ldw	r3,-4(fp)
   91b5c:	1805003a 	cmpeq	r2,r3,zero
   91b60:	1000041e 	bne	r2,zero,91b74 <OSSemPend+0x1dc>
   91b64:	e0ffff17 	ldw	r3,-4(fp)
   91b68:	188000a0 	cmpeqi	r2,r3,2
   91b6c:	1000041e 	bne	r2,zero,91b80 <OSSemPend+0x1e8>
   91b70:	00000706 	br	91b90 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   91b74:	e0bffe17 	ldw	r2,-8(fp)
   91b78:	10000005 	stb	zero,0(r2)
             break;
   91b7c:	00000c06 	br	91bb0 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   91b80:	e0fffe17 	ldw	r3,-8(fp)
   91b84:	00800384 	movi	r2,14
   91b88:	18800005 	stb	r2,0(r3)
             break;
   91b8c:	00000806 	br	91bb0 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   91b90:	008002b4 	movhi	r2,10
   91b94:	10acb004 	addi	r2,r2,-19776
   91b98:	11000017 	ldw	r4,0(r2)
   91b9c:	e17ffc17 	ldw	r5,-16(fp)
   91ba0:	008d1ec0 	call	8d1ec <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   91ba4:	e0fffe17 	ldw	r3,-8(fp)
   91ba8:	00800284 	movi	r2,10
   91bac:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   91bb0:	008002b4 	movhi	r2,10
   91bb4:	10acb004 	addi	r2,r2,-19776
   91bb8:	10800017 	ldw	r2,0(r2)
   91bbc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   91bc0:	008002b4 	movhi	r2,10
   91bc4:	10acb004 	addi	r2,r2,-19776
   91bc8:	10800017 	ldw	r2,0(r2)
   91bcc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   91bd0:	008002b4 	movhi	r2,10
   91bd4:	10acb004 	addi	r2,r2,-19776
   91bd8:	10800017 	ldw	r2,0(r2)
   91bdc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   91be0:	008002b4 	movhi	r2,10
   91be4:	10acb004 	addi	r2,r2,-19776
   91be8:	10800017 	ldw	r2,0(r2)
   91bec:	10000815 	stw	zero,32(r2)
   91bf0:	e0bffb17 	ldw	r2,-20(fp)
   91bf4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91bf8:	e0bff617 	ldw	r2,-40(fp)
   91bfc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   91c00:	e037883a 	mov	sp,fp
   91c04:	dfc00117 	ldw	ra,4(sp)
   91c08:	df000017 	ldw	fp,0(sp)
   91c0c:	dec00204 	addi	sp,sp,8
   91c10:	f800283a 	ret

00091c14 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   91c14:	defff504 	addi	sp,sp,-44
   91c18:	dfc00a15 	stw	ra,40(sp)
   91c1c:	df000915 	stw	fp,36(sp)
   91c20:	df000904 	addi	fp,sp,36
   91c24:	e13ffc15 	stw	r4,-16(fp)
   91c28:	e1bffe15 	stw	r6,-8(fp)
   91c2c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   91c30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   91c34:	e0bffe17 	ldw	r2,-8(fp)
   91c38:	1004c03a 	cmpne	r2,r2,zero
   91c3c:	1000021e 	bne	r2,zero,91c48 <OSSemPendAbort+0x34>
        return (0);
   91c40:	e03fff15 	stw	zero,-4(fp)
   91c44:	00004c06 	br	91d78 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   91c48:	e0bffc17 	ldw	r2,-16(fp)
   91c4c:	1004c03a 	cmpne	r2,r2,zero
   91c50:	1000051e 	bne	r2,zero,91c68 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   91c54:	e0fffe17 	ldw	r3,-8(fp)
   91c58:	00800104 	movi	r2,4
   91c5c:	18800005 	stb	r2,0(r3)
        return (0);
   91c60:	e03fff15 	stw	zero,-4(fp)
   91c64:	00004406 	br	91d78 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   91c68:	e0bffc17 	ldw	r2,-16(fp)
   91c6c:	10800003 	ldbu	r2,0(r2)
   91c70:	10803fcc 	andi	r2,r2,255
   91c74:	108000e0 	cmpeqi	r2,r2,3
   91c78:	1000051e 	bne	r2,zero,91c90 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   91c7c:	e0fffe17 	ldw	r3,-8(fp)
   91c80:	00800044 	movi	r2,1
   91c84:	18800005 	stb	r2,0(r3)
        return (0);
   91c88:	e03fff15 	stw	zero,-4(fp)
   91c8c:	00003a06 	br	91d78 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91c90:	0005303a 	rdctl	r2,status
   91c94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91c98:	e0fff917 	ldw	r3,-28(fp)
   91c9c:	00bfff84 	movi	r2,-2
   91ca0:	1884703a 	and	r2,r3,r2
   91ca4:	1001703a 	wrctl	status,r2
  
  return context;
   91ca8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91cac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   91cb0:	e0bffc17 	ldw	r2,-16(fp)
   91cb4:	10800283 	ldbu	r2,10(r2)
   91cb8:	10803fcc 	andi	r2,r2,255
   91cbc:	1005003a 	cmpeq	r2,r2,zero
   91cc0:	1000261e 	bne	r2,zero,91d5c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   91cc4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   91cc8:	e0bffd03 	ldbu	r2,-12(fp)
   91ccc:	10800060 	cmpeqi	r2,r2,1
   91cd0:	1000091e 	bne	r2,zero,91cf8 <OSSemPendAbort+0xe4>
   91cd4:	00000e06 	br	91d10 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   91cd8:	e13ffc17 	ldw	r4,-16(fp)
   91cdc:	000b883a 	mov	r5,zero
   91ce0:	01800044 	movi	r6,1
   91ce4:	01c00084 	movi	r7,2
   91ce8:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                     nbr_tasks++;
   91cec:	e0bffb03 	ldbu	r2,-20(fp)
   91cf0:	10800044 	addi	r2,r2,1
   91cf4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   91cf8:	e0bffc17 	ldw	r2,-16(fp)
   91cfc:	10800283 	ldbu	r2,10(r2)
   91d00:	10803fcc 	andi	r2,r2,255
   91d04:	1004c03a 	cmpne	r2,r2,zero
   91d08:	103ff31e 	bne	r2,zero,91cd8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   91d0c:	00000806 	br	91d30 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   91d10:	e13ffc17 	ldw	r4,-16(fp)
   91d14:	000b883a 	mov	r5,zero
   91d18:	01800044 	movi	r6,1
   91d1c:	01c00084 	movi	r7,2
   91d20:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
                 nbr_tasks++;
   91d24:	e0bffb03 	ldbu	r2,-20(fp)
   91d28:	10800044 	addi	r2,r2,1
   91d2c:	e0bffb05 	stb	r2,-20(fp)
   91d30:	e0bffa17 	ldw	r2,-24(fp)
   91d34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91d38:	e0bff817 	ldw	r2,-32(fp)
   91d3c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   91d40:	008d8340 	call	8d834 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   91d44:	e0fffe17 	ldw	r3,-8(fp)
   91d48:	00800384 	movi	r2,14
   91d4c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   91d50:	e0bffb03 	ldbu	r2,-20(fp)
   91d54:	e0bfff15 	stw	r2,-4(fp)
   91d58:	00000706 	br	91d78 <OSSemPendAbort+0x164>
   91d5c:	e0bffa17 	ldw	r2,-24(fp)
   91d60:	e0bff715 	stw	r2,-36(fp)
   91d64:	e0bff717 	ldw	r2,-36(fp)
   91d68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91d6c:	e0bffe17 	ldw	r2,-8(fp)
   91d70:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   91d74:	e03fff15 	stw	zero,-4(fp)
   91d78:	e0bfff17 	ldw	r2,-4(fp)
}
   91d7c:	e037883a 	mov	sp,fp
   91d80:	dfc00117 	ldw	ra,4(sp)
   91d84:	df000017 	ldw	fp,0(sp)
   91d88:	dec00204 	addi	sp,sp,8
   91d8c:	f800283a 	ret

00091d90 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   91d90:	defff704 	addi	sp,sp,-36
   91d94:	dfc00815 	stw	ra,32(sp)
   91d98:	df000715 	stw	fp,28(sp)
   91d9c:	df000704 	addi	fp,sp,28
   91da0:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   91da4:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   91da8:	e0bffe17 	ldw	r2,-8(fp)
   91dac:	1004c03a 	cmpne	r2,r2,zero
   91db0:	1000031e 	bne	r2,zero,91dc0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   91db4:	00800104 	movi	r2,4
   91db8:	e0bfff15 	stw	r2,-4(fp)
   91dbc:	00003806 	br	91ea0 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   91dc0:	e0bffe17 	ldw	r2,-8(fp)
   91dc4:	10800003 	ldbu	r2,0(r2)
   91dc8:	10803fcc 	andi	r2,r2,255
   91dcc:	108000e0 	cmpeqi	r2,r2,3
   91dd0:	1000031e 	bne	r2,zero,91de0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   91dd4:	00800044 	movi	r2,1
   91dd8:	e0bfff15 	stw	r2,-4(fp)
   91ddc:	00003006 	br	91ea0 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91de0:	0005303a 	rdctl	r2,status
   91de4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91de8:	e0fffc17 	ldw	r3,-16(fp)
   91dec:	00bfff84 	movi	r2,-2
   91df0:	1884703a 	and	r2,r3,r2
   91df4:	1001703a 	wrctl	status,r2
  
  return context;
   91df8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   91dfc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   91e00:	e0bffe17 	ldw	r2,-8(fp)
   91e04:	10800283 	ldbu	r2,10(r2)
   91e08:	10803fcc 	andi	r2,r2,255
   91e0c:	1005003a 	cmpeq	r2,r2,zero
   91e10:	10000c1e 	bne	r2,zero,91e44 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   91e14:	e13ffe17 	ldw	r4,-8(fp)
   91e18:	000b883a 	mov	r5,zero
   91e1c:	01800044 	movi	r6,1
   91e20:	000f883a 	mov	r7,zero
   91e24:	008cdf40 	call	8cdf4 <OS_EventTaskRdy>
   91e28:	e0bffd17 	ldw	r2,-12(fp)
   91e2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91e30:	e0bffb17 	ldw	r2,-20(fp)
   91e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   91e38:	008d8340 	call	8d834 <OS_Sched>
        return (OS_ERR_NONE);
   91e3c:	e03fff15 	stw	zero,-4(fp)
   91e40:	00001706 	br	91ea0 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   91e44:	e0bffe17 	ldw	r2,-8(fp)
   91e48:	1080020b 	ldhu	r2,8(r2)
   91e4c:	10ffffcc 	andi	r3,r2,65535
   91e50:	00bfffd4 	movui	r2,65535
   91e54:	18800c26 	beq	r3,r2,91e88 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   91e58:	e0bffe17 	ldw	r2,-8(fp)
   91e5c:	1080020b 	ldhu	r2,8(r2)
   91e60:	10800044 	addi	r2,r2,1
   91e64:	1007883a 	mov	r3,r2
   91e68:	e0bffe17 	ldw	r2,-8(fp)
   91e6c:	10c0020d 	sth	r3,8(r2)
   91e70:	e0bffd17 	ldw	r2,-12(fp)
   91e74:	e0bffa15 	stw	r2,-24(fp)
   91e78:	e0bffa17 	ldw	r2,-24(fp)
   91e7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   91e80:	e03fff15 	stw	zero,-4(fp)
   91e84:	00000606 	br	91ea0 <OSSemPost+0x110>
   91e88:	e0bffd17 	ldw	r2,-12(fp)
   91e8c:	e0bff915 	stw	r2,-28(fp)
   91e90:	e0bff917 	ldw	r2,-28(fp)
   91e94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   91e98:	00800c84 	movi	r2,50
   91e9c:	e0bfff15 	stw	r2,-4(fp)
   91ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   91ea4:	e037883a 	mov	sp,fp
   91ea8:	dfc00117 	ldw	ra,4(sp)
   91eac:	df000017 	ldw	fp,0(sp)
   91eb0:	dec00204 	addi	sp,sp,8
   91eb4:	f800283a 	ret

00091eb8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   91eb8:	defff604 	addi	sp,sp,-40
   91ebc:	df000915 	stw	fp,36(sp)
   91ec0:	df000904 	addi	fp,sp,36
   91ec4:	e13ffd15 	stw	r4,-12(fp)
   91ec8:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   91ecc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   91ed0:	e0bffd17 	ldw	r2,-12(fp)
   91ed4:	1004c03a 	cmpne	r2,r2,zero
   91ed8:	1000031e 	bne	r2,zero,91ee8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   91edc:	00800104 	movi	r2,4
   91ee0:	e0bfff15 	stw	r2,-4(fp)
   91ee4:	00003b06 	br	91fd4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   91ee8:	e0bffe17 	ldw	r2,-8(fp)
   91eec:	1004c03a 	cmpne	r2,r2,zero
   91ef0:	1000031e 	bne	r2,zero,91f00 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   91ef4:	00800244 	movi	r2,9
   91ef8:	e0bfff15 	stw	r2,-4(fp)
   91efc:	00003506 	br	91fd4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   91f00:	e0bffd17 	ldw	r2,-12(fp)
   91f04:	10800003 	ldbu	r2,0(r2)
   91f08:	10803fcc 	andi	r2,r2,255
   91f0c:	108000e0 	cmpeqi	r2,r2,3
   91f10:	1000031e 	bne	r2,zero,91f20 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   91f14:	00800044 	movi	r2,1
   91f18:	e0bfff15 	stw	r2,-4(fp)
   91f1c:	00002d06 	br	91fd4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91f20:	0005303a 	rdctl	r2,status
   91f24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91f28:	e0fff817 	ldw	r3,-32(fp)
   91f2c:	00bfff84 	movi	r2,-2
   91f30:	1884703a 	and	r2,r3,r2
   91f34:	1001703a 	wrctl	status,r2
  
  return context;
   91f38:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   91f3c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   91f40:	e0bffd17 	ldw	r2,-12(fp)
   91f44:	10c00283 	ldbu	r3,10(r2)
   91f48:	e0bffe17 	ldw	r2,-8(fp)
   91f4c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   91f50:	e0bffd17 	ldw	r2,-12(fp)
   91f54:	108002c4 	addi	r2,r2,11
   91f58:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   91f5c:	e0bffe17 	ldw	r2,-8(fp)
   91f60:	10800084 	addi	r2,r2,2
   91f64:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   91f68:	e03ffa05 	stb	zero,-24(fp)
   91f6c:	00000d06 	br	91fa4 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   91f70:	e0bffc17 	ldw	r2,-16(fp)
   91f74:	10c00003 	ldbu	r3,0(r2)
   91f78:	e0bffb17 	ldw	r2,-20(fp)
   91f7c:	10c00005 	stb	r3,0(r2)
   91f80:	e0bffb17 	ldw	r2,-20(fp)
   91f84:	10800044 	addi	r2,r2,1
   91f88:	e0bffb15 	stw	r2,-20(fp)
   91f8c:	e0bffc17 	ldw	r2,-16(fp)
   91f90:	10800044 	addi	r2,r2,1
   91f94:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   91f98:	e0bffa03 	ldbu	r2,-24(fp)
   91f9c:	10800044 	addi	r2,r2,1
   91fa0:	e0bffa05 	stb	r2,-24(fp)
   91fa4:	e0bffa03 	ldbu	r2,-24(fp)
   91fa8:	108000f0 	cmpltui	r2,r2,3
   91fac:	103ff01e 	bne	r2,zero,91f70 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   91fb0:	e0bffd17 	ldw	r2,-12(fp)
   91fb4:	10c0020b 	ldhu	r3,8(r2)
   91fb8:	e0bffe17 	ldw	r2,-8(fp)
   91fbc:	10c0000d 	sth	r3,0(r2)
   91fc0:	e0bff917 	ldw	r2,-28(fp)
   91fc4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91fc8:	e0bff717 	ldw	r2,-36(fp)
   91fcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   91fd0:	e03fff15 	stw	zero,-4(fp)
   91fd4:	e0bfff17 	ldw	r2,-4(fp)
}
   91fd8:	e037883a 	mov	sp,fp
   91fdc:	df000017 	ldw	fp,0(sp)
   91fe0:	dec00104 	addi	sp,sp,4
   91fe4:	f800283a 	ret

00091fe8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   91fe8:	defff904 	addi	sp,sp,-28
   91fec:	df000615 	stw	fp,24(sp)
   91ff0:	df000604 	addi	fp,sp,24
   91ff4:	e13ffd15 	stw	r4,-12(fp)
   91ff8:	e1bfff15 	stw	r6,-4(fp)
   91ffc:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92000:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   92004:	e0bfff17 	ldw	r2,-4(fp)
   92008:	1005003a 	cmpeq	r2,r2,zero
   9200c:	1000331e 	bne	r2,zero,920dc <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   92010:	e0bffd17 	ldw	r2,-12(fp)
   92014:	1004c03a 	cmpne	r2,r2,zero
   92018:	1000041e 	bne	r2,zero,9202c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   9201c:	e0ffff17 	ldw	r3,-4(fp)
   92020:	00800104 	movi	r2,4
   92024:	18800005 	stb	r2,0(r3)
        return;
   92028:	00002c06 	br	920dc <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9202c:	e0bffd17 	ldw	r2,-12(fp)
   92030:	10800003 	ldbu	r2,0(r2)
   92034:	10803fcc 	andi	r2,r2,255
   92038:	108000e0 	cmpeqi	r2,r2,3
   9203c:	1000041e 	bne	r2,zero,92050 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   92040:	e0ffff17 	ldw	r3,-4(fp)
   92044:	00800044 	movi	r2,1
   92048:	18800005 	stb	r2,0(r3)
        return;
   9204c:	00002306 	br	920dc <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92050:	0005303a 	rdctl	r2,status
   92054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92058:	e0fffb17 	ldw	r3,-20(fp)
   9205c:	00bfff84 	movi	r2,-2
   92060:	1884703a 	and	r2,r3,r2
   92064:	1001703a 	wrctl	status,r2
  
  return context;
   92068:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   9206c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   92070:	e0bfff17 	ldw	r2,-4(fp)
   92074:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   92078:	e0bffd17 	ldw	r2,-12(fp)
   9207c:	1080020b 	ldhu	r2,8(r2)
   92080:	10bfffcc 	andi	r2,r2,65535
   92084:	1005003a 	cmpeq	r2,r2,zero
   92088:	1000041e 	bne	r2,zero,9209c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   9208c:	e0fffd17 	ldw	r3,-12(fp)
   92090:	e0bffe0b 	ldhu	r2,-8(fp)
   92094:	1880020d 	sth	r2,8(r3)
   92098:	00000c06 	br	920cc <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   9209c:	e0bffd17 	ldw	r2,-12(fp)
   920a0:	10800283 	ldbu	r2,10(r2)
   920a4:	10803fcc 	andi	r2,r2,255
   920a8:	1004c03a 	cmpne	r2,r2,zero
   920ac:	1000041e 	bne	r2,zero,920c0 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   920b0:	e0fffd17 	ldw	r3,-12(fp)
   920b4:	e0bffe0b 	ldhu	r2,-8(fp)
   920b8:	1880020d 	sth	r2,8(r3)
   920bc:	00000306 	br	920cc <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   920c0:	e0ffff17 	ldw	r3,-4(fp)
   920c4:	00801244 	movi	r2,73
   920c8:	18800005 	stb	r2,0(r3)
   920cc:	e0bffc17 	ldw	r2,-16(fp)
   920d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   920d4:	e0bffa17 	ldw	r2,-24(fp)
   920d8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   920dc:	e037883a 	mov	sp,fp
   920e0:	df000017 	ldw	fp,0(sp)
   920e4:	dec00104 	addi	sp,sp,4
   920e8:	f800283a 	ret

000920ec <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   920ec:	defff004 	addi	sp,sp,-64
   920f0:	dfc00f15 	stw	ra,60(sp)
   920f4:	df000e15 	stw	fp,56(sp)
   920f8:	df000e04 	addi	fp,sp,56
   920fc:	e13ffd05 	stb	r4,-12(fp)
   92100:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   92104:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   92108:	e0bffd03 	ldbu	r2,-12(fp)
   9210c:	10800530 	cmpltui	r2,r2,20
   92110:	1000061e 	bne	r2,zero,9212c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   92114:	e0bffd03 	ldbu	r2,-12(fp)
   92118:	10803fe0 	cmpeqi	r2,r2,255
   9211c:	1000031e 	bne	r2,zero,9212c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   92120:	00800a84 	movi	r2,42
   92124:	e0bfff15 	stw	r2,-4(fp)
   92128:	00014706 	br	92648 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   9212c:	e0bffe03 	ldbu	r2,-8(fp)
   92130:	10800530 	cmpltui	r2,r2,20
   92134:	1000031e 	bne	r2,zero,92144 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   92138:	00800a84 	movi	r2,42
   9213c:	e0bfff15 	stw	r2,-4(fp)
   92140:	00014106 	br	92648 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92144:	0005303a 	rdctl	r2,status
   92148:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9214c:	e0fff617 	ldw	r3,-40(fp)
   92150:	00bfff84 	movi	r2,-2
   92154:	1884703a 	and	r2,r3,r2
   92158:	1001703a 	wrctl	status,r2
  
  return context;
   9215c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92160:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   92164:	e0bffe03 	ldbu	r2,-8(fp)
   92168:	00c002f4 	movhi	r3,11
   9216c:	18e9c004 	addi	r3,r3,-22784
   92170:	1085883a 	add	r2,r2,r2
   92174:	1085883a 	add	r2,r2,r2
   92178:	10c5883a 	add	r2,r2,r3
   9217c:	10800017 	ldw	r2,0(r2)
   92180:	1005003a 	cmpeq	r2,r2,zero
   92184:	1000071e 	bne	r2,zero,921a4 <OSTaskChangePrio+0xb8>
   92188:	e0bff717 	ldw	r2,-36(fp)
   9218c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92190:	e0bff517 	ldw	r2,-44(fp)
   92194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   92198:	00800a04 	movi	r2,40
   9219c:	e0bfff15 	stw	r2,-4(fp)
   921a0:	00012906 	br	92648 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   921a4:	e0bffd03 	ldbu	r2,-12(fp)
   921a8:	10803fd8 	cmpnei	r2,r2,255
   921ac:	1000051e 	bne	r2,zero,921c4 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   921b0:	008002b4 	movhi	r2,10
   921b4:	10acb004 	addi	r2,r2,-19776
   921b8:	10800017 	ldw	r2,0(r2)
   921bc:	10800c83 	ldbu	r2,50(r2)
   921c0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   921c4:	e0bffd03 	ldbu	r2,-12(fp)
   921c8:	00c002f4 	movhi	r3,11
   921cc:	18e9c004 	addi	r3,r3,-22784
   921d0:	1085883a 	add	r2,r2,r2
   921d4:	1085883a 	add	r2,r2,r2
   921d8:	10c5883a 	add	r2,r2,r3
   921dc:	10800017 	ldw	r2,0(r2)
   921e0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   921e4:	e0bffa17 	ldw	r2,-24(fp)
   921e8:	1004c03a 	cmpne	r2,r2,zero
   921ec:	1000071e 	bne	r2,zero,9220c <OSTaskChangePrio+0x120>
   921f0:	e0bff717 	ldw	r2,-36(fp)
   921f4:	e0bff415 	stw	r2,-48(fp)
   921f8:	e0bff417 	ldw	r2,-48(fp)
   921fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   92200:	00800a44 	movi	r2,41
   92204:	e0bfff15 	stw	r2,-4(fp)
   92208:	00010f06 	br	92648 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   9220c:	e0bffa17 	ldw	r2,-24(fp)
   92210:	10800058 	cmpnei	r2,r2,1
   92214:	1000071e 	bne	r2,zero,92234 <OSTaskChangePrio+0x148>
   92218:	e0bff717 	ldw	r2,-36(fp)
   9221c:	e0bff315 	stw	r2,-52(fp)
   92220:	e0bff317 	ldw	r2,-52(fp)
   92224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   92228:	008010c4 	movi	r2,67
   9222c:	e0bfff15 	stw	r2,-4(fp)
   92230:	00010506 	br	92648 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   92234:	e0bffe03 	ldbu	r2,-8(fp)
   92238:	1004d0fa 	srli	r2,r2,3
   9223c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   92240:	e0bffe03 	ldbu	r2,-8(fp)
   92244:	108001cc 	andi	r2,r2,7
   92248:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   9224c:	e0fff983 	ldbu	r3,-26(fp)
   92250:	00800044 	movi	r2,1
   92254:	10c4983a 	sll	r2,r2,r3
   92258:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   9225c:	e0fff943 	ldbu	r3,-27(fp)
   92260:	00800044 	movi	r2,1
   92264:	10c4983a 	sll	r2,r2,r3
   92268:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   9226c:	e0bffd03 	ldbu	r2,-12(fp)
   92270:	00c002f4 	movhi	r3,11
   92274:	18e9c004 	addi	r3,r3,-22784
   92278:	1085883a 	add	r2,r2,r2
   9227c:	1085883a 	add	r2,r2,r2
   92280:	10c5883a 	add	r2,r2,r3
   92284:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   92288:	e0bffe03 	ldbu	r2,-8(fp)
   9228c:	00c002f4 	movhi	r3,11
   92290:	18e9c004 	addi	r3,r3,-22784
   92294:	1085883a 	add	r2,r2,r2
   92298:	1085883a 	add	r2,r2,r2
   9229c:	10c7883a 	add	r3,r2,r3
   922a0:	e0bffa17 	ldw	r2,-24(fp)
   922a4:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   922a8:	e0bffa17 	ldw	r2,-24(fp)
   922ac:	10800d03 	ldbu	r2,52(r2)
   922b0:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   922b4:	e0bffa17 	ldw	r2,-24(fp)
   922b8:	10800d83 	ldbu	r2,54(r2)
   922bc:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   922c0:	e0bffa17 	ldw	r2,-24(fp)
   922c4:	10800d43 	ldbu	r2,53(r2)
   922c8:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   922cc:	e0fff903 	ldbu	r3,-28(fp)
   922d0:	008002b4 	movhi	r2,10
   922d4:	10acad44 	addi	r2,r2,-19787
   922d8:	10c5883a 	add	r2,r2,r3
   922dc:	10c00003 	ldbu	r3,0(r2)
   922e0:	e0bff803 	ldbu	r2,-32(fp)
   922e4:	1884703a 	and	r2,r3,r2
   922e8:	10803fcc 	andi	r2,r2,255
   922ec:	1005003a 	cmpeq	r2,r2,zero
   922f0:	1000381e 	bne	r2,zero,923d4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   922f4:	e13ff903 	ldbu	r4,-28(fp)
   922f8:	e0fff903 	ldbu	r3,-28(fp)
   922fc:	008002b4 	movhi	r2,10
   92300:	10acad44 	addi	r2,r2,-19787
   92304:	10c5883a 	add	r2,r2,r3
   92308:	10800003 	ldbu	r2,0(r2)
   9230c:	1007883a 	mov	r3,r2
   92310:	e0bff803 	ldbu	r2,-32(fp)
   92314:	0084303a 	nor	r2,zero,r2
   92318:	1884703a 	and	r2,r3,r2
   9231c:	1007883a 	mov	r3,r2
   92320:	008002b4 	movhi	r2,10
   92324:	10acad44 	addi	r2,r2,-19787
   92328:	1105883a 	add	r2,r2,r4
   9232c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   92330:	e0fff903 	ldbu	r3,-28(fp)
   92334:	008002b4 	movhi	r2,10
   92338:	10acad44 	addi	r2,r2,-19787
   9233c:	10c5883a 	add	r2,r2,r3
   92340:	10800003 	ldbu	r2,0(r2)
   92344:	10803fcc 	andi	r2,r2,255
   92348:	1004c03a 	cmpne	r2,r2,zero
   9234c:	10000b1e 	bne	r2,zero,9237c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   92350:	e0bff843 	ldbu	r2,-31(fp)
   92354:	0084303a 	nor	r2,zero,r2
   92358:	1007883a 	mov	r3,r2
   9235c:	008002b4 	movhi	r2,10
   92360:	10acad04 	addi	r2,r2,-19788
   92364:	10800003 	ldbu	r2,0(r2)
   92368:	1884703a 	and	r2,r3,r2
   9236c:	1007883a 	mov	r3,r2
   92370:	008002b4 	movhi	r2,10
   92374:	10acad04 	addi	r2,r2,-19788
   92378:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   9237c:	008002b4 	movhi	r2,10
   92380:	10acad04 	addi	r2,r2,-19788
   92384:	10c00003 	ldbu	r3,0(r2)
   92388:	e0bff8c3 	ldbu	r2,-29(fp)
   9238c:	1884b03a 	or	r2,r3,r2
   92390:	1007883a 	mov	r3,r2
   92394:	008002b4 	movhi	r2,10
   92398:	10acad04 	addi	r2,r2,-19788
   9239c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   923a0:	e13ff983 	ldbu	r4,-26(fp)
   923a4:	e0fff983 	ldbu	r3,-26(fp)
   923a8:	008002b4 	movhi	r2,10
   923ac:	10acad44 	addi	r2,r2,-19787
   923b0:	10c5883a 	add	r2,r2,r3
   923b4:	10c00003 	ldbu	r3,0(r2)
   923b8:	e0bff883 	ldbu	r2,-30(fp)
   923bc:	1884b03a 	or	r2,r3,r2
   923c0:	1007883a 	mov	r3,r2
   923c4:	008002b4 	movhi	r2,10
   923c8:	10acad44 	addi	r2,r2,-19787
   923cc:	1105883a 	add	r2,r2,r4
   923d0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   923d4:	e0bffa17 	ldw	r2,-24(fp)
   923d8:	10800717 	ldw	r2,28(r2)
   923dc:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   923e0:	e0bffc17 	ldw	r2,-16(fp)
   923e4:	1005003a 	cmpeq	r2,r2,zero
   923e8:	1000341e 	bne	r2,zero,924bc <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   923ec:	e13ff903 	ldbu	r4,-28(fp)
   923f0:	e0fff903 	ldbu	r3,-28(fp)
   923f4:	e0bffc17 	ldw	r2,-16(fp)
   923f8:	1885883a 	add	r2,r3,r2
   923fc:	10800204 	addi	r2,r2,8
   92400:	108000c3 	ldbu	r2,3(r2)
   92404:	1007883a 	mov	r3,r2
   92408:	e0bff803 	ldbu	r2,-32(fp)
   9240c:	0084303a 	nor	r2,zero,r2
   92410:	1884703a 	and	r2,r3,r2
   92414:	1007883a 	mov	r3,r2
   92418:	e0bffc17 	ldw	r2,-16(fp)
   9241c:	2085883a 	add	r2,r4,r2
   92420:	10800204 	addi	r2,r2,8
   92424:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   92428:	e0fff903 	ldbu	r3,-28(fp)
   9242c:	e0bffc17 	ldw	r2,-16(fp)
   92430:	1885883a 	add	r2,r3,r2
   92434:	10800204 	addi	r2,r2,8
   92438:	108000c3 	ldbu	r2,3(r2)
   9243c:	10803fcc 	andi	r2,r2,255
   92440:	1004c03a 	cmpne	r2,r2,zero
   92444:	1000091e 	bne	r2,zero,9246c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   92448:	e0bffc17 	ldw	r2,-16(fp)
   9244c:	10800283 	ldbu	r2,10(r2)
   92450:	1007883a 	mov	r3,r2
   92454:	e0bff843 	ldbu	r2,-31(fp)
   92458:	0084303a 	nor	r2,zero,r2
   9245c:	1884703a 	and	r2,r3,r2
   92460:	1007883a 	mov	r3,r2
   92464:	e0bffc17 	ldw	r2,-16(fp)
   92468:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   9246c:	e0bffc17 	ldw	r2,-16(fp)
   92470:	10c00283 	ldbu	r3,10(r2)
   92474:	e0bff8c3 	ldbu	r2,-29(fp)
   92478:	1884b03a 	or	r2,r3,r2
   9247c:	1007883a 	mov	r3,r2
   92480:	e0bffc17 	ldw	r2,-16(fp)
   92484:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   92488:	e13ff983 	ldbu	r4,-26(fp)
   9248c:	e0fff983 	ldbu	r3,-26(fp)
   92490:	e0bffc17 	ldw	r2,-16(fp)
   92494:	1885883a 	add	r2,r3,r2
   92498:	10800204 	addi	r2,r2,8
   9249c:	10c000c3 	ldbu	r3,3(r2)
   924a0:	e0bff883 	ldbu	r2,-30(fp)
   924a4:	1884b03a 	or	r2,r3,r2
   924a8:	1007883a 	mov	r3,r2
   924ac:	e0bffc17 	ldw	r2,-16(fp)
   924b0:	2085883a 	add	r2,r4,r2
   924b4:	10800204 	addi	r2,r2,8
   924b8:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   924bc:	e0bffa17 	ldw	r2,-24(fp)
   924c0:	10800817 	ldw	r2,32(r2)
   924c4:	1005003a 	cmpeq	r2,r2,zero
   924c8:	1000441e 	bne	r2,zero,925dc <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   924cc:	e0bffa17 	ldw	r2,-24(fp)
   924d0:	10800817 	ldw	r2,32(r2)
   924d4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   924d8:	e0bffb17 	ldw	r2,-20(fp)
   924dc:	10800017 	ldw	r2,0(r2)
   924e0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   924e4:	00003a06 	br	925d0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   924e8:	e13ff903 	ldbu	r4,-28(fp)
   924ec:	e0fff903 	ldbu	r3,-28(fp)
   924f0:	e0bffc17 	ldw	r2,-16(fp)
   924f4:	1885883a 	add	r2,r3,r2
   924f8:	10800204 	addi	r2,r2,8
   924fc:	108000c3 	ldbu	r2,3(r2)
   92500:	1007883a 	mov	r3,r2
   92504:	e0bff803 	ldbu	r2,-32(fp)
   92508:	0084303a 	nor	r2,zero,r2
   9250c:	1884703a 	and	r2,r3,r2
   92510:	1007883a 	mov	r3,r2
   92514:	e0bffc17 	ldw	r2,-16(fp)
   92518:	2085883a 	add	r2,r4,r2
   9251c:	10800204 	addi	r2,r2,8
   92520:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   92524:	e0fff903 	ldbu	r3,-28(fp)
   92528:	e0bffc17 	ldw	r2,-16(fp)
   9252c:	1885883a 	add	r2,r3,r2
   92530:	10800204 	addi	r2,r2,8
   92534:	108000c3 	ldbu	r2,3(r2)
   92538:	10803fcc 	andi	r2,r2,255
   9253c:	1004c03a 	cmpne	r2,r2,zero
   92540:	1000091e 	bne	r2,zero,92568 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   92544:	e0bffc17 	ldw	r2,-16(fp)
   92548:	10800283 	ldbu	r2,10(r2)
   9254c:	1007883a 	mov	r3,r2
   92550:	e0bff843 	ldbu	r2,-31(fp)
   92554:	0084303a 	nor	r2,zero,r2
   92558:	1884703a 	and	r2,r3,r2
   9255c:	1007883a 	mov	r3,r2
   92560:	e0bffc17 	ldw	r2,-16(fp)
   92564:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   92568:	e0bffc17 	ldw	r2,-16(fp)
   9256c:	10c00283 	ldbu	r3,10(r2)
   92570:	e0bff8c3 	ldbu	r2,-29(fp)
   92574:	1884b03a 	or	r2,r3,r2
   92578:	1007883a 	mov	r3,r2
   9257c:	e0bffc17 	ldw	r2,-16(fp)
   92580:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   92584:	e13ff983 	ldbu	r4,-26(fp)
   92588:	e0fff983 	ldbu	r3,-26(fp)
   9258c:	e0bffc17 	ldw	r2,-16(fp)
   92590:	1885883a 	add	r2,r3,r2
   92594:	10800204 	addi	r2,r2,8
   92598:	10c000c3 	ldbu	r3,3(r2)
   9259c:	e0bff883 	ldbu	r2,-30(fp)
   925a0:	1884b03a 	or	r2,r3,r2
   925a4:	1007883a 	mov	r3,r2
   925a8:	e0bffc17 	ldw	r2,-16(fp)
   925ac:	2085883a 	add	r2,r4,r2
   925b0:	10800204 	addi	r2,r2,8
   925b4:	10c000c5 	stb	r3,3(r2)
            pevents++;
   925b8:	e0bffb17 	ldw	r2,-20(fp)
   925bc:	10800104 	addi	r2,r2,4
   925c0:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   925c4:	e0bffb17 	ldw	r2,-20(fp)
   925c8:	10800017 	ldw	r2,0(r2)
   925cc:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   925d0:	e0bffc17 	ldw	r2,-16(fp)
   925d4:	1004c03a 	cmpne	r2,r2,zero
   925d8:	103fc31e 	bne	r2,zero,924e8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   925dc:	e0fffa17 	ldw	r3,-24(fp)
   925e0:	e0bffe03 	ldbu	r2,-8(fp)
   925e4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   925e8:	e0fffa17 	ldw	r3,-24(fp)
   925ec:	e0bff983 	ldbu	r2,-26(fp)
   925f0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   925f4:	e0fffa17 	ldw	r3,-24(fp)
   925f8:	e0bff943 	ldbu	r2,-27(fp)
   925fc:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   92600:	e0fffa17 	ldw	r3,-24(fp)
   92604:	e0bff8c3 	ldbu	r2,-29(fp)
   92608:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   9260c:	e0fffa17 	ldw	r3,-24(fp)
   92610:	e0bff883 	ldbu	r2,-30(fp)
   92614:	18800d45 	stb	r2,53(r3)
   92618:	e0bff717 	ldw	r2,-36(fp)
   9261c:	e0bff215 	stw	r2,-56(fp)
   92620:	e0bff217 	ldw	r2,-56(fp)
   92624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   92628:	008002b4 	movhi	r2,10
   9262c:	10aca144 	addi	r2,r2,-19835
   92630:	10800003 	ldbu	r2,0(r2)
   92634:	10803fcc 	andi	r2,r2,255
   92638:	10800058 	cmpnei	r2,r2,1
   9263c:	1000011e 	bne	r2,zero,92644 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   92640:	008d8340 	call	8d834 <OS_Sched>
    }
    return (OS_ERR_NONE);
   92644:	e03fff15 	stw	zero,-4(fp)
   92648:	e0bfff17 	ldw	r2,-4(fp)
}
   9264c:	e037883a 	mov	sp,fp
   92650:	dfc00117 	ldw	ra,4(sp)
   92654:	df000017 	ldw	fp,0(sp)
   92658:	dec00204 	addi	sp,sp,8
   9265c:	f800283a 	ret

00092660 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   92660:	deffed04 	addi	sp,sp,-76
   92664:	dfc01215 	stw	ra,72(sp)
   92668:	df001115 	stw	fp,68(sp)
   9266c:	df001104 	addi	fp,sp,68
   92670:	e13ffb15 	stw	r4,-20(fp)
   92674:	e17ffc15 	stw	r5,-16(fp)
   92678:	e1bffd15 	stw	r6,-12(fp)
   9267c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   92680:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   92684:	e0bffe03 	ldbu	r2,-8(fp)
   92688:	10800570 	cmpltui	r2,r2,21
   9268c:	1000031e 	bne	r2,zero,9269c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   92690:	00800a84 	movi	r2,42
   92694:	e0bfff15 	stw	r2,-4(fp)
   92698:	00006006 	br	9281c <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9269c:	0005303a 	rdctl	r2,status
   926a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   926a4:	e0fff717 	ldw	r3,-36(fp)
   926a8:	00bfff84 	movi	r2,-2
   926ac:	1884703a 	and	r2,r3,r2
   926b0:	1001703a 	wrctl	status,r2
  
  return context;
   926b4:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   926b8:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   926bc:	008002b4 	movhi	r2,10
   926c0:	10acaf04 	addi	r2,r2,-19780
   926c4:	10800003 	ldbu	r2,0(r2)
   926c8:	10803fcc 	andi	r2,r2,255
   926cc:	1005003a 	cmpeq	r2,r2,zero
   926d0:	1000071e 	bne	r2,zero,926f0 <OSTaskCreate+0x90>
   926d4:	e0bff817 	ldw	r2,-32(fp)
   926d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   926dc:	e0bff617 	ldw	r2,-40(fp)
   926e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   926e4:	00800f04 	movi	r2,60
   926e8:	e0bfff15 	stw	r2,-4(fp)
   926ec:	00004b06 	br	9281c <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   926f0:	e0bffe03 	ldbu	r2,-8(fp)
   926f4:	00c002f4 	movhi	r3,11
   926f8:	18e9c004 	addi	r3,r3,-22784
   926fc:	1085883a 	add	r2,r2,r2
   92700:	1085883a 	add	r2,r2,r2
   92704:	10c5883a 	add	r2,r2,r3
   92708:	10800017 	ldw	r2,0(r2)
   9270c:	1004c03a 	cmpne	r2,r2,zero
   92710:	10003c1e 	bne	r2,zero,92804 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   92714:	e0bffe03 	ldbu	r2,-8(fp)
   92718:	00c002f4 	movhi	r3,11
   9271c:	18e9c004 	addi	r3,r3,-22784
   92720:	1085883a 	add	r2,r2,r2
   92724:	1085883a 	add	r2,r2,r2
   92728:	10c7883a 	add	r3,r2,r3
   9272c:	00800044 	movi	r2,1
   92730:	18800015 	stw	r2,0(r3)
   92734:	e0bff817 	ldw	r2,-32(fp)
   92738:	e0bff515 	stw	r2,-44(fp)
   9273c:	e0bff517 	ldw	r2,-44(fp)
   92740:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   92744:	e13ffb17 	ldw	r4,-20(fp)
   92748:	e17ffc17 	ldw	r5,-16(fp)
   9274c:	e1bffd17 	ldw	r6,-12(fp)
   92750:	000f883a 	mov	r7,zero
   92754:	00962f00 	call	962f0 <OSTaskStkInit>
   92758:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   9275c:	e13ffe03 	ldbu	r4,-8(fp)
   92760:	d8000015 	stw	zero,0(sp)
   92764:	d8000115 	stw	zero,4(sp)
   92768:	d8000215 	stw	zero,8(sp)
   9276c:	e17ffa17 	ldw	r5,-24(fp)
   92770:	000d883a 	mov	r6,zero
   92774:	000f883a 	mov	r7,zero
   92778:	008dc3c0 	call	8dc3c <OS_TCBInit>
   9277c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   92780:	e0bff903 	ldbu	r2,-28(fp)
   92784:	1004c03a 	cmpne	r2,r2,zero
   92788:	1000081e 	bne	r2,zero,927ac <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   9278c:	008002b4 	movhi	r2,10
   92790:	10aca144 	addi	r2,r2,-19835
   92794:	10800003 	ldbu	r2,0(r2)
   92798:	10803fcc 	andi	r2,r2,255
   9279c:	10800058 	cmpnei	r2,r2,1
   927a0:	1000151e 	bne	r2,zero,927f8 <OSTaskCreate+0x198>
                OS_Sched();
   927a4:	008d8340 	call	8d834 <OS_Sched>
   927a8:	00001306 	br	927f8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   927ac:	0005303a 	rdctl	r2,status
   927b0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   927b4:	e0fff417 	ldw	r3,-48(fp)
   927b8:	00bfff84 	movi	r2,-2
   927bc:	1884703a 	and	r2,r3,r2
   927c0:	1001703a 	wrctl	status,r2
  
  return context;
   927c4:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   927c8:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   927cc:	e0bffe03 	ldbu	r2,-8(fp)
   927d0:	00c002f4 	movhi	r3,11
   927d4:	18e9c004 	addi	r3,r3,-22784
   927d8:	1085883a 	add	r2,r2,r2
   927dc:	1085883a 	add	r2,r2,r2
   927e0:	10c5883a 	add	r2,r2,r3
   927e4:	10000015 	stw	zero,0(r2)
   927e8:	e0bff817 	ldw	r2,-32(fp)
   927ec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   927f0:	e0bff317 	ldw	r2,-52(fp)
   927f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   927f8:	e0bff903 	ldbu	r2,-28(fp)
   927fc:	e0bfff15 	stw	r2,-4(fp)
   92800:	00000606 	br	9281c <OSTaskCreate+0x1bc>
   92804:	e0bff817 	ldw	r2,-32(fp)
   92808:	e0bff215 	stw	r2,-56(fp)
   9280c:	e0bff217 	ldw	r2,-56(fp)
   92810:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   92814:	00800a04 	movi	r2,40
   92818:	e0bfff15 	stw	r2,-4(fp)
   9281c:	e0bfff17 	ldw	r2,-4(fp)
}
   92820:	e037883a 	mov	sp,fp
   92824:	dfc00117 	ldw	ra,4(sp)
   92828:	df000017 	ldw	fp,0(sp)
   9282c:	dec00204 	addi	sp,sp,8
   92830:	f800283a 	ret

00092834 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   92834:	deffeb04 	addi	sp,sp,-84
   92838:	dfc01415 	stw	ra,80(sp)
   9283c:	df001315 	stw	fp,76(sp)
   92840:	df001304 	addi	fp,sp,76
   92844:	e13ff915 	stw	r4,-28(fp)
   92848:	e17ffa15 	stw	r5,-24(fp)
   9284c:	e1bffb15 	stw	r6,-20(fp)
   92850:	e0800217 	ldw	r2,8(fp)
   92854:	e0c00617 	ldw	r3,24(fp)
   92858:	e1fffc05 	stb	r7,-16(fp)
   9285c:	e0bffd0d 	sth	r2,-12(fp)
   92860:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   92864:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   92868:	e0bffc03 	ldbu	r2,-16(fp)
   9286c:	10800570 	cmpltui	r2,r2,21
   92870:	1000031e 	bne	r2,zero,92880 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   92874:	00800a84 	movi	r2,42
   92878:	e0bfff15 	stw	r2,-4(fp)
   9287c:	00006706 	br	92a1c <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92880:	0005303a 	rdctl	r2,status
   92884:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92888:	e0fff517 	ldw	r3,-44(fp)
   9288c:	00bfff84 	movi	r2,-2
   92890:	1884703a 	and	r2,r3,r2
   92894:	1001703a 	wrctl	status,r2
  
  return context;
   92898:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9289c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   928a0:	008002b4 	movhi	r2,10
   928a4:	10acaf04 	addi	r2,r2,-19780
   928a8:	10800003 	ldbu	r2,0(r2)
   928ac:	10803fcc 	andi	r2,r2,255
   928b0:	1005003a 	cmpeq	r2,r2,zero
   928b4:	1000071e 	bne	r2,zero,928d4 <OSTaskCreateExt+0xa0>
   928b8:	e0bff617 	ldw	r2,-40(fp)
   928bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   928c0:	e0bff417 	ldw	r2,-48(fp)
   928c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   928c8:	00800f04 	movi	r2,60
   928cc:	e0bfff15 	stw	r2,-4(fp)
   928d0:	00005206 	br	92a1c <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   928d4:	e0bffc03 	ldbu	r2,-16(fp)
   928d8:	00c002f4 	movhi	r3,11
   928dc:	18e9c004 	addi	r3,r3,-22784
   928e0:	1085883a 	add	r2,r2,r2
   928e4:	1085883a 	add	r2,r2,r2
   928e8:	10c5883a 	add	r2,r2,r3
   928ec:	10800017 	ldw	r2,0(r2)
   928f0:	1004c03a 	cmpne	r2,r2,zero
   928f4:	1000431e 	bne	r2,zero,92a04 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   928f8:	e0bffc03 	ldbu	r2,-16(fp)
   928fc:	00c002f4 	movhi	r3,11
   92900:	18e9c004 	addi	r3,r3,-22784
   92904:	1085883a 	add	r2,r2,r2
   92908:	1085883a 	add	r2,r2,r2
   9290c:	10c7883a 	add	r3,r2,r3
   92910:	00800044 	movi	r2,1
   92914:	18800015 	stw	r2,0(r3)
   92918:	e0bff617 	ldw	r2,-40(fp)
   9291c:	e0bff315 	stw	r2,-52(fp)
   92920:	e0bff317 	ldw	r2,-52(fp)
   92924:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   92928:	e1bffe0b 	ldhu	r6,-8(fp)
   9292c:	e1000317 	ldw	r4,12(fp)
   92930:	e1400417 	ldw	r5,16(fp)
   92934:	0093ab00 	call	93ab0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   92938:	e1fffe0b 	ldhu	r7,-8(fp)
   9293c:	e13ff917 	ldw	r4,-28(fp)
   92940:	e17ffa17 	ldw	r5,-24(fp)
   92944:	e1bffb17 	ldw	r6,-20(fp)
   92948:	00962f00 	call	962f0 <OSTaskStkInit>
   9294c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   92950:	e13ffc03 	ldbu	r4,-16(fp)
   92954:	e1fffd0b 	ldhu	r7,-12(fp)
   92958:	e0fffe0b 	ldhu	r3,-8(fp)
   9295c:	e0800417 	ldw	r2,16(fp)
   92960:	d8800015 	stw	r2,0(sp)
   92964:	e0800517 	ldw	r2,20(fp)
   92968:	d8800115 	stw	r2,4(sp)
   9296c:	d8c00215 	stw	r3,8(sp)
   92970:	e17ff817 	ldw	r5,-32(fp)
   92974:	e1800317 	ldw	r6,12(fp)
   92978:	008dc3c0 	call	8dc3c <OS_TCBInit>
   9297c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   92980:	e0bff703 	ldbu	r2,-36(fp)
   92984:	1004c03a 	cmpne	r2,r2,zero
   92988:	1000081e 	bne	r2,zero,929ac <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   9298c:	008002b4 	movhi	r2,10
   92990:	10aca144 	addi	r2,r2,-19835
   92994:	10800003 	ldbu	r2,0(r2)
   92998:	10803fcc 	andi	r2,r2,255
   9299c:	10800058 	cmpnei	r2,r2,1
   929a0:	1000151e 	bne	r2,zero,929f8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
   929a4:	008d8340 	call	8d834 <OS_Sched>
   929a8:	00001306 	br	929f8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   929ac:	0005303a 	rdctl	r2,status
   929b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   929b4:	e0fff217 	ldw	r3,-56(fp)
   929b8:	00bfff84 	movi	r2,-2
   929bc:	1884703a 	and	r2,r3,r2
   929c0:	1001703a 	wrctl	status,r2
  
  return context;
   929c4:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   929c8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   929cc:	e0bffc03 	ldbu	r2,-16(fp)
   929d0:	00c002f4 	movhi	r3,11
   929d4:	18e9c004 	addi	r3,r3,-22784
   929d8:	1085883a 	add	r2,r2,r2
   929dc:	1085883a 	add	r2,r2,r2
   929e0:	10c5883a 	add	r2,r2,r3
   929e4:	10000015 	stw	zero,0(r2)
   929e8:	e0bff617 	ldw	r2,-40(fp)
   929ec:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   929f0:	e0bff117 	ldw	r2,-60(fp)
   929f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   929f8:	e0bff703 	ldbu	r2,-36(fp)
   929fc:	e0bfff15 	stw	r2,-4(fp)
   92a00:	00000606 	br	92a1c <OSTaskCreateExt+0x1e8>
   92a04:	e0bff617 	ldw	r2,-40(fp)
   92a08:	e0bff015 	stw	r2,-64(fp)
   92a0c:	e0bff017 	ldw	r2,-64(fp)
   92a10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   92a14:	00800a04 	movi	r2,40
   92a18:	e0bfff15 	stw	r2,-4(fp)
   92a1c:	e0bfff17 	ldw	r2,-4(fp)
}
   92a20:	e037883a 	mov	sp,fp
   92a24:	dfc00117 	ldw	ra,4(sp)
   92a28:	df000017 	ldw	fp,0(sp)
   92a2c:	dec00204 	addi	sp,sp,8
   92a30:	f800283a 	ret

00092a34 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   92a34:	defff304 	addi	sp,sp,-52
   92a38:	dfc00c15 	stw	ra,48(sp)
   92a3c:	df000b15 	stw	fp,44(sp)
   92a40:	df000b04 	addi	fp,sp,44
   92a44:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   92a48:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   92a4c:	008002b4 	movhi	r2,10
   92a50:	10acaf04 	addi	r2,r2,-19780
   92a54:	10800003 	ldbu	r2,0(r2)
   92a58:	10803fcc 	andi	r2,r2,255
   92a5c:	1005003a 	cmpeq	r2,r2,zero
   92a60:	1000031e 	bne	r2,zero,92a70 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   92a64:	00801004 	movi	r2,64
   92a68:	e0bfff15 	stw	r2,-4(fp)
   92a6c:	0000ee06 	br	92e28 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   92a70:	e0bffe03 	ldbu	r2,-8(fp)
   92a74:	10800518 	cmpnei	r2,r2,20
   92a78:	1000031e 	bne	r2,zero,92a88 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   92a7c:	00800f84 	movi	r2,62
   92a80:	e0bfff15 	stw	r2,-4(fp)
   92a84:	0000e806 	br	92e28 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   92a88:	e0bffe03 	ldbu	r2,-8(fp)
   92a8c:	10800530 	cmpltui	r2,r2,20
   92a90:	1000061e 	bne	r2,zero,92aac <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   92a94:	e0bffe03 	ldbu	r2,-8(fp)
   92a98:	10803fe0 	cmpeqi	r2,r2,255
   92a9c:	1000031e 	bne	r2,zero,92aac <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   92aa0:	00800a84 	movi	r2,42
   92aa4:	e0bfff15 	stw	r2,-4(fp)
   92aa8:	0000df06 	br	92e28 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92aac:	0005303a 	rdctl	r2,status
   92ab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ab4:	e0fffa17 	ldw	r3,-24(fp)
   92ab8:	00bfff84 	movi	r2,-2
   92abc:	1884703a 	and	r2,r3,r2
   92ac0:	1001703a 	wrctl	status,r2
  
  return context;
   92ac4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   92ac8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   92acc:	e0bffe03 	ldbu	r2,-8(fp)
   92ad0:	10803fd8 	cmpnei	r2,r2,255
   92ad4:	1000051e 	bne	r2,zero,92aec <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   92ad8:	008002b4 	movhi	r2,10
   92adc:	10acb004 	addi	r2,r2,-19776
   92ae0:	10800017 	ldw	r2,0(r2)
   92ae4:	10800c83 	ldbu	r2,50(r2)
   92ae8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   92aec:	e0bffe03 	ldbu	r2,-8(fp)
   92af0:	00c002f4 	movhi	r3,11
   92af4:	18e9c004 	addi	r3,r3,-22784
   92af8:	1085883a 	add	r2,r2,r2
   92afc:	1085883a 	add	r2,r2,r2
   92b00:	10c5883a 	add	r2,r2,r3
   92b04:	10800017 	ldw	r2,0(r2)
   92b08:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   92b0c:	e0bffc17 	ldw	r2,-16(fp)
   92b10:	1004c03a 	cmpne	r2,r2,zero
   92b14:	1000071e 	bne	r2,zero,92b34 <OSTaskDel+0x100>
   92b18:	e0bffb17 	ldw	r2,-20(fp)
   92b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92b20:	e0bff917 	ldw	r2,-28(fp)
   92b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   92b28:	008010c4 	movi	r2,67
   92b2c:	e0bfff15 	stw	r2,-4(fp)
   92b30:	0000bd06 	br	92e28 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   92b34:	e0bffc17 	ldw	r2,-16(fp)
   92b38:	10800058 	cmpnei	r2,r2,1
   92b3c:	1000071e 	bne	r2,zero,92b5c <OSTaskDel+0x128>
   92b40:	e0bffb17 	ldw	r2,-20(fp)
   92b44:	e0bff815 	stw	r2,-32(fp)
   92b48:	e0bff817 	ldw	r2,-32(fp)
   92b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   92b50:	00800f44 	movi	r2,61
   92b54:	e0bfff15 	stw	r2,-4(fp)
   92b58:	0000b306 	br	92e28 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   92b5c:	e0bffc17 	ldw	r2,-16(fp)
   92b60:	10800d03 	ldbu	r2,52(r2)
   92b64:	11003fcc 	andi	r4,r2,255
   92b68:	e0bffc17 	ldw	r2,-16(fp)
   92b6c:	10800d03 	ldbu	r2,52(r2)
   92b70:	10c03fcc 	andi	r3,r2,255
   92b74:	008002b4 	movhi	r2,10
   92b78:	10acad44 	addi	r2,r2,-19787
   92b7c:	10c5883a 	add	r2,r2,r3
   92b80:	10800003 	ldbu	r2,0(r2)
   92b84:	1007883a 	mov	r3,r2
   92b88:	e0bffc17 	ldw	r2,-16(fp)
   92b8c:	10800d43 	ldbu	r2,53(r2)
   92b90:	0084303a 	nor	r2,zero,r2
   92b94:	1884703a 	and	r2,r3,r2
   92b98:	1007883a 	mov	r3,r2
   92b9c:	008002b4 	movhi	r2,10
   92ba0:	10acad44 	addi	r2,r2,-19787
   92ba4:	1105883a 	add	r2,r2,r4
   92ba8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   92bac:	e0bffc17 	ldw	r2,-16(fp)
   92bb0:	10800d03 	ldbu	r2,52(r2)
   92bb4:	10c03fcc 	andi	r3,r2,255
   92bb8:	008002b4 	movhi	r2,10
   92bbc:	10acad44 	addi	r2,r2,-19787
   92bc0:	10c5883a 	add	r2,r2,r3
   92bc4:	10800003 	ldbu	r2,0(r2)
   92bc8:	10803fcc 	andi	r2,r2,255
   92bcc:	1004c03a 	cmpne	r2,r2,zero
   92bd0:	10000c1e 	bne	r2,zero,92c04 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   92bd4:	e0bffc17 	ldw	r2,-16(fp)
   92bd8:	10800d83 	ldbu	r2,54(r2)
   92bdc:	0084303a 	nor	r2,zero,r2
   92be0:	1007883a 	mov	r3,r2
   92be4:	008002b4 	movhi	r2,10
   92be8:	10acad04 	addi	r2,r2,-19788
   92bec:	10800003 	ldbu	r2,0(r2)
   92bf0:	1884703a 	and	r2,r3,r2
   92bf4:	1007883a 	mov	r3,r2
   92bf8:	008002b4 	movhi	r2,10
   92bfc:	10acad04 	addi	r2,r2,-19788
   92c00:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   92c04:	e0bffc17 	ldw	r2,-16(fp)
   92c08:	10800717 	ldw	r2,28(r2)
   92c0c:	1005003a 	cmpeq	r2,r2,zero
   92c10:	1000041e 	bne	r2,zero,92c24 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   92c14:	e0bffc17 	ldw	r2,-16(fp)
   92c18:	11400717 	ldw	r5,28(r2)
   92c1c:	e13ffc17 	ldw	r4,-16(fp)
   92c20:	008d1ec0 	call	8d1ec <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   92c24:	e0bffc17 	ldw	r2,-16(fp)
   92c28:	10800817 	ldw	r2,32(r2)
   92c2c:	1005003a 	cmpeq	r2,r2,zero
   92c30:	1000041e 	bne	r2,zero,92c44 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   92c34:	e0bffc17 	ldw	r2,-16(fp)
   92c38:	11400817 	ldw	r5,32(r2)
   92c3c:	e13ffc17 	ldw	r4,-16(fp)
   92c40:	008d2a40 	call	8d2a4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   92c44:	e0bffc17 	ldw	r2,-16(fp)
   92c48:	10800a17 	ldw	r2,40(r2)
   92c4c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   92c50:	e0bffd17 	ldw	r2,-12(fp)
   92c54:	1005003a 	cmpeq	r2,r2,zero
   92c58:	1000021e 	bne	r2,zero,92c64 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   92c5c:	e13ffd17 	ldw	r4,-12(fp)
   92c60:	008f9380 	call	8f938 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   92c64:	e0bffc17 	ldw	r2,-16(fp)
   92c68:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   92c6c:	e0bffc17 	ldw	r2,-16(fp)
   92c70:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   92c74:	e0bffc17 	ldw	r2,-16(fp)
   92c78:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   92c7c:	008002b4 	movhi	r2,10
   92c80:	10aca104 	addi	r2,r2,-19836
   92c84:	10800003 	ldbu	r2,0(r2)
   92c88:	10803fcc 	andi	r2,r2,255
   92c8c:	10803fe0 	cmpeqi	r2,r2,255
   92c90:	1000081e 	bne	r2,zero,92cb4 <OSTaskDel+0x280>
        OSLockNesting++;
   92c94:	008002b4 	movhi	r2,10
   92c98:	10aca104 	addi	r2,r2,-19836
   92c9c:	10800003 	ldbu	r2,0(r2)
   92ca0:	10800044 	addi	r2,r2,1
   92ca4:	1007883a 	mov	r3,r2
   92ca8:	008002b4 	movhi	r2,10
   92cac:	10aca104 	addi	r2,r2,-19836
   92cb0:	10c00005 	stb	r3,0(r2)
   92cb4:	e0bffb17 	ldw	r2,-20(fp)
   92cb8:	e0bff715 	stw	r2,-36(fp)
   92cbc:	e0bff717 	ldw	r2,-36(fp)
   92cc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   92cc4:	008cdd80 	call	8cdd8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92cc8:	0005303a 	rdctl	r2,status
   92ccc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92cd0:	e0fff617 	ldw	r3,-40(fp)
   92cd4:	00bfff84 	movi	r2,-2
   92cd8:	1884703a 	and	r2,r3,r2
   92cdc:	1001703a 	wrctl	status,r2
  
  return context;
   92ce0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   92ce4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   92ce8:	008002b4 	movhi	r2,10
   92cec:	10aca104 	addi	r2,r2,-19836
   92cf0:	10800003 	ldbu	r2,0(r2)
   92cf4:	10803fcc 	andi	r2,r2,255
   92cf8:	1005003a 	cmpeq	r2,r2,zero
   92cfc:	1000081e 	bne	r2,zero,92d20 <OSTaskDel+0x2ec>
        OSLockNesting--;
   92d00:	008002b4 	movhi	r2,10
   92d04:	10aca104 	addi	r2,r2,-19836
   92d08:	10800003 	ldbu	r2,0(r2)
   92d0c:	10bfffc4 	addi	r2,r2,-1
   92d10:	1007883a 	mov	r3,r2
   92d14:	008002b4 	movhi	r2,10
   92d18:	10aca104 	addi	r2,r2,-19836
   92d1c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   92d20:	e13ffc17 	ldw	r4,-16(fp)
   92d24:	00966200 	call	96620 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   92d28:	008002b4 	movhi	r2,10
   92d2c:	10aca944 	addi	r2,r2,-19803
   92d30:	10800003 	ldbu	r2,0(r2)
   92d34:	10bfffc4 	addi	r2,r2,-1
   92d38:	1007883a 	mov	r3,r2
   92d3c:	008002b4 	movhi	r2,10
   92d40:	10aca944 	addi	r2,r2,-19803
   92d44:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   92d48:	e0bffe03 	ldbu	r2,-8(fp)
   92d4c:	00c002f4 	movhi	r3,11
   92d50:	18e9c004 	addi	r3,r3,-22784
   92d54:	1085883a 	add	r2,r2,r2
   92d58:	1085883a 	add	r2,r2,r2
   92d5c:	10c5883a 	add	r2,r2,r3
   92d60:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   92d64:	e0bffc17 	ldw	r2,-16(fp)
   92d68:	10800617 	ldw	r2,24(r2)
   92d6c:	1004c03a 	cmpne	r2,r2,zero
   92d70:	1000091e 	bne	r2,zero,92d98 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   92d74:	e0bffc17 	ldw	r2,-16(fp)
   92d78:	10800517 	ldw	r2,20(r2)
   92d7c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   92d80:	e0bffc17 	ldw	r2,-16(fp)
   92d84:	10c00517 	ldw	r3,20(r2)
   92d88:	008002b4 	movhi	r2,10
   92d8c:	10aca404 	addi	r2,r2,-19824
   92d90:	10c00015 	stw	r3,0(r2)
   92d94:	00000a06 	br	92dc0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   92d98:	e0bffc17 	ldw	r2,-16(fp)
   92d9c:	10c00617 	ldw	r3,24(r2)
   92da0:	e0bffc17 	ldw	r2,-16(fp)
   92da4:	10800517 	ldw	r2,20(r2)
   92da8:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   92dac:	e0bffc17 	ldw	r2,-16(fp)
   92db0:	10c00517 	ldw	r3,20(r2)
   92db4:	e0bffc17 	ldw	r2,-16(fp)
   92db8:	10800617 	ldw	r2,24(r2)
   92dbc:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   92dc0:	008002b4 	movhi	r2,10
   92dc4:	10aca804 	addi	r2,r2,-19808
   92dc8:	10c00017 	ldw	r3,0(r2)
   92dcc:	e0bffc17 	ldw	r2,-16(fp)
   92dd0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   92dd4:	00c002b4 	movhi	r3,10
   92dd8:	18eca804 	addi	r3,r3,-19808
   92ddc:	e0bffc17 	ldw	r2,-16(fp)
   92de0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   92de4:	e0fffc17 	ldw	r3,-16(fp)
   92de8:	00800fc4 	movi	r2,63
   92dec:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   92df0:	e0bffc17 	ldw	r2,-16(fp)
   92df4:	10001345 	stb	zero,77(r2)
   92df8:	e0bffb17 	ldw	r2,-20(fp)
   92dfc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92e00:	e0bff517 	ldw	r2,-44(fp)
   92e04:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   92e08:	008002b4 	movhi	r2,10
   92e0c:	10aca144 	addi	r2,r2,-19835
   92e10:	10800003 	ldbu	r2,0(r2)
   92e14:	10803fcc 	andi	r2,r2,255
   92e18:	10800058 	cmpnei	r2,r2,1
   92e1c:	1000011e 	bne	r2,zero,92e24 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   92e20:	008d8340 	call	8d834 <OS_Sched>
    }
    return (OS_ERR_NONE);
   92e24:	e03fff15 	stw	zero,-4(fp)
   92e28:	e0bfff17 	ldw	r2,-4(fp)
}
   92e2c:	e037883a 	mov	sp,fp
   92e30:	dfc00117 	ldw	ra,4(sp)
   92e34:	df000017 	ldw	fp,0(sp)
   92e38:	dec00204 	addi	sp,sp,8
   92e3c:	f800283a 	ret

00092e40 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   92e40:	defff404 	addi	sp,sp,-48
   92e44:	df000b15 	stw	fp,44(sp)
   92e48:	df000b04 	addi	fp,sp,44
   92e4c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92e50:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   92e54:	e0bffe03 	ldbu	r2,-8(fp)
   92e58:	10800518 	cmpnei	r2,r2,20
   92e5c:	1000031e 	bne	r2,zero,92e6c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   92e60:	00800f84 	movi	r2,62
   92e64:	e0bfff15 	stw	r2,-4(fp)
   92e68:	00004c06 	br	92f9c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   92e6c:	e0bffe03 	ldbu	r2,-8(fp)
   92e70:	10800530 	cmpltui	r2,r2,20
   92e74:	1000061e 	bne	r2,zero,92e90 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   92e78:	e0bffe03 	ldbu	r2,-8(fp)
   92e7c:	10803fe0 	cmpeqi	r2,r2,255
   92e80:	1000031e 	bne	r2,zero,92e90 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   92e84:	00800a84 	movi	r2,42
   92e88:	e0bfff15 	stw	r2,-4(fp)
   92e8c:	00004306 	br	92f9c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   92e90:	e0bffe03 	ldbu	r2,-8(fp)
   92e94:	10803fd8 	cmpnei	r2,r2,255
   92e98:	1000141e 	bne	r2,zero,92eec <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92e9c:	0005303a 	rdctl	r2,status
   92ea0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ea4:	e0fffa17 	ldw	r3,-24(fp)
   92ea8:	00bfff84 	movi	r2,-2
   92eac:	1884703a 	and	r2,r3,r2
   92eb0:	1001703a 	wrctl	status,r2
  
  return context;
   92eb4:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   92eb8:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   92ebc:	008002b4 	movhi	r2,10
   92ec0:	10acb004 	addi	r2,r2,-19776
   92ec4:	10800017 	ldw	r2,0(r2)
   92ec8:	10800dc3 	ldbu	r2,55(r2)
   92ecc:	e0bffd05 	stb	r2,-12(fp)
   92ed0:	e0bffb17 	ldw	r2,-20(fp)
   92ed4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92ed8:	e0bff917 	ldw	r2,-28(fp)
   92edc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   92ee0:	e0bffd03 	ldbu	r2,-12(fp)
   92ee4:	e0bfff15 	stw	r2,-4(fp)
   92ee8:	00002c06 	br	92f9c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92eec:	0005303a 	rdctl	r2,status
   92ef0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ef4:	e0fff817 	ldw	r3,-32(fp)
   92ef8:	00bfff84 	movi	r2,-2
   92efc:	1884703a 	and	r2,r3,r2
   92f00:	1001703a 	wrctl	status,r2
  
  return context;
   92f04:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   92f08:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   92f0c:	e0bffe03 	ldbu	r2,-8(fp)
   92f10:	00c002f4 	movhi	r3,11
   92f14:	18e9c004 	addi	r3,r3,-22784
   92f18:	1085883a 	add	r2,r2,r2
   92f1c:	1085883a 	add	r2,r2,r2
   92f20:	10c5883a 	add	r2,r2,r3
   92f24:	10800017 	ldw	r2,0(r2)
   92f28:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   92f2c:	e0bffc17 	ldw	r2,-16(fp)
   92f30:	1004c03a 	cmpne	r2,r2,zero
   92f34:	1000071e 	bne	r2,zero,92f54 <OSTaskDelReq+0x114>
   92f38:	e0bffb17 	ldw	r2,-20(fp)
   92f3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92f40:	e0bff717 	ldw	r2,-36(fp)
   92f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   92f48:	008010c4 	movi	r2,67
   92f4c:	e0bfff15 	stw	r2,-4(fp)
   92f50:	00001206 	br	92f9c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   92f54:	e0bffc17 	ldw	r2,-16(fp)
   92f58:	10800058 	cmpnei	r2,r2,1
   92f5c:	1000071e 	bne	r2,zero,92f7c <OSTaskDelReq+0x13c>
   92f60:	e0bffb17 	ldw	r2,-20(fp)
   92f64:	e0bff615 	stw	r2,-40(fp)
   92f68:	e0bff617 	ldw	r2,-40(fp)
   92f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   92f70:	00800f44 	movi	r2,61
   92f74:	e0bfff15 	stw	r2,-4(fp)
   92f78:	00000806 	br	92f9c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   92f7c:	e0fffc17 	ldw	r3,-16(fp)
   92f80:	00800fc4 	movi	r2,63
   92f84:	18800dc5 	stb	r2,55(r3)
   92f88:	e0bffb17 	ldw	r2,-20(fp)
   92f8c:	e0bff515 	stw	r2,-44(fp)
   92f90:	e0bff517 	ldw	r2,-44(fp)
   92f94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92f98:	e03fff15 	stw	zero,-4(fp)
   92f9c:	e0bfff17 	ldw	r2,-4(fp)
}
   92fa0:	e037883a 	mov	sp,fp
   92fa4:	df000017 	ldw	fp,0(sp)
   92fa8:	dec00104 	addi	sp,sp,4
   92fac:	f800283a 	ret

00092fb0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   92fb0:	defff304 	addi	sp,sp,-52
   92fb4:	dfc00c15 	stw	ra,48(sp)
   92fb8:	df000b15 	stw	fp,44(sp)
   92fbc:	df000b04 	addi	fp,sp,44
   92fc0:	e17ffd15 	stw	r5,-12(fp)
   92fc4:	e1bffe15 	stw	r6,-8(fp)
   92fc8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   92fcc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   92fd0:	e0bffe17 	ldw	r2,-8(fp)
   92fd4:	1004c03a 	cmpne	r2,r2,zero
   92fd8:	1000021e 	bne	r2,zero,92fe4 <OSTaskNameGet+0x34>
        return (0);
   92fdc:	e03fff15 	stw	zero,-4(fp)
   92fe0:	00005b06 	br	93150 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   92fe4:	e0bffc03 	ldbu	r2,-16(fp)
   92fe8:	10800570 	cmpltui	r2,r2,21
   92fec:	1000081e 	bne	r2,zero,93010 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   92ff0:	e0bffc03 	ldbu	r2,-16(fp)
   92ff4:	10803fe0 	cmpeqi	r2,r2,255
   92ff8:	1000051e 	bne	r2,zero,93010 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   92ffc:	e0fffe17 	ldw	r3,-8(fp)
   93000:	00800a84 	movi	r2,42
   93004:	18800005 	stb	r2,0(r3)
            return (0);
   93008:	e03fff15 	stw	zero,-4(fp)
   9300c:	00005006 	br	93150 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   93010:	e0bffd17 	ldw	r2,-12(fp)
   93014:	1004c03a 	cmpne	r2,r2,zero
   93018:	1000051e 	bne	r2,zero,93030 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   9301c:	e0fffe17 	ldw	r3,-8(fp)
   93020:	00800304 	movi	r2,12
   93024:	18800005 	stb	r2,0(r3)
        return (0);
   93028:	e03fff15 	stw	zero,-4(fp)
   9302c:	00004806 	br	93150 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   93030:	008002b4 	movhi	r2,10
   93034:	10acaf04 	addi	r2,r2,-19780
   93038:	10800003 	ldbu	r2,0(r2)
   9303c:	10803fcc 	andi	r2,r2,255
   93040:	1005003a 	cmpeq	r2,r2,zero
   93044:	1000051e 	bne	r2,zero,9305c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   93048:	e0fffe17 	ldw	r3,-8(fp)
   9304c:	00800444 	movi	r2,17
   93050:	18800005 	stb	r2,0(r3)
        return (0);
   93054:	e03fff15 	stw	zero,-4(fp)
   93058:	00003d06 	br	93150 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9305c:	0005303a 	rdctl	r2,status
   93060:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93064:	e0fff817 	ldw	r3,-32(fp)
   93068:	00bfff84 	movi	r2,-2
   9306c:	1884703a 	and	r2,r3,r2
   93070:	1001703a 	wrctl	status,r2
  
  return context;
   93074:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   93078:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   9307c:	e0bffc03 	ldbu	r2,-16(fp)
   93080:	10803fd8 	cmpnei	r2,r2,255
   93084:	1000051e 	bne	r2,zero,9309c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   93088:	008002b4 	movhi	r2,10
   9308c:	10acb004 	addi	r2,r2,-19776
   93090:	10800017 	ldw	r2,0(r2)
   93094:	10800c83 	ldbu	r2,50(r2)
   93098:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9309c:	e0bffc03 	ldbu	r2,-16(fp)
   930a0:	00c002f4 	movhi	r3,11
   930a4:	18e9c004 	addi	r3,r3,-22784
   930a8:	1085883a 	add	r2,r2,r2
   930ac:	1085883a 	add	r2,r2,r2
   930b0:	10c5883a 	add	r2,r2,r3
   930b4:	10800017 	ldw	r2,0(r2)
   930b8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   930bc:	e0bffb17 	ldw	r2,-20(fp)
   930c0:	1004c03a 	cmpne	r2,r2,zero
   930c4:	1000091e 	bne	r2,zero,930ec <OSTaskNameGet+0x13c>
   930c8:	e0bff917 	ldw	r2,-28(fp)
   930cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   930d0:	e0bff717 	ldw	r2,-36(fp)
   930d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   930d8:	e0fffe17 	ldw	r3,-8(fp)
   930dc:	008010c4 	movi	r2,67
   930e0:	18800005 	stb	r2,0(r3)
        return (0);
   930e4:	e03fff15 	stw	zero,-4(fp)
   930e8:	00001906 	br	93150 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   930ec:	e0bffb17 	ldw	r2,-20(fp)
   930f0:	10800058 	cmpnei	r2,r2,1
   930f4:	1000091e 	bne	r2,zero,9311c <OSTaskNameGet+0x16c>
   930f8:	e0bff917 	ldw	r2,-28(fp)
   930fc:	e0bff615 	stw	r2,-40(fp)
   93100:	e0bff617 	ldw	r2,-40(fp)
   93104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   93108:	e0fffe17 	ldw	r3,-8(fp)
   9310c:	008010c4 	movi	r2,67
   93110:	18800005 	stb	r2,0(r3)
        return (0);
   93114:	e03fff15 	stw	zero,-4(fp)
   93118:	00000d06 	br	93150 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   9311c:	e0bffb17 	ldw	r2,-20(fp)
   93120:	11401304 	addi	r5,r2,76
   93124:	e13ffd17 	ldw	r4,-12(fp)
   93128:	008d9780 	call	8d978 <OS_StrCopy>
   9312c:	e0bffa05 	stb	r2,-24(fp)
   93130:	e0bff917 	ldw	r2,-28(fp)
   93134:	e0bff515 	stw	r2,-44(fp)
   93138:	e0bff517 	ldw	r2,-44(fp)
   9313c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   93140:	e0bffe17 	ldw	r2,-8(fp)
   93144:	10000005 	stb	zero,0(r2)
    return (len);
   93148:	e0bffa03 	ldbu	r2,-24(fp)
   9314c:	e0bfff15 	stw	r2,-4(fp)
   93150:	e0bfff17 	ldw	r2,-4(fp)
}
   93154:	e037883a 	mov	sp,fp
   93158:	dfc00117 	ldw	ra,4(sp)
   9315c:	df000017 	ldw	fp,0(sp)
   93160:	dec00204 	addi	sp,sp,8
   93164:	f800283a 	ret

00093168 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   93168:	defff304 	addi	sp,sp,-52
   9316c:	dfc00c15 	stw	ra,48(sp)
   93170:	df000b15 	stw	fp,44(sp)
   93174:	df000b04 	addi	fp,sp,44
   93178:	e17ffe15 	stw	r5,-8(fp)
   9317c:	e1bfff15 	stw	r6,-4(fp)
   93180:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   93184:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   93188:	e0bfff17 	ldw	r2,-4(fp)
   9318c:	1005003a 	cmpeq	r2,r2,zero
   93190:	1000611e 	bne	r2,zero,93318 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   93194:	e0bffd03 	ldbu	r2,-12(fp)
   93198:	10800570 	cmpltui	r2,r2,21
   9319c:	1000071e 	bne	r2,zero,931bc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   931a0:	e0bffd03 	ldbu	r2,-12(fp)
   931a4:	10803fe0 	cmpeqi	r2,r2,255
   931a8:	1000041e 	bne	r2,zero,931bc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   931ac:	e0ffff17 	ldw	r3,-4(fp)
   931b0:	00800a84 	movi	r2,42
   931b4:	18800005 	stb	r2,0(r3)
            return;
   931b8:	00005706 	br	93318 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   931bc:	e0bffe17 	ldw	r2,-8(fp)
   931c0:	1004c03a 	cmpne	r2,r2,zero
   931c4:	1000041e 	bne	r2,zero,931d8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   931c8:	e0ffff17 	ldw	r3,-4(fp)
   931cc:	00800304 	movi	r2,12
   931d0:	18800005 	stb	r2,0(r3)
        return;
   931d4:	00005006 	br	93318 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   931d8:	008002b4 	movhi	r2,10
   931dc:	10acaf04 	addi	r2,r2,-19780
   931e0:	10800003 	ldbu	r2,0(r2)
   931e4:	10803fcc 	andi	r2,r2,255
   931e8:	1005003a 	cmpeq	r2,r2,zero
   931ec:	1000041e 	bne	r2,zero,93200 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   931f0:	e0ffff17 	ldw	r3,-4(fp)
   931f4:	00800484 	movi	r2,18
   931f8:	18800005 	stb	r2,0(r3)
        return;
   931fc:	00004606 	br	93318 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93200:	0005303a 	rdctl	r2,status
   93204:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93208:	e0fff917 	ldw	r3,-28(fp)
   9320c:	00bfff84 	movi	r2,-2
   93210:	1884703a 	and	r2,r3,r2
   93214:	1001703a 	wrctl	status,r2
  
  return context;
   93218:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   9321c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   93220:	e0bffd03 	ldbu	r2,-12(fp)
   93224:	10803fd8 	cmpnei	r2,r2,255
   93228:	1000051e 	bne	r2,zero,93240 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   9322c:	008002b4 	movhi	r2,10
   93230:	10acb004 	addi	r2,r2,-19776
   93234:	10800017 	ldw	r2,0(r2)
   93238:	10800c83 	ldbu	r2,50(r2)
   9323c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   93240:	e0bffd03 	ldbu	r2,-12(fp)
   93244:	00c002f4 	movhi	r3,11
   93248:	18e9c004 	addi	r3,r3,-22784
   9324c:	1085883a 	add	r2,r2,r2
   93250:	1085883a 	add	r2,r2,r2
   93254:	10c5883a 	add	r2,r2,r3
   93258:	10800017 	ldw	r2,0(r2)
   9325c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   93260:	e0bffb17 	ldw	r2,-20(fp)
   93264:	1004c03a 	cmpne	r2,r2,zero
   93268:	1000081e 	bne	r2,zero,9328c <OSTaskNameSet+0x124>
   9326c:	e0bffa17 	ldw	r2,-24(fp)
   93270:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93274:	e0bff817 	ldw	r2,-32(fp)
   93278:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   9327c:	e0ffff17 	ldw	r3,-4(fp)
   93280:	008010c4 	movi	r2,67
   93284:	18800005 	stb	r2,0(r3)
        return;
   93288:	00002306 	br	93318 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   9328c:	e0bffb17 	ldw	r2,-20(fp)
   93290:	10800058 	cmpnei	r2,r2,1
   93294:	1000081e 	bne	r2,zero,932b8 <OSTaskNameSet+0x150>
   93298:	e0bffa17 	ldw	r2,-24(fp)
   9329c:	e0bff715 	stw	r2,-36(fp)
   932a0:	e0bff717 	ldw	r2,-36(fp)
   932a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   932a8:	e0ffff17 	ldw	r3,-4(fp)
   932ac:	008010c4 	movi	r2,67
   932b0:	18800005 	stb	r2,0(r3)
        return;
   932b4:	00001806 	br	93318 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   932b8:	e13ffe17 	ldw	r4,-8(fp)
   932bc:	008d9f80 	call	8d9f8 <OS_StrLen>
   932c0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   932c4:	e0bffc03 	ldbu	r2,-16(fp)
   932c8:	10800830 	cmpltui	r2,r2,32
   932cc:	1000081e 	bne	r2,zero,932f0 <OSTaskNameSet+0x188>
   932d0:	e0bffa17 	ldw	r2,-24(fp)
   932d4:	e0bff615 	stw	r2,-40(fp)
   932d8:	e0bff617 	ldw	r2,-40(fp)
   932dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   932e0:	e0ffff17 	ldw	r3,-4(fp)
   932e4:	00801044 	movi	r2,65
   932e8:	18800005 	stb	r2,0(r3)
        return;
   932ec:	00000a06 	br	93318 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   932f0:	e0bffb17 	ldw	r2,-20(fp)
   932f4:	11001304 	addi	r4,r2,76
   932f8:	e17ffe17 	ldw	r5,-8(fp)
   932fc:	008d9780 	call	8d978 <OS_StrCopy>
   93300:	e0bffa17 	ldw	r2,-24(fp)
   93304:	e0bff515 	stw	r2,-44(fp)
   93308:	e0bff517 	ldw	r2,-44(fp)
   9330c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   93310:	e0bfff17 	ldw	r2,-4(fp)
   93314:	10000005 	stb	zero,0(r2)
}
   93318:	e037883a 	mov	sp,fp
   9331c:	dfc00117 	ldw	ra,4(sp)
   93320:	df000017 	ldw	fp,0(sp)
   93324:	dec00204 	addi	sp,sp,8
   93328:	f800283a 	ret

0009332c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   9332c:	defff304 	addi	sp,sp,-52
   93330:	dfc00c15 	stw	ra,48(sp)
   93334:	df000b15 	stw	fp,44(sp)
   93338:	df000b04 	addi	fp,sp,44
   9333c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   93340:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   93344:	e0bffe03 	ldbu	r2,-8(fp)
   93348:	10800530 	cmpltui	r2,r2,20
   9334c:	1000031e 	bne	r2,zero,9335c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   93350:	00800a84 	movi	r2,42
   93354:	e0bfff15 	stw	r2,-4(fp)
   93358:	00007406 	br	9352c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9335c:	0005303a 	rdctl	r2,status
   93360:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93364:	e0fffb17 	ldw	r3,-20(fp)
   93368:	00bfff84 	movi	r2,-2
   9336c:	1884703a 	and	r2,r3,r2
   93370:	1001703a 	wrctl	status,r2
  
  return context;
   93374:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   93378:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   9337c:	e0bffe03 	ldbu	r2,-8(fp)
   93380:	00c002f4 	movhi	r3,11
   93384:	18e9c004 	addi	r3,r3,-22784
   93388:	1085883a 	add	r2,r2,r2
   9338c:	1085883a 	add	r2,r2,r2
   93390:	10c5883a 	add	r2,r2,r3
   93394:	10800017 	ldw	r2,0(r2)
   93398:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   9339c:	e0bffd17 	ldw	r2,-12(fp)
   933a0:	1004c03a 	cmpne	r2,r2,zero
   933a4:	1000071e 	bne	r2,zero,933c4 <OSTaskResume+0x98>
   933a8:	e0bffc17 	ldw	r2,-16(fp)
   933ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   933b0:	e0bffa17 	ldw	r2,-24(fp)
   933b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   933b8:	00801184 	movi	r2,70
   933bc:	e0bfff15 	stw	r2,-4(fp)
   933c0:	00005a06 	br	9352c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   933c4:	e0bffd17 	ldw	r2,-12(fp)
   933c8:	10800058 	cmpnei	r2,r2,1
   933cc:	1000071e 	bne	r2,zero,933ec <OSTaskResume+0xc0>
   933d0:	e0bffc17 	ldw	r2,-16(fp)
   933d4:	e0bff915 	stw	r2,-28(fp)
   933d8:	e0bff917 	ldw	r2,-28(fp)
   933dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   933e0:	008010c4 	movi	r2,67
   933e4:	e0bfff15 	stw	r2,-4(fp)
   933e8:	00005006 	br	9352c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   933ec:	e0bffd17 	ldw	r2,-12(fp)
   933f0:	10800c03 	ldbu	r2,48(r2)
   933f4:	10803fcc 	andi	r2,r2,255
   933f8:	1080020c 	andi	r2,r2,8
   933fc:	1005003a 	cmpeq	r2,r2,zero
   93400:	1000441e 	bne	r2,zero,93514 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   93404:	e0bffd17 	ldw	r2,-12(fp)
   93408:	10c00c03 	ldbu	r3,48(r2)
   9340c:	00bffdc4 	movi	r2,-9
   93410:	1884703a 	and	r2,r3,r2
   93414:	1007883a 	mov	r3,r2
   93418:	e0bffd17 	ldw	r2,-12(fp)
   9341c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   93420:	e0bffd17 	ldw	r2,-12(fp)
   93424:	10800c03 	ldbu	r2,48(r2)
   93428:	10803fcc 	andi	r2,r2,255
   9342c:	1004c03a 	cmpne	r2,r2,zero
   93430:	1000321e 	bne	r2,zero,934fc <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   93434:	e0bffd17 	ldw	r2,-12(fp)
   93438:	10800b8b 	ldhu	r2,46(r2)
   9343c:	10bfffcc 	andi	r2,r2,65535
   93440:	1004c03a 	cmpne	r2,r2,zero
   93444:	1000281e 	bne	r2,zero,934e8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   93448:	e0bffd17 	ldw	r2,-12(fp)
   9344c:	10c00d83 	ldbu	r3,54(r2)
   93450:	008002b4 	movhi	r2,10
   93454:	10acad04 	addi	r2,r2,-19788
   93458:	10800003 	ldbu	r2,0(r2)
   9345c:	1884b03a 	or	r2,r3,r2
   93460:	1007883a 	mov	r3,r2
   93464:	008002b4 	movhi	r2,10
   93468:	10acad04 	addi	r2,r2,-19788
   9346c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   93470:	e0bffd17 	ldw	r2,-12(fp)
   93474:	10800d03 	ldbu	r2,52(r2)
   93478:	11003fcc 	andi	r4,r2,255
   9347c:	e0bffd17 	ldw	r2,-12(fp)
   93480:	10800d03 	ldbu	r2,52(r2)
   93484:	10c03fcc 	andi	r3,r2,255
   93488:	008002b4 	movhi	r2,10
   9348c:	10acad44 	addi	r2,r2,-19787
   93490:	10c5883a 	add	r2,r2,r3
   93494:	10c00003 	ldbu	r3,0(r2)
   93498:	e0bffd17 	ldw	r2,-12(fp)
   9349c:	10800d43 	ldbu	r2,53(r2)
   934a0:	1884b03a 	or	r2,r3,r2
   934a4:	1007883a 	mov	r3,r2
   934a8:	008002b4 	movhi	r2,10
   934ac:	10acad44 	addi	r2,r2,-19787
   934b0:	1105883a 	add	r2,r2,r4
   934b4:	10c00005 	stb	r3,0(r2)
   934b8:	e0bffc17 	ldw	r2,-16(fp)
   934bc:	e0bff815 	stw	r2,-32(fp)
   934c0:	e0bff817 	ldw	r2,-32(fp)
   934c4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   934c8:	008002b4 	movhi	r2,10
   934cc:	10aca144 	addi	r2,r2,-19835
   934d0:	10800003 	ldbu	r2,0(r2)
   934d4:	10803fcc 	andi	r2,r2,255
   934d8:	10800058 	cmpnei	r2,r2,1
   934dc:	10000b1e 	bne	r2,zero,9350c <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   934e0:	008d8340 	call	8d834 <OS_Sched>
   934e4:	00000906 	br	9350c <OSTaskResume+0x1e0>
   934e8:	e0bffc17 	ldw	r2,-16(fp)
   934ec:	e0bff715 	stw	r2,-36(fp)
   934f0:	e0bff717 	ldw	r2,-36(fp)
   934f4:	1001703a 	wrctl	status,r2
   934f8:	00000406 	br	9350c <OSTaskResume+0x1e0>
   934fc:	e0bffc17 	ldw	r2,-16(fp)
   93500:	e0bff615 	stw	r2,-40(fp)
   93504:	e0bff617 	ldw	r2,-40(fp)
   93508:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   9350c:	e03fff15 	stw	zero,-4(fp)
   93510:	00000606 	br	9352c <OSTaskResume+0x200>
   93514:	e0bffc17 	ldw	r2,-16(fp)
   93518:	e0bff515 	stw	r2,-44(fp)
   9351c:	e0bff517 	ldw	r2,-44(fp)
   93520:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   93524:	00801104 	movi	r2,68
   93528:	e0bfff15 	stw	r2,-4(fp)
   9352c:	e0bfff17 	ldw	r2,-4(fp)
}
   93530:	e037883a 	mov	sp,fp
   93534:	dfc00117 	ldw	ra,4(sp)
   93538:	df000017 	ldw	fp,0(sp)
   9353c:	dec00204 	addi	sp,sp,8
   93540:	f800283a 	ret

00093544 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   93544:	defff204 	addi	sp,sp,-56
   93548:	df000d15 	stw	fp,52(sp)
   9354c:	df000d04 	addi	fp,sp,52
   93550:	e17ffe15 	stw	r5,-8(fp)
   93554:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   93558:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   9355c:	e0bffd03 	ldbu	r2,-12(fp)
   93560:	10800570 	cmpltui	r2,r2,21
   93564:	1000061e 	bne	r2,zero,93580 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   93568:	e0bffd03 	ldbu	r2,-12(fp)
   9356c:	10803fe0 	cmpeqi	r2,r2,255
   93570:	1000031e 	bne	r2,zero,93580 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   93574:	00800a84 	movi	r2,42
   93578:	e0bfff15 	stw	r2,-4(fp)
   9357c:	00006b06 	br	9372c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   93580:	e0bffe17 	ldw	r2,-8(fp)
   93584:	1004c03a 	cmpne	r2,r2,zero
   93588:	1000031e 	bne	r2,zero,93598 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   9358c:	00800244 	movi	r2,9
   93590:	e0bfff15 	stw	r2,-4(fp)
   93594:	00006506 	br	9372c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   93598:	e0bffe17 	ldw	r2,-8(fp)
   9359c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   935a0:	e0bffe17 	ldw	r2,-8(fp)
   935a4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   935a8:	0005303a 	rdctl	r2,status
   935ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   935b0:	e0fff717 	ldw	r3,-36(fp)
   935b4:	00bfff84 	movi	r2,-2
   935b8:	1884703a 	and	r2,r3,r2
   935bc:	1001703a 	wrctl	status,r2
  
  return context;
   935c0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   935c4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   935c8:	e0bffd03 	ldbu	r2,-12(fp)
   935cc:	10803fd8 	cmpnei	r2,r2,255
   935d0:	1000051e 	bne	r2,zero,935e8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   935d4:	008002b4 	movhi	r2,10
   935d8:	10acb004 	addi	r2,r2,-19776
   935dc:	10800017 	ldw	r2,0(r2)
   935e0:	10800c83 	ldbu	r2,50(r2)
   935e4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   935e8:	e0bffd03 	ldbu	r2,-12(fp)
   935ec:	00c002f4 	movhi	r3,11
   935f0:	18e9c004 	addi	r3,r3,-22784
   935f4:	1085883a 	add	r2,r2,r2
   935f8:	1085883a 	add	r2,r2,r2
   935fc:	10c5883a 	add	r2,r2,r3
   93600:	10800017 	ldw	r2,0(r2)
   93604:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   93608:	e0bffc17 	ldw	r2,-16(fp)
   9360c:	1004c03a 	cmpne	r2,r2,zero
   93610:	1000071e 	bne	r2,zero,93630 <OSTaskStkChk+0xec>
   93614:	e0bff817 	ldw	r2,-32(fp)
   93618:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9361c:	e0bff617 	ldw	r2,-40(fp)
   93620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   93624:	008010c4 	movi	r2,67
   93628:	e0bfff15 	stw	r2,-4(fp)
   9362c:	00003f06 	br	9372c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   93630:	e0bffc17 	ldw	r2,-16(fp)
   93634:	10800058 	cmpnei	r2,r2,1
   93638:	1000071e 	bne	r2,zero,93658 <OSTaskStkChk+0x114>
   9363c:	e0bff817 	ldw	r2,-32(fp)
   93640:	e0bff515 	stw	r2,-44(fp)
   93644:	e0bff517 	ldw	r2,-44(fp)
   93648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9364c:	008010c4 	movi	r2,67
   93650:	e0bfff15 	stw	r2,-4(fp)
   93654:	00003506 	br	9372c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   93658:	e0bffc17 	ldw	r2,-16(fp)
   9365c:	1080040b 	ldhu	r2,16(r2)
   93660:	10bfffcc 	andi	r2,r2,65535
   93664:	1080004c 	andi	r2,r2,1
   93668:	1004c03a 	cmpne	r2,r2,zero
   9366c:	1000071e 	bne	r2,zero,9368c <OSTaskStkChk+0x148>
   93670:	e0bff817 	ldw	r2,-32(fp)
   93674:	e0bff415 	stw	r2,-48(fp)
   93678:	e0bff417 	ldw	r2,-48(fp)
   9367c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   93680:	00801144 	movi	r2,69
   93684:	e0bfff15 	stw	r2,-4(fp)
   93688:	00002806 	br	9372c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   9368c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   93690:	e0bffc17 	ldw	r2,-16(fp)
   93694:	10800317 	ldw	r2,12(r2)
   93698:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   9369c:	e0bffc17 	ldw	r2,-16(fp)
   936a0:	10800217 	ldw	r2,8(r2)
   936a4:	e0bffb15 	stw	r2,-20(fp)
   936a8:	e0bff817 	ldw	r2,-32(fp)
   936ac:	e0bff315 	stw	r2,-52(fp)
   936b0:	e0bff317 	ldw	r2,-52(fp)
   936b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   936b8:	00000306 	br	936c8 <OSTaskStkChk+0x184>
        nfree++;
   936bc:	e0bffa17 	ldw	r2,-24(fp)
   936c0:	10800044 	addi	r2,r2,1
   936c4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   936c8:	e0bffb17 	ldw	r2,-20(fp)
   936cc:	10800017 	ldw	r2,0(r2)
   936d0:	1005003a 	cmpeq	r2,r2,zero
   936d4:	1007883a 	mov	r3,r2
   936d8:	e0bffb17 	ldw	r2,-20(fp)
   936dc:	10800104 	addi	r2,r2,4
   936e0:	e0bffb15 	stw	r2,-20(fp)
   936e4:	18803fcc 	andi	r2,r3,255
   936e8:	1004c03a 	cmpne	r2,r2,zero
   936ec:	103ff31e 	bne	r2,zero,936bc <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   936f0:	e0bffa17 	ldw	r2,-24(fp)
   936f4:	1085883a 	add	r2,r2,r2
   936f8:	1085883a 	add	r2,r2,r2
   936fc:	1007883a 	mov	r3,r2
   93700:	e0bffe17 	ldw	r2,-8(fp)
   93704:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   93708:	e0fff917 	ldw	r3,-28(fp)
   9370c:	e0bffa17 	ldw	r2,-24(fp)
   93710:	1885c83a 	sub	r2,r3,r2
   93714:	1085883a 	add	r2,r2,r2
   93718:	1085883a 	add	r2,r2,r2
   9371c:	1007883a 	mov	r3,r2
   93720:	e0bffe17 	ldw	r2,-8(fp)
   93724:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   93728:	e03fff15 	stw	zero,-4(fp)
   9372c:	e0bfff17 	ldw	r2,-4(fp)
}
   93730:	e037883a 	mov	sp,fp
   93734:	df000017 	ldw	fp,0(sp)
   93738:	dec00104 	addi	sp,sp,4
   9373c:	f800283a 	ret

00093740 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   93740:	defff404 	addi	sp,sp,-48
   93744:	dfc00b15 	stw	ra,44(sp)
   93748:	df000a15 	stw	fp,40(sp)
   9374c:	df000a04 	addi	fp,sp,40
   93750:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   93754:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   93758:	e0bffe03 	ldbu	r2,-8(fp)
   9375c:	10800518 	cmpnei	r2,r2,20
   93760:	1000031e 	bne	r2,zero,93770 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   93764:	008011c4 	movi	r2,71
   93768:	e0bfff15 	stw	r2,-4(fp)
   9376c:	00007906 	br	93954 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   93770:	e0bffe03 	ldbu	r2,-8(fp)
   93774:	10800530 	cmpltui	r2,r2,20
   93778:	1000061e 	bne	r2,zero,93794 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   9377c:	e0bffe03 	ldbu	r2,-8(fp)
   93780:	10803fe0 	cmpeqi	r2,r2,255
   93784:	1000031e 	bne	r2,zero,93794 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   93788:	00800a84 	movi	r2,42
   9378c:	e0bfff15 	stw	r2,-4(fp)
   93790:	00007006 	br	93954 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93794:	0005303a 	rdctl	r2,status
   93798:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9379c:	e0fff917 	ldw	r3,-28(fp)
   937a0:	00bfff84 	movi	r2,-2
   937a4:	1884703a 	and	r2,r3,r2
   937a8:	1001703a 	wrctl	status,r2
  
  return context;
   937ac:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   937b0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   937b4:	e0bffe03 	ldbu	r2,-8(fp)
   937b8:	10803fd8 	cmpnei	r2,r2,255
   937bc:	1000081e 	bne	r2,zero,937e0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   937c0:	008002b4 	movhi	r2,10
   937c4:	10acb004 	addi	r2,r2,-19776
   937c8:	10800017 	ldw	r2,0(r2)
   937cc:	10800c83 	ldbu	r2,50(r2)
   937d0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   937d4:	00800044 	movi	r2,1
   937d8:	e0bffd05 	stb	r2,-12(fp)
   937dc:	00000b06 	br	9380c <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   937e0:	008002b4 	movhi	r2,10
   937e4:	10acb004 	addi	r2,r2,-19776
   937e8:	10800017 	ldw	r2,0(r2)
   937ec:	10800c83 	ldbu	r2,50(r2)
   937f0:	10c03fcc 	andi	r3,r2,255
   937f4:	e0bffe03 	ldbu	r2,-8(fp)
   937f8:	1880031e 	bne	r3,r2,93808 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   937fc:	00800044 	movi	r2,1
   93800:	e0bffd05 	stb	r2,-12(fp)
   93804:	00000106 	br	9380c <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   93808:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9380c:	e0bffe03 	ldbu	r2,-8(fp)
   93810:	00c002f4 	movhi	r3,11
   93814:	18e9c004 	addi	r3,r3,-22784
   93818:	1085883a 	add	r2,r2,r2
   9381c:	1085883a 	add	r2,r2,r2
   93820:	10c5883a 	add	r2,r2,r3
   93824:	10800017 	ldw	r2,0(r2)
   93828:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   9382c:	e0bffc17 	ldw	r2,-16(fp)
   93830:	1004c03a 	cmpne	r2,r2,zero
   93834:	1000071e 	bne	r2,zero,93854 <OSTaskSuspend+0x114>
   93838:	e0bffa17 	ldw	r2,-24(fp)
   9383c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93840:	e0bff817 	ldw	r2,-32(fp)
   93844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   93848:	00801204 	movi	r2,72
   9384c:	e0bfff15 	stw	r2,-4(fp)
   93850:	00004006 	br	93954 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   93854:	e0bffc17 	ldw	r2,-16(fp)
   93858:	10800058 	cmpnei	r2,r2,1
   9385c:	1000071e 	bne	r2,zero,9387c <OSTaskSuspend+0x13c>
   93860:	e0bffa17 	ldw	r2,-24(fp)
   93864:	e0bff715 	stw	r2,-36(fp)
   93868:	e0bff717 	ldw	r2,-36(fp)
   9386c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   93870:	008010c4 	movi	r2,67
   93874:	e0bfff15 	stw	r2,-4(fp)
   93878:	00003606 	br	93954 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   9387c:	e0bffc17 	ldw	r2,-16(fp)
   93880:	10800d03 	ldbu	r2,52(r2)
   93884:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   93888:	e13ffb03 	ldbu	r4,-20(fp)
   9388c:	e0fffb03 	ldbu	r3,-20(fp)
   93890:	008002b4 	movhi	r2,10
   93894:	10acad44 	addi	r2,r2,-19787
   93898:	10c5883a 	add	r2,r2,r3
   9389c:	10800003 	ldbu	r2,0(r2)
   938a0:	1007883a 	mov	r3,r2
   938a4:	e0bffc17 	ldw	r2,-16(fp)
   938a8:	10800d43 	ldbu	r2,53(r2)
   938ac:	0084303a 	nor	r2,zero,r2
   938b0:	1884703a 	and	r2,r3,r2
   938b4:	1007883a 	mov	r3,r2
   938b8:	008002b4 	movhi	r2,10
   938bc:	10acad44 	addi	r2,r2,-19787
   938c0:	1105883a 	add	r2,r2,r4
   938c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   938c8:	e0fffb03 	ldbu	r3,-20(fp)
   938cc:	008002b4 	movhi	r2,10
   938d0:	10acad44 	addi	r2,r2,-19787
   938d4:	10c5883a 	add	r2,r2,r3
   938d8:	10800003 	ldbu	r2,0(r2)
   938dc:	10803fcc 	andi	r2,r2,255
   938e0:	1004c03a 	cmpne	r2,r2,zero
   938e4:	10000c1e 	bne	r2,zero,93918 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   938e8:	e0bffc17 	ldw	r2,-16(fp)
   938ec:	10800d83 	ldbu	r2,54(r2)
   938f0:	0084303a 	nor	r2,zero,r2
   938f4:	1007883a 	mov	r3,r2
   938f8:	008002b4 	movhi	r2,10
   938fc:	10acad04 	addi	r2,r2,-19788
   93900:	10800003 	ldbu	r2,0(r2)
   93904:	1884703a 	and	r2,r3,r2
   93908:	1007883a 	mov	r3,r2
   9390c:	008002b4 	movhi	r2,10
   93910:	10acad04 	addi	r2,r2,-19788
   93914:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   93918:	e0bffc17 	ldw	r2,-16(fp)
   9391c:	10800c03 	ldbu	r2,48(r2)
   93920:	10800214 	ori	r2,r2,8
   93924:	1007883a 	mov	r3,r2
   93928:	e0bffc17 	ldw	r2,-16(fp)
   9392c:	10c00c05 	stb	r3,48(r2)
   93930:	e0bffa17 	ldw	r2,-24(fp)
   93934:	e0bff615 	stw	r2,-40(fp)
   93938:	e0bff617 	ldw	r2,-40(fp)
   9393c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   93940:	e0bffd03 	ldbu	r2,-12(fp)
   93944:	10800058 	cmpnei	r2,r2,1
   93948:	1000011e 	bne	r2,zero,93950 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   9394c:	008d8340 	call	8d834 <OS_Sched>
    }
    return (OS_ERR_NONE);
   93950:	e03fff15 	stw	zero,-4(fp)
   93954:	e0bfff17 	ldw	r2,-4(fp)
}
   93958:	e037883a 	mov	sp,fp
   9395c:	dfc00117 	ldw	ra,4(sp)
   93960:	df000017 	ldw	fp,0(sp)
   93964:	dec00204 	addi	sp,sp,8
   93968:	f800283a 	ret

0009396c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   9396c:	defff504 	addi	sp,sp,-44
   93970:	dfc00a15 	stw	ra,40(sp)
   93974:	df000915 	stw	fp,36(sp)
   93978:	df000904 	addi	fp,sp,36
   9397c:	e17ffe15 	stw	r5,-8(fp)
   93980:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   93984:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   93988:	e0bffd03 	ldbu	r2,-12(fp)
   9398c:	10800570 	cmpltui	r2,r2,21
   93990:	1000061e 	bne	r2,zero,939ac <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   93994:	e0bffd03 	ldbu	r2,-12(fp)
   93998:	10803fe0 	cmpeqi	r2,r2,255
   9399c:	1000031e 	bne	r2,zero,939ac <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   939a0:	00800a84 	movi	r2,42
   939a4:	e0bfff15 	stw	r2,-4(fp)
   939a8:	00003b06 	br	93a98 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   939ac:	e0bffe17 	ldw	r2,-8(fp)
   939b0:	1004c03a 	cmpne	r2,r2,zero
   939b4:	1000031e 	bne	r2,zero,939c4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   939b8:	00800244 	movi	r2,9
   939bc:	e0bfff15 	stw	r2,-4(fp)
   939c0:	00003506 	br	93a98 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   939c4:	0005303a 	rdctl	r2,status
   939c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   939cc:	e0fffa17 	ldw	r3,-24(fp)
   939d0:	00bfff84 	movi	r2,-2
   939d4:	1884703a 	and	r2,r3,r2
   939d8:	1001703a 	wrctl	status,r2
  
  return context;
   939dc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   939e0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   939e4:	e0bffd03 	ldbu	r2,-12(fp)
   939e8:	10803fd8 	cmpnei	r2,r2,255
   939ec:	1000051e 	bne	r2,zero,93a04 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   939f0:	008002b4 	movhi	r2,10
   939f4:	10acb004 	addi	r2,r2,-19776
   939f8:	10800017 	ldw	r2,0(r2)
   939fc:	10800c83 	ldbu	r2,50(r2)
   93a00:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   93a04:	e0bffd03 	ldbu	r2,-12(fp)
   93a08:	00c002f4 	movhi	r3,11
   93a0c:	18e9c004 	addi	r3,r3,-22784
   93a10:	1085883a 	add	r2,r2,r2
   93a14:	1085883a 	add	r2,r2,r2
   93a18:	10c5883a 	add	r2,r2,r3
   93a1c:	10800017 	ldw	r2,0(r2)
   93a20:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   93a24:	e0bffc17 	ldw	r2,-16(fp)
   93a28:	1004c03a 	cmpne	r2,r2,zero
   93a2c:	1000071e 	bne	r2,zero,93a4c <OSTaskQuery+0xe0>
   93a30:	e0bffb17 	ldw	r2,-20(fp)
   93a34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93a38:	e0bff917 	ldw	r2,-28(fp)
   93a3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   93a40:	00800a44 	movi	r2,41
   93a44:	e0bfff15 	stw	r2,-4(fp)
   93a48:	00001306 	br	93a98 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   93a4c:	e0bffc17 	ldw	r2,-16(fp)
   93a50:	10800058 	cmpnei	r2,r2,1
   93a54:	1000071e 	bne	r2,zero,93a74 <OSTaskQuery+0x108>
   93a58:	e0bffb17 	ldw	r2,-20(fp)
   93a5c:	e0bff815 	stw	r2,-32(fp)
   93a60:	e0bff817 	ldw	r2,-32(fp)
   93a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   93a68:	008010c4 	movi	r2,67
   93a6c:	e0bfff15 	stw	r2,-4(fp)
   93a70:	00000906 	br	93a98 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   93a74:	e13ffe17 	ldw	r4,-8(fp)
   93a78:	e17ffc17 	ldw	r5,-16(fp)
   93a7c:	01801b04 	movi	r6,108
   93a80:	008d7c80 	call	8d7c8 <OS_MemCopy>
   93a84:	e0bffb17 	ldw	r2,-20(fp)
   93a88:	e0bff715 	stw	r2,-36(fp)
   93a8c:	e0bff717 	ldw	r2,-36(fp)
   93a90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93a94:	e03fff15 	stw	zero,-4(fp)
   93a98:	e0bfff17 	ldw	r2,-4(fp)
}
   93a9c:	e037883a 	mov	sp,fp
   93aa0:	dfc00117 	ldw	ra,4(sp)
   93aa4:	df000017 	ldw	fp,0(sp)
   93aa8:	dec00204 	addi	sp,sp,8
   93aac:	f800283a 	ret

00093ab0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   93ab0:	defffc04 	addi	sp,sp,-16
   93ab4:	df000315 	stw	fp,12(sp)
   93ab8:	df000304 	addi	fp,sp,12
   93abc:	e13ffd15 	stw	r4,-12(fp)
   93ac0:	e17ffe15 	stw	r5,-8(fp)
   93ac4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   93ac8:	e0bfff0b 	ldhu	r2,-4(fp)
   93acc:	1080004c 	andi	r2,r2,1
   93ad0:	10803fcc 	andi	r2,r2,255
   93ad4:	1005003a 	cmpeq	r2,r2,zero
   93ad8:	1000101e 	bne	r2,zero,93b1c <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   93adc:	e0bfff0b 	ldhu	r2,-4(fp)
   93ae0:	1080008c 	andi	r2,r2,2
   93ae4:	1005003a 	cmpeq	r2,r2,zero
   93ae8:	10000c1e 	bne	r2,zero,93b1c <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   93aec:	00000806 	br	93b10 <OS_TaskStkClr+0x60>
                size--;
   93af0:	e0bffe17 	ldw	r2,-8(fp)
   93af4:	10bfffc4 	addi	r2,r2,-1
   93af8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   93afc:	e0bffd17 	ldw	r2,-12(fp)
   93b00:	10000015 	stw	zero,0(r2)
   93b04:	e0bffd17 	ldw	r2,-12(fp)
   93b08:	10800104 	addi	r2,r2,4
   93b0c:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   93b10:	e0bffe17 	ldw	r2,-8(fp)
   93b14:	1004c03a 	cmpne	r2,r2,zero
   93b18:	103ff51e 	bne	r2,zero,93af0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   93b1c:	e037883a 	mov	sp,fp
   93b20:	df000017 	ldw	fp,0(sp)
   93b24:	dec00104 	addi	sp,sp,4
   93b28:	f800283a 	ret

00093b2c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   93b2c:	defff904 	addi	sp,sp,-28
   93b30:	dfc00615 	stw	ra,24(sp)
   93b34:	df000515 	stw	fp,20(sp)
   93b38:	df000504 	addi	fp,sp,20
   93b3c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   93b40:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   93b44:	008002b4 	movhi	r2,10
   93b48:	10acaf04 	addi	r2,r2,-19780
   93b4c:	10800003 	ldbu	r2,0(r2)
   93b50:	10803fcc 	andi	r2,r2,255
   93b54:	1004c03a 	cmpne	r2,r2,zero
   93b58:	1000421e 	bne	r2,zero,93c64 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   93b5c:	e0bfff0b 	ldhu	r2,-4(fp)
   93b60:	1005003a 	cmpeq	r2,r2,zero
   93b64:	10003f1e 	bne	r2,zero,93c64 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93b68:	0005303a 	rdctl	r2,status
   93b6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93b70:	e0fffc17 	ldw	r3,-16(fp)
   93b74:	00bfff84 	movi	r2,-2
   93b78:	1884703a 	and	r2,r3,r2
   93b7c:	1001703a 	wrctl	status,r2
  
  return context;
   93b80:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   93b84:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   93b88:	008002b4 	movhi	r2,10
   93b8c:	10acb004 	addi	r2,r2,-19776
   93b90:	10800017 	ldw	r2,0(r2)
   93b94:	10800d03 	ldbu	r2,52(r2)
   93b98:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   93b9c:	e13ffe03 	ldbu	r4,-8(fp)
   93ba0:	e0fffe03 	ldbu	r3,-8(fp)
   93ba4:	008002b4 	movhi	r2,10
   93ba8:	10acad44 	addi	r2,r2,-19787
   93bac:	10c5883a 	add	r2,r2,r3
   93bb0:	10800003 	ldbu	r2,0(r2)
   93bb4:	1007883a 	mov	r3,r2
   93bb8:	008002b4 	movhi	r2,10
   93bbc:	10acb004 	addi	r2,r2,-19776
   93bc0:	10800017 	ldw	r2,0(r2)
   93bc4:	10800d43 	ldbu	r2,53(r2)
   93bc8:	0084303a 	nor	r2,zero,r2
   93bcc:	1884703a 	and	r2,r3,r2
   93bd0:	1007883a 	mov	r3,r2
   93bd4:	008002b4 	movhi	r2,10
   93bd8:	10acad44 	addi	r2,r2,-19787
   93bdc:	1105883a 	add	r2,r2,r4
   93be0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   93be4:	e0fffe03 	ldbu	r3,-8(fp)
   93be8:	008002b4 	movhi	r2,10
   93bec:	10acad44 	addi	r2,r2,-19787
   93bf0:	10c5883a 	add	r2,r2,r3
   93bf4:	10800003 	ldbu	r2,0(r2)
   93bf8:	10803fcc 	andi	r2,r2,255
   93bfc:	1004c03a 	cmpne	r2,r2,zero
   93c00:	10000e1e 	bne	r2,zero,93c3c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   93c04:	008002b4 	movhi	r2,10
   93c08:	10acb004 	addi	r2,r2,-19776
   93c0c:	10800017 	ldw	r2,0(r2)
   93c10:	10800d83 	ldbu	r2,54(r2)
   93c14:	0084303a 	nor	r2,zero,r2
   93c18:	1007883a 	mov	r3,r2
   93c1c:	008002b4 	movhi	r2,10
   93c20:	10acad04 	addi	r2,r2,-19788
   93c24:	10800003 	ldbu	r2,0(r2)
   93c28:	1884703a 	and	r2,r3,r2
   93c2c:	1007883a 	mov	r3,r2
   93c30:	008002b4 	movhi	r2,10
   93c34:	10acad04 	addi	r2,r2,-19788
   93c38:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   93c3c:	008002b4 	movhi	r2,10
   93c40:	10acb004 	addi	r2,r2,-19776
   93c44:	10c00017 	ldw	r3,0(r2)
   93c48:	e0bfff0b 	ldhu	r2,-4(fp)
   93c4c:	18800b8d 	sth	r2,46(r3)
   93c50:	e0bffd17 	ldw	r2,-12(fp)
   93c54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93c58:	e0bffb17 	ldw	r2,-20(fp)
   93c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   93c60:	008d8340 	call	8d834 <OS_Sched>
    }
}
   93c64:	e037883a 	mov	sp,fp
   93c68:	dfc00117 	ldw	ra,4(sp)
   93c6c:	df000017 	ldw	fp,0(sp)
   93c70:	dec00204 	addi	sp,sp,8
   93c74:	f800283a 	ret

00093c78 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   93c78:	defff604 	addi	sp,sp,-40
   93c7c:	dfc00915 	stw	ra,36(sp)
   93c80:	df000815 	stw	fp,32(sp)
   93c84:	dc000715 	stw	r16,28(sp)
   93c88:	df000704 	addi	fp,sp,28
   93c8c:	e13ffb05 	stb	r4,-20(fp)
   93c90:	e17ffc05 	stb	r5,-16(fp)
   93c94:	e1bffd05 	stb	r6,-12(fp)
   93c98:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   93c9c:	008002b4 	movhi	r2,10
   93ca0:	10acaf04 	addi	r2,r2,-19780
   93ca4:	10800003 	ldbu	r2,0(r2)
   93ca8:	10803fcc 	andi	r2,r2,255
   93cac:	1005003a 	cmpeq	r2,r2,zero
   93cb0:	1000031e 	bne	r2,zero,93cc0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   93cb4:	00801544 	movi	r2,85
   93cb8:	e0bfff15 	stw	r2,-4(fp)
   93cbc:	00004b06 	br	93dec <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   93cc0:	e0bffb03 	ldbu	r2,-20(fp)
   93cc4:	1004c03a 	cmpne	r2,r2,zero
   93cc8:	10000c1e 	bne	r2,zero,93cfc <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   93ccc:	e0bffc03 	ldbu	r2,-16(fp)
   93cd0:	1004c03a 	cmpne	r2,r2,zero
   93cd4:	1000091e 	bne	r2,zero,93cfc <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   93cd8:	e0bffd03 	ldbu	r2,-12(fp)
   93cdc:	1004c03a 	cmpne	r2,r2,zero
   93ce0:	1000061e 	bne	r2,zero,93cfc <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   93ce4:	e0bffe0b 	ldhu	r2,-8(fp)
   93ce8:	1004c03a 	cmpne	r2,r2,zero
   93cec:	1000031e 	bne	r2,zero,93cfc <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   93cf0:	00801504 	movi	r2,84
   93cf4:	e0bfff15 	stw	r2,-4(fp)
   93cf8:	00003c06 	br	93dec <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   93cfc:	e0bffc03 	ldbu	r2,-16(fp)
   93d00:	10800f30 	cmpltui	r2,r2,60
   93d04:	1000031e 	bne	r2,zero,93d14 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   93d08:	00801444 	movi	r2,81
   93d0c:	e0bfff15 	stw	r2,-4(fp)
   93d10:	00003606 	br	93dec <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   93d14:	e0bffd03 	ldbu	r2,-12(fp)
   93d18:	10800f30 	cmpltui	r2,r2,60
   93d1c:	1000031e 	bne	r2,zero,93d2c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   93d20:	00801484 	movi	r2,82
   93d24:	e0bfff15 	stw	r2,-4(fp)
   93d28:	00003006 	br	93dec <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   93d2c:	e0bffe0b 	ldhu	r2,-8(fp)
   93d30:	1080fa30 	cmpltui	r2,r2,1000
   93d34:	1000031e 	bne	r2,zero,93d44 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   93d38:	008014c4 	movi	r2,83
   93d3c:	e0bfff15 	stw	r2,-4(fp)
   93d40:	00002a06 	br	93dec <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   93d44:	e13ffb03 	ldbu	r4,-20(fp)
   93d48:	01438404 	movi	r5,3600
   93d4c:	0080f440 	call	80f44 <__mulsi3>
   93d50:	1021883a 	mov	r16,r2
   93d54:	e13ffc03 	ldbu	r4,-16(fp)
   93d58:	01400f04 	movi	r5,60
   93d5c:	0080f440 	call	80f44 <__mulsi3>
   93d60:	8087883a 	add	r3,r16,r2
   93d64:	e0bffd03 	ldbu	r2,-12(fp)
   93d68:	1889883a 	add	r4,r3,r2
   93d6c:	0140fa04 	movi	r5,1000
   93d70:	0080f440 	call	80f44 <__mulsi3>
   93d74:	1021883a 	mov	r16,r2
   93d78:	e13ffe0b 	ldhu	r4,-8(fp)
   93d7c:	0140fa04 	movi	r5,1000
   93d80:	0080f440 	call	80f44 <__mulsi3>
   93d84:	1009883a 	mov	r4,r2
   93d88:	0140fa04 	movi	r5,1000
   93d8c:	008a5ec0 	call	8a5ec <__udivsi3>
   93d90:	8085883a 	add	r2,r16,r2
   93d94:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   93d98:	e0bffa17 	ldw	r2,-24(fp)
   93d9c:	1004d43a 	srli	r2,r2,16
   93da0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   93da4:	e0bffa17 	ldw	r2,-24(fp)
   93da8:	10bfffcc 	andi	r2,r2,65535
   93dac:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   93db0:	e0bffa17 	ldw	r2,-24(fp)
   93db4:	113fffcc 	andi	r4,r2,65535
   93db8:	0093b2c0 	call	93b2c <OSTimeDly>
    while (loops > 0) {
   93dbc:	00000706 	br	93ddc <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   93dc0:	01200014 	movui	r4,32768
   93dc4:	0093b2c0 	call	93b2c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   93dc8:	01200014 	movui	r4,32768
   93dcc:	0093b2c0 	call	93b2c <OSTimeDly>
        loops--;
   93dd0:	e0bff90b 	ldhu	r2,-28(fp)
   93dd4:	10bfffc4 	addi	r2,r2,-1
   93dd8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   93ddc:	e0bff90b 	ldhu	r2,-28(fp)
   93de0:	1004c03a 	cmpne	r2,r2,zero
   93de4:	103ff61e 	bne	r2,zero,93dc0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   93de8:	e03fff15 	stw	zero,-4(fp)
   93dec:	e0bfff17 	ldw	r2,-4(fp)
}
   93df0:	e037883a 	mov	sp,fp
   93df4:	dfc00217 	ldw	ra,8(sp)
   93df8:	df000117 	ldw	fp,4(sp)
   93dfc:	dc000017 	ldw	r16,0(sp)
   93e00:	dec00304 	addi	sp,sp,12
   93e04:	f800283a 	ret

00093e08 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   93e08:	defff404 	addi	sp,sp,-48
   93e0c:	dfc00b15 	stw	ra,44(sp)
   93e10:	df000a15 	stw	fp,40(sp)
   93e14:	df000a04 	addi	fp,sp,40
   93e18:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93e1c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   93e20:	e0bffe03 	ldbu	r2,-8(fp)
   93e24:	10800530 	cmpltui	r2,r2,20
   93e28:	1000031e 	bne	r2,zero,93e38 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   93e2c:	00800a84 	movi	r2,42
   93e30:	e0bfff15 	stw	r2,-4(fp)
   93e34:	00007206 	br	94000 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93e38:	0005303a 	rdctl	r2,status
   93e3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93e40:	e0fffb17 	ldw	r3,-20(fp)
   93e44:	00bfff84 	movi	r2,-2
   93e48:	1884703a 	and	r2,r3,r2
   93e4c:	1001703a 	wrctl	status,r2
  
  return context;
   93e50:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   93e54:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   93e58:	e0bffe03 	ldbu	r2,-8(fp)
   93e5c:	00c002f4 	movhi	r3,11
   93e60:	18e9c004 	addi	r3,r3,-22784
   93e64:	1085883a 	add	r2,r2,r2
   93e68:	1085883a 	add	r2,r2,r2
   93e6c:	10c5883a 	add	r2,r2,r3
   93e70:	10800017 	ldw	r2,0(r2)
   93e74:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   93e78:	e0bffd17 	ldw	r2,-12(fp)
   93e7c:	1004c03a 	cmpne	r2,r2,zero
   93e80:	1000071e 	bne	r2,zero,93ea0 <OSTimeDlyResume+0x98>
   93e84:	e0bffc17 	ldw	r2,-16(fp)
   93e88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93e8c:	e0bffa17 	ldw	r2,-24(fp)
   93e90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   93e94:	008010c4 	movi	r2,67
   93e98:	e0bfff15 	stw	r2,-4(fp)
   93e9c:	00005806 	br	94000 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   93ea0:	e0bffd17 	ldw	r2,-12(fp)
   93ea4:	10800058 	cmpnei	r2,r2,1
   93ea8:	1000071e 	bne	r2,zero,93ec8 <OSTimeDlyResume+0xc0>
   93eac:	e0bffc17 	ldw	r2,-16(fp)
   93eb0:	e0bff915 	stw	r2,-28(fp)
   93eb4:	e0bff917 	ldw	r2,-28(fp)
   93eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   93ebc:	008010c4 	movi	r2,67
   93ec0:	e0bfff15 	stw	r2,-4(fp)
   93ec4:	00004e06 	br	94000 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   93ec8:	e0bffd17 	ldw	r2,-12(fp)
   93ecc:	10800b8b 	ldhu	r2,46(r2)
   93ed0:	10bfffcc 	andi	r2,r2,65535
   93ed4:	1004c03a 	cmpne	r2,r2,zero
   93ed8:	1000071e 	bne	r2,zero,93ef8 <OSTimeDlyResume+0xf0>
   93edc:	e0bffc17 	ldw	r2,-16(fp)
   93ee0:	e0bff815 	stw	r2,-32(fp)
   93ee4:	e0bff817 	ldw	r2,-32(fp)
   93ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   93eec:	00801404 	movi	r2,80
   93ef0:	e0bfff15 	stw	r2,-4(fp)
   93ef4:	00004206 	br	94000 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   93ef8:	e0bffd17 	ldw	r2,-12(fp)
   93efc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   93f00:	e0bffd17 	ldw	r2,-12(fp)
   93f04:	10800c03 	ldbu	r2,48(r2)
   93f08:	10803fcc 	andi	r2,r2,255
   93f0c:	10800dcc 	andi	r2,r2,55
   93f10:	1005003a 	cmpeq	r2,r2,zero
   93f14:	10000b1e 	bne	r2,zero,93f44 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   93f18:	e0bffd17 	ldw	r2,-12(fp)
   93f1c:	10c00c03 	ldbu	r3,48(r2)
   93f20:	00bff204 	movi	r2,-56
   93f24:	1884703a 	and	r2,r3,r2
   93f28:	1007883a 	mov	r3,r2
   93f2c:	e0bffd17 	ldw	r2,-12(fp)
   93f30:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   93f34:	e0fffd17 	ldw	r3,-12(fp)
   93f38:	00800044 	movi	r2,1
   93f3c:	18800c45 	stb	r2,49(r3)
   93f40:	00000206 	br	93f4c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   93f44:	e0bffd17 	ldw	r2,-12(fp)
   93f48:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   93f4c:	e0bffd17 	ldw	r2,-12(fp)
   93f50:	10800c03 	ldbu	r2,48(r2)
   93f54:	10803fcc 	andi	r2,r2,255
   93f58:	1080020c 	andi	r2,r2,8
   93f5c:	1004c03a 	cmpne	r2,r2,zero
   93f60:	1000221e 	bne	r2,zero,93fec <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   93f64:	e0bffd17 	ldw	r2,-12(fp)
   93f68:	10c00d83 	ldbu	r3,54(r2)
   93f6c:	008002b4 	movhi	r2,10
   93f70:	10acad04 	addi	r2,r2,-19788
   93f74:	10800003 	ldbu	r2,0(r2)
   93f78:	1884b03a 	or	r2,r3,r2
   93f7c:	1007883a 	mov	r3,r2
   93f80:	008002b4 	movhi	r2,10
   93f84:	10acad04 	addi	r2,r2,-19788
   93f88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   93f8c:	e0bffd17 	ldw	r2,-12(fp)
   93f90:	10800d03 	ldbu	r2,52(r2)
   93f94:	11003fcc 	andi	r4,r2,255
   93f98:	e0bffd17 	ldw	r2,-12(fp)
   93f9c:	10800d03 	ldbu	r2,52(r2)
   93fa0:	10c03fcc 	andi	r3,r2,255
   93fa4:	008002b4 	movhi	r2,10
   93fa8:	10acad44 	addi	r2,r2,-19787
   93fac:	10c5883a 	add	r2,r2,r3
   93fb0:	10c00003 	ldbu	r3,0(r2)
   93fb4:	e0bffd17 	ldw	r2,-12(fp)
   93fb8:	10800d43 	ldbu	r2,53(r2)
   93fbc:	1884b03a 	or	r2,r3,r2
   93fc0:	1007883a 	mov	r3,r2
   93fc4:	008002b4 	movhi	r2,10
   93fc8:	10acad44 	addi	r2,r2,-19787
   93fcc:	1105883a 	add	r2,r2,r4
   93fd0:	10c00005 	stb	r3,0(r2)
   93fd4:	e0bffc17 	ldw	r2,-16(fp)
   93fd8:	e0bff715 	stw	r2,-36(fp)
   93fdc:	e0bff717 	ldw	r2,-36(fp)
   93fe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   93fe4:	008d8340 	call	8d834 <OS_Sched>
   93fe8:	00000406 	br	93ffc <OSTimeDlyResume+0x1f4>
   93fec:	e0bffc17 	ldw	r2,-16(fp)
   93ff0:	e0bff615 	stw	r2,-40(fp)
   93ff4:	e0bff617 	ldw	r2,-40(fp)
   93ff8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   93ffc:	e03fff15 	stw	zero,-4(fp)
   94000:	e0bfff17 	ldw	r2,-4(fp)
}
   94004:	e037883a 	mov	sp,fp
   94008:	dfc00117 	ldw	ra,4(sp)
   9400c:	df000017 	ldw	fp,0(sp)
   94010:	dec00204 	addi	sp,sp,8
   94014:	f800283a 	ret

00094018 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   94018:	defffb04 	addi	sp,sp,-20
   9401c:	df000415 	stw	fp,16(sp)
   94020:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   94024:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94028:	0005303a 	rdctl	r2,status
   9402c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94030:	e0fffd17 	ldw	r3,-12(fp)
   94034:	00bfff84 	movi	r2,-2
   94038:	1884703a 	and	r2,r3,r2
   9403c:	1001703a 	wrctl	status,r2
  
  return context;
   94040:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   94044:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   94048:	008002b4 	movhi	r2,10
   9404c:	10acb104 	addi	r2,r2,-19772
   94050:	10800017 	ldw	r2,0(r2)
   94054:	e0bfff15 	stw	r2,-4(fp)
   94058:	e0bffe17 	ldw	r2,-8(fp)
   9405c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94060:	e0bffc17 	ldw	r2,-16(fp)
   94064:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   94068:	e0bfff17 	ldw	r2,-4(fp)
}
   9406c:	e037883a 	mov	sp,fp
   94070:	df000017 	ldw	fp,0(sp)
   94074:	dec00104 	addi	sp,sp,4
   94078:	f800283a 	ret

0009407c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   9407c:	defffb04 	addi	sp,sp,-20
   94080:	df000415 	stw	fp,16(sp)
   94084:	df000404 	addi	fp,sp,16
   94088:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9408c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94090:	0005303a 	rdctl	r2,status
   94094:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94098:	e0fffd17 	ldw	r3,-12(fp)
   9409c:	00bfff84 	movi	r2,-2
   940a0:	1884703a 	and	r2,r3,r2
   940a4:	1001703a 	wrctl	status,r2
  
  return context;
   940a8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   940ac:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   940b0:	00c002b4 	movhi	r3,10
   940b4:	18ecb104 	addi	r3,r3,-19772
   940b8:	e0bfff17 	ldw	r2,-4(fp)
   940bc:	18800015 	stw	r2,0(r3)
   940c0:	e0bffe17 	ldw	r2,-8(fp)
   940c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   940c8:	e0bffc17 	ldw	r2,-16(fp)
   940cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   940d0:	e037883a 	mov	sp,fp
   940d4:	df000017 	ldw	fp,0(sp)
   940d8:	dec00104 	addi	sp,sp,4
   940dc:	f800283a 	ret

000940e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   940e0:	defffd04 	addi	sp,sp,-12
   940e4:	dfc00215 	stw	ra,8(sp)
   940e8:	df000115 	stw	fp,4(sp)
   940ec:	df000104 	addi	fp,sp,4
   940f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   940f4:	00962000 	call	96200 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   940f8:	00800044 	movi	r2,1
   940fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   94100:	e037883a 	mov	sp,fp
   94104:	dfc00117 	ldw	ra,4(sp)
   94108:	df000017 	ldw	fp,0(sp)
   9410c:	dec00204 	addi	sp,sp,8
   94110:	f800283a 	ret

00094114 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   94114:	defffe04 	addi	sp,sp,-8
   94118:	dfc00115 	stw	ra,4(sp)
   9411c:	df000015 	stw	fp,0(sp)
   94120:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   94124:	01000434 	movhi	r4,16
   94128:	21041004 	addi	r4,r4,4160
   9412c:	000b883a 	mov	r5,zero
   94130:	000d883a 	mov	r6,zero
   94134:	01c0fa04 	movi	r7,1000
   94138:	0094f9c0 	call	94f9c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   9413c:	010002b4 	movhi	r4,10
   94140:	21218004 	addi	r4,r4,-31232
   94144:	000b883a 	mov	r5,zero
   94148:	01800044 	movi	r6,1
   9414c:	00943180 	call	94318 <altera_avalon_jtag_uart_init>
   94150:	010002b4 	movhi	r4,10
   94154:	21217604 	addi	r4,r4,-31272
   94158:	00941980 	call	94198 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   9415c:	00c00434 	movhi	r3,16
   94160:	18c40004 	addi	r3,r3,4096
   94164:	00800044 	movi	r2,1
   94168:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
   9416c:	010002b4 	movhi	r4,10
   94170:	21259104 	addi	r4,r4,-27068
   94174:	00950dc0 	call	950dc <alt_up_character_lcd_init>
   94178:	010002b4 	movhi	r4,10
   9417c:	21259104 	addi	r4,r4,-27068
   94180:	00941980 	call	94198 <alt_dev_reg>
}
   94184:	e037883a 	mov	sp,fp
   94188:	dfc00117 	ldw	ra,4(sp)
   9418c:	df000017 	ldw	fp,0(sp)
   94190:	dec00204 	addi	sp,sp,8
   94194:	f800283a 	ret

00094198 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   94198:	defffd04 	addi	sp,sp,-12
   9419c:	dfc00215 	stw	ra,8(sp)
   941a0:	df000115 	stw	fp,4(sp)
   941a4:	df000104 	addi	fp,sp,4
   941a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   941ac:	e13fff17 	ldw	r4,-4(fp)
   941b0:	014002b4 	movhi	r5,10
   941b4:	2965a504 	addi	r5,r5,-26988
   941b8:	00956cc0 	call	956cc <alt_dev_llist_insert>
}
   941bc:	e037883a 	mov	sp,fp
   941c0:	dfc00117 	ldw	ra,4(sp)
   941c4:	df000017 	ldw	fp,0(sp)
   941c8:	dec00204 	addi	sp,sp,8
   941cc:	f800283a 	ret

000941d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   941d0:	defffa04 	addi	sp,sp,-24
   941d4:	dfc00515 	stw	ra,20(sp)
   941d8:	df000415 	stw	fp,16(sp)
   941dc:	df000404 	addi	fp,sp,16
   941e0:	e13ffd15 	stw	r4,-12(fp)
   941e4:	e17ffe15 	stw	r5,-8(fp)
   941e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   941ec:	e0bffd17 	ldw	r2,-12(fp)
   941f0:	10800017 	ldw	r2,0(r2)
   941f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   941f8:	e0bffc17 	ldw	r2,-16(fp)
   941fc:	11000a04 	addi	r4,r2,40
   94200:	e0bffd17 	ldw	r2,-12(fp)
   94204:	11c00217 	ldw	r7,8(r2)
   94208:	e17ffe17 	ldw	r5,-8(fp)
   9420c:	e1bfff17 	ldw	r6,-4(fp)
   94210:	00949900 	call	94990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   94214:	e037883a 	mov	sp,fp
   94218:	dfc00117 	ldw	ra,4(sp)
   9421c:	df000017 	ldw	fp,0(sp)
   94220:	dec00204 	addi	sp,sp,8
   94224:	f800283a 	ret

00094228 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   94228:	defffa04 	addi	sp,sp,-24
   9422c:	dfc00515 	stw	ra,20(sp)
   94230:	df000415 	stw	fp,16(sp)
   94234:	df000404 	addi	fp,sp,16
   94238:	e13ffd15 	stw	r4,-12(fp)
   9423c:	e17ffe15 	stw	r5,-8(fp)
   94240:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   94244:	e0bffd17 	ldw	r2,-12(fp)
   94248:	10800017 	ldw	r2,0(r2)
   9424c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   94250:	e0bffc17 	ldw	r2,-16(fp)
   94254:	11000a04 	addi	r4,r2,40
   94258:	e0bffd17 	ldw	r2,-12(fp)
   9425c:	11c00217 	ldw	r7,8(r2)
   94260:	e17ffe17 	ldw	r5,-8(fp)
   94264:	e1bfff17 	ldw	r6,-4(fp)
   94268:	0094c500 	call	94c50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9426c:	e037883a 	mov	sp,fp
   94270:	dfc00117 	ldw	ra,4(sp)
   94274:	df000017 	ldw	fp,0(sp)
   94278:	dec00204 	addi	sp,sp,8
   9427c:	f800283a 	ret

00094280 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   94280:	defffc04 	addi	sp,sp,-16
   94284:	dfc00315 	stw	ra,12(sp)
   94288:	df000215 	stw	fp,8(sp)
   9428c:	df000204 	addi	fp,sp,8
   94290:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   94294:	e0bfff17 	ldw	r2,-4(fp)
   94298:	10800017 	ldw	r2,0(r2)
   9429c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   942a0:	e0bffe17 	ldw	r2,-8(fp)
   942a4:	11000a04 	addi	r4,r2,40
   942a8:	e0bfff17 	ldw	r2,-4(fp)
   942ac:	11400217 	ldw	r5,8(r2)
   942b0:	00948280 	call	94828 <altera_avalon_jtag_uart_close>
}
   942b4:	e037883a 	mov	sp,fp
   942b8:	dfc00117 	ldw	ra,4(sp)
   942bc:	df000017 	ldw	fp,0(sp)
   942c0:	dec00204 	addi	sp,sp,8
   942c4:	f800283a 	ret

000942c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   942c8:	defffa04 	addi	sp,sp,-24
   942cc:	dfc00515 	stw	ra,20(sp)
   942d0:	df000415 	stw	fp,16(sp)
   942d4:	df000404 	addi	fp,sp,16
   942d8:	e13ffd15 	stw	r4,-12(fp)
   942dc:	e17ffe15 	stw	r5,-8(fp)
   942e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   942e4:	e0bffd17 	ldw	r2,-12(fp)
   942e8:	10800017 	ldw	r2,0(r2)
   942ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   942f0:	e0bffc17 	ldw	r2,-16(fp)
   942f4:	11000a04 	addi	r4,r2,40
   942f8:	e17ffe17 	ldw	r5,-8(fp)
   942fc:	e1bfff17 	ldw	r6,-4(fp)
   94300:	009489c0 	call	9489c <altera_avalon_jtag_uart_ioctl>
}
   94304:	e037883a 	mov	sp,fp
   94308:	dfc00117 	ldw	ra,4(sp)
   9430c:	df000017 	ldw	fp,0(sp)
   94310:	dec00204 	addi	sp,sp,8
   94314:	f800283a 	ret

00094318 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   94318:	defff404 	addi	sp,sp,-48
   9431c:	dfc00b15 	stw	ra,44(sp)
   94320:	df000a15 	stw	fp,40(sp)
   94324:	df000a04 	addi	fp,sp,40
   94328:	e13ffd15 	stw	r4,-12(fp)
   9432c:	e17ffe15 	stw	r5,-8(fp)
   94330:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   94334:	e0bffd17 	ldw	r2,-12(fp)
   94338:	10800c04 	addi	r2,r2,48
   9433c:	e0bffb15 	stw	r2,-20(fp)
   94340:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   94344:	e13ffc0b 	ldhu	r4,-16(fp)
   94348:	e17ffc84 	addi	r5,fp,-14
   9434c:	008e3dc0 	call	8e3dc <OSFlagCreate>
   94350:	1007883a 	mov	r3,r2
   94354:	e0bffb17 	ldw	r2,-20(fp)
   94358:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   9435c:	e0bffd17 	ldw	r2,-12(fp)
   94360:	10800a04 	addi	r2,r2,40
   94364:	e0bff915 	stw	r2,-28(fp)
   94368:	00800044 	movi	r2,1
   9436c:	e0bffa0d 	sth	r2,-24(fp)
   94370:	e13ffa0b 	ldhu	r4,-24(fp)
   94374:	00915e40 	call	915e4 <OSSemCreate>
   94378:	1007883a 	mov	r3,r2
   9437c:	e0bff917 	ldw	r2,-28(fp)
   94380:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   94384:	e0bffd17 	ldw	r2,-12(fp)
   94388:	10800b04 	addi	r2,r2,44
   9438c:	e0bff715 	stw	r2,-36(fp)
   94390:	00800044 	movi	r2,1
   94394:	e0bff80d 	sth	r2,-32(fp)
   94398:	e13ff80b 	ldhu	r4,-32(fp)
   9439c:	00915e40 	call	915e4 <OSSemCreate>
   943a0:	1007883a 	mov	r3,r2
   943a4:	e0bff717 	ldw	r2,-36(fp)
   943a8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   943ac:	e0fffd17 	ldw	r3,-12(fp)
   943b0:	00800044 	movi	r2,1
   943b4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   943b8:	e0bffd17 	ldw	r2,-12(fp)
   943bc:	10800017 	ldw	r2,0(r2)
   943c0:	11000104 	addi	r4,r2,4
   943c4:	e0bffd17 	ldw	r2,-12(fp)
   943c8:	10800817 	ldw	r2,32(r2)
   943cc:	1007883a 	mov	r3,r2
   943d0:	2005883a 	mov	r2,r4
   943d4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   943d8:	e13ffe17 	ldw	r4,-8(fp)
   943dc:	e17fff17 	ldw	r5,-4(fp)
   943e0:	d8000015 	stw	zero,0(sp)
   943e4:	01800274 	movhi	r6,9
   943e8:	31911404 	addi	r6,r6,17488
   943ec:	e1fffd17 	ldw	r7,-12(fp)
   943f0:	00959580 	call	95958 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   943f4:	e0bffd17 	ldw	r2,-12(fp)
   943f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   943fc:	e0bffd17 	ldw	r2,-12(fp)
   94400:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   94404:	008002b4 	movhi	r2,10
   94408:	10acb504 	addi	r2,r2,-19756
   9440c:	10800017 	ldw	r2,0(r2)
   94410:	100b883a 	mov	r5,r2
   94414:	01800274 	movhi	r6,9
   94418:	3191c504 	addi	r6,r6,18196
   9441c:	e1fffd17 	ldw	r7,-12(fp)
   94420:	009555c0 	call	9555c <alt_alarm_start>
   94424:	1004403a 	cmpge	r2,r2,zero
   94428:	1000041e 	bne	r2,zero,9443c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9442c:	e0fffd17 	ldw	r3,-12(fp)
   94430:	00a00034 	movhi	r2,32768
   94434:	10bfffc4 	addi	r2,r2,-1
   94438:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   9443c:	e037883a 	mov	sp,fp
   94440:	dfc00117 	ldw	ra,4(sp)
   94444:	df000017 	ldw	fp,0(sp)
   94448:	dec00204 	addi	sp,sp,8
   9444c:	f800283a 	ret

00094450 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   94450:	defff204 	addi	sp,sp,-56
   94454:	dfc00d15 	stw	ra,52(sp)
   94458:	df000c15 	stw	fp,48(sp)
   9445c:	df000c04 	addi	fp,sp,48
   94460:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   94464:	e0bfff17 	ldw	r2,-4(fp)
   94468:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   9446c:	e0bffd17 	ldw	r2,-12(fp)
   94470:	10800017 	ldw	r2,0(r2)
   94474:	e0bffc15 	stw	r2,-16(fp)
   94478:	00000006 	br	9447c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9447c:	e0bffc17 	ldw	r2,-16(fp)
   94480:	10800104 	addi	r2,r2,4
   94484:	10800037 	ldwio	r2,0(r2)
   94488:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9448c:	e0bffb17 	ldw	r2,-20(fp)
   94490:	1080c00c 	andi	r2,r2,768
   94494:	1005003a 	cmpeq	r2,r2,zero
   94498:	1000991e 	bne	r2,zero,94700 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   9449c:	e0bffb17 	ldw	r2,-20(fp)
   944a0:	1080400c 	andi	r2,r2,256
   944a4:	1005003a 	cmpeq	r2,r2,zero
   944a8:	1000481e 	bne	r2,zero,945cc <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   944ac:	00800074 	movhi	r2,1
   944b0:	e0bffa15 	stw	r2,-24(fp)
   944b4:	00000006 	br	944b8 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   944b8:	e0bffd17 	ldw	r2,-12(fp)
   944bc:	10800d17 	ldw	r2,52(r2)
   944c0:	10800044 	addi	r2,r2,1
   944c4:	1081ffcc 	andi	r2,r2,2047
   944c8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   944cc:	e0bffd17 	ldw	r2,-12(fp)
   944d0:	10c00e17 	ldw	r3,56(r2)
   944d4:	e0bff917 	ldw	r2,-28(fp)
   944d8:	18802826 	beq	r3,r2,9457c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   944dc:	e0bffc17 	ldw	r2,-16(fp)
   944e0:	10800037 	ldwio	r2,0(r2)
   944e4:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   944e8:	e0bffa17 	ldw	r2,-24(fp)
   944ec:	10a0000c 	andi	r2,r2,32768
   944f0:	1005003a 	cmpeq	r2,r2,zero
   944f4:	1000211e 	bne	r2,zero,9457c <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   944f8:	e0bffd17 	ldw	r2,-12(fp)
   944fc:	10c00d17 	ldw	r3,52(r2)
   94500:	e0bffa17 	ldw	r2,-24(fp)
   94504:	1009883a 	mov	r4,r2
   94508:	e0bffd17 	ldw	r2,-12(fp)
   9450c:	1885883a 	add	r2,r3,r2
   94510:	10801104 	addi	r2,r2,68
   94514:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   94518:	e0bffd17 	ldw	r2,-12(fp)
   9451c:	10800d17 	ldw	r2,52(r2)
   94520:	10800044 	addi	r2,r2,1
   94524:	10c1ffcc 	andi	r3,r2,2047
   94528:	e0bffd17 	ldw	r2,-12(fp)
   9452c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   94530:	e0bffd17 	ldw	r2,-12(fp)
   94534:	10800c17 	ldw	r2,48(r2)
   94538:	e0bff615 	stw	r2,-40(fp)
   9453c:	00800044 	movi	r2,1
   94540:	e0bff70d 	sth	r2,-36(fp)
   94544:	00800044 	movi	r2,1
   94548:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   9454c:	008002b4 	movhi	r2,10
   94550:	10aca144 	addi	r2,r2,-19835
   94554:	10800003 	ldbu	r2,0(r2)
   94558:	10803fcc 	andi	r2,r2,255
   9455c:	1005003a 	cmpeq	r2,r2,zero
   94560:	103fd51e 	bne	r2,zero,944b8 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   94564:	e17ff70b 	ldhu	r5,-36(fp)
   94568:	e1bff783 	ldbu	r6,-34(fp)
   9456c:	e1fffe04 	addi	r7,fp,-8
   94570:	e13ff617 	ldw	r4,-40(fp)
   94574:	008f1040 	call	8f104 <OSFlagPost>
    return err;
   94578:	003fcf06 	br	944b8 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9457c:	e0bffa17 	ldw	r2,-24(fp)
   94580:	10bfffec 	andhi	r2,r2,65535
   94584:	1005003a 	cmpeq	r2,r2,zero
   94588:	1000101e 	bne	r2,zero,945cc <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9458c:	e0bffd17 	ldw	r2,-12(fp)
   94590:	10c00817 	ldw	r3,32(r2)
   94594:	00bfff84 	movi	r2,-2
   94598:	1886703a 	and	r3,r3,r2
   9459c:	e0bffd17 	ldw	r2,-12(fp)
   945a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   945a4:	e0bffc17 	ldw	r2,-16(fp)
   945a8:	11000104 	addi	r4,r2,4
   945ac:	e0bffd17 	ldw	r2,-12(fp)
   945b0:	10800817 	ldw	r2,32(r2)
   945b4:	1007883a 	mov	r3,r2
   945b8:	2005883a 	mov	r2,r4
   945bc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   945c0:	e0bffc17 	ldw	r2,-16(fp)
   945c4:	10800104 	addi	r2,r2,4
   945c8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   945cc:	e0bffb17 	ldw	r2,-20(fp)
   945d0:	1080800c 	andi	r2,r2,512
   945d4:	1005003a 	cmpeq	r2,r2,zero
   945d8:	103fa81e 	bne	r2,zero,9447c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   945dc:	e0bffb17 	ldw	r2,-20(fp)
   945e0:	10bfffec 	andhi	r2,r2,65535
   945e4:	1004d43a 	srli	r2,r2,16
   945e8:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   945ec:	00002706 	br	9468c <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   945f0:	e13ffc17 	ldw	r4,-16(fp)
   945f4:	e0bffd17 	ldw	r2,-12(fp)
   945f8:	10c01017 	ldw	r3,64(r2)
   945fc:	e0bffd17 	ldw	r2,-12(fp)
   94600:	1885883a 	add	r2,r3,r2
   94604:	10821104 	addi	r2,r2,2116
   94608:	10800003 	ldbu	r2,0(r2)
   9460c:	10c03fcc 	andi	r3,r2,255
   94610:	18c0201c 	xori	r3,r3,128
   94614:	18ffe004 	addi	r3,r3,-128
   94618:	2005883a 	mov	r2,r4
   9461c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   94620:	e0bffd17 	ldw	r2,-12(fp)
   94624:	10801017 	ldw	r2,64(r2)
   94628:	10800044 	addi	r2,r2,1
   9462c:	10c1ffcc 	andi	r3,r2,2047
   94630:	e0bffd17 	ldw	r2,-12(fp)
   94634:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   94638:	e0bffd17 	ldw	r2,-12(fp)
   9463c:	10800c17 	ldw	r2,48(r2)
   94640:	e0bff415 	stw	r2,-48(fp)
   94644:	00800084 	movi	r2,2
   94648:	e0bff50d 	sth	r2,-44(fp)
   9464c:	00800044 	movi	r2,1
   94650:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   94654:	008002b4 	movhi	r2,10
   94658:	10aca144 	addi	r2,r2,-19835
   9465c:	10800003 	ldbu	r2,0(r2)
   94660:	10803fcc 	andi	r2,r2,255
   94664:	1005003a 	cmpeq	r2,r2,zero
   94668:	1000051e 	bne	r2,zero,94680 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   9466c:	e17ff50b 	ldhu	r5,-44(fp)
   94670:	e1bff583 	ldbu	r6,-42(fp)
   94674:	e1fffe44 	addi	r7,fp,-7
   94678:	e13ff417 	ldw	r4,-48(fp)
   9467c:	008f1040 	call	8f104 <OSFlagPost>

        space--;
   94680:	e0bff817 	ldw	r2,-32(fp)
   94684:	10bfffc4 	addi	r2,r2,-1
   94688:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9468c:	e0bff817 	ldw	r2,-32(fp)
   94690:	1005003a 	cmpeq	r2,r2,zero
   94694:	1000051e 	bne	r2,zero,946ac <altera_avalon_jtag_uart_irq+0x25c>
   94698:	e0bffd17 	ldw	r2,-12(fp)
   9469c:	10c01017 	ldw	r3,64(r2)
   946a0:	e0bffd17 	ldw	r2,-12(fp)
   946a4:	10800f17 	ldw	r2,60(r2)
   946a8:	18bfd11e 	bne	r3,r2,945f0 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   946ac:	e0bff817 	ldw	r2,-32(fp)
   946b0:	1005003a 	cmpeq	r2,r2,zero
   946b4:	103f711e 	bne	r2,zero,9447c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   946b8:	e0bffd17 	ldw	r2,-12(fp)
   946bc:	10c00817 	ldw	r3,32(r2)
   946c0:	00bfff44 	movi	r2,-3
   946c4:	1886703a 	and	r3,r3,r2
   946c8:	e0bffd17 	ldw	r2,-12(fp)
   946cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   946d0:	e0bffd17 	ldw	r2,-12(fp)
   946d4:	10800017 	ldw	r2,0(r2)
   946d8:	11000104 	addi	r4,r2,4
   946dc:	e0bffd17 	ldw	r2,-12(fp)
   946e0:	10800817 	ldw	r2,32(r2)
   946e4:	1007883a 	mov	r3,r2
   946e8:	2005883a 	mov	r2,r4
   946ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   946f0:	e0bffc17 	ldw	r2,-16(fp)
   946f4:	10800104 	addi	r2,r2,4
   946f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   946fc:	003f5f06 	br	9447c <altera_avalon_jtag_uart_irq+0x2c>
}
   94700:	e037883a 	mov	sp,fp
   94704:	dfc00117 	ldw	ra,4(sp)
   94708:	df000017 	ldw	fp,0(sp)
   9470c:	dec00204 	addi	sp,sp,8
   94710:	f800283a 	ret

00094714 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   94714:	defff804 	addi	sp,sp,-32
   94718:	dfc00715 	stw	ra,28(sp)
   9471c:	df000615 	stw	fp,24(sp)
   94720:	df000604 	addi	fp,sp,24
   94724:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   94728:	e0bfff17 	ldw	r2,-4(fp)
   9472c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   94730:	e0bffd17 	ldw	r2,-12(fp)
   94734:	10800017 	ldw	r2,0(r2)
   94738:	10800104 	addi	r2,r2,4
   9473c:	10800037 	ldwio	r2,0(r2)
   94740:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   94744:	e0bffc17 	ldw	r2,-16(fp)
   94748:	1081000c 	andi	r2,r2,1024
   9474c:	1005003a 	cmpeq	r2,r2,zero
   94750:	10000c1e 	bne	r2,zero,94784 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   94754:	e0bffd17 	ldw	r2,-12(fp)
   94758:	10800017 	ldw	r2,0(r2)
   9475c:	11000104 	addi	r4,r2,4
   94760:	e0bffd17 	ldw	r2,-12(fp)
   94764:	10800817 	ldw	r2,32(r2)
   94768:	10810014 	ori	r2,r2,1024
   9476c:	1007883a 	mov	r3,r2
   94770:	2005883a 	mov	r2,r4
   94774:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   94778:	e0bffd17 	ldw	r2,-12(fp)
   9477c:	10000915 	stw	zero,36(r2)
   94780:	00002106 	br	94808 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   94784:	e0bffd17 	ldw	r2,-12(fp)
   94788:	10c00917 	ldw	r3,36(r2)
   9478c:	00a00034 	movhi	r2,32768
   94790:	10bfff04 	addi	r2,r2,-4
   94794:	10c01c36 	bltu	r2,r3,94808 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   94798:	e0bffd17 	ldw	r2,-12(fp)
   9479c:	10800917 	ldw	r2,36(r2)
   947a0:	10c00044 	addi	r3,r2,1
   947a4:	e0bffd17 	ldw	r2,-12(fp)
   947a8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   947ac:	e0bffd17 	ldw	r2,-12(fp)
   947b0:	10c00917 	ldw	r3,36(r2)
   947b4:	e0bffd17 	ldw	r2,-12(fp)
   947b8:	10800117 	ldw	r2,4(r2)
   947bc:	18801236 	bltu	r3,r2,94808 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   947c0:	e0bffd17 	ldw	r2,-12(fp)
   947c4:	10800c17 	ldw	r2,48(r2)
   947c8:	e0bffa15 	stw	r2,-24(fp)
   947cc:	00800104 	movi	r2,4
   947d0:	e0bffb0d 	sth	r2,-20(fp)
   947d4:	00800044 	movi	r2,1
   947d8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   947dc:	008002b4 	movhi	r2,10
   947e0:	10aca144 	addi	r2,r2,-19835
   947e4:	10800003 	ldbu	r2,0(r2)
   947e8:	10803fcc 	andi	r2,r2,255
   947ec:	1005003a 	cmpeq	r2,r2,zero
   947f0:	1000051e 	bne	r2,zero,94808 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   947f4:	e17ffb0b 	ldhu	r5,-20(fp)
   947f8:	e1bffb83 	ldbu	r6,-18(fp)
   947fc:	e1fffe04 	addi	r7,fp,-8
   94800:	e13ffa17 	ldw	r4,-24(fp)
   94804:	008f1040 	call	8f104 <OSFlagPost>
   94808:	008002b4 	movhi	r2,10
   9480c:	10acb504 	addi	r2,r2,-19756
   94810:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   94814:	e037883a 	mov	sp,fp
   94818:	dfc00117 	ldw	ra,4(sp)
   9481c:	df000017 	ldw	fp,0(sp)
   94820:	dec00204 	addi	sp,sp,8
   94824:	f800283a 	ret

00094828 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   94828:	defffc04 	addi	sp,sp,-16
   9482c:	df000315 	stw	fp,12(sp)
   94830:	df000304 	addi	fp,sp,12
   94834:	e13ffd15 	stw	r4,-12(fp)
   94838:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9483c:	00000706 	br	9485c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   94840:	e0bffe17 	ldw	r2,-8(fp)
   94844:	1090000c 	andi	r2,r2,16384
   94848:	1005003a 	cmpeq	r2,r2,zero
   9484c:	1000031e 	bne	r2,zero,9485c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   94850:	00bffd44 	movi	r2,-11
   94854:	e0bfff15 	stw	r2,-4(fp)
   94858:	00000b06 	br	94888 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9485c:	e0bffd17 	ldw	r2,-12(fp)
   94860:	10c01017 	ldw	r3,64(r2)
   94864:	e0bffd17 	ldw	r2,-12(fp)
   94868:	10800f17 	ldw	r2,60(r2)
   9486c:	18800526 	beq	r3,r2,94884 <altera_avalon_jtag_uart_close+0x5c>
   94870:	e0bffd17 	ldw	r2,-12(fp)
   94874:	10c00917 	ldw	r3,36(r2)
   94878:	e0bffd17 	ldw	r2,-12(fp)
   9487c:	10800117 	ldw	r2,4(r2)
   94880:	18bfef36 	bltu	r3,r2,94840 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   94884:	e03fff15 	stw	zero,-4(fp)
   94888:	e0bfff17 	ldw	r2,-4(fp)
}
   9488c:	e037883a 	mov	sp,fp
   94890:	df000017 	ldw	fp,0(sp)
   94894:	dec00104 	addi	sp,sp,4
   94898:	f800283a 	ret

0009489c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   9489c:	defff804 	addi	sp,sp,-32
   948a0:	df000715 	stw	fp,28(sp)
   948a4:	df000704 	addi	fp,sp,28
   948a8:	e13ffb15 	stw	r4,-20(fp)
   948ac:	e17ffc15 	stw	r5,-16(fp)
   948b0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   948b4:	00bff9c4 	movi	r2,-25
   948b8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   948bc:	e0bffc17 	ldw	r2,-16(fp)
   948c0:	e0bfff15 	stw	r2,-4(fp)
   948c4:	e0ffff17 	ldw	r3,-4(fp)
   948c8:	189a8060 	cmpeqi	r2,r3,27137
   948cc:	1000041e 	bne	r2,zero,948e0 <altera_avalon_jtag_uart_ioctl+0x44>
   948d0:	e0ffff17 	ldw	r3,-4(fp)
   948d4:	189a80a0 	cmpeqi	r2,r3,27138
   948d8:	10001b1e 	bne	r2,zero,94948 <altera_avalon_jtag_uart_ioctl+0xac>
   948dc:	00002706 	br	9497c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   948e0:	e0bffb17 	ldw	r2,-20(fp)
   948e4:	10c00117 	ldw	r3,4(r2)
   948e8:	00a00034 	movhi	r2,32768
   948ec:	10bfffc4 	addi	r2,r2,-1
   948f0:	18802226 	beq	r3,r2,9497c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   948f4:	e0bffd17 	ldw	r2,-12(fp)
   948f8:	10800017 	ldw	r2,0(r2)
   948fc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   94900:	e0bff917 	ldw	r2,-28(fp)
   94904:	10800090 	cmplti	r2,r2,2
   94908:	1000071e 	bne	r2,zero,94928 <altera_avalon_jtag_uart_ioctl+0x8c>
   9490c:	e0fff917 	ldw	r3,-28(fp)
   94910:	00a00034 	movhi	r2,32768
   94914:	10bfffc4 	addi	r2,r2,-1
   94918:	18800326 	beq	r3,r2,94928 <altera_avalon_jtag_uart_ioctl+0x8c>
   9491c:	e0bff917 	ldw	r2,-28(fp)
   94920:	e0bffe15 	stw	r2,-8(fp)
   94924:	00000306 	br	94934 <altera_avalon_jtag_uart_ioctl+0x98>
   94928:	00e00034 	movhi	r3,32768
   9492c:	18ffff84 	addi	r3,r3,-2
   94930:	e0fffe15 	stw	r3,-8(fp)
   94934:	e0bffb17 	ldw	r2,-20(fp)
   94938:	e0fffe17 	ldw	r3,-8(fp)
   9493c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   94940:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   94944:	00000d06 	br	9497c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   94948:	e0bffb17 	ldw	r2,-20(fp)
   9494c:	10c00117 	ldw	r3,4(r2)
   94950:	00a00034 	movhi	r2,32768
   94954:	10bfffc4 	addi	r2,r2,-1
   94958:	18800826 	beq	r3,r2,9497c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9495c:	e13ffd17 	ldw	r4,-12(fp)
   94960:	e0bffb17 	ldw	r2,-20(fp)
   94964:	10c00917 	ldw	r3,36(r2)
   94968:	e0bffb17 	ldw	r2,-20(fp)
   9496c:	10800117 	ldw	r2,4(r2)
   94970:	1885803a 	cmpltu	r2,r3,r2
   94974:	20800015 	stw	r2,0(r4)
      rc = 0;
   94978:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   9497c:	e0bffa17 	ldw	r2,-24(fp)
}
   94980:	e037883a 	mov	sp,fp
   94984:	df000017 	ldw	fp,0(sp)
   94988:	dec00104 	addi	sp,sp,4
   9498c:	f800283a 	ret

00094990 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   94990:	deffeb04 	addi	sp,sp,-84
   94994:	dfc01415 	stw	ra,80(sp)
   94998:	df001315 	stw	fp,76(sp)
   9499c:	df001304 	addi	fp,sp,76
   949a0:	e13ffb15 	stw	r4,-20(fp)
   949a4:	e17ffc15 	stw	r5,-16(fp)
   949a8:	e1bffd15 	stw	r6,-12(fp)
   949ac:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   949b0:	e0bffc17 	ldw	r2,-16(fp)
   949b4:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   949b8:	e0bffb17 	ldw	r2,-20(fp)
   949bc:	10800a17 	ldw	r2,40(r2)
   949c0:	e0bff315 	stw	r2,-52(fp)
   949c4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   949c8:	e17ff40b 	ldhu	r5,-48(fp)
   949cc:	e1bffa44 	addi	r6,fp,-23
   949d0:	e13ff317 	ldw	r4,-52(fp)
   949d4:	00919980 	call	91998 <OSSemPend>

  while (space > 0)
   949d8:	00006406 	br	94b6c <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   949dc:	e0bffb17 	ldw	r2,-20(fp)
   949e0:	10800d17 	ldw	r2,52(r2)
   949e4:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   949e8:	e0bffb17 	ldw	r2,-20(fp)
   949ec:	10800e17 	ldw	r2,56(r2)
   949f0:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   949f4:	e0fff617 	ldw	r3,-40(fp)
   949f8:	e0bff517 	ldw	r2,-44(fp)
   949fc:	18800536 	bltu	r3,r2,94a14 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   94a00:	e0bff617 	ldw	r2,-40(fp)
   94a04:	e0fff517 	ldw	r3,-44(fp)
   94a08:	10c5c83a 	sub	r2,r2,r3
   94a0c:	e0bff715 	stw	r2,-36(fp)
   94a10:	00000406 	br	94a24 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   94a14:	00820004 	movi	r2,2048
   94a18:	e0fff517 	ldw	r3,-44(fp)
   94a1c:	10c5c83a 	sub	r2,r2,r3
   94a20:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   94a24:	e0bff717 	ldw	r2,-36(fp)
   94a28:	1005003a 	cmpeq	r2,r2,zero
   94a2c:	10001f1e 	bne	r2,zero,94aac <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   94a30:	e0fffd17 	ldw	r3,-12(fp)
   94a34:	e0bff717 	ldw	r2,-36(fp)
   94a38:	1880022e 	bgeu	r3,r2,94a44 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   94a3c:	e0bffd17 	ldw	r2,-12(fp)
   94a40:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   94a44:	e0bffb17 	ldw	r2,-20(fp)
   94a48:	10c01104 	addi	r3,r2,68
   94a4c:	e0bff517 	ldw	r2,-44(fp)
   94a50:	1887883a 	add	r3,r3,r2
   94a54:	e0bff917 	ldw	r2,-28(fp)
   94a58:	1009883a 	mov	r4,r2
   94a5c:	180b883a 	mov	r5,r3
   94a60:	e1bff717 	ldw	r6,-36(fp)
   94a64:	008656c0 	call	8656c <memcpy>
      ptr   += n;
   94a68:	e0fff717 	ldw	r3,-36(fp)
   94a6c:	e0bff917 	ldw	r2,-28(fp)
   94a70:	10c5883a 	add	r2,r2,r3
   94a74:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   94a78:	e0fffd17 	ldw	r3,-12(fp)
   94a7c:	e0bff717 	ldw	r2,-36(fp)
   94a80:	1885c83a 	sub	r2,r3,r2
   94a84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   94a88:	e0fff517 	ldw	r3,-44(fp)
   94a8c:	e0bff717 	ldw	r2,-36(fp)
   94a90:	1885883a 	add	r2,r3,r2
   94a94:	10c1ffcc 	andi	r3,r2,2047
   94a98:	e0bffb17 	ldw	r2,-20(fp)
   94a9c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   94aa0:	e0bffd17 	ldw	r2,-12(fp)
   94aa4:	10800048 	cmpgei	r2,r2,1
   94aa8:	103fcc1e 	bne	r2,zero,949dc <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   94aac:	e0fff917 	ldw	r3,-28(fp)
   94ab0:	e0bffc17 	ldw	r2,-16(fp)
   94ab4:	1880301e 	bne	r3,r2,94b78 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   94ab8:	e0bffe17 	ldw	r2,-8(fp)
   94abc:	1090000c 	andi	r2,r2,16384
   94ac0:	1004c03a 	cmpne	r2,r2,zero
   94ac4:	10002c1e 	bne	r2,zero,94b78 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   94ac8:	008002b4 	movhi	r2,10
   94acc:	10aca144 	addi	r2,r2,-19835
   94ad0:	10800003 	ldbu	r2,0(r2)
   94ad4:	10803fcc 	andi	r2,r2,255
   94ad8:	10800058 	cmpnei	r2,r2,1
   94adc:	1000161e 	bne	r2,zero,94b38 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   94ae0:	e0bffb17 	ldw	r2,-20(fp)
   94ae4:	10800c17 	ldw	r2,48(r2)
   94ae8:	e0bff015 	stw	r2,-64(fp)
   94aec:	00800144 	movi	r2,5
   94af0:	e0bff10d 	sth	r2,-60(fp)
   94af4:	00bfe0c4 	movi	r2,-125
   94af8:	e0bff185 	stb	r2,-58(fp)
   94afc:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   94b00:	008002b4 	movhi	r2,10
   94b04:	10aca144 	addi	r2,r2,-19835
   94b08:	10800003 	ldbu	r2,0(r2)
   94b0c:	10803fcc 	andi	r2,r2,255
   94b10:	1005003a 	cmpeq	r2,r2,zero
   94b14:	1000111e 	bne	r2,zero,94b5c <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   94b18:	e17ff10b 	ldhu	r5,-60(fp)
   94b1c:	e1bff183 	ldbu	r6,-58(fp)
   94b20:	e1fff20b 	ldhu	r7,-56(fp)
   94b24:	e0bffa04 	addi	r2,fp,-24
   94b28:	d8800015 	stw	r2,0(sp)
   94b2c:	e13ff017 	ldw	r4,-64(fp)
   94b30:	008ea580 	call	8ea58 <OSFlagPend>
    return err;
   94b34:	00000906 	br	94b5c <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   94b38:	e0bffb17 	ldw	r2,-20(fp)
   94b3c:	10c00d17 	ldw	r3,52(r2)
   94b40:	e0bff617 	ldw	r2,-40(fp)
   94b44:	1880051e 	bne	r3,r2,94b5c <altera_avalon_jtag_uart_read+0x1cc>
   94b48:	e0bffb17 	ldw	r2,-20(fp)
   94b4c:	10c00917 	ldw	r3,36(r2)
   94b50:	e0bffb17 	ldw	r2,-20(fp)
   94b54:	10800117 	ldw	r2,4(r2)
   94b58:	18bff736 	bltu	r3,r2,94b38 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   94b5c:	e0bffb17 	ldw	r2,-20(fp)
   94b60:	10c00d17 	ldw	r3,52(r2)
   94b64:	e0bff617 	ldw	r2,-40(fp)
   94b68:	18800326 	beq	r3,r2,94b78 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   94b6c:	e0bffd17 	ldw	r2,-12(fp)
   94b70:	10800048 	cmpgei	r2,r2,1
   94b74:	103f991e 	bne	r2,zero,949dc <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   94b78:	e0bffb17 	ldw	r2,-20(fp)
   94b7c:	11000a17 	ldw	r4,40(r2)
   94b80:	0091d900 	call	91d90 <OSSemPost>

  if (ptr != buffer)
   94b84:	e0fff917 	ldw	r3,-28(fp)
   94b88:	e0bffc17 	ldw	r2,-16(fp)
   94b8c:	18801926 	beq	r3,r2,94bf4 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94b90:	0005303a 	rdctl	r2,status
   94b94:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94b98:	e0ffef17 	ldw	r3,-68(fp)
   94b9c:	00bfff84 	movi	r2,-2
   94ba0:	1884703a 	and	r2,r3,r2
   94ba4:	1001703a 	wrctl	status,r2
  
  return context;
   94ba8:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   94bac:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   94bb0:	e0bffb17 	ldw	r2,-20(fp)
   94bb4:	10800817 	ldw	r2,32(r2)
   94bb8:	10c00054 	ori	r3,r2,1
   94bbc:	e0bffb17 	ldw	r2,-20(fp)
   94bc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   94bc4:	e0bffb17 	ldw	r2,-20(fp)
   94bc8:	10800017 	ldw	r2,0(r2)
   94bcc:	11000104 	addi	r4,r2,4
   94bd0:	e0bffb17 	ldw	r2,-20(fp)
   94bd4:	10800817 	ldw	r2,32(r2)
   94bd8:	1007883a 	mov	r3,r2
   94bdc:	2005883a 	mov	r2,r4
   94be0:	10c00035 	stwio	r3,0(r2)
   94be4:	e0bff817 	ldw	r2,-32(fp)
   94be8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94bec:	e0bfee17 	ldw	r2,-72(fp)
   94bf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   94bf4:	e0fff917 	ldw	r3,-28(fp)
   94bf8:	e0bffc17 	ldw	r2,-16(fp)
   94bfc:	18800526 	beq	r3,r2,94c14 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   94c00:	e0fff917 	ldw	r3,-28(fp)
   94c04:	e0bffc17 	ldw	r2,-16(fp)
   94c08:	1887c83a 	sub	r3,r3,r2
   94c0c:	e0ffff15 	stw	r3,-4(fp)
   94c10:	00000906 	br	94c38 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   94c14:	e0bffe17 	ldw	r2,-8(fp)
   94c18:	1090000c 	andi	r2,r2,16384
   94c1c:	1005003a 	cmpeq	r2,r2,zero
   94c20:	1000031e 	bne	r2,zero,94c30 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   94c24:	00bffd44 	movi	r2,-11
   94c28:	e0bfff15 	stw	r2,-4(fp)
   94c2c:	00000206 	br	94c38 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   94c30:	00bffec4 	movi	r2,-5
   94c34:	e0bfff15 	stw	r2,-4(fp)
   94c38:	e0bfff17 	ldw	r2,-4(fp)
}
   94c3c:	e037883a 	mov	sp,fp
   94c40:	dfc00117 	ldw	ra,4(sp)
   94c44:	df000017 	ldw	fp,0(sp)
   94c48:	dec00204 	addi	sp,sp,8
   94c4c:	f800283a 	ret

00094c50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   94c50:	deffeb04 	addi	sp,sp,-84
   94c54:	dfc01415 	stw	ra,80(sp)
   94c58:	df001315 	stw	fp,76(sp)
   94c5c:	df001304 	addi	fp,sp,76
   94c60:	e13ffb15 	stw	r4,-20(fp)
   94c64:	e17ffc15 	stw	r5,-16(fp)
   94c68:	e1bffd15 	stw	r6,-12(fp)
   94c6c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   94c70:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   94c74:	e0bffc17 	ldw	r2,-16(fp)
   94c78:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   94c7c:	e0bffb17 	ldw	r2,-20(fp)
   94c80:	10800b17 	ldw	r2,44(r2)
   94c84:	e0bff315 	stw	r2,-52(fp)
   94c88:	e03ff40d 	sth	zero,-48(fp)
   94c8c:	e17ff40b 	ldhu	r5,-48(fp)
   94c90:	e1bffa04 	addi	r6,fp,-24
   94c94:	e13ff317 	ldw	r4,-52(fp)
   94c98:	00919980 	call	91998 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   94c9c:	00003a06 	br	94d88 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   94ca0:	e0bffb17 	ldw	r2,-20(fp)
   94ca4:	10800f17 	ldw	r2,60(r2)
   94ca8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   94cac:	e0bffb17 	ldw	r2,-20(fp)
   94cb0:	10801017 	ldw	r2,64(r2)
   94cb4:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   94cb8:	e0fff917 	ldw	r3,-28(fp)
   94cbc:	e0bff817 	ldw	r2,-32(fp)
   94cc0:	1880062e 	bgeu	r3,r2,94cdc <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   94cc4:	e0fff817 	ldw	r3,-32(fp)
   94cc8:	e0bff917 	ldw	r2,-28(fp)
   94ccc:	1885c83a 	sub	r2,r3,r2
   94cd0:	10bfffc4 	addi	r2,r2,-1
   94cd4:	e0bff715 	stw	r2,-36(fp)
   94cd8:	00000c06 	br	94d0c <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   94cdc:	e0bff817 	ldw	r2,-32(fp)
   94ce0:	1005003a 	cmpeq	r2,r2,zero
   94ce4:	1000051e 	bne	r2,zero,94cfc <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   94ce8:	00820004 	movi	r2,2048
   94cec:	e0fff917 	ldw	r3,-28(fp)
   94cf0:	10c5c83a 	sub	r2,r2,r3
   94cf4:	e0bff715 	stw	r2,-36(fp)
   94cf8:	00000406 	br	94d0c <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   94cfc:	0081ffc4 	movi	r2,2047
   94d00:	e0fff917 	ldw	r3,-28(fp)
   94d04:	10c5c83a 	sub	r2,r2,r3
   94d08:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   94d0c:	e0bff717 	ldw	r2,-36(fp)
   94d10:	1005003a 	cmpeq	r2,r2,zero
   94d14:	10001f1e 	bne	r2,zero,94d94 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   94d18:	e0fffd17 	ldw	r3,-12(fp)
   94d1c:	e0bff717 	ldw	r2,-36(fp)
   94d20:	1880022e 	bgeu	r3,r2,94d2c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   94d24:	e0bffd17 	ldw	r2,-12(fp)
   94d28:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   94d2c:	e0bffb17 	ldw	r2,-20(fp)
   94d30:	10c21104 	addi	r3,r2,2116
   94d34:	e0bff917 	ldw	r2,-28(fp)
   94d38:	1885883a 	add	r2,r3,r2
   94d3c:	e0fffc17 	ldw	r3,-16(fp)
   94d40:	1009883a 	mov	r4,r2
   94d44:	180b883a 	mov	r5,r3
   94d48:	e1bff717 	ldw	r6,-36(fp)
   94d4c:	008656c0 	call	8656c <memcpy>
      ptr   += n;
   94d50:	e0fff717 	ldw	r3,-36(fp)
   94d54:	e0bffc17 	ldw	r2,-16(fp)
   94d58:	10c5883a 	add	r2,r2,r3
   94d5c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   94d60:	e0fffd17 	ldw	r3,-12(fp)
   94d64:	e0bff717 	ldw	r2,-36(fp)
   94d68:	1885c83a 	sub	r2,r3,r2
   94d6c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   94d70:	e0fff917 	ldw	r3,-28(fp)
   94d74:	e0bff717 	ldw	r2,-36(fp)
   94d78:	1885883a 	add	r2,r3,r2
   94d7c:	10c1ffcc 	andi	r3,r2,2047
   94d80:	e0bffb17 	ldw	r2,-20(fp)
   94d84:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   94d88:	e0bffd17 	ldw	r2,-12(fp)
   94d8c:	10800048 	cmpgei	r2,r2,1
   94d90:	103fc31e 	bne	r2,zero,94ca0 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94d94:	0005303a 	rdctl	r2,status
   94d98:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94d9c:	e0fff217 	ldw	r3,-56(fp)
   94da0:	00bfff84 	movi	r2,-2
   94da4:	1884703a 	and	r2,r3,r2
   94da8:	1001703a 	wrctl	status,r2
  
  return context;
   94dac:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   94db0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   94db4:	e0bffb17 	ldw	r2,-20(fp)
   94db8:	10800817 	ldw	r2,32(r2)
   94dbc:	10c00094 	ori	r3,r2,2
   94dc0:	e0bffb17 	ldw	r2,-20(fp)
   94dc4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   94dc8:	e0bffb17 	ldw	r2,-20(fp)
   94dcc:	10800017 	ldw	r2,0(r2)
   94dd0:	11000104 	addi	r4,r2,4
   94dd4:	e0bffb17 	ldw	r2,-20(fp)
   94dd8:	10800817 	ldw	r2,32(r2)
   94ddc:	1007883a 	mov	r3,r2
   94de0:	2005883a 	mov	r2,r4
   94de4:	10c00035 	stwio	r3,0(r2)
   94de8:	e0bff617 	ldw	r2,-40(fp)
   94dec:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94df0:	e0bff117 	ldw	r2,-60(fp)
   94df4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   94df8:	e0bffd17 	ldw	r2,-12(fp)
   94dfc:	10800050 	cmplti	r2,r2,1
   94e00:	10002d1e 	bne	r2,zero,94eb8 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   94e04:	e0bffe17 	ldw	r2,-8(fp)
   94e08:	1090000c 	andi	r2,r2,16384
   94e0c:	1004c03a 	cmpne	r2,r2,zero
   94e10:	10002c1e 	bne	r2,zero,94ec4 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   94e14:	008002b4 	movhi	r2,10
   94e18:	10aca144 	addi	r2,r2,-19835
   94e1c:	10800003 	ldbu	r2,0(r2)
   94e20:	10803fcc 	andi	r2,r2,255
   94e24:	10800058 	cmpnei	r2,r2,1
   94e28:	1000161e 	bne	r2,zero,94e84 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   94e2c:	e0bffb17 	ldw	r2,-20(fp)
   94e30:	10800c17 	ldw	r2,48(r2)
   94e34:	e0bfee15 	stw	r2,-72(fp)
   94e38:	00800184 	movi	r2,6
   94e3c:	e0bfef0d 	sth	r2,-68(fp)
   94e40:	00bfe0c4 	movi	r2,-125
   94e44:	e0bfef85 	stb	r2,-66(fp)
   94e48:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   94e4c:	008002b4 	movhi	r2,10
   94e50:	10aca144 	addi	r2,r2,-19835
   94e54:	10800003 	ldbu	r2,0(r2)
   94e58:	10803fcc 	andi	r2,r2,255
   94e5c:	1005003a 	cmpeq	r2,r2,zero
   94e60:	1000111e 	bne	r2,zero,94ea8 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   94e64:	e17fef0b 	ldhu	r5,-68(fp)
   94e68:	e1bfef83 	ldbu	r6,-66(fp)
   94e6c:	e1fff00b 	ldhu	r7,-64(fp)
   94e70:	e0bffa44 	addi	r2,fp,-23
   94e74:	d8800015 	stw	r2,0(sp)
   94e78:	e13fee17 	ldw	r4,-72(fp)
   94e7c:	008ea580 	call	8ea58 <OSFlagPend>
    return err;
   94e80:	00000906 	br	94ea8 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   94e84:	e0bffb17 	ldw	r2,-20(fp)
   94e88:	10c01017 	ldw	r3,64(r2)
   94e8c:	e0bff817 	ldw	r2,-32(fp)
   94e90:	1880051e 	bne	r3,r2,94ea8 <altera_avalon_jtag_uart_write+0x258>
   94e94:	e0bffb17 	ldw	r2,-20(fp)
   94e98:	10c00917 	ldw	r3,36(r2)
   94e9c:	e0bffb17 	ldw	r2,-20(fp)
   94ea0:	10800117 	ldw	r2,4(r2)
   94ea4:	18bff736 	bltu	r3,r2,94e84 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   94ea8:	e0bffb17 	ldw	r2,-20(fp)
   94eac:	10c01017 	ldw	r3,64(r2)
   94eb0:	e0bff817 	ldw	r2,-32(fp)
   94eb4:	18800326 	beq	r3,r2,94ec4 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   94eb8:	e0bffd17 	ldw	r2,-12(fp)
   94ebc:	10800048 	cmpgei	r2,r2,1
   94ec0:	103fb11e 	bne	r2,zero,94d88 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   94ec4:	e0bffb17 	ldw	r2,-20(fp)
   94ec8:	11000b17 	ldw	r4,44(r2)
   94ecc:	0091d900 	call	91d90 <OSSemPost>

  if (ptr != start)
   94ed0:	e0fffc17 	ldw	r3,-16(fp)
   94ed4:	e0bff517 	ldw	r2,-44(fp)
   94ed8:	18800526 	beq	r3,r2,94ef0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   94edc:	e0fffc17 	ldw	r3,-16(fp)
   94ee0:	e0bff517 	ldw	r2,-44(fp)
   94ee4:	1887c83a 	sub	r3,r3,r2
   94ee8:	e0ffff15 	stw	r3,-4(fp)
   94eec:	00000906 	br	94f14 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   94ef0:	e0bffe17 	ldw	r2,-8(fp)
   94ef4:	1090000c 	andi	r2,r2,16384
   94ef8:	1005003a 	cmpeq	r2,r2,zero
   94efc:	1000031e 	bne	r2,zero,94f0c <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   94f00:	00bffd44 	movi	r2,-11
   94f04:	e0bfff15 	stw	r2,-4(fp)
   94f08:	00000206 	br	94f14 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   94f0c:	00bffec4 	movi	r2,-5
   94f10:	e0bfff15 	stw	r2,-4(fp)
   94f14:	e0bfff17 	ldw	r2,-4(fp)
}
   94f18:	e037883a 	mov	sp,fp
   94f1c:	dfc00117 	ldw	ra,4(sp)
   94f20:	df000017 	ldw	fp,0(sp)
   94f24:	dec00204 	addi	sp,sp,8
   94f28:	f800283a 	ret

00094f2c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   94f2c:	defffa04 	addi	sp,sp,-24
   94f30:	dfc00515 	stw	ra,20(sp)
   94f34:	df000415 	stw	fp,16(sp)
   94f38:	df000404 	addi	fp,sp,16
   94f3c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   94f40:	e0bfff17 	ldw	r2,-4(fp)
   94f44:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   94f48:	e0bfff17 	ldw	r2,-4(fp)
   94f4c:	10800104 	addi	r2,r2,4
   94f50:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94f54:	0005303a 	rdctl	r2,status
   94f58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94f5c:	e0fffd17 	ldw	r3,-12(fp)
   94f60:	00bfff84 	movi	r2,-2
   94f64:	1884703a 	and	r2,r3,r2
   94f68:	1001703a 	wrctl	status,r2
  
  return context;
   94f6c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   94f70:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   94f74:	00960f00 	call	960f0 <alt_tick>
   94f78:	e0bffe17 	ldw	r2,-8(fp)
   94f7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94f80:	e0bffc17 	ldw	r2,-16(fp)
   94f84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   94f88:	e037883a 	mov	sp,fp
   94f8c:	dfc00117 	ldw	ra,4(sp)
   94f90:	df000017 	ldw	fp,0(sp)
   94f94:	dec00204 	addi	sp,sp,8
   94f98:	f800283a 	ret

00094f9c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   94f9c:	defff804 	addi	sp,sp,-32
   94fa0:	dfc00715 	stw	ra,28(sp)
   94fa4:	df000615 	stw	fp,24(sp)
   94fa8:	df000604 	addi	fp,sp,24
   94fac:	e13ffc15 	stw	r4,-16(fp)
   94fb0:	e17ffd15 	stw	r5,-12(fp)
   94fb4:	e1bffe15 	stw	r6,-8(fp)
   94fb8:	e1ffff15 	stw	r7,-4(fp)
   94fbc:	e0bfff17 	ldw	r2,-4(fp)
   94fc0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   94fc4:	008002b4 	movhi	r2,10
   94fc8:	10acb504 	addi	r2,r2,-19756
   94fcc:	10800017 	ldw	r2,0(r2)
   94fd0:	1004c03a 	cmpne	r2,r2,zero
   94fd4:	1000041e 	bne	r2,zero,94fe8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   94fd8:	00c002b4 	movhi	r3,10
   94fdc:	18ecb504 	addi	r3,r3,-19756
   94fe0:	e0bffb17 	ldw	r2,-20(fp)
   94fe4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   94fe8:	e0bffc17 	ldw	r2,-16(fp)
   94fec:	10800104 	addi	r2,r2,4
   94ff0:	1007883a 	mov	r3,r2
   94ff4:	008001c4 	movi	r2,7
   94ff8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   94ffc:	d8000015 	stw	zero,0(sp)
   95000:	e13ffd17 	ldw	r4,-12(fp)
   95004:	e17ffe17 	ldw	r5,-8(fp)
   95008:	01800274 	movhi	r6,9
   9500c:	3193cb04 	addi	r6,r6,20268
   95010:	e1fffc17 	ldw	r7,-16(fp)
   95014:	00959580 	call	95958 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   95018:	e037883a 	mov	sp,fp
   9501c:	dfc00117 	ldw	ra,4(sp)
   95020:	df000017 	ldw	fp,0(sp)
   95024:	dec00204 	addi	sp,sp,8
   95028:	f800283a 	ret

0009502c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   9502c:	defffc04 	addi	sp,sp,-16
   95030:	df000315 	stw	fp,12(sp)
   95034:	df000304 	addi	fp,sp,12
   95038:	e13ffe15 	stw	r4,-8(fp)
   9503c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   95040:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   95044:	e0bfff17 	ldw	r2,-4(fp)
   95048:	1004c03a 	cmpne	r2,r2,zero
   9504c:	1000061e 	bne	r2,zero,95068 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
   95050:	e0bffe17 	ldw	r2,-8(fp)
   95054:	1007883a 	mov	r3,r2
   95058:	e0bffd03 	ldbu	r2,-12(fp)
   9505c:	10c4b03a 	or	r2,r2,r3
   95060:	e0bffd05 	stb	r2,-12(fp)
   95064:	00000806 	br	95088 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
   95068:	e0bffe17 	ldw	r2,-8(fp)
   9506c:	1007883a 	mov	r3,r2
   95070:	e0bffd03 	ldbu	r2,-12(fp)
   95074:	10c4b03a 	or	r2,r2,r3
   95078:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   9507c:	e0bffd03 	ldbu	r2,-12(fp)
   95080:	10801014 	ori	r2,r2,64
   95084:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   95088:	e0fffd03 	ldbu	r3,-12(fp)
   9508c:	00bfe004 	movi	r2,-128
   95090:	1884b03a 	or	r2,r3,r2
   95094:	10803fcc 	andi	r2,r2,255
}
   95098:	e037883a 	mov	sp,fp
   9509c:	df000017 	ldw	fp,0(sp)
   950a0:	dec00104 	addi	sp,sp,4
   950a4:	f800283a 	ret

000950a8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   950a8:	defffd04 	addi	sp,sp,-12
   950ac:	df000215 	stw	fp,8(sp)
   950b0:	df000204 	addi	fp,sp,8
   950b4:	e13ffe15 	stw	r4,-8(fp)
   950b8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   950bc:	e0bffe17 	ldw	r2,-8(fp)
   950c0:	10800a17 	ldw	r2,40(r2)
   950c4:	e0ffff03 	ldbu	r3,-4(fp)
   950c8:	10c00025 	stbio	r3,0(r2)
}
   950cc:	e037883a 	mov	sp,fp
   950d0:	df000017 	ldw	fp,0(sp)
   950d4:	dec00104 	addi	sp,sp,4
   950d8:	f800283a 	ret

000950dc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   950dc:	defffe04 	addi	sp,sp,-8
   950e0:	df000115 	stw	fp,4(sp)
   950e4:	df000104 	addi	fp,sp,4
   950e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   950ec:	e0bfff17 	ldw	r2,-4(fp)
   950f0:	10800a17 	ldw	r2,40(r2)
   950f4:	1007883a 	mov	r3,r2
   950f8:	00800044 	movi	r2,1
   950fc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   95100:	e037883a 	mov	sp,fp
   95104:	df000017 	ldw	fp,0(sp)
   95108:	dec00104 	addi	sp,sp,4
   9510c:	f800283a 	ret

00095110 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   95110:	defffc04 	addi	sp,sp,-16
   95114:	dfc00315 	stw	ra,12(sp)
   95118:	df000215 	stw	fp,8(sp)
   9511c:	df000204 	addi	fp,sp,8
   95120:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   95124:	e13fff17 	ldw	r4,-4(fp)
   95128:	014002b4 	movhi	r5,10
   9512c:	2965a504 	addi	r5,r5,-26988
   95130:	00958a80 	call	958a8 <alt_find_dev>
   95134:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   95138:	e0bffe17 	ldw	r2,-8(fp)
}
   9513c:	e037883a 	mov	sp,fp
   95140:	dfc00117 	ldw	ra,4(sp)
   95144:	df000017 	ldw	fp,0(sp)
   95148:	dec00204 	addi	sp,sp,8
   9514c:	f800283a 	ret

00095150 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   95150:	defffb04 	addi	sp,sp,-20
   95154:	df000415 	stw	fp,16(sp)
   95158:	df000404 	addi	fp,sp,16
   9515c:	e13ffd15 	stw	r4,-12(fp)
   95160:	e17ffe15 	stw	r5,-8(fp)
   95164:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   95168:	e03ffc15 	stw	zero,-16(fp)
   9516c:	00000f06 	br	951ac <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   95170:	e0bffd17 	ldw	r2,-12(fp)
   95174:	10800a17 	ldw	r2,40(r2)
   95178:	11000044 	addi	r4,r2,1
   9517c:	e0fffc17 	ldw	r3,-16(fp)
   95180:	e0bffe17 	ldw	r2,-8(fp)
   95184:	1885883a 	add	r2,r3,r2
   95188:	10800003 	ldbu	r2,0(r2)
   9518c:	10c03fcc 	andi	r3,r2,255
   95190:	18c0201c 	xori	r3,r3,128
   95194:	18ffe004 	addi	r3,r3,-128
   95198:	2005883a 	mov	r2,r4
   9519c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   951a0:	e0bffc17 	ldw	r2,-16(fp)
   951a4:	10800044 	addi	r2,r2,1
   951a8:	e0bffc15 	stw	r2,-16(fp)
   951ac:	e0fffc17 	ldw	r3,-16(fp)
   951b0:	e0bfff17 	ldw	r2,-4(fp)
   951b4:	18bfee36 	bltu	r3,r2,95170 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   951b8:	e037883a 	mov	sp,fp
   951bc:	df000017 	ldw	fp,0(sp)
   951c0:	dec00104 	addi	sp,sp,4
   951c4:	f800283a 	ret

000951c8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   951c8:	defffd04 	addi	sp,sp,-12
   951cc:	df000215 	stw	fp,8(sp)
   951d0:	df000204 	addi	fp,sp,8
   951d4:	e13ffe15 	stw	r4,-8(fp)
   951d8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   951dc:	00000d06 	br	95214 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   951e0:	e0bffe17 	ldw	r2,-8(fp)
   951e4:	10800a17 	ldw	r2,40(r2)
   951e8:	11000044 	addi	r4,r2,1
   951ec:	e0bfff17 	ldw	r2,-4(fp)
   951f0:	10800003 	ldbu	r2,0(r2)
   951f4:	10c03fcc 	andi	r3,r2,255
   951f8:	18c0201c 	xori	r3,r3,128
   951fc:	18ffe004 	addi	r3,r3,-128
   95200:	2005883a 	mov	r2,r4
   95204:	10c00025 	stbio	r3,0(r2)
		++ptr;
   95208:	e0bfff17 	ldw	r2,-4(fp)
   9520c:	10800044 	addi	r2,r2,1
   95210:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   95214:	e0bfff17 	ldw	r2,-4(fp)
   95218:	10800003 	ldbu	r2,0(r2)
   9521c:	10803fcc 	andi	r2,r2,255
   95220:	1080201c 	xori	r2,r2,128
   95224:	10bfe004 	addi	r2,r2,-128
   95228:	1004c03a 	cmpne	r2,r2,zero
   9522c:	103fec1e 	bne	r2,zero,951e0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   95230:	e037883a 	mov	sp,fp
   95234:	df000017 	ldw	fp,0(sp)
   95238:	dec00104 	addi	sp,sp,4
   9523c:	f800283a 	ret

00095240 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   95240:	defffb04 	addi	sp,sp,-20
   95244:	dfc00415 	stw	ra,16(sp)
   95248:	df000315 	stw	fp,12(sp)
   9524c:	df000304 	addi	fp,sp,12
   95250:	e13ffd15 	stw	r4,-12(fp)
   95254:	e17ffe15 	stw	r5,-8(fp)
   95258:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   9525c:	e0bffd17 	ldw	r2,-12(fp)
   95260:	10800017 	ldw	r2,0(r2)
   95264:	1009883a 	mov	r4,r2
   95268:	e1bfff17 	ldw	r6,-4(fp)
   9526c:	e17ffe17 	ldw	r5,-8(fp)
   95270:	00951500 	call	95150 <alt_up_character_lcd_write>
	return 0;
   95274:	0005883a 	mov	r2,zero
}
   95278:	e037883a 	mov	sp,fp
   9527c:	dfc00117 	ldw	ra,4(sp)
   95280:	df000017 	ldw	fp,0(sp)
   95284:	dec00204 	addi	sp,sp,8
   95288:	f800283a 	ret

0009528c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   9528c:	defff904 	addi	sp,sp,-28
   95290:	dfc00615 	stw	ra,24(sp)
   95294:	df000515 	stw	fp,20(sp)
   95298:	df000504 	addi	fp,sp,20
   9529c:	e13ffc15 	stw	r4,-16(fp)
   952a0:	e17ffd15 	stw	r5,-12(fp)
   952a4:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   952a8:	e0bffd17 	ldw	r2,-12(fp)
   952ac:	10800a28 	cmpgeui	r2,r2,40
   952b0:	1000031e 	bne	r2,zero,952c0 <alt_up_character_lcd_set_cursor_pos+0x34>
   952b4:	e0bffe17 	ldw	r2,-8(fp)
   952b8:	108000b0 	cmpltui	r2,r2,2
   952bc:	1000031e 	bne	r2,zero,952cc <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
   952c0:	00bfffc4 	movi	r2,-1
   952c4:	e0bfff15 	stw	r2,-4(fp)
   952c8:	00000806 	br	952ec <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   952cc:	e13ffd17 	ldw	r4,-12(fp)
   952d0:	e17ffe17 	ldw	r5,-8(fp)
   952d4:	009502c0 	call	9502c <get_DDRAM_addr>
   952d8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   952dc:	e17ffb03 	ldbu	r5,-20(fp)
   952e0:	e13ffc17 	ldw	r4,-16(fp)
   952e4:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
	return 0;
   952e8:	e03fff15 	stw	zero,-4(fp)
   952ec:	e0bfff17 	ldw	r2,-4(fp)
}
   952f0:	e037883a 	mov	sp,fp
   952f4:	dfc00117 	ldw	ra,4(sp)
   952f8:	df000017 	ldw	fp,0(sp)
   952fc:	dec00204 	addi	sp,sp,8
   95300:	f800283a 	ret

00095304 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   95304:	defff904 	addi	sp,sp,-28
   95308:	dfc00615 	stw	ra,24(sp)
   9530c:	df000515 	stw	fp,20(sp)
   95310:	df000504 	addi	fp,sp,20
   95314:	e13ffc15 	stw	r4,-16(fp)
   95318:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   9531c:	e0bffd17 	ldw	r2,-12(fp)
   95320:	1005003a 	cmpeq	r2,r2,zero
   95324:	10001e1e 	bne	r2,zero,953a0 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
   95328:	e0bffd17 	ldw	r2,-12(fp)
   9532c:	10800050 	cmplti	r2,r2,1
   95330:	1000031e 	bne	r2,zero,95340 <alt_up_character_lcd_shift_cursor+0x3c>
   95334:	00800504 	movi	r2,20
   95338:	e0bfff05 	stb	r2,-4(fp)
   9533c:	00000206 	br	95348 <alt_up_character_lcd_shift_cursor+0x44>
   95340:	00c00404 	movi	r3,16
   95344:	e0ffff05 	stb	r3,-4(fp)
   95348:	e0bfff03 	ldbu	r2,-4(fp)
   9534c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   95350:	e0fffd17 	ldw	r3,-12(fp)
   95354:	e0fffe15 	stw	r3,-8(fp)
   95358:	e0fffe17 	ldw	r3,-8(fp)
   9535c:	1804403a 	cmpge	r2,r3,zero
   95360:	1000031e 	bne	r2,zero,95370 <alt_up_character_lcd_shift_cursor+0x6c>
   95364:	e0bffe17 	ldw	r2,-8(fp)
   95368:	0085c83a 	sub	r2,zero,r2
   9536c:	e0bffe15 	stw	r2,-8(fp)
   95370:	e0fffe17 	ldw	r3,-8(fp)
   95374:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   95378:	00000306 	br	95388 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   9537c:	e17ffb43 	ldbu	r5,-19(fp)
   95380:	e13ffc17 	ldw	r4,-16(fp)
   95384:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   95388:	e0bffb03 	ldbu	r2,-20(fp)
   9538c:	10bfffc4 	addi	r2,r2,-1
   95390:	e0bffb05 	stb	r2,-20(fp)
   95394:	e0bffb03 	ldbu	r2,-20(fp)
   95398:	10803fd8 	cmpnei	r2,r2,255
   9539c:	103ff71e 	bne	r2,zero,9537c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   953a0:	e037883a 	mov	sp,fp
   953a4:	dfc00117 	ldw	ra,4(sp)
   953a8:	df000017 	ldw	fp,0(sp)
   953ac:	dec00204 	addi	sp,sp,8
   953b0:	f800283a 	ret

000953b4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   953b4:	defff904 	addi	sp,sp,-28
   953b8:	dfc00615 	stw	ra,24(sp)
   953bc:	df000515 	stw	fp,20(sp)
   953c0:	df000504 	addi	fp,sp,20
   953c4:	e13ffc15 	stw	r4,-16(fp)
   953c8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   953cc:	e0bffd17 	ldw	r2,-12(fp)
   953d0:	1005003a 	cmpeq	r2,r2,zero
   953d4:	10001e1e 	bne	r2,zero,95450 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
   953d8:	e0bffd17 	ldw	r2,-12(fp)
   953dc:	10800050 	cmplti	r2,r2,1
   953e0:	1000031e 	bne	r2,zero,953f0 <alt_up_character_lcd_shift_display+0x3c>
   953e4:	00800704 	movi	r2,28
   953e8:	e0bfff05 	stb	r2,-4(fp)
   953ec:	00000206 	br	953f8 <alt_up_character_lcd_shift_display+0x44>
   953f0:	00c00604 	movi	r3,24
   953f4:	e0ffff05 	stb	r3,-4(fp)
   953f8:	e0bfff03 	ldbu	r2,-4(fp)
   953fc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   95400:	e0fffd17 	ldw	r3,-12(fp)
   95404:	e0fffe15 	stw	r3,-8(fp)
   95408:	e0fffe17 	ldw	r3,-8(fp)
   9540c:	1804403a 	cmpge	r2,r3,zero
   95410:	1000031e 	bne	r2,zero,95420 <alt_up_character_lcd_shift_display+0x6c>
   95414:	e0bffe17 	ldw	r2,-8(fp)
   95418:	0085c83a 	sub	r2,zero,r2
   9541c:	e0bffe15 	stw	r2,-8(fp)
   95420:	e0fffe17 	ldw	r3,-8(fp)
   95424:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   95428:	00000306 	br	95438 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   9542c:	e17ffb43 	ldbu	r5,-19(fp)
   95430:	e13ffc17 	ldw	r4,-16(fp)
   95434:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   95438:	e0bffb03 	ldbu	r2,-20(fp)
   9543c:	10bfffc4 	addi	r2,r2,-1
   95440:	e0bffb05 	stb	r2,-20(fp)
   95444:	e0bffb03 	ldbu	r2,-20(fp)
   95448:	10803fd8 	cmpnei	r2,r2,255
   9544c:	103ff71e 	bne	r2,zero,9542c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   95450:	e037883a 	mov	sp,fp
   95454:	dfc00117 	ldw	ra,4(sp)
   95458:	df000017 	ldw	fp,0(sp)
   9545c:	dec00204 	addi	sp,sp,8
   95460:	f800283a 	ret

00095464 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   95464:	defff904 	addi	sp,sp,-28
   95468:	dfc00615 	stw	ra,24(sp)
   9546c:	df000515 	stw	fp,20(sp)
   95470:	df000504 	addi	fp,sp,20
   95474:	e13ffc15 	stw	r4,-16(fp)
   95478:	e17ffd15 	stw	r5,-12(fp)
   9547c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   95480:	e0bffd17 	ldw	r2,-12(fp)
   95484:	10800a28 	cmpgeui	r2,r2,40
   95488:	1000031e 	bne	r2,zero,95498 <alt_up_character_lcd_erase_pos+0x34>
   9548c:	e0bffe17 	ldw	r2,-8(fp)
   95490:	108000b0 	cmpltui	r2,r2,2
   95494:	1000031e 	bne	r2,zero,954a4 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
   95498:	00bfffc4 	movi	r2,-1
   9549c:	e0bfff15 	stw	r2,-4(fp)
   954a0:	00000e06 	br	954dc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   954a4:	e13ffd17 	ldw	r4,-12(fp)
   954a8:	e17ffe17 	ldw	r5,-8(fp)
   954ac:	009502c0 	call	9502c <get_DDRAM_addr>
   954b0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   954b4:	e17ffb03 	ldbu	r5,-20(fp)
   954b8:	e13ffc17 	ldw	r4,-16(fp)
   954bc:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   954c0:	e0bffc17 	ldw	r2,-16(fp)
   954c4:	10800a17 	ldw	r2,40(r2)
   954c8:	10800044 	addi	r2,r2,1
   954cc:	1007883a 	mov	r3,r2
   954d0:	00800084 	movi	r2,2
   954d4:	18800025 	stbio	r2,0(r3)
	return 0;
   954d8:	e03fff15 	stw	zero,-4(fp)
   954dc:	e0bfff17 	ldw	r2,-4(fp)
}
   954e0:	e037883a 	mov	sp,fp
   954e4:	dfc00117 	ldw	ra,4(sp)
   954e8:	df000017 	ldw	fp,0(sp)
   954ec:	dec00204 	addi	sp,sp,8
   954f0:	f800283a 	ret

000954f4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   954f4:	defffd04 	addi	sp,sp,-12
   954f8:	dfc00215 	stw	ra,8(sp)
   954fc:	df000115 	stw	fp,4(sp)
   95500:	df000104 	addi	fp,sp,4
   95504:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   95508:	e13fff17 	ldw	r4,-4(fp)
   9550c:	01400304 	movi	r5,12
   95510:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
}
   95514:	e037883a 	mov	sp,fp
   95518:	dfc00117 	ldw	ra,4(sp)
   9551c:	df000017 	ldw	fp,0(sp)
   95520:	dec00204 	addi	sp,sp,8
   95524:	f800283a 	ret

00095528 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   95528:	defffd04 	addi	sp,sp,-12
   9552c:	dfc00215 	stw	ra,8(sp)
   95530:	df000115 	stw	fp,4(sp)
   95534:	df000104 	addi	fp,sp,4
   95538:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   9553c:	e13fff17 	ldw	r4,-4(fp)
   95540:	014003c4 	movi	r5,15
   95544:	00950a80 	call	950a8 <alt_up_character_lcd_send_cmd>
}
   95548:	e037883a 	mov	sp,fp
   9554c:	dfc00117 	ldw	ra,4(sp)
   95550:	df000017 	ldw	fp,0(sp)
   95554:	dec00204 	addi	sp,sp,8
   95558:	f800283a 	ret

0009555c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   9555c:	defff404 	addi	sp,sp,-48
   95560:	df000b15 	stw	fp,44(sp)
   95564:	df000b04 	addi	fp,sp,44
   95568:	e13ffb15 	stw	r4,-20(fp)
   9556c:	e17ffc15 	stw	r5,-16(fp)
   95570:	e1bffd15 	stw	r6,-12(fp)
   95574:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   95578:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9557c:	008002b4 	movhi	r2,10
   95580:	10acb504 	addi	r2,r2,-19756
   95584:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   95588:	1005003a 	cmpeq	r2,r2,zero
   9558c:	1000411e 	bne	r2,zero,95694 <alt_alarm_start+0x138>
  {
    if (alarm)
   95590:	e0bffb17 	ldw	r2,-20(fp)
   95594:	1005003a 	cmpeq	r2,r2,zero
   95598:	10003b1e 	bne	r2,zero,95688 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   9559c:	e0fffb17 	ldw	r3,-20(fp)
   955a0:	e0bffd17 	ldw	r2,-12(fp)
   955a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   955a8:	e0fffb17 	ldw	r3,-20(fp)
   955ac:	e0bffe17 	ldw	r2,-8(fp)
   955b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   955b4:	0005303a 	rdctl	r2,status
   955b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   955bc:	e0fff817 	ldw	r3,-32(fp)
   955c0:	00bfff84 	movi	r2,-2
   955c4:	1884703a 	and	r2,r3,r2
   955c8:	1001703a 	wrctl	status,r2
  
  return context;
   955cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   955d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   955d4:	008002b4 	movhi	r2,10
   955d8:	10acb604 	addi	r2,r2,-19752
   955dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   955e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   955e4:	e0fffc17 	ldw	r3,-16(fp)
   955e8:	e0bff917 	ldw	r2,-28(fp)
   955ec:	1885883a 	add	r2,r3,r2
   955f0:	10c00044 	addi	r3,r2,1
   955f4:	e0bffb17 	ldw	r2,-20(fp)
   955f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   955fc:	e0bffb17 	ldw	r2,-20(fp)
   95600:	10c00217 	ldw	r3,8(r2)
   95604:	e0bff917 	ldw	r2,-28(fp)
   95608:	1880042e 	bgeu	r3,r2,9561c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   9560c:	e0fffb17 	ldw	r3,-20(fp)
   95610:	00800044 	movi	r2,1
   95614:	18800405 	stb	r2,16(r3)
   95618:	00000206 	br	95624 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   9561c:	e0bffb17 	ldw	r2,-20(fp)
   95620:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   95624:	e0fffb17 	ldw	r3,-20(fp)
   95628:	008002b4 	movhi	r2,10
   9562c:	10a5ca04 	addi	r2,r2,-26840
   95630:	e0bff615 	stw	r2,-40(fp)
   95634:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   95638:	e0fff717 	ldw	r3,-36(fp)
   9563c:	e0bff617 	ldw	r2,-40(fp)
   95640:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   95644:	e0bff617 	ldw	r2,-40(fp)
   95648:	10c00017 	ldw	r3,0(r2)
   9564c:	e0bff717 	ldw	r2,-36(fp)
   95650:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   95654:	e0bff617 	ldw	r2,-40(fp)
   95658:	10c00017 	ldw	r3,0(r2)
   9565c:	e0bff717 	ldw	r2,-36(fp)
   95660:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   95664:	e0fff617 	ldw	r3,-40(fp)
   95668:	e0bff717 	ldw	r2,-36(fp)
   9566c:	18800015 	stw	r2,0(r3)
   95670:	e0bffa17 	ldw	r2,-24(fp)
   95674:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95678:	e0bff517 	ldw	r2,-44(fp)
   9567c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   95680:	e03fff15 	stw	zero,-4(fp)
   95684:	00000506 	br	9569c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   95688:	00bffa84 	movi	r2,-22
   9568c:	e0bfff15 	stw	r2,-4(fp)
   95690:	00000206 	br	9569c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   95694:	00bfde84 	movi	r2,-134
   95698:	e0bfff15 	stw	r2,-4(fp)
   9569c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   956a0:	e037883a 	mov	sp,fp
   956a4:	df000017 	ldw	fp,0(sp)
   956a8:	dec00104 	addi	sp,sp,4
   956ac:	f800283a 	ret

000956b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   956b0:	deffff04 	addi	sp,sp,-4
   956b4:	df000015 	stw	fp,0(sp)
   956b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   956bc:	e037883a 	mov	sp,fp
   956c0:	df000017 	ldw	fp,0(sp)
   956c4:	dec00104 	addi	sp,sp,4
   956c8:	f800283a 	ret

000956cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   956cc:	defff904 	addi	sp,sp,-28
   956d0:	dfc00615 	stw	ra,24(sp)
   956d4:	df000515 	stw	fp,20(sp)
   956d8:	df000504 	addi	fp,sp,20
   956dc:	e13ffd15 	stw	r4,-12(fp)
   956e0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   956e4:	e0bffd17 	ldw	r2,-12(fp)
   956e8:	1005003a 	cmpeq	r2,r2,zero
   956ec:	1000041e 	bne	r2,zero,95700 <alt_dev_llist_insert+0x34>
   956f0:	e0bffd17 	ldw	r2,-12(fp)
   956f4:	10800217 	ldw	r2,8(r2)
   956f8:	1004c03a 	cmpne	r2,r2,zero
   956fc:	1000071e 	bne	r2,zero,9571c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   95700:	00957800 	call	95780 <alt_get_errno>
   95704:	1007883a 	mov	r3,r2
   95708:	00800584 	movi	r2,22
   9570c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   95710:	00bffa84 	movi	r2,-22
   95714:	e0bfff15 	stw	r2,-4(fp)
   95718:	00001306 	br	95768 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9571c:	e0fffd17 	ldw	r3,-12(fp)
   95720:	e0bffe17 	ldw	r2,-8(fp)
   95724:	e0bffb15 	stw	r2,-20(fp)
   95728:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9572c:	e0fffc17 	ldw	r3,-16(fp)
   95730:	e0bffb17 	ldw	r2,-20(fp)
   95734:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   95738:	e0bffb17 	ldw	r2,-20(fp)
   9573c:	10c00017 	ldw	r3,0(r2)
   95740:	e0bffc17 	ldw	r2,-16(fp)
   95744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   95748:	e0bffb17 	ldw	r2,-20(fp)
   9574c:	10c00017 	ldw	r3,0(r2)
   95750:	e0bffc17 	ldw	r2,-16(fp)
   95754:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   95758:	e0fffb17 	ldw	r3,-20(fp)
   9575c:	e0bffc17 	ldw	r2,-16(fp)
   95760:	18800015 	stw	r2,0(r3)

  return 0;  
   95764:	e03fff15 	stw	zero,-4(fp)
   95768:	e0bfff17 	ldw	r2,-4(fp)
}
   9576c:	e037883a 	mov	sp,fp
   95770:	dfc00117 	ldw	ra,4(sp)
   95774:	df000017 	ldw	fp,0(sp)
   95778:	dec00204 	addi	sp,sp,8
   9577c:	f800283a 	ret

00095780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   95780:	defffd04 	addi	sp,sp,-12
   95784:	dfc00215 	stw	ra,8(sp)
   95788:	df000115 	stw	fp,4(sp)
   9578c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   95790:	008002b4 	movhi	r2,10
   95794:	10a5a804 	addi	r2,r2,-26976
   95798:	10800017 	ldw	r2,0(r2)
   9579c:	1005003a 	cmpeq	r2,r2,zero
   957a0:	1000061e 	bne	r2,zero,957bc <alt_get_errno+0x3c>
   957a4:	008002b4 	movhi	r2,10
   957a8:	10a5a804 	addi	r2,r2,-26976
   957ac:	10800017 	ldw	r2,0(r2)
   957b0:	103ee83a 	callr	r2
   957b4:	e0bfff15 	stw	r2,-4(fp)
   957b8:	00000306 	br	957c8 <alt_get_errno+0x48>
   957bc:	008002b4 	movhi	r2,10
   957c0:	10ac9704 	addi	r2,r2,-19876
   957c4:	e0bfff15 	stw	r2,-4(fp)
   957c8:	e0bfff17 	ldw	r2,-4(fp)
}
   957cc:	e037883a 	mov	sp,fp
   957d0:	dfc00117 	ldw	ra,4(sp)
   957d4:	df000017 	ldw	fp,0(sp)
   957d8:	dec00204 	addi	sp,sp,8
   957dc:	f800283a 	ret

000957e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   957e0:	defffd04 	addi	sp,sp,-12
   957e4:	dfc00215 	stw	ra,8(sp)
   957e8:	df000115 	stw	fp,4(sp)
   957ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   957f0:	00bfff04 	movi	r2,-4
   957f4:	00c00274 	movhi	r3,9
   957f8:	18dc3a04 	addi	r3,r3,28904
   957fc:	1885883a 	add	r2,r3,r2
   95800:	e0bfff15 	stw	r2,-4(fp)
   95804:	00000606 	br	95820 <_do_ctors+0x40>
        (*ctor) (); 
   95808:	e0bfff17 	ldw	r2,-4(fp)
   9580c:	10800017 	ldw	r2,0(r2)
   95810:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   95814:	e0bfff17 	ldw	r2,-4(fp)
   95818:	10bfff04 	addi	r2,r2,-4
   9581c:	e0bfff15 	stw	r2,-4(fp)
   95820:	e0ffff17 	ldw	r3,-4(fp)
   95824:	00800274 	movhi	r2,9
   95828:	109c3904 	addi	r2,r2,28900
   9582c:	18bff62e 	bgeu	r3,r2,95808 <_do_ctors+0x28>
        (*ctor) (); 
}
   95830:	e037883a 	mov	sp,fp
   95834:	dfc00117 	ldw	ra,4(sp)
   95838:	df000017 	ldw	fp,0(sp)
   9583c:	dec00204 	addi	sp,sp,8
   95840:	f800283a 	ret

00095844 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   95844:	defffd04 	addi	sp,sp,-12
   95848:	dfc00215 	stw	ra,8(sp)
   9584c:	df000115 	stw	fp,4(sp)
   95850:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   95854:	00bfff04 	movi	r2,-4
   95858:	00c00274 	movhi	r3,9
   9585c:	18dc3a04 	addi	r3,r3,28904
   95860:	1885883a 	add	r2,r3,r2
   95864:	e0bfff15 	stw	r2,-4(fp)
   95868:	00000606 	br	95884 <_do_dtors+0x40>
        (*dtor) (); 
   9586c:	e0bfff17 	ldw	r2,-4(fp)
   95870:	10800017 	ldw	r2,0(r2)
   95874:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   95878:	e0bfff17 	ldw	r2,-4(fp)
   9587c:	10bfff04 	addi	r2,r2,-4
   95880:	e0bfff15 	stw	r2,-4(fp)
   95884:	e0ffff17 	ldw	r3,-4(fp)
   95888:	00800274 	movhi	r2,9
   9588c:	109c3a04 	addi	r2,r2,28904
   95890:	18bff62e 	bgeu	r3,r2,9586c <_do_dtors+0x28>
        (*dtor) (); 
}
   95894:	e037883a 	mov	sp,fp
   95898:	dfc00117 	ldw	ra,4(sp)
   9589c:	df000017 	ldw	fp,0(sp)
   958a0:	dec00204 	addi	sp,sp,8
   958a4:	f800283a 	ret

000958a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   958a8:	defff904 	addi	sp,sp,-28
   958ac:	dfc00615 	stw	ra,24(sp)
   958b0:	df000515 	stw	fp,20(sp)
   958b4:	df000504 	addi	fp,sp,20
   958b8:	e13ffd15 	stw	r4,-12(fp)
   958bc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   958c0:	e0bffe17 	ldw	r2,-8(fp)
   958c4:	10800017 	ldw	r2,0(r2)
   958c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   958cc:	e13ffd17 	ldw	r4,-12(fp)
   958d0:	00812880 	call	81288 <strlen>
   958d4:	10800044 	addi	r2,r2,1
   958d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   958dc:	00000d06 	br	95914 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   958e0:	e0bffc17 	ldw	r2,-16(fp)
   958e4:	11000217 	ldw	r4,8(r2)
   958e8:	e1bffb17 	ldw	r6,-20(fp)
   958ec:	e17ffd17 	ldw	r5,-12(fp)
   958f0:	00969780 	call	96978 <memcmp>
   958f4:	1004c03a 	cmpne	r2,r2,zero
   958f8:	1000031e 	bne	r2,zero,95908 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   958fc:	e0bffc17 	ldw	r2,-16(fp)
   95900:	e0bfff15 	stw	r2,-4(fp)
   95904:	00000706 	br	95924 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   95908:	e0bffc17 	ldw	r2,-16(fp)
   9590c:	10800017 	ldw	r2,0(r2)
   95910:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   95914:	e0fffe17 	ldw	r3,-8(fp)
   95918:	e0bffc17 	ldw	r2,-16(fp)
   9591c:	10fff01e 	bne	r2,r3,958e0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   95920:	e03fff15 	stw	zero,-4(fp)
   95924:	e0bfff17 	ldw	r2,-4(fp)
}
   95928:	e037883a 	mov	sp,fp
   9592c:	dfc00117 	ldw	ra,4(sp)
   95930:	df000017 	ldw	fp,0(sp)
   95934:	dec00204 	addi	sp,sp,8
   95938:	f800283a 	ret

0009593c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   9593c:	deffff04 	addi	sp,sp,-4
   95940:	df000015 	stw	fp,0(sp)
   95944:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   95948:	e037883a 	mov	sp,fp
   9594c:	df000017 	ldw	fp,0(sp)
   95950:	dec00104 	addi	sp,sp,4
   95954:	f800283a 	ret

00095958 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   95958:	defff904 	addi	sp,sp,-28
   9595c:	dfc00615 	stw	ra,24(sp)
   95960:	df000515 	stw	fp,20(sp)
   95964:	df000504 	addi	fp,sp,20
   95968:	e13ffc15 	stw	r4,-16(fp)
   9596c:	e17ffd15 	stw	r5,-12(fp)
   95970:	e1bffe15 	stw	r6,-8(fp)
   95974:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   95978:	e0800217 	ldw	r2,8(fp)
   9597c:	d8800015 	stw	r2,0(sp)
   95980:	e13ffc17 	ldw	r4,-16(fp)
   95984:	e17ffd17 	ldw	r5,-12(fp)
   95988:	e1bffe17 	ldw	r6,-8(fp)
   9598c:	e1ffff17 	ldw	r7,-4(fp)
   95990:	0095b2c0 	call	95b2c <alt_iic_isr_register>
}  
   95994:	e037883a 	mov	sp,fp
   95998:	dfc00117 	ldw	ra,4(sp)
   9599c:	df000017 	ldw	fp,0(sp)
   959a0:	dec00204 	addi	sp,sp,8
   959a4:	f800283a 	ret

000959a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   959a8:	defff904 	addi	sp,sp,-28
   959ac:	df000615 	stw	fp,24(sp)
   959b0:	df000604 	addi	fp,sp,24
   959b4:	e13ffe15 	stw	r4,-8(fp)
   959b8:	e17fff15 	stw	r5,-4(fp)
   959bc:	e0bfff17 	ldw	r2,-4(fp)
   959c0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   959c4:	0005303a 	rdctl	r2,status
   959c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   959cc:	e0fffb17 	ldw	r3,-20(fp)
   959d0:	00bfff84 	movi	r2,-2
   959d4:	1884703a 	and	r2,r3,r2
   959d8:	1001703a 	wrctl	status,r2
  
  return context;
   959dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   959e0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   959e4:	e0fffc17 	ldw	r3,-16(fp)
   959e8:	00800044 	movi	r2,1
   959ec:	10c4983a 	sll	r2,r2,r3
   959f0:	1007883a 	mov	r3,r2
   959f4:	008002b4 	movhi	r2,10
   959f8:	10ac9904 	addi	r2,r2,-19868
   959fc:	10800017 	ldw	r2,0(r2)
   95a00:	1886b03a 	or	r3,r3,r2
   95a04:	008002b4 	movhi	r2,10
   95a08:	10ac9904 	addi	r2,r2,-19868
   95a0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   95a10:	008002b4 	movhi	r2,10
   95a14:	10ac9904 	addi	r2,r2,-19868
   95a18:	10800017 	ldw	r2,0(r2)
   95a1c:	100170fa 	wrctl	ienable,r2
   95a20:	e0bffd17 	ldw	r2,-12(fp)
   95a24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95a28:	e0bffa17 	ldw	r2,-24(fp)
   95a2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   95a30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   95a34:	e037883a 	mov	sp,fp
   95a38:	df000017 	ldw	fp,0(sp)
   95a3c:	dec00104 	addi	sp,sp,4
   95a40:	f800283a 	ret

00095a44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   95a44:	defff904 	addi	sp,sp,-28
   95a48:	df000615 	stw	fp,24(sp)
   95a4c:	df000604 	addi	fp,sp,24
   95a50:	e13ffe15 	stw	r4,-8(fp)
   95a54:	e17fff15 	stw	r5,-4(fp)
   95a58:	e0bfff17 	ldw	r2,-4(fp)
   95a5c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95a60:	0005303a 	rdctl	r2,status
   95a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95a68:	e0fffb17 	ldw	r3,-20(fp)
   95a6c:	00bfff84 	movi	r2,-2
   95a70:	1884703a 	and	r2,r3,r2
   95a74:	1001703a 	wrctl	status,r2
  
  return context;
   95a78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   95a7c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   95a80:	e0fffc17 	ldw	r3,-16(fp)
   95a84:	00800044 	movi	r2,1
   95a88:	10c4983a 	sll	r2,r2,r3
   95a8c:	0084303a 	nor	r2,zero,r2
   95a90:	1007883a 	mov	r3,r2
   95a94:	008002b4 	movhi	r2,10
   95a98:	10ac9904 	addi	r2,r2,-19868
   95a9c:	10800017 	ldw	r2,0(r2)
   95aa0:	1886703a 	and	r3,r3,r2
   95aa4:	008002b4 	movhi	r2,10
   95aa8:	10ac9904 	addi	r2,r2,-19868
   95aac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   95ab0:	008002b4 	movhi	r2,10
   95ab4:	10ac9904 	addi	r2,r2,-19868
   95ab8:	10800017 	ldw	r2,0(r2)
   95abc:	100170fa 	wrctl	ienable,r2
   95ac0:	e0bffd17 	ldw	r2,-12(fp)
   95ac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95ac8:	e0bffa17 	ldw	r2,-24(fp)
   95acc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   95ad0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   95ad4:	e037883a 	mov	sp,fp
   95ad8:	df000017 	ldw	fp,0(sp)
   95adc:	dec00104 	addi	sp,sp,4
   95ae0:	f800283a 	ret

00095ae4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   95ae4:	defffc04 	addi	sp,sp,-16
   95ae8:	df000315 	stw	fp,12(sp)
   95aec:	df000304 	addi	fp,sp,12
   95af0:	e13ffe15 	stw	r4,-8(fp)
   95af4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   95af8:	000530fa 	rdctl	r2,ienable
   95afc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   95b00:	e0ffff17 	ldw	r3,-4(fp)
   95b04:	00800044 	movi	r2,1
   95b08:	10c4983a 	sll	r2,r2,r3
   95b0c:	1007883a 	mov	r3,r2
   95b10:	e0bffd17 	ldw	r2,-12(fp)
   95b14:	1884703a 	and	r2,r3,r2
   95b18:	1004c03a 	cmpne	r2,r2,zero
}
   95b1c:	e037883a 	mov	sp,fp
   95b20:	df000017 	ldw	fp,0(sp)
   95b24:	dec00104 	addi	sp,sp,4
   95b28:	f800283a 	ret

00095b2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   95b2c:	defff404 	addi	sp,sp,-48
   95b30:	dfc00b15 	stw	ra,44(sp)
   95b34:	df000a15 	stw	fp,40(sp)
   95b38:	df000a04 	addi	fp,sp,40
   95b3c:	e13ffb15 	stw	r4,-20(fp)
   95b40:	e17ffc15 	stw	r5,-16(fp)
   95b44:	e1bffd15 	stw	r6,-12(fp)
   95b48:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   95b4c:	00bffa84 	movi	r2,-22
   95b50:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   95b54:	e0bffc17 	ldw	r2,-16(fp)
   95b58:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   95b5c:	e0bff917 	ldw	r2,-28(fp)
   95b60:	10800808 	cmpgei	r2,r2,32
   95b64:	1000291e 	bne	r2,zero,95c0c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95b68:	0005303a 	rdctl	r2,status
   95b6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95b70:	e0fff717 	ldw	r3,-36(fp)
   95b74:	00bfff84 	movi	r2,-2
   95b78:	1884703a 	and	r2,r3,r2
   95b7c:	1001703a 	wrctl	status,r2
  
  return context;
   95b80:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   95b84:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   95b88:	e0bff917 	ldw	r2,-28(fp)
   95b8c:	00c002f4 	movhi	r3,11
   95b90:	18e9d504 	addi	r3,r3,-22700
   95b94:	100490fa 	slli	r2,r2,3
   95b98:	10c7883a 	add	r3,r2,r3
   95b9c:	e0bffd17 	ldw	r2,-12(fp)
   95ba0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   95ba4:	e0bff917 	ldw	r2,-28(fp)
   95ba8:	00c002f4 	movhi	r3,11
   95bac:	18e9d504 	addi	r3,r3,-22700
   95bb0:	100490fa 	slli	r2,r2,3
   95bb4:	10c5883a 	add	r2,r2,r3
   95bb8:	10c00104 	addi	r3,r2,4
   95bbc:	e0bffe17 	ldw	r2,-8(fp)
   95bc0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   95bc4:	e0bffd17 	ldw	r2,-12(fp)
   95bc8:	1005003a 	cmpeq	r2,r2,zero
   95bcc:	1000051e 	bne	r2,zero,95be4 <alt_iic_isr_register+0xb8>
   95bd0:	e17ff917 	ldw	r5,-28(fp)
   95bd4:	e13ffb17 	ldw	r4,-20(fp)
   95bd8:	00959a80 	call	959a8 <alt_ic_irq_enable>
   95bdc:	e0bfff15 	stw	r2,-4(fp)
   95be0:	00000406 	br	95bf4 <alt_iic_isr_register+0xc8>
   95be4:	e17ff917 	ldw	r5,-28(fp)
   95be8:	e13ffb17 	ldw	r4,-20(fp)
   95bec:	0095a440 	call	95a44 <alt_ic_irq_disable>
   95bf0:	e0bfff15 	stw	r2,-4(fp)
   95bf4:	e0bfff17 	ldw	r2,-4(fp)
   95bf8:	e0bffa15 	stw	r2,-24(fp)
   95bfc:	e0bff817 	ldw	r2,-32(fp)
   95c00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95c04:	e0bff617 	ldw	r2,-40(fp)
   95c08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   95c0c:	e0bffa17 	ldw	r2,-24(fp)
}
   95c10:	e037883a 	mov	sp,fp
   95c14:	dfc00117 	ldw	ra,4(sp)
   95c18:	df000017 	ldw	fp,0(sp)
   95c1c:	dec00204 	addi	sp,sp,8
   95c20:	f800283a 	ret

00095c24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   95c24:	defff804 	addi	sp,sp,-32
   95c28:	dfc00715 	stw	ra,28(sp)
   95c2c:	df000615 	stw	fp,24(sp)
   95c30:	dc000515 	stw	r16,20(sp)
   95c34:	df000504 	addi	fp,sp,20
   95c38:	e13ffc15 	stw	r4,-16(fp)
   95c3c:	e17ffd15 	stw	r5,-12(fp)
   95c40:	e1bffe15 	stw	r6,-8(fp)
   95c44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   95c48:	e13ffd17 	ldw	r4,-12(fp)
   95c4c:	e17ffe17 	ldw	r5,-8(fp)
   95c50:	e1bfff17 	ldw	r6,-4(fp)
   95c54:	0095e6c0 	call	95e6c <open>
   95c58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   95c5c:	e0bffb17 	ldw	r2,-20(fp)
   95c60:	1004803a 	cmplt	r2,r2,zero
   95c64:	10001f1e 	bne	r2,zero,95ce4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   95c68:	e13ffb17 	ldw	r4,-20(fp)
   95c6c:	040002b4 	movhi	r16,10
   95c70:	84211604 	addi	r16,r16,-31656
   95c74:	01400304 	movi	r5,12
   95c78:	0080f440 	call	80f44 <__mulsi3>
   95c7c:	1405883a 	add	r2,r2,r16
   95c80:	10c00017 	ldw	r3,0(r2)
   95c84:	e0bffc17 	ldw	r2,-16(fp)
   95c88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   95c8c:	e13ffb17 	ldw	r4,-20(fp)
   95c90:	040002b4 	movhi	r16,10
   95c94:	84211604 	addi	r16,r16,-31656
   95c98:	01400304 	movi	r5,12
   95c9c:	0080f440 	call	80f44 <__mulsi3>
   95ca0:	1405883a 	add	r2,r2,r16
   95ca4:	10800104 	addi	r2,r2,4
   95ca8:	10c00017 	ldw	r3,0(r2)
   95cac:	e0bffc17 	ldw	r2,-16(fp)
   95cb0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   95cb4:	e13ffb17 	ldw	r4,-20(fp)
   95cb8:	040002b4 	movhi	r16,10
   95cbc:	84211604 	addi	r16,r16,-31656
   95cc0:	01400304 	movi	r5,12
   95cc4:	0080f440 	call	80f44 <__mulsi3>
   95cc8:	1405883a 	add	r2,r2,r16
   95ccc:	10800204 	addi	r2,r2,8
   95cd0:	10c00017 	ldw	r3,0(r2)
   95cd4:	e0bffc17 	ldw	r2,-16(fp)
   95cd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   95cdc:	e13ffb17 	ldw	r4,-20(fp)
   95ce0:	008b85c0 	call	8b85c <alt_release_fd>
  }
} 
   95ce4:	e037883a 	mov	sp,fp
   95ce8:	dfc00217 	ldw	ra,8(sp)
   95cec:	df000117 	ldw	fp,4(sp)
   95cf0:	dc000017 	ldw	r16,0(sp)
   95cf4:	dec00304 	addi	sp,sp,12
   95cf8:	f800283a 	ret

00095cfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   95cfc:	defffb04 	addi	sp,sp,-20
   95d00:	dfc00415 	stw	ra,16(sp)
   95d04:	df000315 	stw	fp,12(sp)
   95d08:	df000304 	addi	fp,sp,12
   95d0c:	e13ffd15 	stw	r4,-12(fp)
   95d10:	e17ffe15 	stw	r5,-8(fp)
   95d14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   95d18:	010002b4 	movhi	r4,10
   95d1c:	21211904 	addi	r4,r4,-31644
   95d20:	e17ffd17 	ldw	r5,-12(fp)
   95d24:	01800044 	movi	r6,1
   95d28:	01c07fc4 	movi	r7,511
   95d2c:	0095c240 	call	95c24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   95d30:	010002b4 	movhi	r4,10
   95d34:	21211604 	addi	r4,r4,-31656
   95d38:	e17ffe17 	ldw	r5,-8(fp)
   95d3c:	000d883a 	mov	r6,zero
   95d40:	01c07fc4 	movi	r7,511
   95d44:	0095c240 	call	95c24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   95d48:	010002b4 	movhi	r4,10
   95d4c:	21211c04 	addi	r4,r4,-31632
   95d50:	e17fff17 	ldw	r5,-4(fp)
   95d54:	01800044 	movi	r6,1
   95d58:	01c07fc4 	movi	r7,511
   95d5c:	0095c240 	call	95c24 <alt_open_fd>
}  
   95d60:	e037883a 	mov	sp,fp
   95d64:	dfc00117 	ldw	ra,4(sp)
   95d68:	df000017 	ldw	fp,0(sp)
   95d6c:	dec00204 	addi	sp,sp,8
   95d70:	f800283a 	ret

00095d74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   95d74:	defffa04 	addi	sp,sp,-24
   95d78:	dfc00515 	stw	ra,20(sp)
   95d7c:	df000415 	stw	fp,16(sp)
   95d80:	dc000315 	stw	r16,12(sp)
   95d84:	df000304 	addi	fp,sp,12
   95d88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   95d8c:	e0bffe17 	ldw	r2,-8(fp)
   95d90:	10800217 	ldw	r2,8(r2)
   95d94:	10d00034 	orhi	r3,r2,16384
   95d98:	e0bffe17 	ldw	r2,-8(fp)
   95d9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   95da0:	e03ffd15 	stw	zero,-12(fp)
   95da4:	00002306 	br	95e34 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   95da8:	e13ffd17 	ldw	r4,-12(fp)
   95dac:	040002b4 	movhi	r16,10
   95db0:	84211604 	addi	r16,r16,-31656
   95db4:	01400304 	movi	r5,12
   95db8:	0080f440 	call	80f44 <__mulsi3>
   95dbc:	1405883a 	add	r2,r2,r16
   95dc0:	10c00017 	ldw	r3,0(r2)
   95dc4:	e0bffe17 	ldw	r2,-8(fp)
   95dc8:	10800017 	ldw	r2,0(r2)
   95dcc:	1880161e 	bne	r3,r2,95e28 <alt_file_locked+0xb4>
   95dd0:	e13ffd17 	ldw	r4,-12(fp)
   95dd4:	040002b4 	movhi	r16,10
   95dd8:	84211604 	addi	r16,r16,-31656
   95ddc:	01400304 	movi	r5,12
   95de0:	0080f440 	call	80f44 <__mulsi3>
   95de4:	1405883a 	add	r2,r2,r16
   95de8:	10800204 	addi	r2,r2,8
   95dec:	10800017 	ldw	r2,0(r2)
   95df0:	1004403a 	cmpge	r2,r2,zero
   95df4:	10000c1e 	bne	r2,zero,95e28 <alt_file_locked+0xb4>
   95df8:	e13ffd17 	ldw	r4,-12(fp)
   95dfc:	01400304 	movi	r5,12
   95e00:	0080f440 	call	80f44 <__mulsi3>
   95e04:	1007883a 	mov	r3,r2
   95e08:	008002b4 	movhi	r2,10
   95e0c:	10a11604 	addi	r2,r2,-31656
   95e10:	1887883a 	add	r3,r3,r2
   95e14:	e0bffe17 	ldw	r2,-8(fp)
   95e18:	18800326 	beq	r3,r2,95e28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   95e1c:	00bffcc4 	movi	r2,-13
   95e20:	e0bfff15 	stw	r2,-4(fp)
   95e24:	00000a06 	br	95e50 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   95e28:	e0bffd17 	ldw	r2,-12(fp)
   95e2c:	10800044 	addi	r2,r2,1
   95e30:	e0bffd15 	stw	r2,-12(fp)
   95e34:	008002b4 	movhi	r2,10
   95e38:	10a5a704 	addi	r2,r2,-26980
   95e3c:	10800017 	ldw	r2,0(r2)
   95e40:	1007883a 	mov	r3,r2
   95e44:	e0bffd17 	ldw	r2,-12(fp)
   95e48:	18bfd72e 	bgeu	r3,r2,95da8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   95e4c:	e03fff15 	stw	zero,-4(fp)
   95e50:	e0bfff17 	ldw	r2,-4(fp)
}
   95e54:	e037883a 	mov	sp,fp
   95e58:	dfc00217 	ldw	ra,8(sp)
   95e5c:	df000117 	ldw	fp,4(sp)
   95e60:	dc000017 	ldw	r16,0(sp)
   95e64:	dec00304 	addi	sp,sp,12
   95e68:	f800283a 	ret

00095e6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   95e6c:	defff404 	addi	sp,sp,-48
   95e70:	dfc00b15 	stw	ra,44(sp)
   95e74:	df000a15 	stw	fp,40(sp)
   95e78:	df000a04 	addi	fp,sp,40
   95e7c:	e13ffb15 	stw	r4,-20(fp)
   95e80:	e17ffc15 	stw	r5,-16(fp)
   95e84:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   95e88:	00bfffc4 	movi	r2,-1
   95e8c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   95e90:	00bffb44 	movi	r2,-19
   95e94:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   95e98:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   95e9c:	e13ffb17 	ldw	r4,-20(fp)
   95ea0:	014002b4 	movhi	r5,10
   95ea4:	2965a504 	addi	r5,r5,-26988
   95ea8:	00958a80 	call	958a8 <alt_find_dev>
   95eac:	e0bffa15 	stw	r2,-24(fp)
   95eb0:	e0bffa17 	ldw	r2,-24(fp)
   95eb4:	1004c03a 	cmpne	r2,r2,zero
   95eb8:	1000051e 	bne	r2,zero,95ed0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   95ebc:	e13ffb17 	ldw	r4,-20(fp)
   95ec0:	00967080 	call	96708 <alt_find_file>
   95ec4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   95ec8:	00800044 	movi	r2,1
   95ecc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   95ed0:	e0bffa17 	ldw	r2,-24(fp)
   95ed4:	1005003a 	cmpeq	r2,r2,zero
   95ed8:	1000311e 	bne	r2,zero,95fa0 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   95edc:	e13ffa17 	ldw	r4,-24(fp)
   95ee0:	00968280 	call	96828 <alt_get_fd>
   95ee4:	e0bff815 	stw	r2,-32(fp)
   95ee8:	e0bff817 	ldw	r2,-32(fp)
   95eec:	1004403a 	cmpge	r2,r2,zero
   95ef0:	1000031e 	bne	r2,zero,95f00 <open+0x94>
    {
      status = index;
   95ef4:	e0bff817 	ldw	r2,-32(fp)
   95ef8:	e0bff715 	stw	r2,-36(fp)
   95efc:	00002a06 	br	95fa8 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   95f00:	e13ff817 	ldw	r4,-32(fp)
   95f04:	01400304 	movi	r5,12
   95f08:	0080f440 	call	80f44 <__mulsi3>
   95f0c:	1007883a 	mov	r3,r2
   95f10:	008002b4 	movhi	r2,10
   95f14:	10a11604 	addi	r2,r2,-31656
   95f18:	1885883a 	add	r2,r3,r2
   95f1c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   95f20:	e0fffc17 	ldw	r3,-16(fp)
   95f24:	00900034 	movhi	r2,16384
   95f28:	10bfffc4 	addi	r2,r2,-1
   95f2c:	1886703a 	and	r3,r3,r2
   95f30:	e0bff917 	ldw	r2,-28(fp)
   95f34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   95f38:	e0bff617 	ldw	r2,-40(fp)
   95f3c:	1004c03a 	cmpne	r2,r2,zero
   95f40:	1000061e 	bne	r2,zero,95f5c <open+0xf0>
   95f44:	e13ff917 	ldw	r4,-28(fp)
   95f48:	0095d740 	call	95d74 <alt_file_locked>
   95f4c:	e0bff715 	stw	r2,-36(fp)
   95f50:	e0bff717 	ldw	r2,-36(fp)
   95f54:	1004803a 	cmplt	r2,r2,zero
   95f58:	1000131e 	bne	r2,zero,95fa8 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   95f5c:	e0bffa17 	ldw	r2,-24(fp)
   95f60:	10800317 	ldw	r2,12(r2)
   95f64:	1005003a 	cmpeq	r2,r2,zero
   95f68:	1000091e 	bne	r2,zero,95f90 <open+0x124>
   95f6c:	e0bffa17 	ldw	r2,-24(fp)
   95f70:	10800317 	ldw	r2,12(r2)
   95f74:	e13ff917 	ldw	r4,-28(fp)
   95f78:	e17ffb17 	ldw	r5,-20(fp)
   95f7c:	e1bffc17 	ldw	r6,-16(fp)
   95f80:	e1fffd17 	ldw	r7,-12(fp)
   95f84:	103ee83a 	callr	r2
   95f88:	e0bfff15 	stw	r2,-4(fp)
   95f8c:	00000106 	br	95f94 <open+0x128>
   95f90:	e03fff15 	stw	zero,-4(fp)
   95f94:	e0bfff17 	ldw	r2,-4(fp)
   95f98:	e0bff715 	stw	r2,-36(fp)
   95f9c:	00000206 	br	95fa8 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   95fa0:	00bffb44 	movi	r2,-19
   95fa4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   95fa8:	e0bff717 	ldw	r2,-36(fp)
   95fac:	1004403a 	cmpge	r2,r2,zero
   95fb0:	1000091e 	bne	r2,zero,95fd8 <open+0x16c>
  {
    alt_release_fd (index);  
   95fb4:	e13ff817 	ldw	r4,-32(fp)
   95fb8:	008b85c0 	call	8b85c <alt_release_fd>
    ALT_ERRNO = -status;
   95fbc:	0095ff80 	call	95ff8 <alt_get_errno>
   95fc0:	e0fff717 	ldw	r3,-36(fp)
   95fc4:	00c7c83a 	sub	r3,zero,r3
   95fc8:	10c00015 	stw	r3,0(r2)
    return -1;
   95fcc:	00bfffc4 	movi	r2,-1
   95fd0:	e0bffe15 	stw	r2,-8(fp)
   95fd4:	00000206 	br	95fe0 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   95fd8:	e0bff817 	ldw	r2,-32(fp)
   95fdc:	e0bffe15 	stw	r2,-8(fp)
   95fe0:	e0bffe17 	ldw	r2,-8(fp)
}
   95fe4:	e037883a 	mov	sp,fp
   95fe8:	dfc00117 	ldw	ra,4(sp)
   95fec:	df000017 	ldw	fp,0(sp)
   95ff0:	dec00204 	addi	sp,sp,8
   95ff4:	f800283a 	ret

00095ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   95ff8:	defffd04 	addi	sp,sp,-12
   95ffc:	dfc00215 	stw	ra,8(sp)
   96000:	df000115 	stw	fp,4(sp)
   96004:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   96008:	008002b4 	movhi	r2,10
   9600c:	10a5a804 	addi	r2,r2,-26976
   96010:	10800017 	ldw	r2,0(r2)
   96014:	1005003a 	cmpeq	r2,r2,zero
   96018:	1000061e 	bne	r2,zero,96034 <alt_get_errno+0x3c>
   9601c:	008002b4 	movhi	r2,10
   96020:	10a5a804 	addi	r2,r2,-26976
   96024:	10800017 	ldw	r2,0(r2)
   96028:	103ee83a 	callr	r2
   9602c:	e0bfff15 	stw	r2,-4(fp)
   96030:	00000306 	br	96040 <alt_get_errno+0x48>
   96034:	008002b4 	movhi	r2,10
   96038:	10ac9704 	addi	r2,r2,-19876
   9603c:	e0bfff15 	stw	r2,-4(fp)
   96040:	e0bfff17 	ldw	r2,-4(fp)
}
   96044:	e037883a 	mov	sp,fp
   96048:	dfc00117 	ldw	ra,4(sp)
   9604c:	df000017 	ldw	fp,0(sp)
   96050:	dec00204 	addi	sp,sp,8
   96054:	f800283a 	ret

00096058 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   96058:	defffa04 	addi	sp,sp,-24
   9605c:	df000515 	stw	fp,20(sp)
   96060:	df000504 	addi	fp,sp,20
   96064:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96068:	0005303a 	rdctl	r2,status
   9606c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96070:	e0fffd17 	ldw	r3,-12(fp)
   96074:	00bfff84 	movi	r2,-2
   96078:	1884703a 	and	r2,r3,r2
   9607c:	1001703a 	wrctl	status,r2
  
  return context;
   96080:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   96084:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   96088:	e0bfff17 	ldw	r2,-4(fp)
   9608c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   96090:	e0bffc17 	ldw	r2,-16(fp)
   96094:	10c00017 	ldw	r3,0(r2)
   96098:	e0bffc17 	ldw	r2,-16(fp)
   9609c:	10800117 	ldw	r2,4(r2)
   960a0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   960a4:	e0bffc17 	ldw	r2,-16(fp)
   960a8:	10c00117 	ldw	r3,4(r2)
   960ac:	e0bffc17 	ldw	r2,-16(fp)
   960b0:	10800017 	ldw	r2,0(r2)
   960b4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   960b8:	e0fffc17 	ldw	r3,-16(fp)
   960bc:	e0bffc17 	ldw	r2,-16(fp)
   960c0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   960c4:	e0fffc17 	ldw	r3,-16(fp)
   960c8:	e0bffc17 	ldw	r2,-16(fp)
   960cc:	18800015 	stw	r2,0(r3)
   960d0:	e0bffe17 	ldw	r2,-8(fp)
   960d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   960d8:	e0bffb17 	ldw	r2,-20(fp)
   960dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   960e0:	e037883a 	mov	sp,fp
   960e4:	df000017 	ldw	fp,0(sp)
   960e8:	dec00104 	addi	sp,sp,4
   960ec:	f800283a 	ret

000960f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   960f0:	defffb04 	addi	sp,sp,-20
   960f4:	dfc00415 	stw	ra,16(sp)
   960f8:	df000315 	stw	fp,12(sp)
   960fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   96100:	d0a02e17 	ldw	r2,-32584(gp)
   96104:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   96108:	d0a71a17 	ldw	r2,-25496(gp)
   9610c:	10800044 	addi	r2,r2,1
   96110:	d0a71a15 	stw	r2,-25496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   96114:	00003106 	br	961dc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   96118:	e0bffe17 	ldw	r2,-8(fp)
   9611c:	10800017 	ldw	r2,0(r2)
   96120:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   96124:	e0bffe17 	ldw	r2,-8(fp)
   96128:	10800403 	ldbu	r2,16(r2)
   9612c:	10803fcc 	andi	r2,r2,255
   96130:	1005003a 	cmpeq	r2,r2,zero
   96134:	1000051e 	bne	r2,zero,9614c <alt_tick+0x5c>
   96138:	d0a71a17 	ldw	r2,-25496(gp)
   9613c:	1004c03a 	cmpne	r2,r2,zero
   96140:	1000021e 	bne	r2,zero,9614c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   96144:	e0bffe17 	ldw	r2,-8(fp)
   96148:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   9614c:	e0bffe17 	ldw	r2,-8(fp)
   96150:	10c00217 	ldw	r3,8(r2)
   96154:	d0a71a17 	ldw	r2,-25496(gp)
   96158:	10c01e36 	bltu	r2,r3,961d4 <alt_tick+0xe4>
   9615c:	e0bffe17 	ldw	r2,-8(fp)
   96160:	10800403 	ldbu	r2,16(r2)
   96164:	10803fcc 	andi	r2,r2,255
   96168:	1004c03a 	cmpne	r2,r2,zero
   9616c:	1000191e 	bne	r2,zero,961d4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   96170:	e0bffe17 	ldw	r2,-8(fp)
   96174:	10c00317 	ldw	r3,12(r2)
   96178:	e0bffe17 	ldw	r2,-8(fp)
   9617c:	11000517 	ldw	r4,20(r2)
   96180:	183ee83a 	callr	r3
   96184:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   96188:	e0bffd17 	ldw	r2,-12(fp)
   9618c:	1004c03a 	cmpne	r2,r2,zero
   96190:	1000031e 	bne	r2,zero,961a0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   96194:	e13ffe17 	ldw	r4,-8(fp)
   96198:	00960580 	call	96058 <alt_alarm_stop>
   9619c:	00000d06 	br	961d4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   961a0:	e0bffe17 	ldw	r2,-8(fp)
   961a4:	10c00217 	ldw	r3,8(r2)
   961a8:	e0bffd17 	ldw	r2,-12(fp)
   961ac:	1887883a 	add	r3,r3,r2
   961b0:	e0bffe17 	ldw	r2,-8(fp)
   961b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   961b8:	e0bffe17 	ldw	r2,-8(fp)
   961bc:	10c00217 	ldw	r3,8(r2)
   961c0:	d0a71a17 	ldw	r2,-25496(gp)
   961c4:	1880032e 	bgeu	r3,r2,961d4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   961c8:	e0fffe17 	ldw	r3,-8(fp)
   961cc:	00800044 	movi	r2,1
   961d0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   961d4:	e0bfff17 	ldw	r2,-4(fp)
   961d8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   961dc:	d0e02e04 	addi	r3,gp,-32584
   961e0:	e0bffe17 	ldw	r2,-8(fp)
   961e4:	10ffcc1e 	bne	r2,r3,96118 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   961e8:	008cb780 	call	8cb78 <OSTimeTick>
}
   961ec:	e037883a 	mov	sp,fp
   961f0:	dfc00117 	ldw	ra,4(sp)
   961f4:	df000017 	ldw	fp,0(sp)
   961f8:	dec00204 	addi	sp,sp,8
   961fc:	f800283a 	ret

00096200 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   96200:	deffff04 	addi	sp,sp,-4
   96204:	df000015 	stw	fp,0(sp)
   96208:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9620c:	000170fa 	wrctl	ienable,zero
}
   96210:	e037883a 	mov	sp,fp
   96214:	df000017 	ldw	fp,0(sp)
   96218:	dec00104 	addi	sp,sp,4
   9621c:	f800283a 	ret

00096220 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   96220:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   96224:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   96228:	d1271417 	ldw	r4,-25520(gp)

      stw ra,  0(sp)
   9622c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   96230:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   96234:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   96238:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   9623c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   96240:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   96244:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   96248:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   9624c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   96250:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   96254:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   96258:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   9625c:	00966400 	call	96640 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   96260:	d1270f17 	ldw	r4,-25540(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   96264:	d1670707 	ldb	r5,-25572(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   96268:	d1271415 	stw	r4,-25520(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   9626c:	d1670745 	stb	r5,-25571(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   96270:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   96274:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   96278:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   9627c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   96280:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   96284:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   96288:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   9628c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   96290:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   96294:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   96298:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   9629c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   962a0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   962a4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   962a8:	f800283a 	ret

000962ac <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   962ac:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   962b0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   962b4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   962b8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   962bc:	00966400 	call	96640 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   962c0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   962c4:	d4a70545 	stb	r18,-25579(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   962c8:	003fe506 	br	96260 <OSCtxSw+0x40>

000962cc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   962cc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   962d0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   962d4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   962d8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   962dc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   962e0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   962e4:	dec00204 	addi	sp,sp,8

      callr r2
   962e8:	103ee83a 	callr	r2

      nop
   962ec:	0001883a 	nop

000962f0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   962f0:	defff704 	addi	sp,sp,-36
   962f4:	dfc00815 	stw	ra,32(sp)
   962f8:	df000715 	stw	fp,28(sp)
   962fc:	df000704 	addi	fp,sp,28
   96300:	e13ffc15 	stw	r4,-16(fp)
   96304:	e17ffd15 	stw	r5,-12(fp)
   96308:	e1bffe15 	stw	r6,-8(fp)
   9630c:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   96310:	e0bffe17 	ldw	r2,-8(fp)
   96314:	1007883a 	mov	r3,r2
   96318:	00bfff04 	movi	r2,-4
   9631c:	1884703a 	and	r2,r3,r2
   96320:	10bf0004 	addi	r2,r2,-1024
   96324:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   96328:	e0bff917 	ldw	r2,-28(fp)
   9632c:	10000015 	stw	zero,0(r2)
   96330:	e0bff917 	ldw	r2,-28(fp)
   96334:	10c0bb04 	addi	r3,r2,748
   96338:	e0bff917 	ldw	r2,-28(fp)
   9633c:	10c00115 	stw	r3,4(r2)
   96340:	e0bff917 	ldw	r2,-28(fp)
   96344:	1080bb04 	addi	r2,r2,748
   96348:	10c01704 	addi	r3,r2,92
   9634c:	e0bff917 	ldw	r2,-28(fp)
   96350:	10c00215 	stw	r3,8(r2)
   96354:	e0bff917 	ldw	r2,-28(fp)
   96358:	1080bb04 	addi	r2,r2,748
   9635c:	10c02e04 	addi	r3,r2,184
   96360:	e0bff917 	ldw	r2,-28(fp)
   96364:	10c00315 	stw	r3,12(r2)
   96368:	e0bff917 	ldw	r2,-28(fp)
   9636c:	10000415 	stw	zero,16(r2)
   96370:	e0bff917 	ldw	r2,-28(fp)
   96374:	10800504 	addi	r2,r2,20
   96378:	1009883a 	mov	r4,r2
   9637c:	01800644 	movi	r6,25
   96380:	000b883a 	mov	r5,zero
   96384:	00866ec0 	call	866ec <memset>
   96388:	e0bff917 	ldw	r2,-28(fp)
   9638c:	10000c15 	stw	zero,48(r2)
   96390:	e0fff917 	ldw	r3,-28(fp)
   96394:	00800274 	movhi	r2,9
   96398:	109f0604 	addi	r2,r2,31768
   9639c:	18800d15 	stw	r2,52(r3)
   963a0:	e0bff917 	ldw	r2,-28(fp)
   963a4:	10000e15 	stw	zero,56(r2)
   963a8:	e0bff917 	ldw	r2,-28(fp)
   963ac:	10000f15 	stw	zero,60(r2)
   963b0:	e0bff917 	ldw	r2,-28(fp)
   963b4:	10001015 	stw	zero,64(r2)
   963b8:	e0bff917 	ldw	r2,-28(fp)
   963bc:	10001115 	stw	zero,68(r2)
   963c0:	e0bff917 	ldw	r2,-28(fp)
   963c4:	10001215 	stw	zero,72(r2)
   963c8:	e0bff917 	ldw	r2,-28(fp)
   963cc:	10001315 	stw	zero,76(r2)
   963d0:	e0bff917 	ldw	r2,-28(fp)
   963d4:	10001415 	stw	zero,80(r2)
   963d8:	e0bff917 	ldw	r2,-28(fp)
   963dc:	10001515 	stw	zero,84(r2)
   963e0:	e0bff917 	ldw	r2,-28(fp)
   963e4:	10001615 	stw	zero,88(r2)
   963e8:	e0bff917 	ldw	r2,-28(fp)
   963ec:	10001715 	stw	zero,92(r2)
   963f0:	e0bff917 	ldw	r2,-28(fp)
   963f4:	10001805 	stb	zero,96(r2)
   963f8:	e0bff917 	ldw	r2,-28(fp)
   963fc:	10801f04 	addi	r2,r2,124
   96400:	10000015 	stw	zero,0(r2)
   96404:	10000115 	stw	zero,4(r2)
   96408:	10000215 	stw	zero,8(r2)
   9640c:	10000315 	stw	zero,12(r2)
   96410:	10000415 	stw	zero,16(r2)
   96414:	10000515 	stw	zero,20(r2)
   96418:	10000615 	stw	zero,24(r2)
   9641c:	10000715 	stw	zero,28(r2)
   96420:	10000815 	stw	zero,32(r2)
   96424:	e0bff917 	ldw	r2,-28(fp)
   96428:	10002815 	stw	zero,160(r2)
   9642c:	e0fff917 	ldw	r3,-28(fp)
   96430:	00800044 	movi	r2,1
   96434:	18802915 	stw	r2,164(r3)
   96438:	18002a15 	stw	zero,168(r3)
   9643c:	e0fff917 	ldw	r3,-28(fp)
   96440:	008cc384 	movi	r2,13070
   96444:	18802b0d 	sth	r2,172(r3)
   96448:	e0fff917 	ldw	r3,-28(fp)
   9644c:	00aaf344 	movi	r2,-21555
   96450:	18802b8d 	sth	r2,174(r3)
   96454:	e0fff917 	ldw	r3,-28(fp)
   96458:	00848d04 	movi	r2,4660
   9645c:	18802c0d 	sth	r2,176(r3)
   96460:	e0fff917 	ldw	r3,-28(fp)
   96464:	00b99b44 	movi	r2,-6547
   96468:	18802c8d 	sth	r2,178(r3)
   9646c:	e0fff917 	ldw	r3,-28(fp)
   96470:	00b7bb04 	movi	r2,-8468
   96474:	18802d0d 	sth	r2,180(r3)
   96478:	e0fff917 	ldw	r3,-28(fp)
   9647c:	00800144 	movi	r2,5
   96480:	18802d8d 	sth	r2,182(r3)
   96484:	e0fff917 	ldw	r3,-28(fp)
   96488:	008002c4 	movi	r2,11
   9648c:	18802e0d 	sth	r2,184(r3)
   96490:	e0bff917 	ldw	r2,-28(fp)
   96494:	10002f15 	stw	zero,188(r2)
   96498:	e0bff917 	ldw	r2,-28(fp)
   9649c:	10003015 	stw	zero,192(r2)
   964a0:	e0bff917 	ldw	r2,-28(fp)
   964a4:	10003115 	stw	zero,196(r2)
   964a8:	e0bff917 	ldw	r2,-28(fp)
   964ac:	10003215 	stw	zero,200(r2)
   964b0:	e0bff917 	ldw	r2,-28(fp)
   964b4:	10003315 	stw	zero,204(r2)
   964b8:	e0bff917 	ldw	r2,-28(fp)
   964bc:	10003415 	stw	zero,208(r2)
   964c0:	e0bff917 	ldw	r2,-28(fp)
   964c4:	10003e15 	stw	zero,248(r2)
   964c8:	e0bff917 	ldw	r2,-28(fp)
   964cc:	10003f15 	stw	zero,252(r2)
   964d0:	e0bff917 	ldw	r2,-28(fp)
   964d4:	10004015 	stw	zero,256(r2)
   964d8:	e0bff917 	ldw	r2,-28(fp)
   964dc:	10004115 	stw	zero,260(r2)
   964e0:	e0bff917 	ldw	r2,-28(fp)
   964e4:	10004215 	stw	zero,264(r2)
   964e8:	e0bff917 	ldw	r2,-28(fp)
   964ec:	10004315 	stw	zero,268(r2)
   964f0:	e0bff917 	ldw	r2,-28(fp)
   964f4:	10004415 	stw	zero,272(r2)
   964f8:	e0bff917 	ldw	r2,-28(fp)
   964fc:	10004515 	stw	zero,276(r2)
   96500:	e0bff917 	ldw	r2,-28(fp)
   96504:	10004615 	stw	zero,280(r2)
   96508:	e0bff917 	ldw	r2,-28(fp)
   9650c:	10004715 	stw	zero,284(r2)
   96510:	e0bff917 	ldw	r2,-28(fp)
   96514:	10003505 	stb	zero,212(r2)
   96518:	e0bff917 	ldw	r2,-28(fp)
   9651c:	10003705 	stb	zero,220(r2)
   96520:	e0bff917 	ldw	r2,-28(fp)
   96524:	10003d15 	stw	zero,244(r2)
   96528:	e0bff917 	ldw	r2,-28(fp)
   9652c:	10005215 	stw	zero,328(r2)
   96530:	e0bff917 	ldw	r2,-28(fp)
   96534:	10005315 	stw	zero,332(r2)
   96538:	e0bff917 	ldw	r2,-28(fp)
   9653c:	10005415 	stw	zero,336(r2)
   96540:	e0bff917 	ldw	r2,-28(fp)
   96544:	10005515 	stw	zero,340(r2)
   96548:	e0bff917 	ldw	r2,-28(fp)
   9654c:	1000b515 	stw	zero,724(r2)
   96550:	e0bff917 	ldw	r2,-28(fp)
   96554:	10007515 	stw	zero,468(r2)
   96558:	e0bff917 	ldw	r2,-28(fp)
   9655c:	1000b715 	stw	zero,732(r2)
   96560:	e0bff917 	ldw	r2,-28(fp)
   96564:	1000b815 	stw	zero,736(r2)
   96568:	e0bff917 	ldw	r2,-28(fp)
   9656c:	1000b915 	stw	zero,740(r2)
   96570:	e0bff917 	ldw	r2,-28(fp)
   96574:	1000ba15 	stw	zero,744(r2)
   96578:	e0bff917 	ldw	r2,-28(fp)
   9657c:	1080bb04 	addi	r2,r2,748
   96580:	1009883a 	mov	r4,r2
   96584:	01804504 	movi	r6,276
   96588:	000b883a 	mov	r5,zero
   9658c:	00866ec0 	call	866ec <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   96590:	e0bff917 	ldw	r2,-28(fp)
   96594:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   96598:	e0bffb17 	ldw	r2,-20(fp)
   9659c:	10bff304 	addi	r2,r2,-52
   965a0:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   965a4:	e0bffa17 	ldw	r2,-24(fp)
   965a8:	10c00c04 	addi	r3,r2,48
   965ac:	e0bffc17 	ldw	r2,-16(fp)
   965b0:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   965b4:	e0bffa17 	ldw	r2,-24(fp)
   965b8:	10c00b04 	addi	r3,r2,44
   965bc:	e0bffd17 	ldw	r2,-12(fp)
   965c0:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   965c4:	e0bffa17 	ldw	r2,-24(fp)
   965c8:	10c00a04 	addi	r3,r2,40
   965cc:	e0bff917 	ldw	r2,-28(fp)
   965d0:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   965d4:	00800274 	movhi	r2,9
   965d8:	1098b304 	addi	r2,r2,25292
   965dc:	10c00104 	addi	r3,r2,4
   965e0:	e0bffa17 	ldw	r2,-24(fp)
   965e4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   965e8:	e0bffa17 	ldw	r2,-24(fp)
}
   965ec:	e037883a 	mov	sp,fp
   965f0:	dfc00117 	ldw	ra,4(sp)
   965f4:	df000017 	ldw	fp,0(sp)
   965f8:	dec00204 	addi	sp,sp,8
   965fc:	f800283a 	ret

00096600 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   96600:	defffe04 	addi	sp,sp,-8
   96604:	df000115 	stw	fp,4(sp)
   96608:	df000104 	addi	fp,sp,4
   9660c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   96610:	e037883a 	mov	sp,fp
   96614:	df000017 	ldw	fp,0(sp)
   96618:	dec00104 	addi	sp,sp,4
   9661c:	f800283a 	ret

00096620 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   96620:	defffe04 	addi	sp,sp,-8
   96624:	df000115 	stw	fp,4(sp)
   96628:	df000104 	addi	fp,sp,4
   9662c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   96630:	e037883a 	mov	sp,fp
   96634:	df000017 	ldw	fp,0(sp)
   96638:	dec00104 	addi	sp,sp,4
   9663c:	f800283a 	ret

00096640 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   96640:	deffff04 	addi	sp,sp,-4
   96644:	df000015 	stw	fp,0(sp)
   96648:	d839883a 	mov	fp,sp
}
   9664c:	e037883a 	mov	sp,fp
   96650:	df000017 	ldw	fp,0(sp)
   96654:	dec00104 	addi	sp,sp,4
   96658:	f800283a 	ret

0009665c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   9665c:	deffff04 	addi	sp,sp,-4
   96660:	df000015 	stw	fp,0(sp)
   96664:	d839883a 	mov	fp,sp
}
   96668:	e037883a 	mov	sp,fp
   9666c:	df000017 	ldw	fp,0(sp)
   96670:	dec00104 	addi	sp,sp,4
   96674:	f800283a 	ret

00096678 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   96678:	deffff04 	addi	sp,sp,-4
   9667c:	df000015 	stw	fp,0(sp)
   96680:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   96684:	e037883a 	mov	sp,fp
   96688:	df000017 	ldw	fp,0(sp)
   9668c:	dec00104 	addi	sp,sp,4
   96690:	f800283a 	ret

00096694 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   96694:	deffff04 	addi	sp,sp,-4
   96698:	df000015 	stw	fp,0(sp)
   9669c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   966a0:	e037883a 	mov	sp,fp
   966a4:	df000017 	ldw	fp,0(sp)
   966a8:	dec00104 	addi	sp,sp,4
   966ac:	f800283a 	ret

000966b0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   966b0:	deffff04 	addi	sp,sp,-4
   966b4:	df000015 	stw	fp,0(sp)
   966b8:	d839883a 	mov	fp,sp
}
   966bc:	e037883a 	mov	sp,fp
   966c0:	df000017 	ldw	fp,0(sp)
   966c4:	dec00104 	addi	sp,sp,4
   966c8:	f800283a 	ret

000966cc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   966cc:	deffff04 	addi	sp,sp,-4
   966d0:	df000015 	stw	fp,0(sp)
   966d4:	d839883a 	mov	fp,sp
}
   966d8:	e037883a 	mov	sp,fp
   966dc:	df000017 	ldw	fp,0(sp)
   966e0:	dec00104 	addi	sp,sp,4
   966e4:	f800283a 	ret

000966e8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   966e8:	defffe04 	addi	sp,sp,-8
   966ec:	df000115 	stw	fp,4(sp)
   966f0:	df000104 	addi	fp,sp,4
   966f4:	e13fff15 	stw	r4,-4(fp)
}
   966f8:	e037883a 	mov	sp,fp
   966fc:	df000017 	ldw	fp,0(sp)
   96700:	dec00104 	addi	sp,sp,4
   96704:	f800283a 	ret

00096708 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   96708:	defffa04 	addi	sp,sp,-24
   9670c:	dfc00515 	stw	ra,20(sp)
   96710:	df000415 	stw	fp,16(sp)
   96714:	df000404 	addi	fp,sp,16
   96718:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9671c:	008002b4 	movhi	r2,10
   96720:	10a5a304 	addi	r2,r2,-26996
   96724:	10800017 	ldw	r2,0(r2)
   96728:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9672c:	00003306 	br	967fc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   96730:	e0bffd17 	ldw	r2,-12(fp)
   96734:	11000217 	ldw	r4,8(r2)
   96738:	00812880 	call	81288 <strlen>
   9673c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   96740:	e0bffd17 	ldw	r2,-12(fp)
   96744:	10c00217 	ldw	r3,8(r2)
   96748:	e0bffc17 	ldw	r2,-16(fp)
   9674c:	1885883a 	add	r2,r3,r2
   96750:	10bfffc4 	addi	r2,r2,-1
   96754:	10800003 	ldbu	r2,0(r2)
   96758:	10803fcc 	andi	r2,r2,255
   9675c:	1080201c 	xori	r2,r2,128
   96760:	10bfe004 	addi	r2,r2,-128
   96764:	10800bd8 	cmpnei	r2,r2,47
   96768:	1000031e 	bne	r2,zero,96778 <alt_find_file+0x70>
    {
      len -= 1;
   9676c:	e0bffc17 	ldw	r2,-16(fp)
   96770:	10bfffc4 	addi	r2,r2,-1
   96774:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   96778:	e0bffc17 	ldw	r2,-16(fp)
   9677c:	1007883a 	mov	r3,r2
   96780:	e0bffe17 	ldw	r2,-8(fp)
   96784:	1885883a 	add	r2,r3,r2
   96788:	10800003 	ldbu	r2,0(r2)
   9678c:	10803fcc 	andi	r2,r2,255
   96790:	1080201c 	xori	r2,r2,128
   96794:	10bfe004 	addi	r2,r2,-128
   96798:	10800be0 	cmpeqi	r2,r2,47
   9679c:	10000a1e 	bne	r2,zero,967c8 <alt_find_file+0xc0>
   967a0:	e0bffc17 	ldw	r2,-16(fp)
   967a4:	1007883a 	mov	r3,r2
   967a8:	e0bffe17 	ldw	r2,-8(fp)
   967ac:	1885883a 	add	r2,r3,r2
   967b0:	10800003 	ldbu	r2,0(r2)
   967b4:	10803fcc 	andi	r2,r2,255
   967b8:	1080201c 	xori	r2,r2,128
   967bc:	10bfe004 	addi	r2,r2,-128
   967c0:	1004c03a 	cmpne	r2,r2,zero
   967c4:	10000a1e 	bne	r2,zero,967f0 <alt_find_file+0xe8>
   967c8:	e0bffd17 	ldw	r2,-12(fp)
   967cc:	11000217 	ldw	r4,8(r2)
   967d0:	e1bffc17 	ldw	r6,-16(fp)
   967d4:	e17ffe17 	ldw	r5,-8(fp)
   967d8:	00969780 	call	96978 <memcmp>
   967dc:	1004c03a 	cmpne	r2,r2,zero
   967e0:	1000031e 	bne	r2,zero,967f0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   967e4:	e0bffd17 	ldw	r2,-12(fp)
   967e8:	e0bfff15 	stw	r2,-4(fp)
   967ec:	00000806 	br	96810 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   967f0:	e0bffd17 	ldw	r2,-12(fp)
   967f4:	10800017 	ldw	r2,0(r2)
   967f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   967fc:	00c002b4 	movhi	r3,10
   96800:	18e5a304 	addi	r3,r3,-26996
   96804:	e0bffd17 	ldw	r2,-12(fp)
   96808:	10ffc91e 	bne	r2,r3,96730 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9680c:	e03fff15 	stw	zero,-4(fp)
   96810:	e0bfff17 	ldw	r2,-4(fp)
}
   96814:	e037883a 	mov	sp,fp
   96818:	dfc00117 	ldw	ra,4(sp)
   9681c:	df000017 	ldw	fp,0(sp)
   96820:	dec00204 	addi	sp,sp,8
   96824:	f800283a 	ret

00096828 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   96828:	defff704 	addi	sp,sp,-36
   9682c:	dfc00815 	stw	ra,32(sp)
   96830:	df000715 	stw	fp,28(sp)
   96834:	dc000615 	stw	r16,24(sp)
   96838:	df000604 	addi	fp,sp,24
   9683c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   96840:	00bffa04 	movi	r2,-24
   96844:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   96848:	008002b4 	movhi	r2,10
   9684c:	10ac9804 	addi	r2,r2,-19872
   96850:	10800017 	ldw	r2,0(r2)
   96854:	e0bffa15 	stw	r2,-24(fp)
   96858:	e03ffb0d 	sth	zero,-20(fp)
   9685c:	e17ffb0b 	ldhu	r5,-20(fp)
   96860:	e1bffe04 	addi	r6,fp,-8
   96864:	e13ffa17 	ldw	r4,-24(fp)
   96868:	00919980 	call	91998 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9686c:	e03ffd15 	stw	zero,-12(fp)
   96870:	00002006 	br	968f4 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   96874:	e13ffd17 	ldw	r4,-12(fp)
   96878:	040002b4 	movhi	r16,10
   9687c:	84211604 	addi	r16,r16,-31656
   96880:	01400304 	movi	r5,12
   96884:	0080f440 	call	80f44 <__mulsi3>
   96888:	1405883a 	add	r2,r2,r16
   9688c:	10800017 	ldw	r2,0(r2)
   96890:	1004c03a 	cmpne	r2,r2,zero
   96894:	1000141e 	bne	r2,zero,968e8 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   96898:	e13ffd17 	ldw	r4,-12(fp)
   9689c:	040002b4 	movhi	r16,10
   968a0:	84211604 	addi	r16,r16,-31656
   968a4:	01400304 	movi	r5,12
   968a8:	0080f440 	call	80f44 <__mulsi3>
   968ac:	1407883a 	add	r3,r2,r16
   968b0:	e0bfff17 	ldw	r2,-4(fp)
   968b4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   968b8:	008002b4 	movhi	r2,10
   968bc:	10a5a704 	addi	r2,r2,-26980
   968c0:	10c00017 	ldw	r3,0(r2)
   968c4:	e0bffd17 	ldw	r2,-12(fp)
   968c8:	1880040e 	bge	r3,r2,968dc <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   968cc:	00c002b4 	movhi	r3,10
   968d0:	18e5a704 	addi	r3,r3,-26980
   968d4:	e0bffd17 	ldw	r2,-12(fp)
   968d8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   968dc:	e0bffd17 	ldw	r2,-12(fp)
   968e0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   968e4:	00000606 	br	96900 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   968e8:	e0bffd17 	ldw	r2,-12(fp)
   968ec:	10800044 	addi	r2,r2,1
   968f0:	e0bffd15 	stw	r2,-12(fp)
   968f4:	e0bffd17 	ldw	r2,-12(fp)
   968f8:	10800810 	cmplti	r2,r2,32
   968fc:	103fdd1e 	bne	r2,zero,96874 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   96900:	008002b4 	movhi	r2,10
   96904:	10ac9804 	addi	r2,r2,-19872
   96908:	11000017 	ldw	r4,0(r2)
   9690c:	0091d900 	call	91d90 <OSSemPost>

  return rc;
   96910:	e0bffc17 	ldw	r2,-16(fp)
}
   96914:	e037883a 	mov	sp,fp
   96918:	dfc00217 	ldw	ra,8(sp)
   9691c:	df000117 	ldw	fp,4(sp)
   96920:	dc000017 	ldw	r16,0(sp)
   96924:	dec00304 	addi	sp,sp,12
   96928:	f800283a 	ret

0009692c <atexit>:
   9692c:	200b883a 	mov	r5,r4
   96930:	000d883a 	mov	r6,zero
   96934:	0009883a 	mov	r4,zero
   96938:	000f883a 	mov	r7,zero
   9693c:	0096d241 	jmpi	96d24 <__register_exitproc>

00096940 <exit>:
   96940:	defffe04 	addi	sp,sp,-8
   96944:	000b883a 	mov	r5,zero
   96948:	dc000015 	stw	r16,0(sp)
   9694c:	dfc00115 	stw	ra,4(sp)
   96950:	2021883a 	mov	r16,r4
   96954:	0096e5c0 	call	96e5c <__call_exitprocs>
   96958:	008002b4 	movhi	r2,10
   9695c:	10a59e04 	addi	r2,r2,-27016
   96960:	11000017 	ldw	r4,0(r2)
   96964:	20800f17 	ldw	r2,60(r4)
   96968:	10000126 	beq	r2,zero,96970 <exit+0x30>
   9696c:	103ee83a 	callr	r2
   96970:	8009883a 	mov	r4,r16
   96974:	009704c0 	call	9704c <_exit>

00096978 <memcmp>:
   96978:	00c000c4 	movi	r3,3
   9697c:	1980032e 	bgeu	r3,r6,9698c <memcmp+0x14>
   96980:	2144b03a 	or	r2,r4,r5
   96984:	10c4703a 	and	r2,r2,r3
   96988:	10000f26 	beq	r2,zero,969c8 <memcmp+0x50>
   9698c:	31ffffc4 	addi	r7,r6,-1
   96990:	3000061e 	bne	r6,zero,969ac <memcmp+0x34>
   96994:	00000a06 	br	969c0 <memcmp+0x48>
   96998:	39ffffc4 	addi	r7,r7,-1
   9699c:	00bfffc4 	movi	r2,-1
   969a0:	21000044 	addi	r4,r4,1
   969a4:	29400044 	addi	r5,r5,1
   969a8:	38800526 	beq	r7,r2,969c0 <memcmp+0x48>
   969ac:	20c00003 	ldbu	r3,0(r4)
   969b0:	28800003 	ldbu	r2,0(r5)
   969b4:	18bff826 	beq	r3,r2,96998 <memcmp+0x20>
   969b8:	1885c83a 	sub	r2,r3,r2
   969bc:	f800283a 	ret
   969c0:	0005883a 	mov	r2,zero
   969c4:	f800283a 	ret
   969c8:	180f883a 	mov	r7,r3
   969cc:	20c00017 	ldw	r3,0(r4)
   969d0:	28800017 	ldw	r2,0(r5)
   969d4:	18bfed1e 	bne	r3,r2,9698c <memcmp+0x14>
   969d8:	31bfff04 	addi	r6,r6,-4
   969dc:	21000104 	addi	r4,r4,4
   969e0:	29400104 	addi	r5,r5,4
   969e4:	39bff936 	bltu	r7,r6,969cc <memcmp+0x54>
   969e8:	003fe806 	br	9698c <memcmp+0x14>

000969ec <putc>:
   969ec:	defffc04 	addi	sp,sp,-16
   969f0:	dc800215 	stw	r18,8(sp)
   969f4:	048002b4 	movhi	r18,10
   969f8:	94a59d04 	addi	r18,r18,-27020
   969fc:	90c00017 	ldw	r3,0(r18)
   96a00:	dc400115 	stw	r17,4(sp)
   96a04:	dc000015 	stw	r16,0(sp)
   96a08:	dfc00315 	stw	ra,12(sp)
   96a0c:	2023883a 	mov	r17,r4
   96a10:	2821883a 	mov	r16,r5
   96a14:	18000226 	beq	r3,zero,96a20 <putc+0x34>
   96a18:	18800e17 	ldw	r2,56(r3)
   96a1c:	10001126 	beq	r2,zero,96a64 <putc+0x78>
   96a20:	80800217 	ldw	r2,8(r16)
   96a24:	10ffffc4 	addi	r3,r2,-1
   96a28:	80c00215 	stw	r3,8(r16)
   96a2c:	18001316 	blt	r3,zero,96a7c <putc+0x90>
   96a30:	80800017 	ldw	r2,0(r16)
   96a34:	14400005 	stb	r17,0(r2)
   96a38:	80c00017 	ldw	r3,0(r16)
   96a3c:	18800044 	addi	r2,r3,1
   96a40:	18c00003 	ldbu	r3,0(r3)
   96a44:	80800015 	stw	r2,0(r16)
   96a48:	1805883a 	mov	r2,r3
   96a4c:	dfc00317 	ldw	ra,12(sp)
   96a50:	dc800217 	ldw	r18,8(sp)
   96a54:	dc400117 	ldw	r17,4(sp)
   96a58:	dc000017 	ldw	r16,0(sp)
   96a5c:	dec00404 	addi	sp,sp,16
   96a60:	f800283a 	ret
   96a64:	1809883a 	mov	r4,r3
   96a68:	0084e080 	call	84e08 <__sinit>
   96a6c:	80800217 	ldw	r2,8(r16)
   96a70:	10ffffc4 	addi	r3,r2,-1
   96a74:	80c00215 	stw	r3,8(r16)
   96a78:	183fed0e 	bge	r3,zero,96a30 <putc+0x44>
   96a7c:	80800617 	ldw	r2,24(r16)
   96a80:	18800f16 	blt	r3,r2,96ac0 <putc+0xd4>
   96a84:	80800017 	ldw	r2,0(r16)
   96a88:	14400005 	stb	r17,0(r2)
   96a8c:	81000017 	ldw	r4,0(r16)
   96a90:	00800284 	movi	r2,10
   96a94:	20c00003 	ldbu	r3,0(r4)
   96a98:	18801226 	beq	r3,r2,96ae4 <putc+0xf8>
   96a9c:	20800044 	addi	r2,r4,1
   96aa0:	80800015 	stw	r2,0(r16)
   96aa4:	1805883a 	mov	r2,r3
   96aa8:	dfc00317 	ldw	ra,12(sp)
   96aac:	dc800217 	ldw	r18,8(sp)
   96ab0:	dc400117 	ldw	r17,4(sp)
   96ab4:	dc000017 	ldw	r16,0(sp)
   96ab8:	dec00404 	addi	sp,sp,16
   96abc:	f800283a 	ret
   96ac0:	91000017 	ldw	r4,0(r18)
   96ac4:	880b883a 	mov	r5,r17
   96ac8:	800d883a 	mov	r6,r16
   96acc:	dfc00317 	ldw	ra,12(sp)
   96ad0:	dc800217 	ldw	r18,8(sp)
   96ad4:	dc400117 	ldw	r17,4(sp)
   96ad8:	dc000017 	ldw	r16,0(sp)
   96adc:	dec00404 	addi	sp,sp,16
   96ae0:	0096bd81 	jmpi	96bd8 <__swbuf_r>
   96ae4:	91000017 	ldw	r4,0(r18)
   96ae8:	180b883a 	mov	r5,r3
   96aec:	003ff606 	br	96ac8 <putc+0xdc>

00096af0 <_putc_r>:
   96af0:	defffc04 	addi	sp,sp,-16
   96af4:	dc400215 	stw	r17,8(sp)
   96af8:	dc000115 	stw	r16,4(sp)
   96afc:	dfc00315 	stw	ra,12(sp)
   96b00:	2021883a 	mov	r16,r4
   96b04:	2823883a 	mov	r17,r5
   96b08:	20000226 	beq	r4,zero,96b14 <_putc_r+0x24>
   96b0c:	20800e17 	ldw	r2,56(r4)
   96b10:	10001026 	beq	r2,zero,96b54 <_putc_r+0x64>
   96b14:	30800217 	ldw	r2,8(r6)
   96b18:	10ffffc4 	addi	r3,r2,-1
   96b1c:	30c00215 	stw	r3,8(r6)
   96b20:	18001316 	blt	r3,zero,96b70 <_putc_r+0x80>
   96b24:	30800017 	ldw	r2,0(r6)
   96b28:	14400005 	stb	r17,0(r2)
   96b2c:	30c00017 	ldw	r3,0(r6)
   96b30:	18800044 	addi	r2,r3,1
   96b34:	18c00003 	ldbu	r3,0(r3)
   96b38:	30800015 	stw	r2,0(r6)
   96b3c:	1805883a 	mov	r2,r3
   96b40:	dfc00317 	ldw	ra,12(sp)
   96b44:	dc400217 	ldw	r17,8(sp)
   96b48:	dc000117 	ldw	r16,4(sp)
   96b4c:	dec00404 	addi	sp,sp,16
   96b50:	f800283a 	ret
   96b54:	d9800015 	stw	r6,0(sp)
   96b58:	0084e080 	call	84e08 <__sinit>
   96b5c:	d9800017 	ldw	r6,0(sp)
   96b60:	30800217 	ldw	r2,8(r6)
   96b64:	10ffffc4 	addi	r3,r2,-1
   96b68:	30c00215 	stw	r3,8(r6)
   96b6c:	183fed0e 	bge	r3,zero,96b24 <_putc_r+0x34>
   96b70:	30800617 	ldw	r2,24(r6)
   96b74:	18800e16 	blt	r3,r2,96bb0 <_putc_r+0xc0>
   96b78:	30800017 	ldw	r2,0(r6)
   96b7c:	14400005 	stb	r17,0(r2)
   96b80:	31000017 	ldw	r4,0(r6)
   96b84:	00800284 	movi	r2,10
   96b88:	20c00003 	ldbu	r3,0(r4)
   96b8c:	18800f26 	beq	r3,r2,96bcc <_putc_r+0xdc>
   96b90:	20800044 	addi	r2,r4,1
   96b94:	30800015 	stw	r2,0(r6)
   96b98:	1805883a 	mov	r2,r3
   96b9c:	dfc00317 	ldw	ra,12(sp)
   96ba0:	dc400217 	ldw	r17,8(sp)
   96ba4:	dc000117 	ldw	r16,4(sp)
   96ba8:	dec00404 	addi	sp,sp,16
   96bac:	f800283a 	ret
   96bb0:	8009883a 	mov	r4,r16
   96bb4:	880b883a 	mov	r5,r17
   96bb8:	dfc00317 	ldw	ra,12(sp)
   96bbc:	dc400217 	ldw	r17,8(sp)
   96bc0:	dc000117 	ldw	r16,4(sp)
   96bc4:	dec00404 	addi	sp,sp,16
   96bc8:	0096bd81 	jmpi	96bd8 <__swbuf_r>
   96bcc:	8009883a 	mov	r4,r16
   96bd0:	180b883a 	mov	r5,r3
   96bd4:	003ff806 	br	96bb8 <_putc_r+0xc8>

00096bd8 <__swbuf_r>:
   96bd8:	defffc04 	addi	sp,sp,-16
   96bdc:	dc400215 	stw	r17,8(sp)
   96be0:	dc000115 	stw	r16,4(sp)
   96be4:	dfc00315 	stw	ra,12(sp)
   96be8:	2023883a 	mov	r17,r4
   96bec:	2821883a 	mov	r16,r5
   96bf0:	20000226 	beq	r4,zero,96bfc <__swbuf_r+0x24>
   96bf4:	20800e17 	ldw	r2,56(r4)
   96bf8:	10002f26 	beq	r2,zero,96cb8 <__swbuf_r+0xe0>
   96bfc:	3080030b 	ldhu	r2,12(r6)
   96c00:	30c00617 	ldw	r3,24(r6)
   96c04:	1080020c 	andi	r2,r2,8
   96c08:	30c00215 	stw	r3,8(r6)
   96c0c:	10002226 	beq	r2,zero,96c98 <__swbuf_r+0xc0>
   96c10:	30c00417 	ldw	r3,16(r6)
   96c14:	18002026 	beq	r3,zero,96c98 <__swbuf_r+0xc0>
   96c18:	31000017 	ldw	r4,0(r6)
   96c1c:	30800517 	ldw	r2,20(r6)
   96c20:	20c7c83a 	sub	r3,r4,r3
   96c24:	18802f0e 	bge	r3,r2,96ce4 <__swbuf_r+0x10c>
   96c28:	19400044 	addi	r5,r3,1
   96c2c:	30800217 	ldw	r2,8(r6)
   96c30:	84003fcc 	andi	r16,r16,255
   96c34:	20c00044 	addi	r3,r4,1
   96c38:	10bfffc4 	addi	r2,r2,-1
   96c3c:	30800215 	stw	r2,8(r6)
   96c40:	24000005 	stb	r16,0(r4)
   96c44:	30800517 	ldw	r2,20(r6)
   96c48:	30c00015 	stw	r3,0(r6)
   96c4c:	11400c26 	beq	r2,r5,96c80 <__swbuf_r+0xa8>
   96c50:	3080030b 	ldhu	r2,12(r6)
   96c54:	1080004c 	andi	r2,r2,1
   96c58:	1005003a 	cmpeq	r2,r2,zero
   96c5c:	10000626 	beq	r2,zero,96c78 <__swbuf_r+0xa0>
   96c60:	8005883a 	mov	r2,r16
   96c64:	dfc00317 	ldw	ra,12(sp)
   96c68:	dc400217 	ldw	r17,8(sp)
   96c6c:	dc000117 	ldw	r16,4(sp)
   96c70:	dec00404 	addi	sp,sp,16
   96c74:	f800283a 	ret
   96c78:	00800284 	movi	r2,10
   96c7c:	80bff81e 	bne	r16,r2,96c60 <__swbuf_r+0x88>
   96c80:	8809883a 	mov	r4,r17
   96c84:	300b883a 	mov	r5,r6
   96c88:	0084b700 	call	84b70 <_fflush_r>
   96c8c:	103ff426 	beq	r2,zero,96c60 <__swbuf_r+0x88>
   96c90:	043fffc4 	movi	r16,-1
   96c94:	003ff206 	br	96c60 <__swbuf_r+0x88>
   96c98:	300b883a 	mov	r5,r6
   96c9c:	8809883a 	mov	r4,r17
   96ca0:	d9800015 	stw	r6,0(sp)
   96ca4:	008323c0 	call	8323c <__swsetup_r>
   96ca8:	d9800017 	ldw	r6,0(sp)
   96cac:	1000061e 	bne	r2,zero,96cc8 <__swbuf_r+0xf0>
   96cb0:	30c00417 	ldw	r3,16(r6)
   96cb4:	003fd806 	br	96c18 <__swbuf_r+0x40>
   96cb8:	d9800015 	stw	r6,0(sp)
   96cbc:	0084e080 	call	84e08 <__sinit>
   96cc0:	d9800017 	ldw	r6,0(sp)
   96cc4:	003fcd06 	br	96bfc <__swbuf_r+0x24>
   96cc8:	3080030b 	ldhu	r2,12(r6)
   96ccc:	00c00244 	movi	r3,9
   96cd0:	043fffc4 	movi	r16,-1
   96cd4:	10801014 	ori	r2,r2,64
   96cd8:	3080030d 	sth	r2,12(r6)
   96cdc:	88c00015 	stw	r3,0(r17)
   96ce0:	003fdf06 	br	96c60 <__swbuf_r+0x88>
   96ce4:	300b883a 	mov	r5,r6
   96ce8:	8809883a 	mov	r4,r17
   96cec:	d9800015 	stw	r6,0(sp)
   96cf0:	0084b700 	call	84b70 <_fflush_r>
   96cf4:	d9800017 	ldw	r6,0(sp)
   96cf8:	103fe51e 	bne	r2,zero,96c90 <__swbuf_r+0xb8>
   96cfc:	31000017 	ldw	r4,0(r6)
   96d00:	01400044 	movi	r5,1
   96d04:	003fc906 	br	96c2c <__swbuf_r+0x54>

00096d08 <__swbuf>:
   96d08:	018002b4 	movhi	r6,10
   96d0c:	31a59d04 	addi	r6,r6,-27020
   96d10:	2007883a 	mov	r3,r4
   96d14:	31000017 	ldw	r4,0(r6)
   96d18:	280d883a 	mov	r6,r5
   96d1c:	180b883a 	mov	r5,r3
   96d20:	0096bd81 	jmpi	96bd8 <__swbuf_r>

00096d24 <__register_exitproc>:
   96d24:	defffa04 	addi	sp,sp,-24
   96d28:	008002b4 	movhi	r2,10
   96d2c:	10a59e04 	addi	r2,r2,-27016
   96d30:	dc000015 	stw	r16,0(sp)
   96d34:	14000017 	ldw	r16,0(r2)
   96d38:	dd000415 	stw	r20,16(sp)
   96d3c:	2829883a 	mov	r20,r5
   96d40:	81405217 	ldw	r5,328(r16)
   96d44:	dcc00315 	stw	r19,12(sp)
   96d48:	dc800215 	stw	r18,8(sp)
   96d4c:	dc400115 	stw	r17,4(sp)
   96d50:	dfc00515 	stw	ra,20(sp)
   96d54:	2023883a 	mov	r17,r4
   96d58:	3027883a 	mov	r19,r6
   96d5c:	3825883a 	mov	r18,r7
   96d60:	28002526 	beq	r5,zero,96df8 <__register_exitproc+0xd4>
   96d64:	29000117 	ldw	r4,4(r5)
   96d68:	008007c4 	movi	r2,31
   96d6c:	11002716 	blt	r2,r4,96e0c <__register_exitproc+0xe8>
   96d70:	8800101e 	bne	r17,zero,96db4 <__register_exitproc+0x90>
   96d74:	2105883a 	add	r2,r4,r4
   96d78:	1085883a 	add	r2,r2,r2
   96d7c:	20c00044 	addi	r3,r4,1
   96d80:	1145883a 	add	r2,r2,r5
   96d84:	0009883a 	mov	r4,zero
   96d88:	15000215 	stw	r20,8(r2)
   96d8c:	28c00115 	stw	r3,4(r5)
   96d90:	2005883a 	mov	r2,r4
   96d94:	dfc00517 	ldw	ra,20(sp)
   96d98:	dd000417 	ldw	r20,16(sp)
   96d9c:	dcc00317 	ldw	r19,12(sp)
   96da0:	dc800217 	ldw	r18,8(sp)
   96da4:	dc400117 	ldw	r17,4(sp)
   96da8:	dc000017 	ldw	r16,0(sp)
   96dac:	dec00604 	addi	sp,sp,24
   96db0:	f800283a 	ret
   96db4:	29802204 	addi	r6,r5,136
   96db8:	00800044 	movi	r2,1
   96dbc:	110e983a 	sll	r7,r2,r4
   96dc0:	30c04017 	ldw	r3,256(r6)
   96dc4:	2105883a 	add	r2,r4,r4
   96dc8:	1085883a 	add	r2,r2,r2
   96dcc:	1185883a 	add	r2,r2,r6
   96dd0:	19c6b03a 	or	r3,r3,r7
   96dd4:	14802015 	stw	r18,128(r2)
   96dd8:	14c00015 	stw	r19,0(r2)
   96ddc:	00800084 	movi	r2,2
   96de0:	30c04015 	stw	r3,256(r6)
   96de4:	88bfe31e 	bne	r17,r2,96d74 <__register_exitproc+0x50>
   96de8:	30804117 	ldw	r2,260(r6)
   96dec:	11c4b03a 	or	r2,r2,r7
   96df0:	30804115 	stw	r2,260(r6)
   96df4:	003fdf06 	br	96d74 <__register_exitproc+0x50>
   96df8:	008002f4 	movhi	r2,11
   96dfc:	10aa1504 	addi	r2,r2,-22444
   96e00:	100b883a 	mov	r5,r2
   96e04:	80805215 	stw	r2,328(r16)
   96e08:	003fd606 	br	96d64 <__register_exitproc+0x40>
   96e0c:	00800034 	movhi	r2,0
   96e10:	10800004 	addi	r2,r2,0
   96e14:	1000021e 	bne	r2,zero,96e20 <__register_exitproc+0xfc>
   96e18:	013fffc4 	movi	r4,-1
   96e1c:	003fdc06 	br	96d90 <__register_exitproc+0x6c>
   96e20:	01006404 	movi	r4,400
   96e24:	103ee83a 	callr	r2
   96e28:	1007883a 	mov	r3,r2
   96e2c:	103ffa26 	beq	r2,zero,96e18 <__register_exitproc+0xf4>
   96e30:	80805217 	ldw	r2,328(r16)
   96e34:	180b883a 	mov	r5,r3
   96e38:	18000115 	stw	zero,4(r3)
   96e3c:	18800015 	stw	r2,0(r3)
   96e40:	80c05215 	stw	r3,328(r16)
   96e44:	18006215 	stw	zero,392(r3)
   96e48:	18006315 	stw	zero,396(r3)
   96e4c:	0009883a 	mov	r4,zero
   96e50:	883fc826 	beq	r17,zero,96d74 <__register_exitproc+0x50>
   96e54:	003fd706 	br	96db4 <__register_exitproc+0x90>

00096e58 <register_fini>:
   96e58:	f800283a 	ret

00096e5c <__call_exitprocs>:
   96e5c:	008002b4 	movhi	r2,10
   96e60:	10a59e04 	addi	r2,r2,-27016
   96e64:	10800017 	ldw	r2,0(r2)
   96e68:	defff304 	addi	sp,sp,-52
   96e6c:	df000b15 	stw	fp,44(sp)
   96e70:	d8800115 	stw	r2,4(sp)
   96e74:	00800034 	movhi	r2,0
   96e78:	10800004 	addi	r2,r2,0
   96e7c:	1005003a 	cmpeq	r2,r2,zero
   96e80:	d8800215 	stw	r2,8(sp)
   96e84:	d8800117 	ldw	r2,4(sp)
   96e88:	dd400815 	stw	r21,32(sp)
   96e8c:	dd000715 	stw	r20,28(sp)
   96e90:	10805204 	addi	r2,r2,328
   96e94:	dfc00c15 	stw	ra,48(sp)
   96e98:	ddc00a15 	stw	r23,40(sp)
   96e9c:	dd800915 	stw	r22,36(sp)
   96ea0:	dcc00615 	stw	r19,24(sp)
   96ea4:	dc800515 	stw	r18,20(sp)
   96ea8:	dc400415 	stw	r17,16(sp)
   96eac:	dc000315 	stw	r16,12(sp)
   96eb0:	282b883a 	mov	r21,r5
   96eb4:	2039883a 	mov	fp,r4
   96eb8:	d8800015 	stw	r2,0(sp)
   96ebc:	2829003a 	cmpeq	r20,r5,zero
   96ec0:	d8800117 	ldw	r2,4(sp)
   96ec4:	14405217 	ldw	r17,328(r2)
   96ec8:	88001026 	beq	r17,zero,96f0c <__call_exitprocs+0xb0>
   96ecc:	ddc00017 	ldw	r23,0(sp)
   96ed0:	88800117 	ldw	r2,4(r17)
   96ed4:	8c802204 	addi	r18,r17,136
   96ed8:	143fffc4 	addi	r16,r2,-1
   96edc:	80000916 	blt	r16,zero,96f04 <__call_exitprocs+0xa8>
   96ee0:	05bfffc4 	movi	r22,-1
   96ee4:	a000151e 	bne	r20,zero,96f3c <__call_exitprocs+0xe0>
   96ee8:	8409883a 	add	r4,r16,r16
   96eec:	2105883a 	add	r2,r4,r4
   96ef0:	1485883a 	add	r2,r2,r18
   96ef4:	10c02017 	ldw	r3,128(r2)
   96ef8:	a8c01126 	beq	r21,r3,96f40 <__call_exitprocs+0xe4>
   96efc:	843fffc4 	addi	r16,r16,-1
   96f00:	85bff81e 	bne	r16,r22,96ee4 <__call_exitprocs+0x88>
   96f04:	d8800217 	ldw	r2,8(sp)
   96f08:	10003126 	beq	r2,zero,96fd0 <__call_exitprocs+0x174>
   96f0c:	dfc00c17 	ldw	ra,48(sp)
   96f10:	df000b17 	ldw	fp,44(sp)
   96f14:	ddc00a17 	ldw	r23,40(sp)
   96f18:	dd800917 	ldw	r22,36(sp)
   96f1c:	dd400817 	ldw	r21,32(sp)
   96f20:	dd000717 	ldw	r20,28(sp)
   96f24:	dcc00617 	ldw	r19,24(sp)
   96f28:	dc800517 	ldw	r18,20(sp)
   96f2c:	dc400417 	ldw	r17,16(sp)
   96f30:	dc000317 	ldw	r16,12(sp)
   96f34:	dec00d04 	addi	sp,sp,52
   96f38:	f800283a 	ret
   96f3c:	8409883a 	add	r4,r16,r16
   96f40:	88c00117 	ldw	r3,4(r17)
   96f44:	2105883a 	add	r2,r4,r4
   96f48:	1445883a 	add	r2,r2,r17
   96f4c:	18ffffc4 	addi	r3,r3,-1
   96f50:	11800217 	ldw	r6,8(r2)
   96f54:	1c001526 	beq	r3,r16,96fac <__call_exitprocs+0x150>
   96f58:	10000215 	stw	zero,8(r2)
   96f5c:	303fe726 	beq	r6,zero,96efc <__call_exitprocs+0xa0>
   96f60:	00c00044 	movi	r3,1
   96f64:	1c06983a 	sll	r3,r3,r16
   96f68:	90804017 	ldw	r2,256(r18)
   96f6c:	8cc00117 	ldw	r19,4(r17)
   96f70:	1884703a 	and	r2,r3,r2
   96f74:	10001426 	beq	r2,zero,96fc8 <__call_exitprocs+0x16c>
   96f78:	90804117 	ldw	r2,260(r18)
   96f7c:	1884703a 	and	r2,r3,r2
   96f80:	10000c1e 	bne	r2,zero,96fb4 <__call_exitprocs+0x158>
   96f84:	2105883a 	add	r2,r4,r4
   96f88:	1485883a 	add	r2,r2,r18
   96f8c:	11400017 	ldw	r5,0(r2)
   96f90:	e009883a 	mov	r4,fp
   96f94:	303ee83a 	callr	r6
   96f98:	88800117 	ldw	r2,4(r17)
   96f9c:	98bfc81e 	bne	r19,r2,96ec0 <__call_exitprocs+0x64>
   96fa0:	b8800017 	ldw	r2,0(r23)
   96fa4:	147fd526 	beq	r2,r17,96efc <__call_exitprocs+0xa0>
   96fa8:	003fc506 	br	96ec0 <__call_exitprocs+0x64>
   96fac:	8c000115 	stw	r16,4(r17)
   96fb0:	003fea06 	br	96f5c <__call_exitprocs+0x100>
   96fb4:	2105883a 	add	r2,r4,r4
   96fb8:	1485883a 	add	r2,r2,r18
   96fbc:	11000017 	ldw	r4,0(r2)
   96fc0:	303ee83a 	callr	r6
   96fc4:	003ff406 	br	96f98 <__call_exitprocs+0x13c>
   96fc8:	303ee83a 	callr	r6
   96fcc:	003ff206 	br	96f98 <__call_exitprocs+0x13c>
   96fd0:	88800117 	ldw	r2,4(r17)
   96fd4:	1000081e 	bne	r2,zero,96ff8 <__call_exitprocs+0x19c>
   96fd8:	89000017 	ldw	r4,0(r17)
   96fdc:	20000726 	beq	r4,zero,96ffc <__call_exitprocs+0x1a0>
   96fe0:	b9000015 	stw	r4,0(r23)
   96fe4:	8809883a 	mov	r4,r17
   96fe8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   96fec:	bc400017 	ldw	r17,0(r23)
   96ff0:	883fb71e 	bne	r17,zero,96ed0 <__call_exitprocs+0x74>
   96ff4:	003fc506 	br	96f0c <__call_exitprocs+0xb0>
   96ff8:	89000017 	ldw	r4,0(r17)
   96ffc:	882f883a 	mov	r23,r17
   97000:	2023883a 	mov	r17,r4
   97004:	883fb21e 	bne	r17,zero,96ed0 <__call_exitprocs+0x74>
   97008:	003fc006 	br	96f0c <__call_exitprocs+0xb0>

0009700c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   9700c:	defffd04 	addi	sp,sp,-12
   97010:	df000215 	stw	fp,8(sp)
   97014:	df000204 	addi	fp,sp,8
   97018:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   9701c:	e0bfff17 	ldw	r2,-4(fp)
   97020:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   97024:	e0bffe17 	ldw	r2,-8(fp)
   97028:	1005003a 	cmpeq	r2,r2,zero
   9702c:	1000021e 	bne	r2,zero,97038 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   97030:	002af070 	cmpltui	zero,zero,43969
   97034:	00000106 	br	9703c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   97038:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   9703c:	e037883a 	mov	sp,fp
   97040:	df000017 	ldw	fp,0(sp)
   97044:	dec00104 	addi	sp,sp,4
   97048:	f800283a 	ret

0009704c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9704c:	defffd04 	addi	sp,sp,-12
   97050:	dfc00215 	stw	ra,8(sp)
   97054:	df000115 	stw	fp,4(sp)
   97058:	df000104 	addi	fp,sp,4
   9705c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   97060:	008002b4 	movhi	r2,10
   97064:	10aca144 	addi	r2,r2,-19835
   97068:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   9706c:	e13fff17 	ldw	r4,-4(fp)
   97070:	009700c0 	call	9700c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   97074:	003fff06 	br	97074 <_exit+0x28>
   97078:	00000010 	cmplti	zero,zero,0
   9707c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   97080:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
   97084:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   97088:	001b0c0b 	ldhu	zero,27696(zero)
   9708c:	00000028 	cmpgeui	zero,zero,0
   97090:	00000018 	cmpnei	zero,zero,0
   97094:	000886b8 	rdprs	zero,zero,8730
   97098:	0000066c 	andhi	zero,zero,25
   9709c:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   970a0:	910a9074 	orhi	r4,r18,10817
   970a4:	94089209 	0x94089209
   970a8:	97049606 	br	98304 <__malloc_av_+0x2dc>
   970ac:	93019f03 	ldbu	r12,1660(r18)
   970b0:	9c059507 	ldb	r16,5716(r19)
   970b4:	00000002 	0x2
   970b8:	00000028 	cmpgeui	zero,zero,0
   970bc:	00000044 	movi	zero,1
   970c0:	00088d24 	muli	zero,zero,8756
   970c4:	00000660 	cmpeqi	zero,zero,25
   970c8:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   970cc:	92099170 	cmpltui	r8,r18,9797
   970d0:	96069408 	cmpgei	et,r18,6736
   970d4:	9c039704 	addi	r16,r19,3676
   970d8:	90019f02 	0x90019f02
   970dc:	9507930a 	0x9507930a
   970e0:	00000005 	stb	zero,0(zero)
   970e4:	00096e58 	cmpnei	zero,zero,9657

// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "sys/alt_alarm.h"
#include "alt_types.h"
#include "sys/alt_irq.h"
#include "system.h"
#include "nios2.h"
#include "io.h"
#include "altera_avalon_mutex.h"
#include "altera_avalon_performance_counter.h"

#define MESSAGE_WAITING_LCD 2
#define MESSAGE_WAITING_UART 1
#define NO_MESSAGE 0

#define LOCK_SUCCESS 0
#define LOCK_FAIL 1

#define MESSAGE_BUFFER_BASE MESSAGE_BUFFER_RAM_BASE

#define MS_DELAY 1000

#define MAX_SIZE_A 70000
#define MAX_SIZE_X 1000
#define MAX_SIZE_Y 1000

// Message buffer structure
typedef struct {
	char flag;

	// the buffer can hold up to 4KBytes data
	char buf[100];
} message_buffer_struct;

int PB0_press;

// For performance counter
void *performance_name = CPU1_PERFORMANCE_COUNTER_BASE;

// Global functions
void handle_cpu1_button_interrupts() {
	switch (IORD(CPU1_PB_BUTTON_I_BASE, 3)) {
	case 1:
		printf("CPU1 PB0 pressed\n");
		PB0_press++;
		break;
	case 2:
		printf("CPU1 PB1 pressed\n");
		break;
	}
	IOWR(CPU1_PB_BUTTON_I_BASE, 3, 0x0);
}

void gen_sparse_matrix(int *cols, int * rows, short int *values,
		long int * values_count) {
	int i = 0;
	int j = 0;
	int k = 0;


	//how many non/zero values we are going to have
	int rowRandomness;

	int *targetPtr;

	//we will randomly generate and store the column indices that we will generate random non zero values at (amount == row randomness )
	int *chosen_columns;
	//the row that
	int target_col;
	int col_i;
	int row_i;

	////------------------

	int current_index;
	int *random_rows;

	int check_indices_flag = 0;
	int h;

	short int offset;

	for (i = 0; i < 1000; i++) {
		//generate random amount of indices to be non-zero
		//generate this many columns with random column numbers
		rowRandomness = rand() % (70 - 30 + 1) + 30;
		values_count += rowRandomness;
		//generate column numbers
		//this will hold indexes of columns
		chosen_columns = (int*) calloc(rowRandomness, sizeof(int));

		for (k = 0; k < rowRandomness; k++) {

			//assign random indices  (totalling above) to be nonzero
			//while loop to make sure the index hasnt already been generated
			while (1) {
				target_col = rand() % 1000;

				for (h = 0; h < current_index; h++) {
					if (target_col == random_rows[h]) {
						check_indices_flag = 1;
					}
				}
				if (check_indices_flag == 0) {
					// printf("This index has not been used yet!");
					//random_rows[current_index]=target_row;
					break;
				}
			}

			cols[col_i++] = target_col;
			rows[row_i++] = i;
			values[*values_count++] = rand() % (1000 + 1 - (-1000)) + (-1000);

		}
		free(chosen_columns);

	}

	printf("Creation of Sparse Array is complete!\n");

}

void gen_input_vector_x(short int* values) {
	short int i;

	for (i = 0; i < MAX_SIZE_X; i++) {

		values[i] = rand() % (1000 + 1 - (-1000)) + (-1000);
	}

	printf("Creation of Input Vector X is complete!\n");
}

void print_matrix(int *cols, int * rows, short int *values,long int *num_values) {
	int col_i;
	int row_i;
	short int val_i;
	int i;
	printf("There are %ld non-zero values in this sparse matrix.\n", num_values);

	for (i = 0; i < num_values; i++) {
		printf("(%d, %d, %d)\n", rows[i], cols[i], values[i]);//check printing of short int etccccc specifier for type
	}

	printf("Finished printing the sparse values\n");
}

//printf("The columns chosen to have non-zero values for this row are:");
// for(h=0;h<rowRandomness;h++){
//     printf("%d, ", chosen_columns[h]);
//
// }
//printf("\nAmount of non zero elements in this row: %d",rowRandomness );
//
// printf("\n\n\n\n");
//
// for(h=0;h<rowRandomness;h++){
//     printf("%d, ", chosen_columns[h]);
//     sparseMatrix[i][chosen_columns[h]]=rand() % (1000 + 1 - (-1000)) + (-1000);
//
// }

// free(chosen_columns);

// for(i=0;i<1000;i++){
//     printf("\nRow %d\n", i);
//     for(j=0;j<1000;j++){
//         printf("%d, ",sparseMatrix[i][j] );
//     }
// }


// The main function
int main() {
	// Pointer to our mutex device
	alt_mutex_dev* mutex = NULL;

	// Local variables
	unsigned int id;
	unsigned int value;
	unsigned int count = 0;
	unsigned int ticks_at_last_message;
	int switches;

	message_buffer_struct *message;

	// For performance counter
	PERF_RESET(CPU1_PERFORMANCE_COUNTER_BASE);

	// Reading switches 15-8 for CPU1
	switches = IORD(CPU1_SWITCH_I_BASE, 0);

	// Enable all button interrupts
	IOWR(CPU1_PB_BUTTON_I_BASE, 2, 0x3);
	IOWR(CPU1_PB_BUTTON_I_BASE, 3, 0x0);
	alt_irq_register(CPU1_PB_BUTTON_I_IRQ, NULL,
			(void*) handle_cpu1_button_interrupts);

	// Get our processor ID (add 1 so it matches the cpu name in SOPC Builder)
	NIOS2_READ_CPUID(id);

	printf("COE4DS4 Winter18\n");
	printf("Lab7     exp.  3\n\n");

	// Value can be any non-zero value
	value = 1;

	// Initialize the message buffer location
	message = (message_buffer_struct*) MESSAGE_BUFFER_BASE;

	// Okay, now we'll open the real mutex
	// It's not actually a mutex to share the jtag_uart, but to share a message
	// buffer which CPU1 is responsible for reading and printing to the jtag_uart.
	mutex = altera_avalon_mutex_open(MESSAGE_BUFFER_MUTEX_NAME);

	// We'll use the system clock to keep track of our delay time.
	// Here we initialize delay tracking variable.
	ticks_at_last_message = alt_nticks();

	int *columns_A;
	int *rows_A;
	short int *matrix_A;
	long int *values_count_A;

	short int *vector_X;
	alt_32 * vector_Y;

	if (mutex) {
		message->flag = NO_MESSAGE;

		while (1) {



			while(1){

				if(PB0_press>=1){
					printf("BOOM!");PB0_press--;break;
				}

			}


			//set up memory locations for columns, rows, and values
			//we will have a maximum of 70*1000    values each of rows, columns, and values
			columns_A = (int*) calloc(MAX_SIZE_A, sizeof(int));
			printf("column_A memory allocation complete!\n");
			rows_A = (int*) calloc(MAX_SIZE_A, sizeof(int));
			printf("rows_A memory allocation complete!\n");
			matrix_A = (short int*) calloc(MAX_SIZE_A, sizeof(short int));
			printf("matrix_A memory allocation complete!\n");

			vector_X = (short int*) calloc(MAX_SIZE_X, sizeof(short int));
			printf("vector_X memory allocation complete!\n");

			vector_Y = (alt_32*) calloc(MAX_SIZE_Y, sizeof(alt_32));
			printf("vector_Y memory allocation complete!\n");

			gen_sparse_matrix(columns_A, rows_A, matrix_A, values_count_A);
			gen_input_vector_x(vector_X);

			print_matrix(columns_A, rows_A, matrix_A,values_count_A);

			// See if it's time to send a message yet
			if (alt_nticks() >= (ticks_at_last_message
					+ ((alt_ticks_per_second() * (MS_DELAY)) / 1000))) {
				ticks_at_last_message = alt_nticks();

				// Try and aquire the mutex (non-blocking).
				if (altera_avalon_mutex_trylock(mutex, value) == LOCK_SUCCESS) {
					// Check if the message buffer is empty
					if (message->flag == NO_MESSAGE) {
						count++;

						// Send the message to the buffer
						sprintf(message->buf,
								"Mesg from CPU %d.Number sent: %d  ", id, count);

						// Set the flag that a message has been put in the buffer
						// And this message should be displayed on LCD connected to CPU2
						switches = IORD(CPU1_SWITCH_I_BASE, 0);
						if (switches == 1) {
							message->flag = MESSAGE_WAITING_UART;
						} else {
							message->flag = MESSAGE_WAITING_LCD;
						}

					}
					// Release the mutex
					altera_avalon_mutex_unlock(mutex);
				}
			}

			// Check the message buffer
			// and if there's a message waiting with the correct flag, print it to stdout.
			if (message->flag == MESSAGE_WAITING_UART) {
				printf("%s", message->buf);

				// Clear the flag
				message->flag = NO_MESSAGE;
			}
		}
	}

	return (0);
}

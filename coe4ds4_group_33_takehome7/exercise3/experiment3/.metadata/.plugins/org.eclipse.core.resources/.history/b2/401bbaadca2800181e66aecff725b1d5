// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

#include "alt_types.h"
#include "sys/alt_alarm.h"
#include "sys/alt_irq.h"
#include "system.h"
#include "nios2.h"
#include "io.h"
#include "altera_avalon_mutex.h"
#include "altera_up_avalon_character_lcd.h"

#define READY 1
#define NOT_READY 2

#define CALCULATE_THIS 3
#define DONE 4

#define LOCK_SUCCESS 0
#define LOCK_FAIL 1

#define MESSAGE_BUFFER_BASE MESSAGE_BUFFER_RAM_BASE

#define MS_DELAY 1000

//#define NULL 0x0
int PB2_press;

// Message buffer structure
typedef struct {

	// the buffer can hold up to 4KBytes data

	short int state_flag;
	short int PB2_flag;

	short int values[5][70];
	short int columns[5][70];

	short int row_num_start;
	short int row_nz_count[5];

	short int input_vector_X[1000];

	alt_32 five_values_result_Y[5];

} message_buffer_struct;

// Global functions
void handle_cpu2_button_interrupts(void *lcd_0) {
	// alt_up_character_lcd_set_cursor_pos((alt_up_character_lcd_dev *)lcd_0, 0, 0);
	// alt_up_character_lcd_string((alt_up_character_lcd_dev *)lcd_0, "CPU2 PB pressed!");

	switch (IORD(CPU2_PB_BUTTON_I_BASE, 3)) {
	case 1:
		printf("CPU2 PB2 pressed\n");
		IOWR(CPU2_LED_GREEN_O_BASE, 0, 1);
		alt_up_character_lcd_string((alt_up_character_lcd_dev *)lcd_0, "CPU12PB0 pressed");
		PB2_press++;
		break;
	case 2:
		printf("CPU2 PB3 pressed\n");
		IOWR(CPU2_LED_GREEN_O_BASE, 0, 4);
		break;

		 //case 1:  break;
		// case 2: alt_up_character_lcd_string((alt_up_character_lcd_dev *)lcd_0, "CPU12PB1 pressed"); break;
	}

	IOWR(CPU2_PB_BUTTON_I_BASE, 3, 0x0);
}

// custom sprintf function for small code size
// This is because we only have 32KB memory for CPU2
void custom_sprintf(char *buffer, int cpuid, int count) {
	int pos, i;

	for (i = 0; i < 17; i++)
		buffer[i] = "Message from CPU "[i];
	pos = i;
	buffer[pos++] = "0123"[cpuid];
	for (i = pos; i < pos + 15; i++)
		buffer[i] = ". Number sent: "[i - pos];
	pos = i;
	buffer[pos++] = "0123456789ABCDEF"[count & 0xF];
	buffer[pos++] = '\n';
	buffer[pos] = '\0';
}

//char state_flag[100];
//char PB2_flag[100];
//
//short int values[5][70];
//short int columns[5][70];
//
//short int row_num_start;
//short int row_nz_count[5];
//
//short int input_vector_X[1000];
//
//alt_32 five_values_result_Y[5];


//for (row_i = 0; row_i < MAX_SIZE_X; row_i++) {//we are going to iterate through the matrix and multiply with input vector
//	this_row_NZ_count = row_NZ_count_A[row_i];
//	for (iter_cols = 0; iter_cols < this_row_NZ_count; iter_cols++) {
//		//haha
//		column = cols_A[col_i++];
//		value = values_A[val_i++];
//
//		Y_result[vector_Y_i] = value * vector_X[row_i];
//	}
//	vector_Y_i++;
//}

void calc_output_Y_CPU2(short int values[5][70], short int columns[5][70],
		short int row_nz_count[5], short int input_vector_X[1000],
		alt_32 result_Y[5]) {
	int i = 0;
	int j = 0;
	short int row_i = 0;
	short int this_row_NZ_count = 0;
	int col_i = 0;
	int val_i = 0;

	short int column;
	short int value;

	for (i = 0; i < 5; i++) {
		this_row_NZ_count = row_nz_count[i];
		col_i = 0;
		val_i = 0;
		for (j = 0; j < this_row_NZ_count; j++) {

			column = columns[i][col_i++];
			value = values[i][val_i++];
			result_Y[i] += value * input_vector_X[column];
		}

	}

}

// The main function
int main() {
	alt_up_character_lcd_dev *lcd_0;

	// Pointer to our mutex device
	alt_mutex_dev* mutex = NULL;

	// Local variables
	unsigned int id;
//	unsigned int value;
	unsigned int count = 0;
	unsigned int ticks_at_last_message;
	int switches;
	int col_i = 0;
	int val_i = 0;

	message_buffer_struct *message;

	IOWR(CPU2_PB_BUTTON_I_BASE, 2, 0x3);
	IOWR(CPU2_PB_BUTTON_I_BASE, 3, 0x0);
	alt_irq_register(CPU2_PB_BUTTON_I_IRQ, (void *) lcd_0,
			(void*) handle_cpu2_button_interrupts);

	lcd_0 = alt_up_character_lcd_open_dev(CPU2_CHARACTER_LCD_0_NAME);

	alt_up_character_lcd_init(lcd_0);

	alt_up_character_lcd_string(lcd_0, "COE4DS4 Winter18");

	alt_up_character_lcd_set_cursor_pos(lcd_0, 0, 1);

	alt_up_character_lcd_string(lcd_0, "Lab7     exp.  3");

	// Reading switches 7-0 for CPU2
	switches = IORD(CPU2_SWITCH_I_BASE, 0);

	// Get our processor ID (add 1 so it matches the cpu name in SOPC Builder)
	NIOS2_READ_CPUID(id);

	// Value can be any non-zero value
	//value = 1;
	short int column;
	short int value;
	int this_row_NZ_count;
	int i;
	int j;

	// Initialize the message buffer location
	message = (message_buffer_struct*) MESSAGE_BUFFER_BASE;

	// Okay, now we'll open the real mutex
	// It's not actually a mutex to share the jtag_uart, but to share a message
	// buffer which CPU1 is responsible for reading and printing to the jtag_uart.
	mutex = altera_avalon_mutex_open(MESSAGE_BUFFER_MUTEX_NAME);

	// We'll use the system clock to keep track of our delay time.
	// Here we initialize delay tracking variable.
	ticks_at_last_message = alt_nticks();

	//if (mutex) {
	//message->flag = NO_MESSAGE;



	while (1) {
		//if (mutex)
		message->PB2_flag = NOT_READY;

		if (PB2_press > 0) {
			message->PB2_flag = READY;
		}

		//altera_avalon_mutex_unlock(mutex);

		if (message->state_flag == CALCULATE_THIS) {

			//calc_output_Y_CPU2(short int values[5][70],short int columns[5][70],short int row_nz_count[5],short int input_vector_X[1000],alt_32 result_Y[5]) {
			//calc_output_Y_CPU2(message->values,message->columns,message->row_nz_count,message->input_vector_X,message->five_values_result_Y);


			for (i = 0; i < 5; i++) {
				this_row_NZ_count = message->row_nz_count[i];
				col_i = 0;
				val_i = 0;
				for (j = 0; j < this_row_NZ_count; j++) {

					column = message->columns[i][col_i++];
					value = message->values[i][val_i++];
					//if (mutex)
					message->five_values_result_Y[i] += value
							* (message->input_vector_X[column]);
					altera_avalon_mutex_unlock(mutex);
				}
				//if (mutex)
				message->state_flag = DONE;
				//altera_avalon_mutex_unlock(mutex);
				PB2_press--;
			}
		}


	}

	return (0);
}

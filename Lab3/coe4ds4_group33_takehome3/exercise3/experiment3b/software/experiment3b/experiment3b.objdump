
experiment3b.elf:     file format elf32-littlenios2
experiment3b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000282c memsz 0x0000282c flags r-x
    LOAD off    0x0000384c vaddr 0x0000684c paddr 0x00006940 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003a34 vaddr 0x00006a34 paddr 0x00006a34 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002444  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  00006464  00006464  00003464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f4  0000684c  00006940  0000384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000014  00006a34  00006a34  00003a34  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000524  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004d5a  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016d3  00000000  00000000  00008ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004adf  00000000  00000000  0000a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000534  00000000  00000000  0000f080  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001033  00000000  00000000  0000f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013e9  00000000  00000000  000105e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  000119d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  000119f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00012e1a  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00012e1d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00012e22  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00012e23  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00012e24  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00012e2f  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00012e3a  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000c  00000000  00000000  00012e45  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002f  00000000  00000000  00012e51  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000422a1  00000000  00000000  00012e80  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00006464 l    d  .rodata	00000000 .rodata
0000684c l    d  .rwdata	00000000 .rwdata
00006a34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 experiment3b.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00005848 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000684c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000060d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00006224 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00005760 g     F .text	0000001c putchar
000062b0 g     F .text	0000002c alt_main
00005784 g     F .text	00000090 _puts_r
00006940 g       *ABS*	00000000 __flash_rwdata_start
000056c8 g     F .text	00000054 printf
000063c0 g     F .text	0000000c alt_get_cpu_freq
00004c74 g     F .text	000000a8 md5_update
00004c34 g     F .text	00000040 md5_init
00000000  w      *UND*	00000000 __errno
00004e90 g     F .text	00000068 print_hash
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006a38 g     O .bss	00000004 errno
00006a40 g     O .bss	00000004 alt_argv
0000e92c g       *ABS*	00000000 _gp
0000577c g     F .text	00000008 _putchar_r
0000567c g     F .text	0000002c memcpy
00005814 g     F .text	00000014 puts
0000571c g     F .text	00000044 _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00006214 g     F .text	00000008 __udivsi3
0000642c g     F .text	00000038 alt_icache_flush
000063cc g     F .text	00000010 perf_get_num_starts
00006934 g     O .rwdata	00000004 _global_impure_ptr
00006a48 g       *ABS*	00000000 __bss_end
00006414 g     F .text	00000004 alt_dcache_flush_all
00006940 g       *ABS*	00000000 __ram_rwdata_end
000062dc g     F .text	00000078 write
00005fec g     F .text	00000074 _putc_r
0000684c g       *ABS*	00000000 __ram_rodata_end
00006938 g     O .rwdata	00000004 jtag_uart_0
0000621c g     F .text	00000008 __umodsi3
00006a48 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00006384 g     F .text	00000034 altera_avalon_jtag_uart_write
000058c8 g     F .text	000005d4 ___vfprintf_internal_r
00004d1c g     F .text	00000174 md5_final
00004020 g     F .text	0000003c _start
00006354 g     F .text	00000010 alt_sys_init
00004ef8 g     F .text	00000244 findStringEqual33
0000684c g       *ABS*	00000000 __ram_rwdata_start
00006464 g       *ABS*	00000000 __ram_rodata_start
000063dc g     F .text	00000030 perf_get_section_time
00006a48 g       *ABS*	00000000 __alt_stack_base
0000640c g     F .text	00000008 perf_get_total_time
0000405c g     F .text	00000bd8 md5_transform
00005ec0 g     F .text	000000bc __sfvwrite_small_dev
00006a34 g     O .bss	00000004 hitCount
00006a34 g       *ABS*	00000000 __bss_start
000056a8 g     F .text	00000020 memset
0000513c g     F .text	00000540 main
00006a44 g     O .bss	00000004 alt_envp
0000693c g     O .rwdata	00000004 alt_errno
00005f7c g     F .text	00000070 putc
00006154 g     F .text	00000060 __divsi3
00006464 g       *ABS*	00000000 __flash_rodata_start
00006364 g     F .text	00000020 alt_irq_init
00006060 g     F .text	00000078 _write_r
00006930 g     O .rwdata	00000004 _impure_ptr
00006a3c g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00006940 g       *ABS*	00000000 _edata
00006a48 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000063b8 g     F .text	00000008 alt_get_performance_counter_base
00006424 g     F .text	00000008 altera_nios2_qsys_irq_init
0000401c g       .entry	00000000 exit
000061b4 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000692c g     O .rwdata	00000004 performance_name
0000401c g       .entry	00000000 _exit
00005828 g     F .text	00000020 strlen
00006418 g     F .text	0000000c alt_icache_flush_all
00005e9c g     F .text	00000024 __vfprintf_internal
00006244 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
    4000:	00840014 	movui	r2,4096
    4004:	1001483a 	initi	r2
    4008:	10bff804 	addi	r2,r2,-32
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
    4010:	00400034 	movhi	at,0
    4014:	08500814 	ori	at,at,16416
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>

Disassembly of section .text:

00004020 <_start>:
    4020:	06c00034 	movhi	sp,0
    4024:	dee00014 	ori	sp,sp,32768
    4028:	06800034 	movhi	gp,0
    402c:	d6ba4b14 	ori	gp,gp,59692
    4030:	00800034 	movhi	r2,0
    4034:	109a8d14 	ori	r2,r2,27188
    4038:	00c00034 	movhi	r3,0
    403c:	18da9214 	ori	r3,r3,27208
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>
    4044:	10000015 	stw	zero,0(r2)
    4048:	10800104 	addi	r2,r2,4
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
    4050:	00062440 	call	6244 <alt_load>
    4054:	00062b00 	call	62b0 <alt_main>

00004058 <alt_after_alt_main>:
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <md5_transform>:

// For performance counter
void *performance_name = PERFORMANCE_COUNTER_0_BASE;

//We used http://bradconte.com/md5_c as reference for MD5 Algorithm
void md5_transform(MD5_CTX *ctx, uchar data[]) {
    405c:	deffe704 	addi	sp,sp,-100
    4060:	df001815 	stw	fp,96(sp)
    4064:	ddc01715 	stw	r23,92(sp)
    4068:	dd801615 	stw	r22,88(sp)
    406c:	dd401515 	stw	r21,84(sp)
    4070:	dd001415 	stw	r20,80(sp)
    4074:	dcc01315 	stw	r19,76(sp)
    4078:	dc801215 	stw	r18,72(sp)
    407c:	dc401115 	stw	r17,68(sp)
    4080:	dc001015 	stw	r16,64(sp)
    4084:	2039883a 	mov	fp,r4
    4088:	280d883a 	mov	r6,r5
    408c:	d80f883a 	mov	r7,sp
    4090:	da001004 	addi	r8,sp,64

	// MD5 specifies big endian byte order, but this implementation assumes a little
	// endian byte order CPU. Reverse all the bytes upon input, and re-reverse them
	// on output (in md5_final()).
	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j]) + (data[j + 1] << 8) + (data[j + 2] << 16) + (data[j
    4094:	31400043 	ldbu	r5,1(r6)
    4098:	30c000c3 	ldbu	r3,3(r6)
    409c:	31000083 	ldbu	r4,2(r6)
    40a0:	30800003 	ldbu	r2,0(r6)
    40a4:	280a923a 	slli	r5,r5,8
    40a8:	1806963a 	slli	r3,r3,24
    40ac:	2008943a 	slli	r4,r4,16
    40b0:	1145883a 	add	r2,r2,r5
    40b4:	31800104 	addi	r6,r6,4
    40b8:	1907883a 	add	r3,r3,r4
    40bc:	10c5883a 	add	r2,r2,r3
    40c0:	38800015 	stw	r2,0(r7)
    40c4:	39c00104 	addi	r7,r7,4
	uint a, b, c, d, m[16], i, j;

	// MD5 specifies big endian byte order, but this implementation assumes a little
	// endian byte order CPU. Reverse all the bytes upon input, and re-reverse them
	// on output (in md5_final()).
	for (i = 0, j = 0; i < 16; ++i, j += 4)
    40c8:	3a3ff21e 	bne	r7,r8,4094 <md5_transform+0x38>
		m[i] = (data[j]) + (data[j + 1] << 8) + (data[j + 2] << 16) + (data[j
				+ 3] << 24);

	a = ctx->state[0];
	b = ctx->state[1];
    40cc:	e3001417 	ldw	r12,80(fp)
	c = ctx->state[2];
    40d0:	e5001517 	ldw	r20,84(fp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
    40d4:	e0c01617 	ldw	r3,88(fp)
    40d8:	ddc00017 	ldw	r23,0(sp)
    40dc:	e1001317 	ldw	r4,76(fp)
    40e0:	0304303a 	nor	r2,zero,r12
    40e4:	10c4703a 	and	r2,r2,r3
    40e8:	6506703a 	and	r3,r12,r20
    40ec:	1886b03a 	or	r3,r3,r2
    40f0:	00b5daf4 	movhi	r2,55147
    40f4:	10a91e04 	addi	r2,r2,-23432
    40f8:	1887883a 	add	r3,r3,r2
    40fc:	25cf883a 	add	r7,r4,r23
    4100:	02c00644 	movi	r11,25
    4104:	38cf883a 	add	r7,r7,r3
    4108:	3ace583a 	ror	r7,r7,r11
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    410c:	d9000117 	ldw	r4,4(sp)
    4110:	02400504 	movi	r9,20
	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
    4114:	61cf883a 	add	r7,r12,r7
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4118:	01c4303a 	nor	r2,zero,r7
    411c:	1504703a 	and	r2,r2,r20
    4120:	3b06703a 	and	r3,r7,r12
    4124:	1886b03a 	or	r3,r3,r2
    4128:	00ba3234 	movhi	r2,59592
    412c:	10add584 	addi	r2,r2,-18602
    4130:	1887883a 	add	r3,r3,r2
    4134:	e0801617 	ldw	r2,88(fp)
	FF(c,d,a,b,m[2], 17,0x242070db);
    4138:	020003c4 	movi	r8,15
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    413c:	02800284 	movi	r10,10
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4140:	110d883a 	add	r6,r2,r4
    4144:	30cd883a 	add	r6,r6,r3
    4148:	324c583a 	ror	r6,r6,r9
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    414c:	dcc00517 	ldw	r19,20(sp)
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4150:	dc000717 	ldw	r16,28(sp)
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4154:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[2], 17,0x242070db);
    4158:	0184303a 	nor	r2,zero,r6
    415c:	1304703a 	and	r2,r2,r12
    4160:	31c6703a 	and	r3,r6,r7
    4164:	1886b03a 	or	r3,r3,r2
    4168:	00890834 	movhi	r2,9248
    416c:	109c36c4 	addi	r2,r2,28891
    4170:	1887883a 	add	r3,r3,r2
    4174:	d8800217 	ldw	r2,8(sp)
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
    4178:	dd400817 	ldw	r21,32(sp)
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    417c:	dc400a17 	ldw	r17,40(sp)
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
    4180:	a089883a 	add	r4,r20,r2
    4184:	20c9883a 	add	r4,r4,r3
    4188:	2208583a 	ror	r4,r4,r8
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
    418c:	dd800b17 	ldw	r22,44(sp)
	FF(a,b,c,d,m[12], 7,0x6b901122);
    4190:	db800c17 	ldw	r14,48(sp)
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
    4194:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    4198:	0104303a 	nor	r2,zero,r4
    419c:	11c4703a 	and	r2,r2,r7
    41a0:	2186703a 	and	r3,r4,r6
    41a4:	1886b03a 	or	r3,r3,r2
    41a8:	00b06fb4 	movhi	r2,49598
    41ac:	10b3bb84 	addi	r2,r2,-12562
    41b0:	1887883a 	add	r3,r3,r2
    41b4:	d8800317 	ldw	r2,12(sp)
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
    41b8:	dc800d17 	ldw	r18,52(sp)
	FF(c,d,a,b,m[14],17,0xa679438e);
    41bc:	db400e17 	ldw	r13,56(sp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    41c0:	608b883a 	add	r5,r12,r2
    41c4:	28cb883a 	add	r5,r5,r3
    41c8:	2a8a583a 	ror	r5,r5,r10
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);
    41cc:	dbc00f17 	ldw	r15,60(sp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    41d0:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
    41d4:	0144303a 	nor	r2,zero,r5
    41d8:	1184703a 	and	r2,r2,r6
    41dc:	2906703a 	and	r3,r5,r4
    41e0:	1886b03a 	or	r3,r3,r2
    41e4:	00bd5f34 	movhi	r2,62844
    41e8:	1083ebc4 	addi	r2,r2,4015
    41ec:	1887883a 	add	r3,r3,r2
    41f0:	d8800417 	ldw	r2,16(sp)
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    41f4:	34cd883a 	add	r6,r6,r19

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
    41f8:	388f883a 	add	r7,r7,r2
    41fc:	38cf883a 	add	r7,r7,r3
    4200:	3ace583a 	ror	r7,r7,r11
    4204:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    4208:	01c4303a 	nor	r2,zero,r7
    420c:	1104703a 	and	r2,r2,r4
    4210:	3946703a 	and	r3,r7,r5
    4214:	1886b03a 	or	r3,r3,r2
    4218:	0091e234 	movhi	r2,18312
    421c:	10b18a84 	addi	r2,r2,-14806
    4220:	1887883a 	add	r3,r3,r2
    4224:	30cd883a 	add	r6,r6,r3
    4228:	324c583a 	ror	r6,r6,r9
    422c:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[6], 17,0xa8304613);
    4230:	0184303a 	nor	r2,zero,r6
    4234:	1144703a 	and	r2,r2,r5
    4238:	31c6703a 	and	r3,r6,r7
    423c:	1886b03a 	or	r3,r3,r2
    4240:	00aa0c34 	movhi	r2,43056
    4244:	109184c4 	addi	r2,r2,17939
    4248:	1887883a 	add	r3,r3,r2
    424c:	d8800617 	ldw	r2,24(sp)
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4250:	2c0b883a 	add	r5,r5,r16
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
    4254:	2089883a 	add	r4,r4,r2
    4258:	20c9883a 	add	r4,r4,r3
    425c:	2208583a 	ror	r4,r4,r8
    4260:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4264:	0104303a 	nor	r2,zero,r4
    4268:	11c4703a 	and	r2,r2,r7
    426c:	2186703a 	and	r3,r4,r6
    4270:	1886b03a 	or	r3,r3,r2
    4274:	00bf51f4 	movhi	r2,64839
    4278:	10a54044 	addi	r2,r2,-27391
    427c:	1887883a 	add	r3,r3,r2
    4280:	28cb883a 	add	r5,r5,r3
    4284:	2a8a583a 	ror	r5,r5,r10
	FF(a,b,c,d,m[8], 7,0x698098d8);
    4288:	3d4f883a 	add	r7,r7,r21
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
    428c:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[8], 7,0x698098d8);
    4290:	0144303a 	nor	r2,zero,r5
    4294:	1184703a 	and	r2,r2,r6
    4298:	2906703a 	and	r3,r5,r4
    429c:	1886b03a 	or	r3,r3,r2
    42a0:	009a6074 	movhi	r2,27009
    42a4:	10a63604 	addi	r2,r2,-26408
    42a8:	1887883a 	add	r3,r3,r2
    42ac:	38cf883a 	add	r7,r7,r3
    42b0:	3ace583a 	ror	r7,r7,r11
    42b4:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
    42b8:	01c4303a 	nor	r2,zero,r7
    42bc:	1104703a 	and	r2,r2,r4
    42c0:	3946703a 	and	r3,r7,r5
    42c4:	1886b03a 	or	r3,r3,r2
    42c8:	00a2d174 	movhi	r2,35653
    42cc:	10bdebc4 	addi	r2,r2,-2129
    42d0:	1887883a 	add	r3,r3,r2
    42d4:	d8800917 	ldw	r2,36(sp)
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    42d8:	2449883a 	add	r4,r4,r17
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
    42dc:	308d883a 	add	r6,r6,r2
    42e0:	30cd883a 	add	r6,r6,r3
    42e4:	324c583a 	ror	r6,r6,r9
    42e8:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    42ec:	0184303a 	nor	r2,zero,r6
    42f0:	1144703a 	and	r2,r2,r5
    42f4:	31c6703a 	and	r3,r6,r7
    42f8:	1886b03a 	or	r3,r3,r2
    42fc:	00bffff4 	movhi	r2,65535
    4300:	1096ec44 	addi	r2,r2,23473
    4304:	1887883a 	add	r3,r3,r2
    4308:	20c9883a 	add	r4,r4,r3
    430c:	2208583a 	ror	r4,r4,r8
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4310:	2d8b883a 	add	r5,r5,r22
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    4314:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4318:	0104303a 	nor	r2,zero,r4
    431c:	11c4703a 	and	r2,r2,r7
    4320:	2186703a 	and	r3,r4,r6
    4324:	1886b03a 	or	r3,r3,r2
    4328:	00a25774 	movhi	r2,35165
    432c:	10b5ef84 	addi	r2,r2,-10306
    4330:	1887883a 	add	r3,r3,r2
    4334:	28cb883a 	add	r5,r5,r3
    4338:	2a8a583a 	ror	r5,r5,r10
	FF(a,b,c,d,m[12], 7,0x6b901122);
    433c:	3b8f883a 	add	r7,r7,r14
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4340:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[12], 7,0x6b901122);
    4344:	0144303a 	nor	r2,zero,r5
    4348:	1184703a 	and	r2,r2,r6
    434c:	2906703a 	and	r3,r5,r4
    4350:	1886b03a 	or	r3,r3,r2
    4354:	009ae434 	movhi	r2,27536
    4358:	10844884 	addi	r2,r2,4386
    435c:	1887883a 	add	r3,r3,r2
    4360:	38cf883a 	add	r7,r7,r3
    4364:	3ace583a 	ror	r7,r7,r11
	FF(d,a,b,c,m[13],12,0xfd987193);
    4368:	348d883a 	add	r6,r6,r18
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    436c:	02c005c4 	movi	r11,23
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
    4370:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[13],12,0xfd987193);
    4374:	01c4303a 	nor	r2,zero,r7
    4378:	1104703a 	and	r2,r2,r4
    437c:	3946703a 	and	r3,r7,r5
    4380:	1886b03a 	or	r3,r3,r2
    4384:	00bf6634 	movhi	r2,64920
    4388:	109c64c4 	addi	r2,r2,29075
    438c:	1887883a 	add	r3,r3,r2
    4390:	30cd883a 	add	r6,r6,r3
    4394:	324c583a 	ror	r6,r6,r9
	FF(c,d,a,b,m[14],17,0xa679438e);
    4398:	2349883a 	add	r4,r4,r13
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
    439c:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[14],17,0xa679438e);
    43a0:	0192303a 	nor	r9,zero,r6
    43a4:	4946703a 	and	r3,r9,r5
    43a8:	31c4703a 	and	r2,r6,r7
    43ac:	10c4b03a 	or	r2,r2,r3
    43b0:	00e99e74 	movhi	r3,42617
    43b4:	18d0e384 	addi	r3,r3,17294
    43b8:	10c5883a 	add	r2,r2,r3
    43bc:	2089883a 	add	r4,r4,r2
    43c0:	2208583a 	ror	r4,r4,r8
	FF(b,c,d,a,m[15],22,0x49b40821);
    43c4:	2bcb883a 	add	r5,r5,r15
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
    43c8:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[15],22,0x49b40821);
    43cc:	0110303a 	nor	r8,zero,r4
    43d0:	41c6703a 	and	r3,r8,r7
    43d4:	2184703a 	and	r2,r4,r6
    43d8:	10c4b03a 	or	r2,r2,r3
    43dc:	00d26d34 	movhi	r3,18868
    43e0:	18c20844 	addi	r3,r3,2081
    43e4:	10c5883a 	add	r2,r2,r3
    43e8:	288b883a 	add	r5,r5,r2
    43ec:	2a8a583a 	ror	r5,r5,r10

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    43f0:	2252703a 	and	r9,r4,r9
    43f4:	00fd87b4 	movhi	r3,63006
    43f8:	18c95884 	addi	r3,r3,9570
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);
    43fc:	214b883a 	add	r5,r4,r5

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4400:	2984703a 	and	r2,r5,r6
    4404:	1244b03a 	or	r2,r2,r9
    4408:	10c5883a 	add	r2,r2,r3
    440c:	d8c00117 	ldw	r3,4(sp)
    4410:	028006c4 	movi	r10,27
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4414:	2a10703a 	and	r8,r5,r8
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4418:	38cf883a 	add	r7,r7,r3
    441c:	388f883a 	add	r7,r7,r2
    4420:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4424:	00f01074 	movhi	r3,49217
    4428:	18ecd004 	addi	r3,r3,-19648
	GG(c,d,a,b,m[11],14,0x265e5a51);
    442c:	02400484 	movi	r9,18
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4430:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4434:	3904703a 	and	r2,r7,r4
    4438:	1204b03a 	or	r2,r2,r8
    443c:	10c5883a 	add	r2,r2,r3
    4440:	d8c00617 	ldw	r3,24(sp)
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4444:	2589883a 	add	r4,r4,r22
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    4448:	02000304 	movi	r8,12
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    444c:	30cd883a 	add	r6,r6,r3
    4450:	308d883a 	add	r6,r6,r2
    4454:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4458:	0146303a 	nor	r3,zero,r5
    445c:	38c6703a 	and	r3,r7,r3
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4460:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4464:	3144703a 	and	r2,r6,r5
    4468:	10c4b03a 	or	r2,r2,r3
    446c:	00c997b4 	movhi	r3,9822
    4470:	18d69444 	addi	r3,r3,23121
    4474:	10c5883a 	add	r2,r2,r3
    4478:	2089883a 	add	r4,r4,r2
    447c:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    4480:	01c6303a 	nor	r3,zero,r7
    4484:	30c6703a 	and	r3,r6,r3
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4488:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    448c:	21c4703a 	and	r2,r4,r7
    4490:	10c4b03a 	or	r2,r2,r3
    4494:	00fa6df4 	movhi	r3,59831
    4498:	18f1ea84 	addi	r3,r3,-14422
    449c:	10c5883a 	add	r2,r2,r3
    44a0:	2dcb883a 	add	r5,r5,r23
    44a4:	288b883a 	add	r5,r5,r2
    44a8:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44ac:	0186303a 	nor	r3,zero,r6
    44b0:	20c6703a 	and	r3,r4,r3
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    44b4:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44b8:	2984703a 	and	r2,r5,r6
    44bc:	10c4b03a 	or	r2,r2,r3
    44c0:	00f58bf4 	movhi	r3,54831
    44c4:	18c41744 	addi	r3,r3,4189
    44c8:	10c5883a 	add	r2,r2,r3
    44cc:	3ccf883a 	add	r7,r7,r19
    44d0:	388f883a 	add	r7,r7,r2
    44d4:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[10], 9,0x02441453);
    44d8:	0106303a 	nor	r3,zero,r4
    44dc:	28c6703a 	and	r3,r5,r3

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44e0:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[10], 9,0x02441453);
    44e4:	3904703a 	and	r2,r7,r4
    44e8:	10c4b03a 	or	r2,r2,r3
    44ec:	00c09134 	movhi	r3,580
    44f0:	18c514c4 	addi	r3,r3,5203
    44f4:	10c5883a 	add	r2,r2,r3
    44f8:	344d883a 	add	r6,r6,r17
    44fc:	308d883a 	add	r6,r6,r2
    4500:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4504:	0146303a 	nor	r3,zero,r5
    4508:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
    450c:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4510:	3144703a 	and	r2,r6,r5
    4514:	10c4b03a 	or	r2,r2,r3
    4518:	00f628b4 	movhi	r3,55458
    451c:	18f9a044 	addi	r3,r3,-6527
    4520:	10c5883a 	add	r2,r2,r3
    4524:	23c9883a 	add	r4,r4,r15
    4528:	2089883a 	add	r4,r4,r2
    452c:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    4530:	01c6303a 	nor	r3,zero,r7
    4534:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4538:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    453c:	21c4703a 	and	r2,r4,r7
    4540:	10c4b03a 	or	r2,r2,r3
    4544:	00f9f534 	movhi	r3,59348
    4548:	18fef204 	addi	r3,r3,-1080
    454c:	10c5883a 	add	r2,r2,r3
    4550:	d8c00417 	ldw	r3,16(sp)
    4554:	28cb883a 	add	r5,r5,r3
    4558:	288b883a 	add	r5,r5,r2
    455c:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    4560:	0186303a 	nor	r3,zero,r6
    4564:	20c6703a 	and	r3,r4,r3
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    4568:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    456c:	2984703a 	and	r2,r5,r6
    4570:	10c4b03a 	or	r2,r2,r3
    4574:	00c878b4 	movhi	r3,8674
    4578:	18f37984 	addi	r3,r3,-12826
    457c:	10c5883a 	add	r2,r2,r3
    4580:	d8c00917 	ldw	r3,36(sp)
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    4584:	334d883a 	add	r6,r6,r13
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    4588:	38cf883a 	add	r7,r7,r3
    458c:	388f883a 	add	r7,r7,r2
    4590:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    4594:	0106303a 	nor	r3,zero,r4
    4598:	28c6703a 	and	r3,r5,r3
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    459c:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    45a0:	3904703a 	and	r2,r7,r4
    45a4:	10c4b03a 	or	r2,r2,r3
    45a8:	00f0cdf4 	movhi	r3,49975
    45ac:	18c1f584 	addi	r3,r3,2006
    45b0:	10c5883a 	add	r2,r2,r3
    45b4:	308d883a 	add	r6,r6,r2
    45b8:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45bc:	0146303a 	nor	r3,zero,r5
    45c0:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    45c4:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45c8:	3144703a 	and	r2,r6,r5
    45cc:	10c4b03a 	or	r2,r2,r3
    45d0:	00fd3574 	movhi	r3,62677
    45d4:	18c361c4 	addi	r3,r3,3463
    45d8:	10c5883a 	add	r2,r2,r3
    45dc:	d8c00317 	ldw	r3,12(sp)
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    45e0:	2d4b883a 	add	r5,r5,r21
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45e4:	20c9883a 	add	r4,r4,r3
    45e8:	2089883a 	add	r4,r4,r2
    45ec:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    45f0:	01c6303a 	nor	r3,zero,r7
    45f4:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45f8:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    45fc:	21c4703a 	and	r2,r4,r7
    4600:	10c4b03a 	or	r2,r2,r3
    4604:	00d156b4 	movhi	r3,17754
    4608:	18c53b44 	addi	r3,r3,5357
    460c:	10c5883a 	add	r2,r2,r3
    4610:	288b883a 	add	r5,r5,r2
    4614:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    4618:	0186303a 	nor	r3,zero,r6
    461c:	20c6703a 	and	r3,r4,r3
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    4620:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    4624:	2984703a 	and	r2,r5,r6
    4628:	10c4b03a 	or	r2,r2,r3
    462c:	00ea7934 	movhi	r3,43492
    4630:	18fa4144 	addi	r3,r3,-5883
    4634:	10c5883a 	add	r2,r2,r3
    4638:	3c8f883a 	add	r7,r7,r18
    463c:	388f883a 	add	r7,r7,r2
    4640:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4644:	0106303a 	nor	r3,zero,r4
    4648:	28c6703a 	and	r3,r5,r3
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    464c:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4650:	3904703a 	and	r2,r7,r4
    4654:	10c4b03a 	or	r2,r2,r3
    4658:	00ff3c34 	movhi	r3,64752
    465c:	18e8fe04 	addi	r3,r3,-23560
    4660:	10c5883a 	add	r2,r2,r3
    4664:	d8c00217 	ldw	r3,8(sp)
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    4668:	2409883a 	add	r4,r4,r16
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
    466c:	02800544 	movi	r10,21
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4670:	30cd883a 	add	r6,r6,r3
    4674:	308d883a 	add	r6,r6,r2
    4678:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    467c:	0146303a 	nor	r3,zero,r5
    4680:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4684:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    4688:	3144703a 	and	r2,r6,r5
    468c:	10c4b03a 	or	r2,r2,r3
    4690:	00d9dbf4 	movhi	r3,26479
    4694:	18c0b644 	addi	r3,r3,729
    4698:	10c5883a 	add	r2,r2,r3
    469c:	2089883a 	add	r4,r4,r2
    46a0:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46a4:	01c6303a 	nor	r3,zero,r7
    46a8:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    46ac:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46b0:	21c4703a 	and	r2,r4,r7
    46b4:	10c4b03a 	or	r2,r2,r3
    46b8:	00e34ab4 	movhi	r3,36138
    46bc:	18d32284 	addi	r3,r3,19594
    46c0:	10c5883a 	add	r2,r2,r3
    46c4:	2b8b883a 	add	r5,r5,r14
    46c8:	288b883a 	add	r5,r5,r2
    46cc:	2a0a583a 	ror	r5,r5,r8

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    46d0:	3104f03a 	xor	r2,r6,r4
    46d4:	00fffeb4 	movhi	r3,65530
    46d8:	18ce5084 	addi	r3,r3,14658
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46dc:	214b883a 	add	r5,r4,r5

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    46e0:	2884f03a 	xor	r2,r5,r2
    46e4:	10c5883a 	add	r2,r2,r3
    46e8:	3ccf883a 	add	r7,r7,r19
    46ec:	02c00704 	movi	r11,28
    46f0:	388f883a 	add	r7,r7,r2
    46f4:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[8], 11,0x8771f681);
    46f8:	2144f03a 	xor	r2,r4,r5
    46fc:	00e1dcb4 	movhi	r3,34674
    4700:	18fda044 	addi	r3,r3,-2431
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    4704:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[8], 11,0x8771f681);
    4708:	3884f03a 	xor	r2,r7,r2
    470c:	10c5883a 	add	r2,r2,r3
    4710:	354d883a 	add	r6,r6,r21
    4714:	308d883a 	add	r6,r6,r2
    4718:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    471c:	29c4f03a 	xor	r2,r5,r7
    4720:	00db6774 	movhi	r3,28061
    4724:	18d84884 	addi	r3,r3,24866
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
    4728:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    472c:	3084f03a 	xor	r2,r6,r2
    4730:	10c5883a 	add	r2,r2,r3
    4734:	2589883a 	add	r4,r4,r22
    4738:	02400404 	movi	r9,16
    473c:	2089883a 	add	r4,r4,r2
    4740:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4744:	3984f03a 	xor	r2,r7,r6
    4748:	00ff7974 	movhi	r3,64997
    474c:	18ce0304 	addi	r3,r3,14348
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    4750:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4754:	2084f03a 	xor	r2,r4,r2
    4758:	10c5883a 	add	r2,r2,r3
    475c:	2b4b883a 	add	r5,r5,r13
    4760:	02000244 	movi	r8,9
    4764:	288b883a 	add	r5,r5,r2
    4768:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    476c:	3104f03a 	xor	r2,r6,r4
    4770:	00e92ff4 	movhi	r3,42175
    4774:	18fa9104 	addi	r3,r3,-5564
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4778:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    477c:	2884f03a 	xor	r2,r5,r2
    4780:	10c5883a 	add	r2,r2,r3
    4784:	d8c00117 	ldw	r3,4(sp)
    4788:	38cf883a 	add	r7,r7,r3
    478c:	388f883a 	add	r7,r7,r2
    4790:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    4794:	2144f03a 	xor	r2,r4,r5
    4798:	00d2f7f4 	movhi	r3,19423
    479c:	18f3ea44 	addi	r3,r3,-12375

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    47a0:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47a4:	3884f03a 	xor	r2,r7,r2
    47a8:	10c5883a 	add	r2,r2,r3
    47ac:	d8c00417 	ldw	r3,16(sp)
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47b0:	2409883a 	add	r4,r4,r16
	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47b4:	30cd883a 	add	r6,r6,r3
    47b8:	308d883a 	add	r6,r6,r2
    47bc:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47c0:	29c4f03a 	xor	r2,r5,r7
    47c4:	00fdaef4 	movhi	r3,63163
    47c8:	18d2d804 	addi	r3,r3,19296
	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47cc:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47d0:	3084f03a 	xor	r2,r6,r2
    47d4:	10c5883a 	add	r2,r2,r3
    47d8:	2089883a 	add	r4,r4,r2
    47dc:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    47e0:	3984f03a 	xor	r2,r7,r6
    47e4:	00efb034 	movhi	r3,48832
    47e8:	18ef1c04 	addi	r3,r3,-17296
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47ec:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    47f0:	2084f03a 	xor	r2,r4,r2
    47f4:	10c5883a 	add	r2,r2,r3
    47f8:	2c4b883a 	add	r5,r5,r17
    47fc:	288b883a 	add	r5,r5,r2
    4800:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4804:	3104f03a 	xor	r2,r6,r4
    4808:	00ca26f4 	movhi	r3,10395
    480c:	18dfb184 	addi	r3,r3,32454
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    4810:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4814:	2884f03a 	xor	r2,r5,r2
    4818:	10c5883a 	add	r2,r2,r3
    481c:	3c8f883a 	add	r7,r7,r18
    4820:	388f883a 	add	r7,r7,r2
    4824:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4828:	2144f03a 	xor	r2,r4,r5
    482c:	00faa874 	movhi	r3,60065
    4830:	18c9fe84 	addi	r3,r3,10234
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4834:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4838:	3884f03a 	xor	r2,r7,r2
    483c:	10c5883a 	add	r2,r2,r3
    4840:	35cd883a 	add	r6,r6,r23
    4844:	308d883a 	add	r6,r6,r2
    4848:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    484c:	29c4f03a 	xor	r2,r5,r7
    4850:	00f53bf4 	movhi	r3,54511
    4854:	18cc2144 	addi	r3,r3,12421
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4858:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    485c:	3084f03a 	xor	r2,r6,r2
    4860:	10c5883a 	add	r2,r2,r3
    4864:	d8c00317 	ldw	r3,12(sp)
    4868:	20c9883a 	add	r4,r4,r3
    486c:	2089883a 	add	r4,r4,r2
    4870:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[6], 23,0x04881d05);
    4874:	3984f03a 	xor	r2,r7,r6
    4878:	00c12234 	movhi	r3,1160
    487c:	18c74144 	addi	r3,r3,7429
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    4880:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[6], 23,0x04881d05);
    4884:	2084f03a 	xor	r2,r4,r2
    4888:	10c5883a 	add	r2,r2,r3
    488c:	d8c00617 	ldw	r3,24(sp)
    4890:	28cb883a 	add	r5,r5,r3
    4894:	288b883a 	add	r5,r5,r2
    4898:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    489c:	3104f03a 	xor	r2,r6,r4
    48a0:	00f67574 	movhi	r3,55765
    48a4:	18f40e44 	addi	r3,r3,-12231
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
    48a8:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48ac:	2884f03a 	xor	r2,r5,r2
    48b0:	10c5883a 	add	r2,r2,r3
    48b4:	d8c00917 	ldw	r3,36(sp)
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48b8:	338d883a 	add	r6,r6,r14
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48bc:	38cf883a 	add	r7,r7,r3
    48c0:	388f883a 	add	r7,r7,r2
    48c4:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48c8:	2144f03a 	xor	r2,r4,r5
    48cc:	00f9b734 	movhi	r3,59100
    48d0:	18e67944 	addi	r3,r3,-26139
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48d4:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48d8:	3884f03a 	xor	r2,r7,r2
    48dc:	10c5883a 	add	r2,r2,r3
    48e0:	308d883a 	add	r6,r6,r2
    48e4:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    48e8:	29c4f03a 	xor	r2,r5,r7
    48ec:	00c7e8b4 	movhi	r3,8098
    48f0:	18df3e04 	addi	r3,r3,31992
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48f4:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    48f8:	3084f03a 	xor	r2,r6,r2
    48fc:	10c5883a 	add	r2,r2,r3
    4900:	23c9883a 	add	r4,r4,r15
    4904:	2089883a 	add	r4,r4,r2
    4908:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    490c:	3984f03a 	xor	r2,r7,r6
    4910:	00f12b34 	movhi	r3,50348
    4914:	18d59944 	addi	r3,r3,22117
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    4918:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    491c:	2084f03a 	xor	r2,r4,r2
    4920:	10c5883a 	add	r2,r2,r3
    4924:	d8c00217 	ldw	r3,8(sp)

	II(a,b,c,d,m[0], 6,0xf4292244);
    4928:	3dcf883a 	add	r7,r7,r23
    492c:	02c00684 	movi	r11,26
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    4930:	28cb883a 	add	r5,r5,r3
    4934:	288b883a 	add	r5,r5,r2
    4938:	2a0a583a 	ror	r5,r5,r8

	II(a,b,c,d,m[0], 6,0xf4292244);
    493c:	0184303a 	nor	r2,zero,r6
    4940:	00fd0a74 	movhi	r3,62505
    4944:	18c89104 	addi	r3,r3,8772
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    4948:	214b883a 	add	r5,r4,r5

	II(a,b,c,d,m[0], 6,0xf4292244);
    494c:	2884b03a 	or	r2,r5,r2
    4950:	2084f03a 	xor	r2,r4,r2
    4954:	10c5883a 	add	r2,r2,r3
    4958:	388f883a 	add	r7,r7,r2
    495c:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[7], 10,0x432aff97);
    4960:	0104303a 	nor	r2,zero,r4
    4964:	00d0caf4 	movhi	r3,17195
    4968:	18ffe5c4 	addi	r3,r3,-105
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
    496c:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[7], 10,0x432aff97);
    4970:	3884b03a 	or	r2,r7,r2
    4974:	2884f03a 	xor	r2,r5,r2
    4978:	10c5883a 	add	r2,r2,r3
    497c:	340d883a 	add	r6,r6,r16
    4980:	02800584 	movi	r10,22
    4984:	308d883a 	add	r6,r6,r2
    4988:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[14],15,0xab9423a7);
    498c:	0144303a 	nor	r2,zero,r5
    4990:	00eae534 	movhi	r3,43924
    4994:	18c8e9c4 	addi	r3,r3,9127
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
    4998:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[14],15,0xab9423a7);
    499c:	3084b03a 	or	r2,r6,r2
    49a0:	3884f03a 	xor	r2,r7,r2
    49a4:	10c5883a 	add	r2,r2,r3
    49a8:	2349883a 	add	r4,r4,r13
    49ac:	02400444 	movi	r9,17
    49b0:	2089883a 	add	r4,r4,r2
    49b4:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[5], 21,0xfc93a039);
    49b8:	01c4303a 	nor	r2,zero,r7
    49bc:	00ff2534 	movhi	r3,64660
    49c0:	18e80e44 	addi	r3,r3,-24519
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
    49c4:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[5], 21,0xfc93a039);
    49c8:	2084b03a 	or	r2,r4,r2
    49cc:	3084f03a 	xor	r2,r6,r2
    49d0:	10c5883a 	add	r2,r2,r3
    49d4:	2ccb883a 	add	r5,r5,r19
    49d8:	020002c4 	movi	r8,11
    49dc:	288b883a 	add	r5,r5,r2
    49e0:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[12], 6,0x655b59c3);
    49e4:	0184303a 	nor	r2,zero,r6
    49e8:	00d956f4 	movhi	r3,25947
    49ec:	18d670c4 	addi	r3,r3,22979
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
    49f0:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[12], 6,0x655b59c3);
    49f4:	2884b03a 	or	r2,r5,r2
    49f8:	2084f03a 	xor	r2,r4,r2
    49fc:	10c5883a 	add	r2,r2,r3
    4a00:	3b8f883a 	add	r7,r7,r14
    4a04:	388f883a 	add	r7,r7,r2
    4a08:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a0c:	d8c00317 	ldw	r3,12(sp)
    4a10:	0104303a 	nor	r2,zero,r4

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
    4a14:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a18:	3884b03a 	or	r2,r7,r2
    4a1c:	2884f03a 	xor	r2,r5,r2
    4a20:	30cd883a 	add	r6,r6,r3
    4a24:	00e3c374 	movhi	r3,36621
    4a28:	18f32484 	addi	r3,r3,-13166
    4a2c:	10c5883a 	add	r2,r2,r3
    4a30:	308d883a 	add	r6,r6,r2
    4a34:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a38:	0144303a 	nor	r2,zero,r5
    4a3c:	00fffc34 	movhi	r3,65520
    4a40:	18fd1f44 	addi	r3,r3,-2947
	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a44:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a48:	3084b03a 	or	r2,r6,r2
    4a4c:	3884f03a 	xor	r2,r7,r2
    4a50:	10c5883a 	add	r2,r2,r3
    4a54:	2449883a 	add	r4,r4,r17
    4a58:	2089883a 	add	r4,r4,r2
    4a5c:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4a60:	d8c00117 	ldw	r3,4(sp)
    4a64:	01c4303a 	nor	r2,zero,r7
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a68:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4a6c:	2084b03a 	or	r2,r4,r2
    4a70:	3084f03a 	xor	r2,r6,r2
    4a74:	28cb883a 	add	r5,r5,r3
    4a78:	00e16134 	movhi	r3,34180
    4a7c:	18d77444 	addi	r3,r3,24017
    4a80:	10c5883a 	add	r2,r2,r3
    4a84:	288b883a 	add	r5,r5,r2
    4a88:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4a8c:	0184303a 	nor	r2,zero,r6
    4a90:	00dbea34 	movhi	r3,28584
    4a94:	18df93c4 	addi	r3,r3,32335
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4a98:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4a9c:	2884b03a 	or	r2,r5,r2
    4aa0:	2084f03a 	xor	r2,r4,r2
    4aa4:	10c5883a 	add	r2,r2,r3
    4aa8:	3d4f883a 	add	r7,r7,r21
    4aac:	388f883a 	add	r7,r7,r2
    4ab0:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4ab4:	0104303a 	nor	r2,zero,r4
    4ab8:	00ff8b74 	movhi	r3,65069
    4abc:	18f9b804 	addi	r3,r3,-6432
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4ac0:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4ac4:	3884b03a 	or	r2,r7,r2
    4ac8:	2884f03a 	xor	r2,r5,r2
    4acc:	10c5883a 	add	r2,r2,r3
    4ad0:	33cd883a 	add	r6,r6,r15
    4ad4:	308d883a 	add	r6,r6,r2
    4ad8:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[6], 15,0xa3014314);
    4adc:	d8c00617 	ldw	r3,24(sp)
    4ae0:	0144303a 	nor	r2,zero,r5
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4ae4:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[6], 15,0xa3014314);
    4ae8:	3084b03a 	or	r2,r6,r2
    4aec:	3884f03a 	xor	r2,r7,r2
    4af0:	20c9883a 	add	r4,r4,r3
    4af4:	00e8c074 	movhi	r3,41729
    4af8:	18d0c504 	addi	r3,r3,17172
    4afc:	10c5883a 	add	r2,r2,r3
    4b00:	2089883a 	add	r4,r4,r2
    4b04:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b08:	01c4303a 	nor	r2,zero,r7
    4b0c:	00d38234 	movhi	r3,19976
    4b10:	18c46844 	addi	r3,r3,4513
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
    4b14:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b18:	2084b03a 	or	r2,r4,r2
    4b1c:	3084f03a 	xor	r2,r6,r2
    4b20:	10c5883a 	add	r2,r2,r3
    4b24:	2c8b883a 	add	r5,r5,r18
    4b28:	288b883a 	add	r5,r5,r2
    4b2c:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b30:	d8c00417 	ldw	r3,16(sp)
    4b34:	0184303a 	nor	r2,zero,r6
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b38:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b3c:	2884b03a 	or	r2,r5,r2
    4b40:	2084f03a 	xor	r2,r4,r2
    4b44:	38cf883a 	add	r7,r7,r3
    4b48:	00fdd4f4 	movhi	r3,63315
    4b4c:	18dfa084 	addi	r3,r3,32386
    4b50:	10c5883a 	add	r2,r2,r3
    4b54:	388f883a 	add	r7,r7,r2
    4b58:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b5c:	0104303a 	nor	r2,zero,r4
    4b60:	00ef4ef4 	movhi	r3,48443
    4b64:	18fc8d44 	addi	r3,r3,-3531
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b68:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b6c:	3884b03a 	or	r2,r7,r2
    4b70:	2884f03a 	xor	r2,r5,r2
    4b74:	10c5883a 	add	r2,r2,r3
    4b78:	358d883a 	add	r6,r6,r22
    4b7c:	308d883a 	add	r6,r6,r2
    4b80:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4b84:	d8c00217 	ldw	r3,8(sp)
    4b88:	0144303a 	nor	r2,zero,r5
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b8c:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4b90:	3084b03a 	or	r2,r6,r2
    4b94:	3884f03a 	xor	r2,r7,r2
    4b98:	20c9883a 	add	r4,r4,r3
    4b9c:	00cab634 	movhi	r3,10968
    4ba0:	18f4aec4 	addi	r3,r3,-11589
    4ba4:	10c5883a 	add	r2,r2,r3
    4ba8:	2089883a 	add	r4,r4,r2
    4bac:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bb0:	d8c00917 	ldw	r3,36(sp)
    4bb4:	01c4303a 	nor	r2,zero,r7
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4bb8:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bbc:	2084b03a 	or	r2,r4,r2
    4bc0:	3084f03a 	xor	r2,r6,r2
    4bc4:	28cb883a 	add	r5,r5,r3
    4bc8:	00fae1f4 	movhi	r3,60295
    4bcc:	18f4e444 	addi	r3,r3,-11375
    4bd0:	10c5883a 	add	r2,r2,r3
    4bd4:	288b883a 	add	r5,r5,r2
    4bd8:	2319883a 	add	r12,r4,r12
	ctx->state[2] += c;
    4bdc:	a129883a 	add	r20,r20,r4
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4be0:	e0801317 	ldw	r2,76(fp)
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
    4be4:	e1001617 	ldw	r4,88(fp)
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4be8:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4bec:	11cf883a 	add	r7,r2,r7
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
    4bf0:	218d883a 	add	r6,r4,r6
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bf4:	2b0b883a 	add	r5,r5,r12
	ctx->state[2] += c;
	ctx->state[3] += d;
    4bf8:	e1801615 	stw	r6,88(fp)
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4bfc:	e1c01315 	stw	r7,76(fp)
	ctx->state[1] += b;
    4c00:	e1401415 	stw	r5,80(fp)
	ctx->state[2] += c;
    4c04:	e5001515 	stw	r20,84(fp)
	ctx->state[3] += d;
}
    4c08:	df001817 	ldw	fp,96(sp)
    4c0c:	ddc01717 	ldw	r23,92(sp)
    4c10:	dd801617 	ldw	r22,88(sp)
    4c14:	dd401517 	ldw	r21,84(sp)
    4c18:	dd001417 	ldw	r20,80(sp)
    4c1c:	dcc01317 	ldw	r19,76(sp)
    4c20:	dc801217 	ldw	r18,72(sp)
    4c24:	dc401117 	ldw	r17,68(sp)
    4c28:	dc001017 	ldw	r16,64(sp)
    4c2c:	dec01904 	addi	sp,sp,100
    4c30:	f800283a 	ret

00004c34 <md5_init>:
	ctx->bitlen[0] = 0;
	ctx->bitlen[1] = 0;
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xEFCDAB89;
	ctx->state[2] = 0x98BADCFE;
	ctx->state[3] = 0x10325476;
    4c34:	00840cb4 	movhi	r2,4146
    4c38:	10951d84 	addi	r2,r2,21622
    4c3c:	20801615 	stw	r2,88(r4)

void md5_init(MD5_CTX *ctx) {
	ctx->datalen = 0;
	ctx->bitlen[0] = 0;
	ctx->bitlen[1] = 0;
	ctx->state[0] = 0x67452301;
    4c40:	0099d174 	movhi	r2,26437
    4c44:	1088c044 	addi	r2,r2,8961
    4c48:	20801315 	stw	r2,76(r4)
	ctx->state[1] = 0xEFCDAB89;
    4c4c:	00bbf3b4 	movhi	r2,61390
    4c50:	10aae244 	addi	r2,r2,-21623
    4c54:	20801415 	stw	r2,80(r4)
	ctx->state[2] = 0x98BADCFE;
    4c58:	00a62ef4 	movhi	r2,39099
    4c5c:	10b73f84 	addi	r2,r2,-8962
    4c60:	20801515 	stw	r2,84(r4)
	ctx->state[2] += c;
	ctx->state[3] += d;
}

void md5_init(MD5_CTX *ctx) {
	ctx->datalen = 0;
    4c64:	20001015 	stw	zero,64(r4)
	ctx->bitlen[0] = 0;
    4c68:	20001115 	stw	zero,68(r4)
	ctx->bitlen[1] = 0;
    4c6c:	20001215 	stw	zero,72(r4)
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xEFCDAB89;
	ctx->state[2] = 0x98BADCFE;
	ctx->state[3] = 0x10325476;
}
    4c70:	f800283a 	ret

00004c74 <md5_update>:

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
    4c74:	defffb04 	addi	sp,sp,-20
    4c78:	dcc00315 	stw	r19,12(sp)
    4c7c:	dc800215 	stw	r18,8(sp)
    4c80:	dc400115 	stw	r17,4(sp)
    4c84:	dc000015 	stw	r16,0(sp)
    4c88:	2827883a 	mov	r19,r5
    4c8c:	2021883a 	mov	r16,r4
    4c90:	3025883a 	mov	r18,r6
    4c94:	0023883a 	mov	r17,zero
    4c98:	dfc00415 	stw	ra,16(sp)
    4c9c:	00001606 	br	4cf8 <md5_update+0x84>
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4ca0:	80801017 	ldw	r2,64(r16)
    4ca4:	18c00003 	ldbu	r3,0(r3)
		ctx->datalen++;
		if (ctx->datalen == 64) {
			md5_transform(ctx, ctx->data);
    4ca8:	8009883a 	mov	r4,r16
void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
    4cac:	11800044 	addi	r6,r2,1

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4cb0:	8085883a 	add	r2,r16,r2
    4cb4:	10c00005 	stb	r3,0(r2)
		ctx->datalen++;
		if (ctx->datalen == 64) {
    4cb8:	00801004 	movi	r2,64
			md5_transform(ctx, ctx->data);
    4cbc:	800b883a 	mov	r5,r16
}

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
    4cc0:	8c400044 	addi	r17,r17,1
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
    4cc4:	81801015 	stw	r6,64(r16)
		if (ctx->datalen == 64) {
    4cc8:	30800b1e 	bne	r6,r2,4cf8 <md5_update+0x84>
			md5_transform(ctx, ctx->data);
    4ccc:	000405c0 	call	405c <md5_transform>
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
    4cd0:	80c01117 	ldw	r3,68(r16)
    4cd4:	00bf7fc4 	movi	r2,-513
    4cd8:	10c0032e 	bgeu	r2,r3,4ce8 <md5_update+0x74>
    4cdc:	80801217 	ldw	r2,72(r16)
    4ce0:	10800044 	addi	r2,r2,1
    4ce4:	80801215 	stw	r2,72(r16)
    4ce8:	80801117 	ldw	r2,68(r16)
			ctx->datalen = 0;
    4cec:	80001015 	stw	zero,64(r16)
	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
		if (ctx->datalen == 64) {
			md5_transform(ctx, ctx->data);
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
    4cf0:	10808004 	addi	r2,r2,512
    4cf4:	80801115 	stw	r2,68(r16)

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4cf8:	9c47883a 	add	r3,r19,r17
}

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
    4cfc:	8cbfe81e 	bne	r17,r18,4ca0 <md5_update+0x2c>
			md5_transform(ctx, ctx->data);
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
			ctx->datalen = 0;
		}
	}
}
    4d00:	dfc00417 	ldw	ra,16(sp)
    4d04:	dcc00317 	ldw	r19,12(sp)
    4d08:	dc800217 	ldw	r18,8(sp)
    4d0c:	dc400117 	ldw	r17,4(sp)
    4d10:	dc000017 	ldw	r16,0(sp)
    4d14:	dec00504 	addi	sp,sp,20
    4d18:	f800283a 	ret

00004d1c <md5_final>:

void md5_final(MD5_CTX *ctx, uchar hash[]) {
	uint i;

	i = ctx->datalen;
    4d1c:	20c01017 	ldw	r3,64(r4)
			ctx->datalen = 0;
		}
	}
}

void md5_final(MD5_CTX *ctx, uchar hash[]) {
    4d20:	defffd04 	addi	sp,sp,-12
	uint i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
    4d24:	00800dc4 	movi	r2,55
			ctx->datalen = 0;
		}
	}
}

void md5_final(MD5_CTX *ctx, uchar hash[]) {
    4d28:	dc400115 	stw	r17,4(sp)
    4d2c:	dc000015 	stw	r16,0(sp)
    4d30:	2823883a 	mov	r17,r5
    4d34:	2021883a 	mov	r16,r4
    4d38:	20cb883a 	add	r5,r4,r3
    4d3c:	dfc00215 	stw	ra,8(sp)
    4d40:	19000044 	addi	r4,r3,1
	uint i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
    4d44:	10c00b36 	bltu	r2,r3,4d74 <md5_final+0x58>
		ctx->data[i++] = 0x80;
    4d48:	2007883a 	mov	r3,r4
    4d4c:	00bfe004 	movi	r2,-128
    4d50:	8109883a 	add	r4,r16,r4
    4d54:	01800e04 	movi	r6,56
    4d58:	28800005 	stb	r2,0(r5)
    4d5c:	00000206 	br	4d68 <md5_final+0x4c>
		while (i < 56)
			ctx->data[i++] = 0x00;
    4d60:	203fffc5 	stb	zero,-1(r4)
    4d64:	18c00044 	addi	r3,r3,1
    4d68:	21000044 	addi	r4,r4,1
	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
		while (i < 56)
    4d6c:	19bffc1e 	bne	r3,r6,4d60 <md5_final+0x44>
    4d70:	00001106 	br	4db8 <md5_final+0x9c>
			ctx->data[i++] = 0x00;
	} else if (ctx->datalen >= 56) {
		ctx->data[i++] = 0x80;
    4d74:	2007883a 	mov	r3,r4
    4d78:	00bfe004 	movi	r2,-128
    4d7c:	8109883a 	add	r4,r16,r4
    4d80:	01800fc4 	movi	r6,63
    4d84:	28800005 	stb	r2,0(r5)
    4d88:	00000206 	br	4d94 <md5_final+0x78>
		while (i < 64)
			ctx->data[i++] = 0x00;
    4d8c:	203fffc5 	stb	zero,-1(r4)
    4d90:	18c00044 	addi	r3,r3,1
    4d94:	21000044 	addi	r4,r4,1
		ctx->data[i++] = 0x80;
		while (i < 56)
			ctx->data[i++] = 0x00;
	} else if (ctx->datalen >= 56) {
		ctx->data[i++] = 0x80;
		while (i < 64)
    4d98:	30fffc2e 	bgeu	r6,r3,4d8c <md5_final+0x70>
			ctx->data[i++] = 0x00;
		md5_transform(ctx, ctx->data);
    4d9c:	800b883a 	mov	r5,r16
    4da0:	8009883a 	mov	r4,r16
    4da4:	000405c0 	call	405c <md5_transform>
		memset(ctx->data, 0, 56);
    4da8:	01800e04 	movi	r6,56
    4dac:	8009883a 	mov	r4,r16
    4db0:	000b883a 	mov	r5,zero
    4db4:	00056a80 	call	56a8 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4db8:	80801017 	ldw	r2,64(r16)
    4dbc:	80c01117 	ldw	r3,68(r16)
    4dc0:	100490fa 	slli	r2,r2,3
    4dc4:	0084303a 	nor	r2,zero,r2
    4dc8:	10c0032e 	bgeu	r2,r3,4dd8 <md5_final+0xbc>
    4dcc:	80801217 	ldw	r2,72(r16)
    4dd0:	10800044 	addi	r2,r2,1
    4dd4:	80801215 	stw	r2,72(r16)
    4dd8:	80801017 	ldw	r2,64(r16)
    4ddc:	80c01117 	ldw	r3,68(r16)
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
    4de0:	81401217 	ldw	r5,72(r16)
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4de4:	100490fa 	slli	r2,r2,3
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);
    4de8:	8009883a 	mov	r4,r16
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
    4dec:	2814d63a 	srli	r10,r5,24
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4df0:	1887883a 	add	r3,r3,r2
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
    4df4:	1812d63a 	srli	r9,r3,24
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
    4df8:	1804d23a 	srli	r2,r3,8
	ctx->data[58] = ctx->bitlen[0] >> 16;
    4dfc:	180cd43a 	srli	r6,r3,16
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
    4e00:	280ed23a 	srli	r7,r5,8
	ctx->data[62] = ctx->bitlen[1] >> 16;
    4e04:	2810d43a 	srli	r8,r5,16
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4e08:	80c01115 	stw	r3,68(r16)
	ctx->data[56] = ctx->bitlen[0];
    4e0c:	80c00e05 	stb	r3,56(r16)
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
    4e10:	81400f05 	stb	r5,60(r16)
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
    4e14:	80800e45 	stb	r2,57(r16)
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);
    4e18:	800b883a 	mov	r5,r16

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
    4e1c:	81800e85 	stb	r6,58(r16)
	ctx->data[59] = ctx->bitlen[0] >> 24;
    4e20:	82400ec5 	stb	r9,59(r16)
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
    4e24:	81c00f45 	stb	r7,61(r16)
	ctx->data[62] = ctx->bitlen[1] >> 16;
    4e28:	82000f85 	stb	r8,62(r16)
	ctx->data[63] = ctx->bitlen[1] >> 24;
    4e2c:	82800fc5 	stb	r10,63(r16)
	md5_transform(ctx, ctx->data);
    4e30:	000405c0 	call	405c <md5_transform>
    4e34:	0007883a 	mov	r3,zero
    4e38:	880b883a 	mov	r5,r17
    4e3c:	01000804 	movi	r4,32

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
		hash[i] = (ctx->state[0] >> (i * 8)) & 0x000000ff;
    4e40:	80801317 	ldw	r2,76(r16)
    4e44:	10c4d83a 	srl	r2,r2,r3
    4e48:	28800005 	stb	r2,0(r5)
		hash[i + 4] = (ctx->state[1] >> (i * 8)) & 0x000000ff;
    4e4c:	80801417 	ldw	r2,80(r16)
    4e50:	10c4d83a 	srl	r2,r2,r3
    4e54:	28800105 	stb	r2,4(r5)
		hash[i + 8] = (ctx->state[2] >> (i * 8)) & 0x000000ff;
    4e58:	80801517 	ldw	r2,84(r16)
    4e5c:	10c4d83a 	srl	r2,r2,r3
    4e60:	28800205 	stb	r2,8(r5)
		hash[i + 12] = (ctx->state[3] >> (i * 8)) & 0x000000ff;
    4e64:	80801617 	ldw	r2,88(r16)
    4e68:	10c4d83a 	srl	r2,r2,r3
    4e6c:	18c00204 	addi	r3,r3,8
    4e70:	28800305 	stb	r2,12(r5)
    4e74:	29400044 	addi	r5,r5,1
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
    4e78:	193ff11e 	bne	r3,r4,4e40 <md5_final+0x124>
		hash[i] = (ctx->state[0] >> (i * 8)) & 0x000000ff;
		hash[i + 4] = (ctx->state[1] >> (i * 8)) & 0x000000ff;
		hash[i + 8] = (ctx->state[2] >> (i * 8)) & 0x000000ff;
		hash[i + 12] = (ctx->state[3] >> (i * 8)) & 0x000000ff;
	}
}
    4e7c:	dfc00217 	ldw	ra,8(sp)
    4e80:	dc400117 	ldw	r17,4(sp)
    4e84:	dc000017 	ldw	r16,0(sp)
    4e88:	dec00304 	addi	sp,sp,12
    4e8c:	f800283a 	ret

00004e90 <print_hash>:

void print_hash(uchar hash[]) {
    4e90:	defffd04 	addi	sp,sp,-12
    4e94:	dc400115 	stw	r17,4(sp)
    4e98:	dc000015 	stw	r16,0(sp)
    4e9c:	dfc00215 	stw	ra,8(sp)
    4ea0:	2023883a 	mov	r17,r4
    4ea4:	0021883a 	mov	r16,zero
	int idx;
	for (idx = 0; idx < 16; idx++)
		if (hash[idx] < 16) {
    4ea8:	8c05883a 	add	r2,r17,r16
    4eac:	10c00003 	ldbu	r3,0(r2)
    4eb0:	008003c4 	movi	r2,15
			printf("0%x", hash[idx]); //values less than 16 needs to be
    4eb4:	01000034 	movhi	r4,0
    4eb8:	21194c04 	addi	r4,r4,25904
    4ebc:	180b883a 	mov	r5,r3
}

void print_hash(uchar hash[]) {
	int idx;
	for (idx = 0; idx < 16; idx++)
		if (hash[idx] < 16) {
    4ec0:	10c0032e 	bgeu	r2,r3,4ed0 <print_hash+0x40>
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
    4ec4:	180b883a 	mov	r5,r3
    4ec8:	01000034 	movhi	r4,0
    4ecc:	21194d04 	addi	r4,r4,25908
    4ed0:	00056c80 	call	56c8 <printf>
	}
}

void print_hash(uchar hash[]) {
	int idx;
	for (idx = 0; idx < 16; idx++)
    4ed4:	84000044 	addi	r16,r16,1
    4ed8:	00800404 	movi	r2,16
    4edc:	80bff21e 	bne	r16,r2,4ea8 <print_hash+0x18>
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
    4ee0:	01000284 	movi	r4,10
}
    4ee4:	dfc00217 	ldw	ra,8(sp)
    4ee8:	dc400117 	ldw	r17,4(sp)
    4eec:	dc000017 	ldw	r16,0(sp)
    4ef0:	dec00304 	addi	sp,sp,12
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
    4ef4:	00057601 	jmpi	5760 <putchar>

00004ef8 <findStringEqual33>:
}

void findStringEqual33(char *str, int index, int len) { //MD5_CTX *myMD5_obj
    4ef8:	deffde04 	addi	sp,sp,-136
	//try every combination for the given input which produces 21 ..... 21
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
    4efc:	30bfffc4 	addi	r2,r6,-1
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
}

void findStringEqual33(char *str, int index, int len) { //MD5_CTX *myMD5_obj
    4f00:	dd001f15 	stw	r20,124(sp)
    4f04:	dcc01e15 	stw	r19,120(sp)
    4f08:	dc401c15 	stw	r17,112(sp)
    4f0c:	dfc02115 	stw	ra,132(sp)
    4f10:	dd402015 	stw	r21,128(sp)
    4f14:	dc801d15 	stw	r18,116(sp)
    4f18:	dc001b15 	stw	r16,108(sp)
    4f1c:	3029883a 	mov	r20,r6
    4f20:	2827883a 	mov	r19,r5
    4f24:	2023883a 	mov	r17,r4
	//try every combination for the given input which produces 21 ..... 21
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
    4f28:	28803f0e 	bge	r5,r2,5028 <findStringEqual33+0x130>
    4f2c:	04800c04 	movi	r18,48
    4f30:	002b883a 	mov	r21,zero
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f34:	91403fcc 	andi	r5,r18,255
				str[index] = myChar;
				MD5_CTX testObj;
				md5_init(&testObj);
    4f38:	dc000404 	addi	r16,sp,16
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f3c:	2940201c 	xori	r5,r5,128
    4f40:	a8c03fcc 	andi	r3,r21,255
    4f44:	00800244 	movi	r2,9
				str[index] = myChar;
    4f48:	8ccd883a 	add	r6,r17,r19
				MD5_CTX testObj;
				md5_init(&testObj);
    4f4c:	8009883a 	mov	r4,r16
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f50:	297fe004 	addi	r5,r5,-128
    4f54:	10c0022e 	bgeu	r2,r3,4f60 <findStringEqual33+0x68>
    4f58:	00801804 	movi	r2,96
    4f5c:	11402a0e 	bge	r2,r5,5008 <findStringEqual33+0x110>
				str[index] = myChar;
    4f60:	34800005 	stb	r18,0(r6)
				MD5_CTX testObj;
				md5_init(&testObj);
    4f64:	0004c340 	call	4c34 <md5_init>
				md5_update(&testObj, str, strlen(str));
    4f68:	8809883a 	mov	r4,r17
    4f6c:	00058280 	call	5828 <strlen>
    4f70:	100d883a 	mov	r6,r2
    4f74:	8009883a 	mov	r4,r16
    4f78:	880b883a 	mov	r5,r17
    4f7c:	0004c740 	call	4c74 <md5_update>
				md5_final(&testObj, hash);
    4f80:	8009883a 	mov	r4,r16
    4f84:	d80b883a 	mov	r5,sp
    4f88:	0004d1c0 	call	4d1c <md5_final>

				if ((hash[15] == 33) && (hash[0] == 33)) {
    4f8c:	d8c003c3 	ldbu	r3,15(sp)
    4f90:	00800844 	movi	r2,33
    4f94:	1880181e 	bne	r3,r2,4ff8 <findStringEqual33+0x100>
    4f98:	d8800003 	ldbu	r2,0(sp)
    4f9c:	10c0161e 	bne	r2,r3,4ff8 <findStringEqual33+0x100>
					hitCount = hitCount + 1;
    4fa0:	d0a04217 	ldw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
    4fa4:	01000034 	movhi	r4,0
    4fa8:	21194e04 	addi	r4,r4,25912
				md5_init(&testObj);
				md5_update(&testObj, str, strlen(str));
				md5_final(&testObj, hash);

				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
    4fac:	10800044 	addi	r2,r2,1
    4fb0:	d0a04215 	stw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
    4fb4:	00800104 	movi	r2,4
    4fb8:	a0800f1e 	bne	r20,r2,4ff8 <findStringEqual33+0x100>
						printf("The 4 digits input is: ");
    4fbc:	00056c80 	call	56c8 <printf>
						printf("%s", str);
    4fc0:	880b883a 	mov	r5,r17
    4fc4:	01000034 	movhi	r4,0
    4fc8:	21195404 	addi	r4,r4,25936
    4fcc:	00056c80 	call	56c8 <printf>
						printf("\n");
    4fd0:	01000284 	movi	r4,10
    4fd4:	00057600 	call	5760 <putchar>
						printf("MD5 Digest is: ");
    4fd8:	01000034 	movhi	r4,0
    4fdc:	21195504 	addi	r4,r4,25940
    4fe0:	00056c80 	call	56c8 <printf>
						print_hash(hash);
    4fe4:	d809883a 	mov	r4,sp
    4fe8:	0004e900 	call	4e90 <print_hash>
						printf("----------------\n");
    4fec:	01000034 	movhi	r4,0
    4ff0:	21195904 	addi	r4,r4,25956
    4ff4:	00058140 	call	5814 <puts>
					}
				}
				findStringEqual33(str, index + 1, len); //recursive call
    4ff8:	8809883a 	mov	r4,r17
    4ffc:	99400044 	addi	r5,r19,1
    5000:	a00d883a 	mov	r6,r20
    5004:	0004ef80 	call	4ef8 <findStringEqual33>
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
    5008:	94800044 	addi	r18,r18,1
    500c:	90c03fcc 	andi	r3,r18,255
    5010:	18c0201c 	xori	r3,r3,128
    5014:	18ffe004 	addi	r3,r3,-128
    5018:	00801ec4 	movi	r2,123
    501c:	ad400044 	addi	r21,r21,1
    5020:	18803d26 	beq	r3,r2,5118 <findStringEqual33+0x220>
    5024:	003fc306 	br	4f34 <findStringEqual33+0x3c>
    5028:	04800c04 	movi	r18,48
    502c:	002b883a 	mov	r21,zero
				findStringEqual33(str, index + 1, len); //recursive call
			}
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar
    5030:	a8c03fcc 	andi	r3,r21,255
    5034:	00800244 	movi	r2,9
    5038:	10c0042e 	bgeu	r2,r3,504c <findStringEqual33+0x154>
    503c:	90bfe7c4 	addi	r2,r18,-97
    5040:	10803fcc 	andi	r2,r2,255
    5044:	00c00644 	movi	r3,25
    5048:	18802c36 	bltu	r3,r2,50fc <findStringEqual33+0x204>
					<= 122)) {
				str[index] = myChar;
				MD5_CTX testObj;
				md5_init(&testObj);
    504c:	dc000404 	addi	r16,sp,16
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar
					<= 122)) {
				str[index] = myChar;
    5050:	8cc5883a 	add	r2,r17,r19
    5054:	14800005 	stb	r18,0(r2)
				MD5_CTX testObj;
				md5_init(&testObj);
    5058:	8009883a 	mov	r4,r16
    505c:	0004c340 	call	4c34 <md5_init>
				md5_update(&testObj, str, strlen(str));
    5060:	8809883a 	mov	r4,r17
    5064:	00058280 	call	5828 <strlen>
    5068:	100d883a 	mov	r6,r2
    506c:	8009883a 	mov	r4,r16
    5070:	880b883a 	mov	r5,r17
    5074:	0004c740 	call	4c74 <md5_update>
				md5_final(&testObj, hash);
    5078:	8009883a 	mov	r4,r16
    507c:	d80b883a 	mov	r5,sp
    5080:	0004d1c0 	call	4d1c <md5_final>

				if ((hash[15] == 33) && (hash[0] == 33)) {
    5084:	d8c003c3 	ldbu	r3,15(sp)
    5088:	00800844 	movi	r2,33
    508c:	18801b1e 	bne	r3,r2,50fc <findStringEqual33+0x204>
    5090:	d8800003 	ldbu	r2,0(sp)
    5094:	10c0191e 	bne	r2,r3,50fc <findStringEqual33+0x204>
					hitCount = hitCount + 1;
    5098:	d0a04217 	ldw	r2,-32504(gp)
    509c:	10800044 	addi	r2,r2,1
    50a0:	d0a04215 	stw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
    50a4:	00800104 	movi	r2,4
    50a8:	a080141e 	bne	r20,r2,50fc <findStringEqual33+0x204>
						printf("The 4 digits input is: ");
    50ac:	01000034 	movhi	r4,0
    50b0:	21194e04 	addi	r4,r4,25912
    50b4:	00056c80 	call	56c8 <printf>
    50b8:	0021883a 	mov	r16,zero
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
							printf("%c", str[i]);
    50bc:	8c05883a 	add	r2,r17,r16
    50c0:	11000007 	ldb	r4,0(r2)
				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
    50c4:	84000044 	addi	r16,r16,1
							printf("%c", str[i]);
    50c8:	00057600 	call	5760 <putchar>
				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
    50cc:	00800104 	movi	r2,4
    50d0:	80bffa1e 	bne	r16,r2,50bc <findStringEqual33+0x1c4>
							printf("%c", str[i]);
						}
						printf("\n");
    50d4:	01000284 	movi	r4,10
    50d8:	00057600 	call	5760 <putchar>
						printf("MD5 Digest is: ");
    50dc:	01000034 	movhi	r4,0
    50e0:	21195504 	addi	r4,r4,25940
    50e4:	00056c80 	call	56c8 <printf>
						print_hash(hash);
    50e8:	d809883a 	mov	r4,sp
    50ec:	0004e900 	call	4e90 <print_hash>
						printf("----------------\n");
    50f0:	01000034 	movhi	r4,0
    50f4:	21195904 	addi	r4,r4,25956
    50f8:	00058140 	call	5814 <puts>
				}
				findStringEqual33(str, index + 1, len); //recursive call
			}
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
    50fc:	94800044 	addi	r18,r18,1
    5100:	90c03fcc 	andi	r3,r18,255
    5104:	18c0201c 	xori	r3,r3,128
    5108:	18ffe004 	addi	r3,r3,-128
    510c:	00801ec4 	movi	r2,123
    5110:	ad400044 	addi	r21,r21,1
    5114:	18bfc61e 	bne	r3,r2,5030 <findStringEqual33+0x138>
				}
			}
		}
	}

}
    5118:	dfc02117 	ldw	ra,132(sp)
    511c:	dd402017 	ldw	r21,128(sp)
    5120:	dd001f17 	ldw	r20,124(sp)
    5124:	dcc01e17 	ldw	r19,120(sp)
    5128:	dc801d17 	ldw	r18,116(sp)
    512c:	dc401c17 	ldw	r17,112(sp)
    5130:	dc001b17 	ldw	r16,108(sp)
    5134:	dec02204 	addi	sp,sp,136
    5138:	f800283a 	ret

0000513c <main>:

int main() {
    513c:	deffa804 	addi	sp,sp,-352

	printf("Starting exercise3b...\n");
    5140:	01000034 	movhi	r4,0
    5144:	21195e04 	addi	r4,r4,25976
		}
	}

}

int main() {
    5148:	dfc05715 	stw	ra,348(sp)
    514c:	df005615 	stw	fp,344(sp)
    5150:	ddc05515 	stw	r23,340(sp)
    5154:	dd805415 	stw	r22,336(sp)
    5158:	dd405315 	stw	r21,332(sp)
    515c:	dd005215 	stw	r20,328(sp)
    5160:	dcc05115 	stw	r19,324(sp)
    5164:	dc805015 	stw	r18,320(sp)
    5168:	dc404f15 	stw	r17,316(sp)
    516c:	dc004e15 	stw	r16,312(sp)

	printf("Starting exercise3b...\n");
    5170:	00058140 	call	5814 <puts>
	int len = 4;
	char str[len + 1]; //plus one for null character
    5174:	defffe04 	addi	sp,sp,-8
	memset(str, 0, len + 1);
    5178:	d809883a 	mov	r4,sp
    517c:	000b883a 	mov	r5,zero
    5180:	01800144 	movi	r6,5
    5184:	00056a80 	call	56a8 <memset>
	int index = 0;

	findStringEqual33(str, index, len);
    5188:	01800104 	movi	r6,4
    518c:	d809883a 	mov	r4,sp
    5190:	000b883a 	mov	r5,zero
    5194:	0004ef80 	call	4ef8 <findStringEqual33>
	printf("HitCounter is %d\n", hitCount);
    5198:	d1604217 	ldw	r5,-32504(gp)
    519c:	01000034 	movhi	r4,0
    51a0:	21196404 	addi	r4,r4,26000
	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
    51a4:	dcc002c4 	addi	r19,sp,11
	char str[len + 1]; //plus one for null character
	memset(str, 0, len + 1);
	int index = 0;

	findStringEqual33(str, index, len);
	printf("HitCounter is %d\n", hitCount);
    51a8:	00056c80 	call	56c8 <printf>
	printf("Done!\n");
    51ac:	01000034 	movhi	r4,0
    51b0:	21196904 	addi	r4,r4,26020
    51b4:	00058140 	call	5814 <puts>

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
    51b8:	00c00034 	movhi	r3,0
    51bc:	18da1204 	addi	r3,r3,26696
	hitCount = 0;

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
    51c0:	00800034 	movhi	r2,0
    51c4:	10998204 	addi	r2,r2,26120
    51c8:	11c00003 	ldbu	r7,0(r2)
			test2[] = { "a" },
    51cc:	1a000043 	ldbu	r8,1(r3)
    51d0:	18800003 	ldbu	r2,0(r3)
			test3[] = { "abc" },
    51d4:	9809883a 	mov	r4,r19
    51d8:	01400034 	movhi	r5,0
    51dc:	29591904 	addi	r5,r5,25700
    51e0:	01800104 	movi	r6,4
			test4[] = { "message digest" },
    51e4:	dd0005c4 	addi	r20,sp,23
	hitCount = 0;

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
    51e8:	d9c00205 	stb	r7,8(sp)
			test2[] = { "a" },
    51ec:	da000285 	stb	r8,10(sp)
    51f0:	d8800245 	stb	r2,9(sp)
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
    51f4:	dd400d84 	addi	r21,sp,54
	int index = 0;

	findStringEqual33(str, index, len);
	printf("HitCounter is %d\n", hitCount);
	printf("Done!\n");
	hitCount = 0;
    51f8:	d0204215 	stw	zero,-32504(gp)
	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
    51fc:	000567c0 	call	567c <memcpy>
			test4[] = { "message digest" },
    5200:	a009883a 	mov	r4,r20
    5204:	01400034 	movhi	r5,0
    5208:	29591a04 	addi	r5,r5,25704
    520c:	018003c4 	movi	r6,15
    5210:	000567c0 	call	567c <memcpy>
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    5214:	dd801444 	addi	r22,sp,81
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
    5218:	a809883a 	mov	r4,r21
    521c:	01400034 	movhi	r5,0
    5220:	29591e04 	addi	r5,r5,25720
    5224:	018006c4 	movi	r6,27
    5228:	000567c0 	call	567c <memcpy>
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
    522c:	ddc02404 	addi	r23,sp,144
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    5230:	b009883a 	mov	r4,r22
    5234:	01400034 	movhi	r5,0
    5238:	29592504 	addi	r5,r5,25748
    523c:	01800fc4 	movi	r6,63
    5240:	000567c0 	call	567c <memcpy>
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
			test8[] = { "ksxdvba" };
    5244:	df0003c4 	addi	fp,sp,15
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
    5248:	b809883a 	mov	r4,r23
    524c:	01400034 	movhi	r5,0
    5250:	29593504 	addi	r5,r5,25812
    5254:	01801444 	movi	r6,81
    5258:	000567c0 	call	567c <memcpy>
			test8[] = { "ksxdvba" };
    525c:	e009883a 	mov	r4,fp
    5260:	01400034 	movhi	r5,0
    5264:	29594a04 	addi	r5,r5,25896
    5268:	01800204 	movi	r6,8
    526c:	000567c0 	call	567c <memcpy>

	//Initialize a MD5_CTX object or struct
	MD5_CTX testObj;

	// Reset the performance counter
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
    5270:	00a40014 	movui	r2,36864
    5274:	00c00044 	movi	r3,1
    5278:	10c00035 	stwio	r3,0(r2)

	// Start the performance counter
	PERF_START_MEASURING(performance_name);
    527c:	d0a00017 	ldw	r2,-32768(gp)
    5280:	10000135 	stwio	zero,4(r2)

	// Start measuring code section
	PERF_BEGIN(performance_name, 1);
    5284:	d0a00017 	ldw	r2,-32768(gp)
    5288:	10000535 	stwio	zero,20(r2)

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
    528c:	01000034 	movhi	r4,0
    5290:	21196b04 	addi	r4,r4,26028
    5294:	00058140 	call	5814 <puts>
	printf("output is: ");
	md5_init(&testObj);
    5298:	dc403904 	addi	r17,sp,228
	// Start measuring code section
	PERF_BEGIN(performance_name, 1);

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
	printf("output is: ");
    529c:	01000034 	movhi	r4,0
    52a0:	21197004 	addi	r4,r4,26048
    52a4:	00056c80 	call	56c8 <printf>
	md5_init(&testObj);
    52a8:	8809883a 	mov	r4,r17
    52ac:	0004c340 	call	4c34 <md5_init>
	md5_update(&testObj, test1, strlen(test1));
    52b0:	d9000204 	addi	r4,sp,8
    52b4:	00058280 	call	5828 <strlen>
    52b8:	100d883a 	mov	r6,r2
    52bc:	8809883a 	mov	r4,r17
    52c0:	d9400204 	addi	r5,sp,8
	md5_final(&testObj, hash);
    52c4:	dc800984 	addi	r18,sp,38

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
	printf("output is: ");
	md5_init(&testObj);
	md5_update(&testObj, test1, strlen(test1));
    52c8:	0004c740 	call	4c74 <md5_update>
	md5_final(&testObj, hash);
    52cc:	900b883a 	mov	r5,r18
    52d0:	8809883a 	mov	r4,r17
    52d4:	0004d1c0 	call	4d1c <md5_final>
	print_hash(hash);
    52d8:	9009883a 	mov	r4,r18
    52dc:	0004e900 	call	4e90 <print_hash>
	printf("output in decimal is: ");
    52e0:	01000034 	movhi	r4,0
    52e4:	21197304 	addi	r4,r4,26060
    52e8:	00056c80 	call	56c8 <printf>

	// Stop measuring code section
	PERF_END(performance_name, 1);
    52ec:	d0a00017 	ldw	r2,-32768(gp)
    52f0:	10000435 	stwio	zero,16(r2)

	// Start measuring code section
	PERF_BEGIN(performance_name, 2);
    52f4:	d0a00017 	ldw	r2,-32768(gp)
    52f8:	10000935 	stwio	zero,36(r2)
	//MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
	printf("Test 2 input is: a, \n");
    52fc:	01000034 	movhi	r4,0
    5300:	21197904 	addi	r4,r4,26084
    5304:	00058140 	call	5814 <puts>
	printf("output is:  ");
    5308:	01000034 	movhi	r4,0
    530c:	21197f04 	addi	r4,r4,26108
    5310:	00056c80 	call	56c8 <printf>
	md5_init(&testObj);
	md5_update(&testObj, test2, strlen(test2));
    5314:	dc000244 	addi	r16,sp,9
	// Start measuring code section
	PERF_BEGIN(performance_name, 2);
	//MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
	printf("Test 2 input is: a, \n");
	printf("output is:  ");
	md5_init(&testObj);
    5318:	8809883a 	mov	r4,r17
    531c:	0004c340 	call	4c34 <md5_init>
	md5_update(&testObj, test2, strlen(test2));
    5320:	8009883a 	mov	r4,r16
    5324:	00058280 	call	5828 <strlen>
    5328:	100d883a 	mov	r6,r2
    532c:	8809883a 	mov	r4,r17
    5330:	800b883a 	mov	r5,r16
    5334:	0004c740 	call	4c74 <md5_update>
	md5_final(&testObj, hash);
    5338:	8809883a 	mov	r4,r17
    533c:	900b883a 	mov	r5,r18
    5340:	0004d1c0 	call	4d1c <md5_final>
	print_hash(hash);
    5344:	9009883a 	mov	r4,r18
    5348:	0004e900 	call	4e90 <print_hash>

	// Stop measuring code section
	PERF_END(performance_name, 2);
    534c:	d0a00017 	ldw	r2,-32768(gp)
    5350:	10000835 	stwio	zero,32(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 3);
    5354:	d0a00017 	ldw	r2,-32768(gp)
    5358:	10000d35 	stwio	zero,52(r2)
	 //MD5 ("abc") = 900150983cd24fb0d6963f7d28e17f72
	 printf("Test 3 input is: abc, \n");
    535c:	01000034 	movhi	r4,0
    5360:	21198304 	addi	r4,r4,26124
    5364:	00058140 	call	5814 <puts>
	 printf("output is:  ");
    5368:	01000034 	movhi	r4,0
    536c:	21197f04 	addi	r4,r4,26108
    5370:	00056c80 	call	56c8 <printf>
	 md5_init(&testObj);
    5374:	8809883a 	mov	r4,r17
    5378:	0004c340 	call	4c34 <md5_init>
	 md5_update(&testObj, test3, strlen(test3));
    537c:	9809883a 	mov	r4,r19
    5380:	00058280 	call	5828 <strlen>
    5384:	100d883a 	mov	r6,r2
    5388:	8809883a 	mov	r4,r17
    538c:	980b883a 	mov	r5,r19
    5390:	0004c740 	call	4c74 <md5_update>
	 md5_final(&testObj, hash);
    5394:	8809883a 	mov	r4,r17
    5398:	900b883a 	mov	r5,r18
    539c:	0004d1c0 	call	4d1c <md5_final>
	 print_hash(hash);
    53a0:	9009883a 	mov	r4,r18
    53a4:	0004e900 	call	4e90 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 3);
    53a8:	d0a00017 	ldw	r2,-32768(gp)
    53ac:	10000c35 	stwio	zero,48(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 4);
    53b0:	d0a00017 	ldw	r2,-32768(gp)
    53b4:	10001135 	stwio	zero,68(r2)
	 //MD5 ("message digest") = f96b697d7cb7938d525a2f31aaf161d0
	 printf("Test 4 input is: message digest, \n");
    53b8:	01000034 	movhi	r4,0
    53bc:	21198904 	addi	r4,r4,26148
    53c0:	00058140 	call	5814 <puts>
	 printf("output is:  ");
    53c4:	01000034 	movhi	r4,0
    53c8:	21197f04 	addi	r4,r4,26108
    53cc:	00056c80 	call	56c8 <printf>
	 md5_init(&testObj);
    53d0:	8809883a 	mov	r4,r17
    53d4:	0004c340 	call	4c34 <md5_init>
	 md5_update(&testObj, test4, strlen(test4));
    53d8:	a009883a 	mov	r4,r20
    53dc:	00058280 	call	5828 <strlen>
    53e0:	100d883a 	mov	r6,r2
    53e4:	8809883a 	mov	r4,r17
    53e8:	a00b883a 	mov	r5,r20
    53ec:	0004c740 	call	4c74 <md5_update>
	 md5_final(&testObj, hash);
    53f0:	8809883a 	mov	r4,r17
    53f4:	900b883a 	mov	r5,r18
    53f8:	0004d1c0 	call	4d1c <md5_final>
	 print_hash(hash);
    53fc:	9009883a 	mov	r4,r18
    5400:	0004e900 	call	4e90 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 4);
    5404:	d0a00017 	ldw	r2,-32768(gp)
    5408:	10001035 	stwio	zero,64(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 5);
    540c:	d0a00017 	ldw	r2,-32768(gp)
    5410:	10001535 	stwio	zero,84(r2)
	 //MD5 ("abcdefghijklmnopqrstuvwxyz") = c3fcd3d76192e4007dfb496cca67e13b
	 printf("Test 5 input is: abcdefghijklmnopqrstuvwxyz, \n");
    5414:	01000034 	movhi	r4,0
    5418:	21199204 	addi	r4,r4,26184
    541c:	00058140 	call	5814 <puts>
	 printf("output is:  ");
    5420:	01000034 	movhi	r4,0
    5424:	21197f04 	addi	r4,r4,26108
    5428:	00056c80 	call	56c8 <printf>
	 md5_init(&testObj);
    542c:	8809883a 	mov	r4,r17
    5430:	0004c340 	call	4c34 <md5_init>
	 md5_update(&testObj, test5, strlen(test5));
    5434:	a809883a 	mov	r4,r21
    5438:	00058280 	call	5828 <strlen>
    543c:	100d883a 	mov	r6,r2
    5440:	8809883a 	mov	r4,r17
    5444:	a80b883a 	mov	r5,r21
    5448:	0004c740 	call	4c74 <md5_update>
	 md5_final(&testObj, hash);
    544c:	8809883a 	mov	r4,r17
    5450:	900b883a 	mov	r5,r18
    5454:	0004d1c0 	call	4d1c <md5_final>
	 print_hash(hash);
    5458:	9009883a 	mov	r4,r18
    545c:	0004e900 	call	4e90 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 5);
    5460:	d0a00017 	ldw	r2,-32768(gp)
    5464:	10001435 	stwio	zero,80(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 6);
    5468:	d0a00017 	ldw	r2,-32768(gp)
    546c:	10001935 	stwio	zero,100(r2)
	 //MD5 ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") = d174ab98d277d9f5a5611c2c9f419d9f
	 printf(
    5470:	01000034 	movhi	r4,0
    5474:	21199e04 	addi	r4,r4,26232
    5478:	00058140 	call	5814 <puts>
	 "Test 6 input is: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789, \n");
	 printf("output is:  ");
    547c:	01000034 	movhi	r4,0
    5480:	21197f04 	addi	r4,r4,26108
    5484:	00056c80 	call	56c8 <printf>
	 md5_init(&testObj);
    5488:	8809883a 	mov	r4,r17
    548c:	0004c340 	call	4c34 <md5_init>
	 md5_update(&testObj, test6, strlen(test6));
    5490:	b009883a 	mov	r4,r22
    5494:	00058280 	call	5828 <strlen>
    5498:	100d883a 	mov	r6,r2
    549c:	8809883a 	mov	r4,r17
    54a0:	b00b883a 	mov	r5,r22
    54a4:	0004c740 	call	4c74 <md5_update>
	 md5_final(&testObj, hash);
    54a8:	8809883a 	mov	r4,r17
    54ac:	900b883a 	mov	r5,r18
    54b0:	0004d1c0 	call	4d1c <md5_final>
	 print_hash(hash);
    54b4:	9009883a 	mov	r4,r18
    54b8:	0004e900 	call	4e90 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 6);
    54bc:	d0a00017 	ldw	r2,-32768(gp)
    54c0:	10001835 	stwio	zero,96(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 7);
    54c4:	d0a00017 	ldw	r2,-32768(gp)
    54c8:	10001d35 	stwio	zero,116(r2)
	 //MD5 ("12345678901234567890123456789012345678901234567890123456789012345678901234567890") = 57edf4a22be3c955ac49da2e2107b67a
	 printf(
    54cc:	01000034 	movhi	r4,0
    54d0:	2119b304 	addi	r4,r4,26316
    54d4:	00058140 	call	5814 <puts>
	 "Test 7 input is: 12345678901234567890123456789012345678901234567890123456789012345678901234567890, \n");
	 printf("output is:  ");
    54d8:	01000034 	movhi	r4,0
    54dc:	21197f04 	addi	r4,r4,26108
    54e0:	00056c80 	call	56c8 <printf>
	 md5_init(&testObj);
    54e4:	8809883a 	mov	r4,r17
    54e8:	0004c340 	call	4c34 <md5_init>
	 md5_update(&testObj, test7, strlen(test7));
    54ec:	b809883a 	mov	r4,r23
    54f0:	00058280 	call	5828 <strlen>
    54f4:	100d883a 	mov	r6,r2
    54f8:	8809883a 	mov	r4,r17
    54fc:	b80b883a 	mov	r5,r23
    5500:	0004c740 	call	4c74 <md5_update>
	 md5_final(&testObj, hash);
    5504:	8809883a 	mov	r4,r17
    5508:	900b883a 	mov	r5,r18
    550c:	0004d1c0 	call	4d1c <md5_final>
	 print_hash(hash);
    5510:	9009883a 	mov	r4,r18
    5514:	0004e900 	call	4e90 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 7);
    5518:	d0a00017 	ldw	r2,-32768(gp)
    551c:	10001c35 	stwio	zero,112(r2)
	// Stop the performance counter
	PERF_STOP_MEASURING(performance_name);
    5520:	d0a00017 	ldw	r2,-32768(gp)
    5524:	10000035 	stwio	zero,0(r2)
	printf("\n");
    5528:	01000284 	movi	r4,10
    552c:	00057600 	call	5760 <putchar>
	printf("Test 1 Performance Measure: %d\n", perf_get_section_time(performance_name, 1));
    5530:	d1200017 	ldw	r4,-32768(gp)
    5534:	01400044 	movi	r5,1
    5538:	00063dc0 	call	63dc <perf_get_section_time>
    553c:	180d883a 	mov	r6,r3
    5540:	01000034 	movhi	r4,0
    5544:	2119cc04 	addi	r4,r4,26416
    5548:	100b883a 	mov	r5,r2
    554c:	00056c80 	call	56c8 <printf>
	printf("Test 2 Performance Measure: %d\n", perf_get_section_time(performance_name, 2));
    5550:	d1200017 	ldw	r4,-32768(gp)
    5554:	01400084 	movi	r5,2
    5558:	00063dc0 	call	63dc <perf_get_section_time>
    555c:	180d883a 	mov	r6,r3
    5560:	01000034 	movhi	r4,0
    5564:	2119d404 	addi	r4,r4,26448
    5568:	100b883a 	mov	r5,r2
    556c:	00056c80 	call	56c8 <printf>
	printf("Test 3 Performance Measure: %d\n", perf_get_section_time(performance_name, 3));
    5570:	d1200017 	ldw	r4,-32768(gp)
    5574:	014000c4 	movi	r5,3
    5578:	00063dc0 	call	63dc <perf_get_section_time>
    557c:	180d883a 	mov	r6,r3
    5580:	01000034 	movhi	r4,0
    5584:	2119dc04 	addi	r4,r4,26480
    5588:	100b883a 	mov	r5,r2
    558c:	00056c80 	call	56c8 <printf>
	printf("Test 4 Performance Measure: %d\n", perf_get_section_time(performance_name, 4));
    5590:	d1200017 	ldw	r4,-32768(gp)
    5594:	01400104 	movi	r5,4
    5598:	00063dc0 	call	63dc <perf_get_section_time>
    559c:	180d883a 	mov	r6,r3
    55a0:	01000034 	movhi	r4,0
    55a4:	2119e404 	addi	r4,r4,26512
    55a8:	100b883a 	mov	r5,r2
    55ac:	00056c80 	call	56c8 <printf>
	printf("Test 5 Performance Measure: %d\n", perf_get_section_time(performance_name, 5));
    55b0:	d1200017 	ldw	r4,-32768(gp)
    55b4:	01400144 	movi	r5,5
    55b8:	00063dc0 	call	63dc <perf_get_section_time>
    55bc:	180d883a 	mov	r6,r3
    55c0:	01000034 	movhi	r4,0
    55c4:	2119ec04 	addi	r4,r4,26544
    55c8:	100b883a 	mov	r5,r2
    55cc:	00056c80 	call	56c8 <printf>
	printf("Test 6 Performance Measure: %d\n", perf_get_section_time(performance_name, 6));
    55d0:	d1200017 	ldw	r4,-32768(gp)
    55d4:	01400184 	movi	r5,6
    55d8:	00063dc0 	call	63dc <perf_get_section_time>
    55dc:	180d883a 	mov	r6,r3
    55e0:	01000034 	movhi	r4,0
    55e4:	2119f404 	addi	r4,r4,26576
    55e8:	100b883a 	mov	r5,r2
    55ec:	00056c80 	call	56c8 <printf>
	printf("Test 7 Performance Measure: %d\n", perf_get_section_time(performance_name, 7));
    55f0:	d1200017 	ldw	r4,-32768(gp)
    55f4:	014001c4 	movi	r5,7
    55f8:	00063dc0 	call	63dc <perf_get_section_time>
    55fc:	180d883a 	mov	r6,r3
    5600:	100b883a 	mov	r5,r2
    5604:	01000034 	movhi	r4,0
    5608:	2119fc04 	addi	r4,r4,26608
    560c:	00056c80 	call	56c8 <printf>


	printf("Test 8, \n");
    5610:	01000034 	movhi	r4,0
    5614:	211a0404 	addi	r4,r4,26640
    5618:	00058140 	call	5814 <puts>
	printf("Input is %s\n: ", test8);
    561c:	e00b883a 	mov	r5,fp
    5620:	01000034 	movhi	r4,0
    5624:	211a0704 	addi	r4,r4,26652
    5628:	00056c80 	call	56c8 <printf>
	printf("output is:  ");
    562c:	01000034 	movhi	r4,0
    5630:	21197f04 	addi	r4,r4,26108
    5634:	00056c80 	call	56c8 <printf>
	md5_init(&testObj);
    5638:	8809883a 	mov	r4,r17
    563c:	0004c340 	call	4c34 <md5_init>
	md5_update(&testObj, test8, strlen(test8));
    5640:	e009883a 	mov	r4,fp
    5644:	00058280 	call	5828 <strlen>
    5648:	100d883a 	mov	r6,r2
    564c:	8809883a 	mov	r4,r17
    5650:	e00b883a 	mov	r5,fp
    5654:	0004c740 	call	4c74 <md5_update>
	md5_final(&testObj, hash);
    5658:	8809883a 	mov	r4,r17
    565c:	900b883a 	mov	r5,r18
    5660:	0004d1c0 	call	4d1c <md5_final>
	print_hash(hash);
    5664:	9009883a 	mov	r4,r18
    5668:	0004e900 	call	4e90 <print_hash>

	printf("Finished computing MD5...\n");
    566c:	01000034 	movhi	r4,0
    5670:	211a0b04 	addi	r4,r4,26668
    5674:	00058140 	call	5814 <puts>
    5678:	003fff06 	br	5678 <main+0x53c>

0000567c <memcpy>:
    567c:	2011883a 	mov	r8,r4
    5680:	30000726 	beq	r6,zero,56a0 <memcpy+0x24>
    5684:	000f883a 	mov	r7,zero
    5688:	29c5883a 	add	r2,r5,r7
    568c:	11000003 	ldbu	r4,0(r2)
    5690:	41c7883a 	add	r3,r8,r7
    5694:	39c00044 	addi	r7,r7,1
    5698:	19000005 	stb	r4,0(r3)
    569c:	39bffa1e 	bne	r7,r6,5688 <memcpy+0xc>
    56a0:	4005883a 	mov	r2,r8
    56a4:	f800283a 	ret

000056a8 <memset>:
    56a8:	30000526 	beq	r6,zero,56c0 <memset+0x18>
    56ac:	310d883a 	add	r6,r6,r4
    56b0:	2005883a 	mov	r2,r4
    56b4:	11400005 	stb	r5,0(r2)
    56b8:	10800044 	addi	r2,r2,1
    56bc:	11bffd1e 	bne	r2,r6,56b4 <memset+0xc>
    56c0:	2005883a 	mov	r2,r4
    56c4:	f800283a 	ret

000056c8 <printf>:
    56c8:	defffb04 	addi	sp,sp,-20
    56cc:	dfc00115 	stw	ra,4(sp)
    56d0:	d9400215 	stw	r5,8(sp)
    56d4:	d9800315 	stw	r6,12(sp)
    56d8:	d9c00415 	stw	r7,16(sp)
    56dc:	00800034 	movhi	r2,0
    56e0:	109a4c04 	addi	r2,r2,26928
    56e4:	11400017 	ldw	r5,0(r2)
    56e8:	d8800204 	addi	r2,sp,8
    56ec:	d8800015 	stw	r2,0(sp)
    56f0:	29c00217 	ldw	r7,8(r5)
    56f4:	100d883a 	mov	r6,r2
    56f8:	00800034 	movhi	r2,0
    56fc:	1097b004 	addi	r2,r2,24256
    5700:	200b883a 	mov	r5,r4
    5704:	38800115 	stw	r2,4(r7)
    5708:	3809883a 	mov	r4,r7
    570c:	0005e9c0 	call	5e9c <__vfprintf_internal>
    5710:	dfc00117 	ldw	ra,4(sp)
    5714:	dec00504 	addi	sp,sp,20
    5718:	f800283a 	ret

0000571c <_printf_r>:
    571c:	defffc04 	addi	sp,sp,-16
    5720:	dfc00115 	stw	ra,4(sp)
    5724:	d9800215 	stw	r6,8(sp)
    5728:	d9c00315 	stw	r7,12(sp)
    572c:	22000217 	ldw	r8,8(r4)
    5730:	d8800204 	addi	r2,sp,8
    5734:	d8800015 	stw	r2,0(sp)
    5738:	100f883a 	mov	r7,r2
    573c:	00800034 	movhi	r2,0
    5740:	1097b004 	addi	r2,r2,24256
    5744:	280d883a 	mov	r6,r5
    5748:	40800115 	stw	r2,4(r8)
    574c:	400b883a 	mov	r5,r8
    5750:	00058c80 	call	58c8 <___vfprintf_internal_r>
    5754:	dfc00117 	ldw	ra,4(sp)
    5758:	dec00404 	addi	sp,sp,16
    575c:	f800283a 	ret

00005760 <putchar>:
    5760:	00800034 	movhi	r2,0
    5764:	109a4c04 	addi	r2,r2,26928
    5768:	11800017 	ldw	r6,0(r2)
    576c:	200b883a 	mov	r5,r4
    5770:	3009883a 	mov	r4,r6
    5774:	31800217 	ldw	r6,8(r6)
    5778:	0005fec1 	jmpi	5fec <_putc_r>

0000577c <_putchar_r>:
    577c:	21800217 	ldw	r6,8(r4)
    5780:	0005fec1 	jmpi	5fec <_putc_r>

00005784 <_puts_r>:
    5784:	defffd04 	addi	sp,sp,-12
    5788:	dc000015 	stw	r16,0(sp)
    578c:	2021883a 	mov	r16,r4
    5790:	2809883a 	mov	r4,r5
    5794:	dfc00215 	stw	ra,8(sp)
    5798:	dc400115 	stw	r17,4(sp)
    579c:	2823883a 	mov	r17,r5
    57a0:	00058280 	call	5828 <strlen>
    57a4:	80c00217 	ldw	r3,8(r16)
    57a8:	02000034 	movhi	r8,0
    57ac:	4217b004 	addi	r8,r8,24256
    57b0:	880d883a 	mov	r6,r17
    57b4:	100f883a 	mov	r7,r2
    57b8:	8009883a 	mov	r4,r16
    57bc:	180b883a 	mov	r5,r3
    57c0:	1a000115 	stw	r8,4(r3)
    57c4:	403ee83a 	callr	r8
    57c8:	047fffc4 	movi	r17,-1
    57cc:	8009883a 	mov	r4,r16
    57d0:	01800034 	movhi	r6,0
    57d4:	31996804 	addi	r6,r6,26016
    57d8:	01c00044 	movi	r7,1
    57dc:	1440071e 	bne	r2,r17,57fc <_puts_r+0x78>
    57e0:	00ffffc4 	movi	r3,-1
    57e4:	1805883a 	mov	r2,r3
    57e8:	dfc00217 	ldw	ra,8(sp)
    57ec:	dc400117 	ldw	r17,4(sp)
    57f0:	dc000017 	ldw	r16,0(sp)
    57f4:	dec00304 	addi	sp,sp,12
    57f8:	f800283a 	ret
    57fc:	81400217 	ldw	r5,8(r16)
    5800:	28c00117 	ldw	r3,4(r5)
    5804:	183ee83a 	callr	r3
    5808:	0007883a 	mov	r3,zero
    580c:	147ff51e 	bne	r2,r17,57e4 <_puts_r+0x60>
    5810:	003ff306 	br	57e0 <_puts_r+0x5c>

00005814 <puts>:
    5814:	00800034 	movhi	r2,0
    5818:	109a4c04 	addi	r2,r2,26928
    581c:	200b883a 	mov	r5,r4
    5820:	11000017 	ldw	r4,0(r2)
    5824:	00057841 	jmpi	5784 <_puts_r>

00005828 <strlen>:
    5828:	20800007 	ldb	r2,0(r4)
    582c:	10000526 	beq	r2,zero,5844 <strlen+0x1c>
    5830:	2007883a 	mov	r3,r4
    5834:	18c00044 	addi	r3,r3,1
    5838:	18800007 	ldb	r2,0(r3)
    583c:	103ffd1e 	bne	r2,zero,5834 <strlen+0xc>
    5840:	1905c83a 	sub	r2,r3,r4
    5844:	f800283a 	ret

00005848 <print_repeat>:
    5848:	defffb04 	addi	sp,sp,-20
    584c:	dc800315 	stw	r18,12(sp)
    5850:	dc400215 	stw	r17,8(sp)
    5854:	dc000115 	stw	r16,4(sp)
    5858:	dfc00415 	stw	ra,16(sp)
    585c:	2025883a 	mov	r18,r4
    5860:	2823883a 	mov	r17,r5
    5864:	3821883a 	mov	r16,r7
    5868:	d9800005 	stb	r6,0(sp)
    586c:	9009883a 	mov	r4,r18
    5870:	880b883a 	mov	r5,r17
    5874:	d80d883a 	mov	r6,sp
    5878:	01c00044 	movi	r7,1
    587c:	04000b0e 	bge	zero,r16,58ac <print_repeat+0x64>
    5880:	88c00117 	ldw	r3,4(r17)
    5884:	843fffc4 	addi	r16,r16,-1
    5888:	183ee83a 	callr	r3
    588c:	103ff726 	beq	r2,zero,586c <print_repeat+0x24>
    5890:	00bfffc4 	movi	r2,-1
    5894:	dfc00417 	ldw	ra,16(sp)
    5898:	dc800317 	ldw	r18,12(sp)
    589c:	dc400217 	ldw	r17,8(sp)
    58a0:	dc000117 	ldw	r16,4(sp)
    58a4:	dec00504 	addi	sp,sp,20
    58a8:	f800283a 	ret
    58ac:	0005883a 	mov	r2,zero
    58b0:	dfc00417 	ldw	ra,16(sp)
    58b4:	dc800317 	ldw	r18,12(sp)
    58b8:	dc400217 	ldw	r17,8(sp)
    58bc:	dc000117 	ldw	r16,4(sp)
    58c0:	dec00504 	addi	sp,sp,20
    58c4:	f800283a 	ret

000058c8 <___vfprintf_internal_r>:
    58c8:	deffec04 	addi	sp,sp,-80
    58cc:	ddc01115 	stw	r23,68(sp)
    58d0:	dd801015 	stw	r22,64(sp)
    58d4:	dcc00d15 	stw	r19,52(sp)
    58d8:	dc800c15 	stw	r18,48(sp)
    58dc:	dc000a15 	stw	r16,40(sp)
    58e0:	dfc01315 	stw	ra,76(sp)
    58e4:	df001215 	stw	fp,72(sp)
    58e8:	dd400f15 	stw	r21,60(sp)
    58ec:	dd000e15 	stw	r20,56(sp)
    58f0:	dc400b15 	stw	r17,44(sp)
    58f4:	d9000915 	stw	r4,36(sp)
    58f8:	282d883a 	mov	r22,r5
    58fc:	3825883a 	mov	r18,r7
    5900:	3027883a 	mov	r19,r6
    5904:	0021883a 	mov	r16,zero
    5908:	d8000815 	stw	zero,32(sp)
    590c:	d8000715 	stw	zero,28(sp)
    5910:	002f883a 	mov	r23,zero
    5914:	d8000615 	stw	zero,24(sp)
    5918:	d8000515 	stw	zero,20(sp)
    591c:	d8000415 	stw	zero,16(sp)
    5920:	d8000315 	stw	zero,12(sp)
    5924:	d8000215 	stw	zero,8(sp)
    5928:	99400003 	ldbu	r5,0(r19)
    592c:	01c00044 	movi	r7,1
    5930:	9cc00044 	addi	r19,r19,1
    5934:	29003fcc 	andi	r4,r5,255
    5938:	2100201c 	xori	r4,r4,128
    593c:	213fe004 	addi	r4,r4,-128
    5940:	20001626 	beq	r4,zero,599c <___vfprintf_internal_r+0xd4>
    5944:	81c02226 	beq	r16,r7,59d0 <___vfprintf_internal_r+0x108>
    5948:	00800084 	movi	r2,2
    594c:	80802526 	beq	r16,r2,59e4 <___vfprintf_internal_r+0x11c>
    5950:	803ff51e 	bne	r16,zero,5928 <___vfprintf_internal_r+0x60>
    5954:	00800944 	movi	r2,37
    5958:	20811e1e 	bne	r4,r2,5dd4 <___vfprintf_internal_r+0x50c>
    595c:	05ffffc4 	movi	r23,-1
    5960:	00800284 	movi	r2,10
    5964:	d9c00415 	stw	r7,16(sp)
    5968:	d8000815 	stw	zero,32(sp)
    596c:	d8000715 	stw	zero,28(sp)
    5970:	ddc00615 	stw	r23,24(sp)
    5974:	d8800515 	stw	r2,20(sp)
    5978:	d8000315 	stw	zero,12(sp)
    597c:	99400003 	ldbu	r5,0(r19)
    5980:	3821883a 	mov	r16,r7
    5984:	9cc00044 	addi	r19,r19,1
    5988:	29003fcc 	andi	r4,r5,255
    598c:	2100201c 	xori	r4,r4,128
    5990:	213fe004 	addi	r4,r4,-128
    5994:	01c00044 	movi	r7,1
    5998:	203fea1e 	bne	r4,zero,5944 <___vfprintf_internal_r+0x7c>
    599c:	d8800217 	ldw	r2,8(sp)
    59a0:	dfc01317 	ldw	ra,76(sp)
    59a4:	df001217 	ldw	fp,72(sp)
    59a8:	ddc01117 	ldw	r23,68(sp)
    59ac:	dd801017 	ldw	r22,64(sp)
    59b0:	dd400f17 	ldw	r21,60(sp)
    59b4:	dd000e17 	ldw	r20,56(sp)
    59b8:	dcc00d17 	ldw	r19,52(sp)
    59bc:	dc800c17 	ldw	r18,48(sp)
    59c0:	dc400b17 	ldw	r17,44(sp)
    59c4:	dc000a17 	ldw	r16,40(sp)
    59c8:	dec01404 	addi	sp,sp,80
    59cc:	f800283a 	ret
    59d0:	00800c04 	movi	r2,48
    59d4:	20805d26 	beq	r4,r2,5b4c <___vfprintf_internal_r+0x284>
    59d8:	00800944 	movi	r2,37
    59dc:	20810a26 	beq	r4,r2,5e08 <___vfprintf_internal_r+0x540>
    59e0:	04000084 	movi	r16,2
    59e4:	00800b84 	movi	r2,46
    59e8:	20805626 	beq	r4,r2,5b44 <___vfprintf_internal_r+0x27c>
    59ec:	29bff404 	addi	r6,r5,-48
    59f0:	30c03fcc 	andi	r3,r6,255
    59f4:	00800244 	movi	r2,9
    59f8:	10c00b36 	bltu	r2,r3,5a28 <___vfprintf_internal_r+0x160>
    59fc:	d8c00617 	ldw	r3,24(sp)
    5a00:	3005883a 	mov	r2,r6
    5a04:	18005716 	blt	r3,zero,5b64 <___vfprintf_internal_r+0x29c>
    5a08:	d8800617 	ldw	r2,24(sp)
    5a0c:	10c002a4 	muli	r3,r2,10
    5a10:	30803fcc 	andi	r2,r6,255
    5a14:	1080201c 	xori	r2,r2,128
    5a18:	10bfe004 	addi	r2,r2,-128
    5a1c:	1887883a 	add	r3,r3,r2
    5a20:	d8c00615 	stw	r3,24(sp)
    5a24:	003fc006 	br	5928 <___vfprintf_internal_r+0x60>
    5a28:	00801b04 	movi	r2,108
    5a2c:	20804a26 	beq	r4,r2,5b58 <___vfprintf_internal_r+0x290>
    5a30:	28bfea04 	addi	r2,r5,-88
    5a34:	10803fcc 	andi	r2,r2,255
    5a38:	00c00804 	movi	r3,32
    5a3c:	18803f36 	bltu	r3,r2,5b3c <___vfprintf_internal_r+0x274>
    5a40:	1085883a 	add	r2,r2,r2
    5a44:	1085883a 	add	r2,r2,r2
    5a48:	00c00034 	movhi	r3,0
    5a4c:	18d69704 	addi	r3,r3,23132
    5a50:	10c5883a 	add	r2,r2,r3
    5a54:	11000017 	ldw	r4,0(r2)
    5a58:	2000683a 	jmp	r4
    5a5c:	00005b80 	call	5b8 <__alt_mem_onchip_memory2_0-0x3a48>
    5a60:	00005b3c 	xorhi	zero,zero,364
    5a64:	00005b3c 	xorhi	zero,zero,364
    5a68:	00005b3c 	xorhi	zero,zero,364
    5a6c:	00005b3c 	xorhi	zero,zero,364
    5a70:	00005b3c 	xorhi	zero,zero,364
    5a74:	00005b3c 	xorhi	zero,zero,364
    5a78:	00005b3c 	xorhi	zero,zero,364
    5a7c:	00005b3c 	xorhi	zero,zero,364
    5a80:	00005b3c 	xorhi	zero,zero,364
    5a84:	00005b3c 	xorhi	zero,zero,364
    5a88:	00005cd8 	cmpnei	zero,zero,371
    5a8c:	00005d2c 	andhi	zero,zero,372
    5a90:	00005b3c 	xorhi	zero,zero,364
    5a94:	00005b3c 	xorhi	zero,zero,364
    5a98:	00005b3c 	xorhi	zero,zero,364
    5a9c:	00005b3c 	xorhi	zero,zero,364
    5aa0:	00005d2c 	andhi	zero,zero,372
    5aa4:	00005b3c 	xorhi	zero,zero,364
    5aa8:	00005b3c 	xorhi	zero,zero,364
    5aac:	00005b3c 	xorhi	zero,zero,364
    5ab0:	00005b3c 	xorhi	zero,zero,364
    5ab4:	00005b3c 	xorhi	zero,zero,364
    5ab8:	00005d78 	rdprs	zero,zero,373
    5abc:	00005b3c 	xorhi	zero,zero,364
    5ac0:	00005b3c 	xorhi	zero,zero,364
    5ac4:	00005b3c 	xorhi	zero,zero,364
    5ac8:	00005ae0 	cmpeqi	zero,zero,363
    5acc:	00005b3c 	xorhi	zero,zero,364
    5ad0:	00005d8c 	andi	zero,zero,374
    5ad4:	00005b3c 	xorhi	zero,zero,364
    5ad8:	00005b3c 	xorhi	zero,zero,364
    5adc:	00005d98 	cmpnei	zero,zero,374
    5ae0:	94400017 	ldw	r17,0(r18)
    5ae4:	8809883a 	mov	r4,r17
    5ae8:	00058280 	call	5828 <strlen>
    5aec:	d9000917 	ldw	r4,36(sp)
    5af0:	b8a9c83a 	sub	r20,r23,r2
    5af4:	b00b883a 	mov	r5,r22
    5af8:	01800804 	movi	r6,32
    5afc:	a00f883a 	mov	r7,r20
    5b00:	1021883a 	mov	r16,r2
    5b04:	00058480 	call	5848 <print_repeat>
    5b08:	1000af1e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5b0c:	b0c00117 	ldw	r3,4(r22)
    5b10:	d9000917 	ldw	r4,36(sp)
    5b14:	880d883a 	mov	r6,r17
    5b18:	b00b883a 	mov	r5,r22
    5b1c:	800f883a 	mov	r7,r16
    5b20:	183ee83a 	callr	r3
    5b24:	1000a81e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5b28:	d8c00217 	ldw	r3,8(sp)
    5b2c:	94800104 	addi	r18,r18,4
    5b30:	1c05883a 	add	r2,r3,r16
    5b34:	a0a9883a 	add	r20,r20,r2
    5b38:	dd000215 	stw	r20,8(sp)
    5b3c:	0021883a 	mov	r16,zero
    5b40:	003f7906 	br	5928 <___vfprintf_internal_r+0x60>
    5b44:	d8000615 	stw	zero,24(sp)
    5b48:	003f7706 	br	5928 <___vfprintf_internal_r+0x60>
    5b4c:	04000084 	movi	r16,2
    5b50:	d9c00815 	stw	r7,32(sp)
    5b54:	003f7406 	br	5928 <___vfprintf_internal_r+0x60>
    5b58:	00c00044 	movi	r3,1
    5b5c:	d8c00715 	stw	r3,28(sp)
    5b60:	003f7106 	br	5928 <___vfprintf_internal_r+0x60>
    5b64:	b800a616 	blt	r23,zero,5e00 <___vfprintf_internal_r+0x538>
    5b68:	b9c002a4 	muli	r7,r23,10
    5b6c:	10803fcc 	andi	r2,r2,255
    5b70:	1080201c 	xori	r2,r2,128
    5b74:	10bfe004 	addi	r2,r2,-128
    5b78:	38af883a 	add	r23,r7,r2
    5b7c:	003f6a06 	br	5928 <___vfprintf_internal_r+0x60>
    5b80:	00800404 	movi	r2,16
    5b84:	00c00044 	movi	r3,1
    5b88:	d8800515 	stw	r2,20(sp)
    5b8c:	d8000415 	stw	zero,16(sp)
    5b90:	d8c00315 	stw	r3,12(sp)
    5b94:	102b883a 	mov	r21,r2
    5b98:	d8c00717 	ldw	r3,28(sp)
    5b9c:	1805003a 	cmpeq	r2,r3,zero
    5ba0:	1000661e 	bne	r2,zero,5d3c <___vfprintf_internal_r+0x474>
    5ba4:	d8800417 	ldw	r2,16(sp)
    5ba8:	1000661e 	bne	r2,zero,5d44 <___vfprintf_internal_r+0x47c>
    5bac:	94400017 	ldw	r17,0(r18)
    5bb0:	94800104 	addi	r18,r18,4
    5bb4:	dc800115 	stw	r18,4(sp)
    5bb8:	8809883a 	mov	r4,r17
    5bbc:	a80b883a 	mov	r5,r21
    5bc0:	0021883a 	mov	r16,zero
    5bc4:	00062140 	call	6214 <__udivsi3>
    5bc8:	10006826 	beq	r2,zero,5d6c <___vfprintf_internal_r+0x4a4>
    5bcc:	07000044 	movi	fp,1
    5bd0:	e029883a 	mov	r20,fp
    5bd4:	1009883a 	mov	r4,r2
    5bd8:	a80b883a 	mov	r5,r21
    5bdc:	00062140 	call	6214 <__udivsi3>
    5be0:	e7000044 	addi	fp,fp,1
    5be4:	a569383a 	mul	r20,r20,r21
    5be8:	103ffa1e 	bne	r2,zero,5bd4 <___vfprintf_internal_r+0x30c>
    5bec:	d8800817 	ldw	r2,32(sp)
    5bf0:	bf2fc83a 	sub	r23,r23,fp
    5bf4:	10009126 	beq	r2,zero,5e3c <___vfprintf_internal_r+0x574>
    5bf8:	8005003a 	cmpeq	r2,r16,zero
    5bfc:	10000d1e 	bne	r2,zero,5c34 <___vfprintf_internal_r+0x36c>
    5c00:	b0c00117 	ldw	r3,4(r22)
    5c04:	d9000917 	ldw	r4,36(sp)
    5c08:	00800b44 	movi	r2,45
    5c0c:	d8800005 	stb	r2,0(sp)
    5c10:	b00b883a 	mov	r5,r22
    5c14:	d80d883a 	mov	r6,sp
    5c18:	01c00044 	movi	r7,1
    5c1c:	183ee83a 	callr	r3
    5c20:	1000691e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5c24:	d8c00217 	ldw	r3,8(sp)
    5c28:	bdffffc4 	addi	r23,r23,-1
    5c2c:	18c00044 	addi	r3,r3,1
    5c30:	d8c00215 	stw	r3,8(sp)
    5c34:	d9000917 	ldw	r4,36(sp)
    5c38:	b00b883a 	mov	r5,r22
    5c3c:	01800c04 	movi	r6,48
    5c40:	b80f883a 	mov	r7,r23
    5c44:	00058480 	call	5848 <print_repeat>
    5c48:	10005f1e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5c4c:	d8800217 	ldw	r2,8(sp)
    5c50:	b8a5883a 	add	r18,r23,r2
    5c54:	a0005726 	beq	r20,zero,5db4 <___vfprintf_internal_r+0x4ec>
    5c58:	8809883a 	mov	r4,r17
    5c5c:	a00b883a 	mov	r5,r20
    5c60:	00062140 	call	6214 <__udivsi3>
    5c64:	11000c04 	addi	r4,r2,48
    5c68:	20c03fcc 	andi	r3,r4,255
    5c6c:	00800e44 	movi	r2,57
    5c70:	10c0052e 	bgeu	r2,r3,5c88 <___vfprintf_internal_r+0x3c0>
    5c74:	d8c00317 	ldw	r3,12(sp)
    5c78:	1805003a 	cmpeq	r2,r3,zero
    5c7c:	10004b1e 	bne	r2,zero,5dac <___vfprintf_internal_r+0x4e4>
    5c80:	008001c4 	movi	r2,7
    5c84:	2089883a 	add	r4,r4,r2
    5c88:	b0c00117 	ldw	r3,4(r22)
    5c8c:	d9000005 	stb	r4,0(sp)
    5c90:	d9000917 	ldw	r4,36(sp)
    5c94:	b00b883a 	mov	r5,r22
    5c98:	d80d883a 	mov	r6,sp
    5c9c:	01c00044 	movi	r7,1
    5ca0:	183ee83a 	callr	r3
    5ca4:	1000481e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5ca8:	a009883a 	mov	r4,r20
    5cac:	a80b883a 	mov	r5,r21
    5cb0:	00062140 	call	6214 <__udivsi3>
    5cb4:	1021883a 	mov	r16,r2
    5cb8:	94800044 	addi	r18,r18,1
    5cbc:	10003d26 	beq	r2,zero,5db4 <___vfprintf_internal_r+0x4ec>
    5cc0:	a00b883a 	mov	r5,r20
    5cc4:	8809883a 	mov	r4,r17
    5cc8:	000621c0 	call	621c <__umodsi3>
    5ccc:	1023883a 	mov	r17,r2
    5cd0:	8029883a 	mov	r20,r16
    5cd4:	003fe006 	br	5c58 <___vfprintf_internal_r+0x390>
    5cd8:	d9000917 	ldw	r4,36(sp)
    5cdc:	b00b883a 	mov	r5,r22
    5ce0:	01800804 	movi	r6,32
    5ce4:	b9ffffc4 	addi	r7,r23,-1
    5ce8:	00058480 	call	5848 <print_repeat>
    5cec:	1000361e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5cf0:	90800017 	ldw	r2,0(r18)
    5cf4:	b0c00117 	ldw	r3,4(r22)
    5cf8:	d9000917 	ldw	r4,36(sp)
    5cfc:	d8800005 	stb	r2,0(sp)
    5d00:	b00b883a 	mov	r5,r22
    5d04:	d80d883a 	mov	r6,sp
    5d08:	01c00044 	movi	r7,1
    5d0c:	183ee83a 	callr	r3
    5d10:	10002d1e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5d14:	d8800217 	ldw	r2,8(sp)
    5d18:	94800104 	addi	r18,r18,4
    5d1c:	0021883a 	mov	r16,zero
    5d20:	15c5883a 	add	r2,r2,r23
    5d24:	d8800215 	stw	r2,8(sp)
    5d28:	003eff06 	br	5928 <___vfprintf_internal_r+0x60>
    5d2c:	d8c00717 	ldw	r3,28(sp)
    5d30:	dd400517 	ldw	r21,20(sp)
    5d34:	1805003a 	cmpeq	r2,r3,zero
    5d38:	103f9a26 	beq	r2,zero,5ba4 <___vfprintf_internal_r+0x2dc>
    5d3c:	d8c00417 	ldw	r3,16(sp)
    5d40:	183f9a26 	beq	r3,zero,5bac <___vfprintf_internal_r+0x2e4>
    5d44:	94400017 	ldw	r17,0(r18)
    5d48:	94800104 	addi	r18,r18,4
    5d4c:	dc800115 	stw	r18,4(sp)
    5d50:	883f990e 	bge	r17,zero,5bb8 <___vfprintf_internal_r+0x2f0>
    5d54:	0463c83a 	sub	r17,zero,r17
    5d58:	8809883a 	mov	r4,r17
    5d5c:	a80b883a 	mov	r5,r21
    5d60:	04000044 	movi	r16,1
    5d64:	00062140 	call	6214 <__udivsi3>
    5d68:	103f981e 	bne	r2,zero,5bcc <___vfprintf_internal_r+0x304>
    5d6c:	07000044 	movi	fp,1
    5d70:	e029883a 	mov	r20,fp
    5d74:	003f9d06 	br	5bec <___vfprintf_internal_r+0x324>
    5d78:	00800204 	movi	r2,8
    5d7c:	102b883a 	mov	r21,r2
    5d80:	d8800515 	stw	r2,20(sp)
    5d84:	d8000415 	stw	zero,16(sp)
    5d88:	003f8306 	br	5b98 <___vfprintf_internal_r+0x2d0>
    5d8c:	dd400517 	ldw	r21,20(sp)
    5d90:	d8000415 	stw	zero,16(sp)
    5d94:	003f8006 	br	5b98 <___vfprintf_internal_r+0x2d0>
    5d98:	00c00404 	movi	r3,16
    5d9c:	182b883a 	mov	r21,r3
    5da0:	d8c00515 	stw	r3,20(sp)
    5da4:	d8000415 	stw	zero,16(sp)
    5da8:	003f7b06 	br	5b98 <___vfprintf_internal_r+0x2d0>
    5dac:	008009c4 	movi	r2,39
    5db0:	003fb406 	br	5c84 <___vfprintf_internal_r+0x3bc>
    5db4:	9725883a 	add	r18,r18,fp
    5db8:	dc800215 	stw	r18,8(sp)
    5dbc:	dc800117 	ldw	r18,4(sp)
    5dc0:	0021883a 	mov	r16,zero
    5dc4:	003ed806 	br	5928 <___vfprintf_internal_r+0x60>
    5dc8:	00bfffc4 	movi	r2,-1
    5dcc:	d8800215 	stw	r2,8(sp)
    5dd0:	003ef206 	br	599c <___vfprintf_internal_r+0xd4>
    5dd4:	b0c00117 	ldw	r3,4(r22)
    5dd8:	d9000917 	ldw	r4,36(sp)
    5ddc:	d9400005 	stb	r5,0(sp)
    5de0:	d80d883a 	mov	r6,sp
    5de4:	b00b883a 	mov	r5,r22
    5de8:	183ee83a 	callr	r3
    5dec:	103ff61e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5df0:	d8c00217 	ldw	r3,8(sp)
    5df4:	18c00044 	addi	r3,r3,1
    5df8:	d8c00215 	stw	r3,8(sp)
    5dfc:	003eca06 	br	5928 <___vfprintf_internal_r+0x60>
    5e00:	000f883a 	mov	r7,zero
    5e04:	003f5906 	br	5b6c <___vfprintf_internal_r+0x2a4>
    5e08:	b0c00117 	ldw	r3,4(r22)
    5e0c:	d9000005 	stb	r4,0(sp)
    5e10:	d9000917 	ldw	r4,36(sp)
    5e14:	b00b883a 	mov	r5,r22
    5e18:	d80d883a 	mov	r6,sp
    5e1c:	800f883a 	mov	r7,r16
    5e20:	183ee83a 	callr	r3
    5e24:	103fe81e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5e28:	d8800217 	ldw	r2,8(sp)
    5e2c:	1405883a 	add	r2,r2,r16
    5e30:	0021883a 	mov	r16,zero
    5e34:	d8800215 	stw	r2,8(sp)
    5e38:	003ebb06 	br	5928 <___vfprintf_internal_r+0x60>
    5e3c:	8021003a 	cmpeq	r16,r16,zero
    5e40:	80001426 	beq	r16,zero,5e94 <___vfprintf_internal_r+0x5cc>
    5e44:	d9000917 	ldw	r4,36(sp)
    5e48:	b00b883a 	mov	r5,r22
    5e4c:	01800804 	movi	r6,32
    5e50:	b80f883a 	mov	r7,r23
    5e54:	00058480 	call	5848 <print_repeat>
    5e58:	103fdb1e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5e5c:	d8c00217 	ldw	r3,8(sp)
    5e60:	b8e5883a 	add	r18,r23,r3
    5e64:	803f7b1e 	bne	r16,zero,5c54 <___vfprintf_internal_r+0x38c>
    5e68:	b0c00117 	ldw	r3,4(r22)
    5e6c:	d9000917 	ldw	r4,36(sp)
    5e70:	00800b44 	movi	r2,45
    5e74:	d8800005 	stb	r2,0(sp)
    5e78:	b00b883a 	mov	r5,r22
    5e7c:	d80d883a 	mov	r6,sp
    5e80:	01c00044 	movi	r7,1
    5e84:	183ee83a 	callr	r3
    5e88:	103fcf1e 	bne	r2,zero,5dc8 <___vfprintf_internal_r+0x500>
    5e8c:	94800044 	addi	r18,r18,1
    5e90:	003f7006 	br	5c54 <___vfprintf_internal_r+0x38c>
    5e94:	bdffffc4 	addi	r23,r23,-1
    5e98:	003fea06 	br	5e44 <___vfprintf_internal_r+0x57c>

00005e9c <__vfprintf_internal>:
    5e9c:	00800034 	movhi	r2,0
    5ea0:	109a4c04 	addi	r2,r2,26928
    5ea4:	2013883a 	mov	r9,r4
    5ea8:	11000017 	ldw	r4,0(r2)
    5eac:	2805883a 	mov	r2,r5
    5eb0:	300f883a 	mov	r7,r6
    5eb4:	480b883a 	mov	r5,r9
    5eb8:	100d883a 	mov	r6,r2
    5ebc:	00058c81 	jmpi	58c8 <___vfprintf_internal_r>

00005ec0 <__sfvwrite_small_dev>:
    5ec0:	2880000b 	ldhu	r2,0(r5)
    5ec4:	defffa04 	addi	sp,sp,-24
    5ec8:	dcc00315 	stw	r19,12(sp)
    5ecc:	1080020c 	andi	r2,r2,8
    5ed0:	dc800215 	stw	r18,8(sp)
    5ed4:	dc400115 	stw	r17,4(sp)
    5ed8:	dfc00515 	stw	ra,20(sp)
    5edc:	dd000415 	stw	r20,16(sp)
    5ee0:	dc000015 	stw	r16,0(sp)
    5ee4:	2825883a 	mov	r18,r5
    5ee8:	2027883a 	mov	r19,r4
    5eec:	3023883a 	mov	r17,r6
    5ef0:	10002026 	beq	r2,zero,5f74 <__sfvwrite_small_dev+0xb4>
    5ef4:	2940008f 	ldh	r5,2(r5)
    5ef8:	28000f16 	blt	r5,zero,5f38 <__sfvwrite_small_dev+0x78>
    5efc:	01c01b0e 	bge	zero,r7,5f6c <__sfvwrite_small_dev+0xac>
    5f00:	3821883a 	mov	r16,r7
    5f04:	05010004 	movi	r20,1024
    5f08:	00000206 	br	5f14 <__sfvwrite_small_dev+0x54>
    5f0c:	0400170e 	bge	zero,r16,5f6c <__sfvwrite_small_dev+0xac>
    5f10:	9140008f 	ldh	r5,2(r18)
    5f14:	880d883a 	mov	r6,r17
    5f18:	9809883a 	mov	r4,r19
    5f1c:	800f883a 	mov	r7,r16
    5f20:	a400010e 	bge	r20,r16,5f28 <__sfvwrite_small_dev+0x68>
    5f24:	01c10004 	movi	r7,1024
    5f28:	00060600 	call	6060 <_write_r>
    5f2c:	88a3883a 	add	r17,r17,r2
    5f30:	80a1c83a 	sub	r16,r16,r2
    5f34:	00bff516 	blt	zero,r2,5f0c <__sfvwrite_small_dev+0x4c>
    5f38:	9080000b 	ldhu	r2,0(r18)
    5f3c:	00ffffc4 	movi	r3,-1
    5f40:	10801014 	ori	r2,r2,64
    5f44:	9080000d 	sth	r2,0(r18)
    5f48:	1805883a 	mov	r2,r3
    5f4c:	dfc00517 	ldw	ra,20(sp)
    5f50:	dd000417 	ldw	r20,16(sp)
    5f54:	dcc00317 	ldw	r19,12(sp)
    5f58:	dc800217 	ldw	r18,8(sp)
    5f5c:	dc400117 	ldw	r17,4(sp)
    5f60:	dc000017 	ldw	r16,0(sp)
    5f64:	dec00604 	addi	sp,sp,24
    5f68:	f800283a 	ret
    5f6c:	0007883a 	mov	r3,zero
    5f70:	003ff506 	br	5f48 <__sfvwrite_small_dev+0x88>
    5f74:	00ffffc4 	movi	r3,-1
    5f78:	003ff306 	br	5f48 <__sfvwrite_small_dev+0x88>

00005f7c <putc>:
    5f7c:	defffd04 	addi	sp,sp,-12
    5f80:	00800034 	movhi	r2,0
    5f84:	109a4c04 	addi	r2,r2,26928
    5f88:	dc000115 	stw	r16,4(sp)
    5f8c:	2021883a 	mov	r16,r4
    5f90:	11000017 	ldw	r4,0(r2)
    5f94:	dc000005 	stb	r16,0(sp)
    5f98:	00800034 	movhi	r2,0
    5f9c:	1097b004 	addi	r2,r2,24256
    5fa0:	dfc00215 	stw	ra,8(sp)
    5fa4:	28800115 	stw	r2,4(r5)
    5fa8:	d80d883a 	mov	r6,sp
    5fac:	01c00044 	movi	r7,1
    5fb0:	103ee83a 	callr	r2
    5fb4:	1007883a 	mov	r3,r2
    5fb8:	00bfffc4 	movi	r2,-1
    5fbc:	18800526 	beq	r3,r2,5fd4 <putc+0x58>
    5fc0:	8005883a 	mov	r2,r16
    5fc4:	dfc00217 	ldw	ra,8(sp)
    5fc8:	dc000117 	ldw	r16,4(sp)
    5fcc:	dec00304 	addi	sp,sp,12
    5fd0:	f800283a 	ret
    5fd4:	1821883a 	mov	r16,r3
    5fd8:	8005883a 	mov	r2,r16
    5fdc:	dfc00217 	ldw	ra,8(sp)
    5fe0:	dc000117 	ldw	r16,4(sp)
    5fe4:	dec00304 	addi	sp,sp,12
    5fe8:	f800283a 	ret

00005fec <_putc_r>:
    5fec:	00800034 	movhi	r2,0
    5ff0:	109a4c04 	addi	r2,r2,26928
    5ff4:	defffd04 	addi	sp,sp,-12
    5ff8:	11000017 	ldw	r4,0(r2)
    5ffc:	00800034 	movhi	r2,0
    6000:	1097b004 	addi	r2,r2,24256
    6004:	30800115 	stw	r2,4(r6)
    6008:	dc000115 	stw	r16,4(sp)
    600c:	2821883a 	mov	r16,r5
    6010:	dfc00215 	stw	ra,8(sp)
    6014:	300b883a 	mov	r5,r6
    6018:	01c00044 	movi	r7,1
    601c:	d80d883a 	mov	r6,sp
    6020:	dc000005 	stb	r16,0(sp)
    6024:	103ee83a 	callr	r2
    6028:	1007883a 	mov	r3,r2
    602c:	00bfffc4 	movi	r2,-1
    6030:	18800526 	beq	r3,r2,6048 <_putc_r+0x5c>
    6034:	8005883a 	mov	r2,r16
    6038:	dfc00217 	ldw	ra,8(sp)
    603c:	dc000117 	ldw	r16,4(sp)
    6040:	dec00304 	addi	sp,sp,12
    6044:	f800283a 	ret
    6048:	1821883a 	mov	r16,r3
    604c:	8005883a 	mov	r2,r16
    6050:	dfc00217 	ldw	ra,8(sp)
    6054:	dc000117 	ldw	r16,4(sp)
    6058:	dec00304 	addi	sp,sp,12
    605c:	f800283a 	ret

00006060 <_write_r>:
    6060:	defffd04 	addi	sp,sp,-12
    6064:	dc000015 	stw	r16,0(sp)
    6068:	04000034 	movhi	r16,0
    606c:	841a8e04 	addi	r16,r16,27192
    6070:	dc400115 	stw	r17,4(sp)
    6074:	80000015 	stw	zero,0(r16)
    6078:	2023883a 	mov	r17,r4
    607c:	2809883a 	mov	r4,r5
    6080:	300b883a 	mov	r5,r6
    6084:	380d883a 	mov	r6,r7
    6088:	dfc00215 	stw	ra,8(sp)
    608c:	00062dc0 	call	62dc <write>
    6090:	1007883a 	mov	r3,r2
    6094:	00bfffc4 	movi	r2,-1
    6098:	18800626 	beq	r3,r2,60b4 <_write_r+0x54>
    609c:	1805883a 	mov	r2,r3
    60a0:	dfc00217 	ldw	ra,8(sp)
    60a4:	dc400117 	ldw	r17,4(sp)
    60a8:	dc000017 	ldw	r16,0(sp)
    60ac:	dec00304 	addi	sp,sp,12
    60b0:	f800283a 	ret
    60b4:	80800017 	ldw	r2,0(r16)
    60b8:	103ff826 	beq	r2,zero,609c <_write_r+0x3c>
    60bc:	88800015 	stw	r2,0(r17)
    60c0:	1805883a 	mov	r2,r3
    60c4:	dfc00217 	ldw	ra,8(sp)
    60c8:	dc400117 	ldw	r17,4(sp)
    60cc:	dc000017 	ldw	r16,0(sp)
    60d0:	dec00304 	addi	sp,sp,12
    60d4:	f800283a 	ret

000060d8 <udivmodsi4>:
    60d8:	29001b2e 	bgeu	r5,r4,6148 <udivmodsi4+0x70>
    60dc:	28001a16 	blt	r5,zero,6148 <udivmodsi4+0x70>
    60e0:	00800044 	movi	r2,1
    60e4:	0007883a 	mov	r3,zero
    60e8:	01c007c4 	movi	r7,31
    60ec:	00000306 	br	60fc <udivmodsi4+0x24>
    60f0:	19c01326 	beq	r3,r7,6140 <udivmodsi4+0x68>
    60f4:	18c00044 	addi	r3,r3,1
    60f8:	28000416 	blt	r5,zero,610c <udivmodsi4+0x34>
    60fc:	294b883a 	add	r5,r5,r5
    6100:	1085883a 	add	r2,r2,r2
    6104:	293ffa36 	bltu	r5,r4,60f0 <udivmodsi4+0x18>
    6108:	10000d26 	beq	r2,zero,6140 <udivmodsi4+0x68>
    610c:	0007883a 	mov	r3,zero
    6110:	21400236 	bltu	r4,r5,611c <udivmodsi4+0x44>
    6114:	2149c83a 	sub	r4,r4,r5
    6118:	1886b03a 	or	r3,r3,r2
    611c:	1004d07a 	srli	r2,r2,1
    6120:	280ad07a 	srli	r5,r5,1
    6124:	103ffa1e 	bne	r2,zero,6110 <udivmodsi4+0x38>
    6128:	30000226 	beq	r6,zero,6134 <udivmodsi4+0x5c>
    612c:	2005883a 	mov	r2,r4
    6130:	f800283a 	ret
    6134:	1809883a 	mov	r4,r3
    6138:	2005883a 	mov	r2,r4
    613c:	f800283a 	ret
    6140:	0007883a 	mov	r3,zero
    6144:	003ff806 	br	6128 <udivmodsi4+0x50>
    6148:	00800044 	movi	r2,1
    614c:	0007883a 	mov	r3,zero
    6150:	003fef06 	br	6110 <udivmodsi4+0x38>

00006154 <__divsi3>:
    6154:	defffe04 	addi	sp,sp,-8
    6158:	dc000015 	stw	r16,0(sp)
    615c:	dfc00115 	stw	ra,4(sp)
    6160:	0021883a 	mov	r16,zero
    6164:	20000c16 	blt	r4,zero,6198 <__divsi3+0x44>
    6168:	000d883a 	mov	r6,zero
    616c:	28000e16 	blt	r5,zero,61a8 <__divsi3+0x54>
    6170:	00060d80 	call	60d8 <udivmodsi4>
    6174:	1007883a 	mov	r3,r2
    6178:	8005003a 	cmpeq	r2,r16,zero
    617c:	1000011e 	bne	r2,zero,6184 <__divsi3+0x30>
    6180:	00c7c83a 	sub	r3,zero,r3
    6184:	1805883a 	mov	r2,r3
    6188:	dfc00117 	ldw	ra,4(sp)
    618c:	dc000017 	ldw	r16,0(sp)
    6190:	dec00204 	addi	sp,sp,8
    6194:	f800283a 	ret
    6198:	0109c83a 	sub	r4,zero,r4
    619c:	04000044 	movi	r16,1
    61a0:	000d883a 	mov	r6,zero
    61a4:	283ff20e 	bge	r5,zero,6170 <__divsi3+0x1c>
    61a8:	014bc83a 	sub	r5,zero,r5
    61ac:	8021003a 	cmpeq	r16,r16,zero
    61b0:	003fef06 	br	6170 <__divsi3+0x1c>

000061b4 <__modsi3>:
    61b4:	deffff04 	addi	sp,sp,-4
    61b8:	dfc00015 	stw	ra,0(sp)
    61bc:	01800044 	movi	r6,1
    61c0:	2807883a 	mov	r3,r5
    61c4:	20000416 	blt	r4,zero,61d8 <__modsi3+0x24>
    61c8:	28000c16 	blt	r5,zero,61fc <__modsi3+0x48>
    61cc:	dfc00017 	ldw	ra,0(sp)
    61d0:	dec00104 	addi	sp,sp,4
    61d4:	00060d81 	jmpi	60d8 <udivmodsi4>
    61d8:	0109c83a 	sub	r4,zero,r4
    61dc:	28000b16 	blt	r5,zero,620c <__modsi3+0x58>
    61e0:	180b883a 	mov	r5,r3
    61e4:	01800044 	movi	r6,1
    61e8:	00060d80 	call	60d8 <udivmodsi4>
    61ec:	0085c83a 	sub	r2,zero,r2
    61f0:	dfc00017 	ldw	ra,0(sp)
    61f4:	dec00104 	addi	sp,sp,4
    61f8:	f800283a 	ret
    61fc:	014bc83a 	sub	r5,zero,r5
    6200:	dfc00017 	ldw	ra,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	00060d81 	jmpi	60d8 <udivmodsi4>
    620c:	0147c83a 	sub	r3,zero,r5
    6210:	003ff306 	br	61e0 <__modsi3+0x2c>

00006214 <__udivsi3>:
    6214:	000d883a 	mov	r6,zero
    6218:	00060d81 	jmpi	60d8 <udivmodsi4>

0000621c <__umodsi3>:
    621c:	01800044 	movi	r6,1
    6220:	00060d81 	jmpi	60d8 <udivmodsi4>

00006224 <alt_load_section>:
    6224:	2900051e 	bne	r5,r4,623c <alt_load_section+0x18>
    6228:	f800283a 	ret
    622c:	20800017 	ldw	r2,0(r4)
    6230:	21000104 	addi	r4,r4,4
    6234:	28800015 	stw	r2,0(r5)
    6238:	29400104 	addi	r5,r5,4
    623c:	29bffb1e 	bne	r5,r6,622c <alt_load_section+0x8>
    6240:	f800283a 	ret

00006244 <alt_load>:
    6244:	deffff04 	addi	sp,sp,-4
    6248:	01000034 	movhi	r4,0
    624c:	211a5004 	addi	r4,r4,26944
    6250:	01400034 	movhi	r5,0
    6254:	295a1304 	addi	r5,r5,26700
    6258:	01800034 	movhi	r6,0
    625c:	319a5004 	addi	r6,r6,26944
    6260:	dfc00015 	stw	ra,0(sp)
    6264:	00062240 	call	6224 <alt_load_section>
    6268:	01000034 	movhi	r4,0
    626c:	21100804 	addi	r4,r4,16416
    6270:	01400034 	movhi	r5,0
    6274:	29500804 	addi	r5,r5,16416
    6278:	01800034 	movhi	r6,0
    627c:	31900804 	addi	r6,r6,16416
    6280:	00062240 	call	6224 <alt_load_section>
    6284:	01000034 	movhi	r4,0
    6288:	21191904 	addi	r4,r4,25700
    628c:	01400034 	movhi	r5,0
    6290:	29591904 	addi	r5,r5,25700
    6294:	01800034 	movhi	r6,0
    6298:	319a1304 	addi	r6,r6,26700
    629c:	00062240 	call	6224 <alt_load_section>
    62a0:	00064140 	call	6414 <alt_dcache_flush_all>
    62a4:	dfc00017 	ldw	ra,0(sp)
    62a8:	dec00104 	addi	sp,sp,4
    62ac:	00064181 	jmpi	6418 <alt_icache_flush_all>

000062b0 <alt_main>:
    62b0:	deffff04 	addi	sp,sp,-4
    62b4:	0009883a 	mov	r4,zero
    62b8:	dfc00015 	stw	ra,0(sp)
    62bc:	00063640 	call	6364 <alt_irq_init>
    62c0:	00063540 	call	6354 <alt_sys_init>
    62c4:	d1204417 	ldw	r4,-32496(gp)
    62c8:	d1604517 	ldw	r5,-32492(gp)
    62cc:	d1a04617 	ldw	r6,-32488(gp)
    62d0:	dfc00017 	ldw	ra,0(sp)
    62d4:	dec00104 	addi	sp,sp,4
    62d8:	000513c1 	jmpi	513c <main>

000062dc <write>:
    62dc:	deffff04 	addi	sp,sp,-4
    62e0:	2007883a 	mov	r3,r4
    62e4:	00800044 	movi	r2,1
    62e8:	dfc00015 	stw	ra,0(sp)
    62ec:	000f883a 	mov	r7,zero
    62f0:	01000034 	movhi	r4,0
    62f4:	211a4e04 	addi	r4,r4,26936
    62f8:	18800526 	beq	r3,r2,6310 <write+0x34>
    62fc:	00800084 	movi	r2,2
    6300:	1880061e 	bne	r3,r2,631c <write+0x40>
    6304:	01000034 	movhi	r4,0
    6308:	211a4e04 	addi	r4,r4,26936
    630c:	000f883a 	mov	r7,zero
    6310:	dfc00017 	ldw	ra,0(sp)
    6314:	dec00104 	addi	sp,sp,4
    6318:	00063841 	jmpi	6384 <altera_avalon_jtag_uart_write>
    631c:	00800034 	movhi	r2,0
    6320:	109a4f04 	addi	r2,r2,26940
    6324:	10800017 	ldw	r2,0(r2)
    6328:	00c00034 	movhi	r3,0
    632c:	18da8e04 	addi	r3,r3,27192
    6330:	10000226 	beq	r2,zero,633c <write+0x60>
    6334:	103ee83a 	callr	r2
    6338:	1007883a 	mov	r3,r2
    633c:	00801444 	movi	r2,81
    6340:	18800015 	stw	r2,0(r3)
    6344:	00bfffc4 	movi	r2,-1
    6348:	dfc00017 	ldw	ra,0(sp)
    634c:	dec00104 	addi	sp,sp,4
    6350:	f800283a 	ret

00006354 <alt_sys_init>:
    6354:	00c00044 	movi	r3,1
    6358:	00a40014 	movui	r2,36864
    635c:	10c00035 	stwio	r3,0(r2)
    6360:	f800283a 	ret

00006364 <alt_irq_init>:
    6364:	deffff04 	addi	sp,sp,-4
    6368:	dfc00015 	stw	ra,0(sp)
    636c:	00064240 	call	6424 <altera_nios2_qsys_irq_init>
    6370:	00800044 	movi	r2,1
    6374:	1001703a 	wrctl	status,r2
    6378:	dfc00017 	ldw	ra,0(sp)
    637c:	dec00104 	addi	sp,sp,4
    6380:	f800283a 	ret

00006384 <altera_avalon_jtag_uart_write>:
    6384:	21000017 	ldw	r4,0(r4)
    6388:	298f883a 	add	r7,r5,r6
    638c:	20c00104 	addi	r3,r4,4
    6390:	00000606 	br	63ac <altera_avalon_jtag_uart_write+0x28>
    6394:	18800037 	ldwio	r2,0(r3)
    6398:	10bfffec 	andhi	r2,r2,65535
    639c:	10000326 	beq	r2,zero,63ac <altera_avalon_jtag_uart_write+0x28>
    63a0:	28800007 	ldb	r2,0(r5)
    63a4:	29400044 	addi	r5,r5,1
    63a8:	20800035 	stwio	r2,0(r4)
    63ac:	29fff936 	bltu	r5,r7,6394 <altera_avalon_jtag_uart_write+0x10>
    63b0:	3005883a 	mov	r2,r6
    63b4:	f800283a 	ret

000063b8 <alt_get_performance_counter_base>:
    63b8:	00a40014 	movui	r2,36864
    63bc:	f800283a 	ret

000063c0 <alt_get_cpu_freq>:
    63c0:	0080bef4 	movhi	r2,763
    63c4:	10bc2004 	addi	r2,r2,-3968
    63c8:	f800283a 	ret

000063cc <perf_get_num_starts>:
    63cc:	280a913a 	slli	r5,r5,4
    63d0:	2149883a 	add	r4,r4,r5
    63d4:	20800237 	ldwio	r2,8(r4)
    63d8:	f800283a 	ret

000063dc <perf_get_section_time>:
    63dc:	20000035 	stwio	zero,0(r4)
    63e0:	280a913a 	slli	r5,r5,4
    63e4:	2149883a 	add	r4,r4,r5
    63e8:	23400037 	ldwio	r13,0(r4)
    63ec:	23000137 	ldwio	r12,4(r4)
    63f0:	0015883a 	mov	r10,zero
    63f4:	0013883a 	mov	r9,zero
    63f8:	5348b03a 	or	r4,r10,r13
    63fc:	624ab03a 	or	r5,r12,r9
    6400:	2005883a 	mov	r2,r4
    6404:	2807883a 	mov	r3,r5
    6408:	f800283a 	ret

0000640c <perf_get_total_time>:
    640c:	000b883a 	mov	r5,zero
    6410:	00063dc1 	jmpi	63dc <perf_get_section_time>

00006414 <alt_dcache_flush_all>:
    6414:	f800283a 	ret

00006418 <alt_icache_flush_all>:
    6418:	0009883a 	mov	r4,zero
    641c:	01440004 	movi	r5,4096
    6420:	000642c1 	jmpi	642c <alt_icache_flush>

00006424 <altera_nios2_qsys_irq_init>:
    6424:	000170fa 	wrctl	ienable,zero
    6428:	f800283a 	ret

0000642c <alt_icache_flush>:
    642c:	00840004 	movi	r2,4096
    6430:	2007883a 	mov	r3,r4
    6434:	1140012e 	bgeu	r2,r5,643c <alt_icache_flush+0x10>
    6438:	100b883a 	mov	r5,r2
    643c:	194b883a 	add	r5,r3,r5
    6440:	00000206 	br	644c <alt_icache_flush+0x20>
    6444:	1800603a 	flushi	r3
    6448:	18c00804 	addi	r3,r3,32
    644c:	197ffd36 	bltu	r3,r5,6444 <alt_icache_flush+0x18>
    6450:	208007cc 	andi	r2,r4,31
    6454:	10000126 	beq	r2,zero,645c <alt_icache_flush+0x30>
    6458:	1800603a 	flushi	r3
    645c:	0000203a 	flushp
    6460:	f800283a 	ret

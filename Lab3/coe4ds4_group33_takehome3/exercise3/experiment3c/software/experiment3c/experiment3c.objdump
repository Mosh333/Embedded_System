
experiment3c.elf:     file format elf32-littlenios2
experiment3c.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002850 memsz 0x00002850 flags r-x
    LOAD off    0x00003870 vaddr 0x00006870 paddr 0x00006964 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00003a58 vaddr 0x00006a58 paddr 0x00006a58 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002468  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  00006488  00006488  00003488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f4  00006870  00006964  00003870  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000014  00006a58  00006a58  00003a58  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00003988  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000524  00000000  00000000  00003c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004d6c  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016eb  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004afd  00000000  00000000  0000a5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000534  00000000  00000000  0000f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001033  00000000  00000000  0000f61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013e9  00000000  00000000  0001064f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00011a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00011a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00012e92  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00012e95  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00012e9a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00012e9b  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00012e9c  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00012ea7  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00012eb2  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000c  00000000  00000000  00012ebd  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002f  00000000  00000000  00012ec9  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000423f3  00000000  00000000  00012ef8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00006488 l    d  .rodata	00000000 .rodata
00006870 l    d  .rwdata	00000000 .rwdata
00006a58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 experiment3c.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00005858 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006870 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000060e8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00006234 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00005770 g     F .text	0000001c putchar
000062c0 g     F .text	0000002c alt_main
00005794 g     F .text	00000090 _puts_r
00006964 g       *ABS*	00000000 __flash_rwdata_start
000056d8 g     F .text	00000054 printf
000063d0 g     F .text	0000000c alt_get_cpu_freq
00004c84 g     F .text	000000a8 md5_update
00004c44 g     F .text	00000040 md5_init
00000000  w      *UND*	00000000 __errno
00004ea0 g     F .text	00000068 print_hash
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006a5c g     O .bss	00000004 errno
00006a64 g     O .bss	00000004 alt_argv
0000e950 g       *ABS*	00000000 _gp
0000578c g     F .text	00000008 _putchar_r
0000568c g     F .text	0000002c memcpy
00005824 g     F .text	00000014 puts
0000572c g     F .text	00000044 _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00006224 g     F .text	00000008 __udivsi3
00006450 g     F .text	00000038 alt_icache_flush
000063dc g     F .text	00000010 perf_get_num_starts
00006958 g     O .rwdata	00000004 _global_impure_ptr
00006a6c g       *ABS*	00000000 __bss_end
00006424 g     F .text	00000018 alt_dcache_flush_all
00006964 g       *ABS*	00000000 __ram_rwdata_end
000062ec g     F .text	00000078 write
00005ffc g     F .text	00000074 _putc_r
00006870 g       *ABS*	00000000 __ram_rodata_end
0000695c g     O .rwdata	00000004 jtag_uart_0
0000622c g     F .text	00000008 __umodsi3
00006a6c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00006394 g     F .text	00000034 altera_avalon_jtag_uart_write
000058d8 g     F .text	000005d4 ___vfprintf_internal_r
00004d2c g     F .text	00000174 md5_final
00004020 g     F .text	0000004c _start
00006364 g     F .text	00000010 alt_sys_init
00004f08 g     F .text	00000244 findStringEqual33
00006870 g       *ABS*	00000000 __ram_rwdata_start
00006488 g       *ABS*	00000000 __ram_rodata_start
000063ec g     F .text	00000030 perf_get_section_time
00006a6c g       *ABS*	00000000 __alt_stack_base
0000641c g     F .text	00000008 perf_get_total_time
0000406c g     F .text	00000bd8 md5_transform
00005ed0 g     F .text	000000bc __sfvwrite_small_dev
00006a58 g     O .bss	00000004 hitCount
00006a58 g       *ABS*	00000000 __bss_start
000056b8 g     F .text	00000020 memset
0000514c g     F .text	00000540 main
00006a68 g     O .bss	00000004 alt_envp
00006960 g     O .rwdata	00000004 alt_errno
00005f8c g     F .text	00000070 putc
00006164 g     F .text	00000060 __divsi3
00006488 g       *ABS*	00000000 __flash_rodata_start
00006374 g     F .text	00000020 alt_irq_init
00006070 g     F .text	00000078 _write_r
00006954 g     O .rwdata	00000004 _impure_ptr
00006a60 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00006964 g       *ABS*	00000000 _edata
00006a6c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000063c8 g     F .text	00000008 alt_get_performance_counter_base
00006448 g     F .text	00000008 altera_nios2_qsys_irq_init
0000401c g       .entry	00000000 exit
000061c4 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00006950 g     O .rwdata	00000004 performance_name
0000401c g       .entry	00000000 _exit
00005838 g     F .text	00000020 strlen
0000643c g     F .text	0000000c alt_icache_flush_all
00005eac g     F .text	00000024 __vfprintf_internal
00006254 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
    4000:	00840014 	movui	r2,4096
    4004:	1001483a 	initi	r2
    4008:	10bff804 	addi	r2,r2,-32
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
    4010:	00400034 	movhi	at,0
    4014:	08500814 	ori	at,at,16416
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>

Disassembly of section .text:

00004020 <_start>:
    4020:	00820014 	movui	r2,2048
    4024:	10000033 	initd	0(r2)
    4028:	10bff804 	addi	r2,r2,-32
    402c:	00bffd16 	blt	zero,r2,4024 <_start+0x4>
    4030:	06c00034 	movhi	sp,0
    4034:	dee00014 	ori	sp,sp,32768
    4038:	06800034 	movhi	gp,0
    403c:	d6ba5414 	ori	gp,gp,59728
    4040:	00800034 	movhi	r2,0
    4044:	109a9614 	ori	r2,r2,27224
    4048:	00c00034 	movhi	r3,0
    404c:	18da9b14 	ori	r3,r3,27244
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>
    4054:	10000015 	stw	zero,0(r2)
    4058:	10800104 	addi	r2,r2,4
    405c:	10fffd36 	bltu	r2,r3,4054 <_start+0x34>
    4060:	00062540 	call	6254 <alt_load>
    4064:	00062c00 	call	62c0 <alt_main>

00004068 <alt_after_alt_main>:
    4068:	003fff06 	br	4068 <alt_after_alt_main>

0000406c <md5_transform>:

// For performance counter
void *performance_name = PERFORMANCE_COUNTER_0_BASE;

//We used http://bradconte.com/md5_c as reference for MD5 Algorithm
void md5_transform(MD5_CTX *ctx, uchar data[]) {
    406c:	deffe704 	addi	sp,sp,-100
    4070:	df001815 	stw	fp,96(sp)
    4074:	ddc01715 	stw	r23,92(sp)
    4078:	dd801615 	stw	r22,88(sp)
    407c:	dd401515 	stw	r21,84(sp)
    4080:	dd001415 	stw	r20,80(sp)
    4084:	dcc01315 	stw	r19,76(sp)
    4088:	dc801215 	stw	r18,72(sp)
    408c:	dc401115 	stw	r17,68(sp)
    4090:	dc001015 	stw	r16,64(sp)
    4094:	2039883a 	mov	fp,r4
    4098:	280d883a 	mov	r6,r5
    409c:	d80f883a 	mov	r7,sp
    40a0:	da001004 	addi	r8,sp,64

	// MD5 specifies big endian byte order, but this implementation assumes a little
	// endian byte order CPU. Reverse all the bytes upon input, and re-reverse them
	// on output (in md5_final()).
	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j]) + (data[j + 1] << 8) + (data[j + 2] << 16) + (data[j
    40a4:	31400043 	ldbu	r5,1(r6)
    40a8:	30c000c3 	ldbu	r3,3(r6)
    40ac:	31000083 	ldbu	r4,2(r6)
    40b0:	30800003 	ldbu	r2,0(r6)
    40b4:	280a923a 	slli	r5,r5,8
    40b8:	1806963a 	slli	r3,r3,24
    40bc:	2008943a 	slli	r4,r4,16
    40c0:	1145883a 	add	r2,r2,r5
    40c4:	31800104 	addi	r6,r6,4
    40c8:	1907883a 	add	r3,r3,r4
    40cc:	10c5883a 	add	r2,r2,r3
    40d0:	38800015 	stw	r2,0(r7)
    40d4:	39c00104 	addi	r7,r7,4
	uint a, b, c, d, m[16], i, j;

	// MD5 specifies big endian byte order, but this implementation assumes a little
	// endian byte order CPU. Reverse all the bytes upon input, and re-reverse them
	// on output (in md5_final()).
	for (i = 0, j = 0; i < 16; ++i, j += 4)
    40d8:	3a3ff21e 	bne	r7,r8,40a4 <md5_transform+0x38>
		m[i] = (data[j]) + (data[j + 1] << 8) + (data[j + 2] << 16) + (data[j
				+ 3] << 24);

	a = ctx->state[0];
	b = ctx->state[1];
    40dc:	e3001417 	ldw	r12,80(fp)
	c = ctx->state[2];
    40e0:	e5001517 	ldw	r20,84(fp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
    40e4:	e0c01617 	ldw	r3,88(fp)
    40e8:	ddc00017 	ldw	r23,0(sp)
    40ec:	e1001317 	ldw	r4,76(fp)
    40f0:	0304303a 	nor	r2,zero,r12
    40f4:	10c4703a 	and	r2,r2,r3
    40f8:	6506703a 	and	r3,r12,r20
    40fc:	1886b03a 	or	r3,r3,r2
    4100:	00b5daf4 	movhi	r2,55147
    4104:	10a91e04 	addi	r2,r2,-23432
    4108:	1887883a 	add	r3,r3,r2
    410c:	25cf883a 	add	r7,r4,r23
    4110:	02c00644 	movi	r11,25
    4114:	38cf883a 	add	r7,r7,r3
    4118:	3ace583a 	ror	r7,r7,r11
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    411c:	d9000117 	ldw	r4,4(sp)
    4120:	02400504 	movi	r9,20
	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
    4124:	61cf883a 	add	r7,r12,r7
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4128:	01c4303a 	nor	r2,zero,r7
    412c:	1504703a 	and	r2,r2,r20
    4130:	3b06703a 	and	r3,r7,r12
    4134:	1886b03a 	or	r3,r3,r2
    4138:	00ba3234 	movhi	r2,59592
    413c:	10add584 	addi	r2,r2,-18602
    4140:	1887883a 	add	r3,r3,r2
    4144:	e0801617 	ldw	r2,88(fp)
	FF(c,d,a,b,m[2], 17,0x242070db);
    4148:	020003c4 	movi	r8,15
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    414c:	02800284 	movi	r10,10
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4150:	110d883a 	add	r6,r2,r4
    4154:	30cd883a 	add	r6,r6,r3
    4158:	324c583a 	ror	r6,r6,r9
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    415c:	dcc00517 	ldw	r19,20(sp)
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4160:	dc000717 	ldw	r16,28(sp)
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
    4164:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[2], 17,0x242070db);
    4168:	0184303a 	nor	r2,zero,r6
    416c:	1304703a 	and	r2,r2,r12
    4170:	31c6703a 	and	r3,r6,r7
    4174:	1886b03a 	or	r3,r3,r2
    4178:	00890834 	movhi	r2,9248
    417c:	109c36c4 	addi	r2,r2,28891
    4180:	1887883a 	add	r3,r3,r2
    4184:	d8800217 	ldw	r2,8(sp)
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
    4188:	dd400817 	ldw	r21,32(sp)
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    418c:	dc400a17 	ldw	r17,40(sp)
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
    4190:	a089883a 	add	r4,r20,r2
    4194:	20c9883a 	add	r4,r4,r3
    4198:	2208583a 	ror	r4,r4,r8
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
    419c:	dd800b17 	ldw	r22,44(sp)
	FF(a,b,c,d,m[12], 7,0x6b901122);
    41a0:	db800c17 	ldw	r14,48(sp)
	c = ctx->state[2];
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
    41a4:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    41a8:	0104303a 	nor	r2,zero,r4
    41ac:	11c4703a 	and	r2,r2,r7
    41b0:	2186703a 	and	r3,r4,r6
    41b4:	1886b03a 	or	r3,r3,r2
    41b8:	00b06fb4 	movhi	r2,49598
    41bc:	10b3bb84 	addi	r2,r2,-12562
    41c0:	1887883a 	add	r3,r3,r2
    41c4:	d8800317 	ldw	r2,12(sp)
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
    41c8:	dc800d17 	ldw	r18,52(sp)
	FF(c,d,a,b,m[14],17,0xa679438e);
    41cc:	db400e17 	ldw	r13,56(sp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    41d0:	608b883a 	add	r5,r12,r2
    41d4:	28cb883a 	add	r5,r5,r3
    41d8:	2a8a583a 	ror	r5,r5,r10
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);
    41dc:	dbc00f17 	ldw	r15,60(sp)
	d = ctx->state[3];

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
    41e0:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
    41e4:	0144303a 	nor	r2,zero,r5
    41e8:	1184703a 	and	r2,r2,r6
    41ec:	2906703a 	and	r3,r5,r4
    41f0:	1886b03a 	or	r3,r3,r2
    41f4:	00bd5f34 	movhi	r2,62844
    41f8:	1083ebc4 	addi	r2,r2,4015
    41fc:	1887883a 	add	r3,r3,r2
    4200:	d8800417 	ldw	r2,16(sp)
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    4204:	34cd883a 	add	r6,r6,r19

	FF(a,b,c,d,m[0], 7,0xd76aa478);
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
    4208:	388f883a 	add	r7,r7,r2
    420c:	38cf883a 	add	r7,r7,r3
    4210:	3ace583a 	ror	r7,r7,r11
    4214:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[5], 12,0x4787c62a);
    4218:	01c4303a 	nor	r2,zero,r7
    421c:	1104703a 	and	r2,r2,r4
    4220:	3946703a 	and	r3,r7,r5
    4224:	1886b03a 	or	r3,r3,r2
    4228:	0091e234 	movhi	r2,18312
    422c:	10b18a84 	addi	r2,r2,-14806
    4230:	1887883a 	add	r3,r3,r2
    4234:	30cd883a 	add	r6,r6,r3
    4238:	324c583a 	ror	r6,r6,r9
    423c:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[6], 17,0xa8304613);
    4240:	0184303a 	nor	r2,zero,r6
    4244:	1144703a 	and	r2,r2,r5
    4248:	31c6703a 	and	r3,r6,r7
    424c:	1886b03a 	or	r3,r3,r2
    4250:	00aa0c34 	movhi	r2,43056
    4254:	109184c4 	addi	r2,r2,17939
    4258:	1887883a 	add	r3,r3,r2
    425c:	d8800617 	ldw	r2,24(sp)
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4260:	2c0b883a 	add	r5,r5,r16
	FF(d,a,b,c,m[1], 12,0xe8c7b756);
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
    4264:	2089883a 	add	r4,r4,r2
    4268:	20c9883a 	add	r4,r4,r3
    426c:	2208583a 	ror	r4,r4,r8
    4270:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[7], 22,0xfd469501);
    4274:	0104303a 	nor	r2,zero,r4
    4278:	11c4703a 	and	r2,r2,r7
    427c:	2186703a 	and	r3,r4,r6
    4280:	1886b03a 	or	r3,r3,r2
    4284:	00bf51f4 	movhi	r2,64839
    4288:	10a54044 	addi	r2,r2,-27391
    428c:	1887883a 	add	r3,r3,r2
    4290:	28cb883a 	add	r5,r5,r3
    4294:	2a8a583a 	ror	r5,r5,r10
	FF(a,b,c,d,m[8], 7,0x698098d8);
    4298:	3d4f883a 	add	r7,r7,r21
	FF(c,d,a,b,m[2], 17,0x242070db);
	FF(b,c,d,a,m[3], 22,0xc1bdceee);
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
    429c:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[8], 7,0x698098d8);
    42a0:	0144303a 	nor	r2,zero,r5
    42a4:	1184703a 	and	r2,r2,r6
    42a8:	2906703a 	and	r3,r5,r4
    42ac:	1886b03a 	or	r3,r3,r2
    42b0:	009a6074 	movhi	r2,27009
    42b4:	10a63604 	addi	r2,r2,-26408
    42b8:	1887883a 	add	r3,r3,r2
    42bc:	38cf883a 	add	r7,r7,r3
    42c0:	3ace583a 	ror	r7,r7,r11
    42c4:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
    42c8:	01c4303a 	nor	r2,zero,r7
    42cc:	1104703a 	and	r2,r2,r4
    42d0:	3946703a 	and	r3,r7,r5
    42d4:	1886b03a 	or	r3,r3,r2
    42d8:	00a2d174 	movhi	r2,35653
    42dc:	10bdebc4 	addi	r2,r2,-2129
    42e0:	1887883a 	add	r3,r3,r2
    42e4:	d8800917 	ldw	r2,36(sp)
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    42e8:	2449883a 	add	r4,r4,r17
	FF(a,b,c,d,m[4], 7,0xf57c0faf);
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
    42ec:	308d883a 	add	r6,r6,r2
    42f0:	30cd883a 	add	r6,r6,r3
    42f4:	324c583a 	ror	r6,r6,r9
    42f8:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    42fc:	0184303a 	nor	r2,zero,r6
    4300:	1144703a 	and	r2,r2,r5
    4304:	31c6703a 	and	r3,r6,r7
    4308:	1886b03a 	or	r3,r3,r2
    430c:	00bffff4 	movhi	r2,65535
    4310:	1096ec44 	addi	r2,r2,23473
    4314:	1887883a 	add	r3,r3,r2
    4318:	20c9883a 	add	r4,r4,r3
    431c:	2208583a 	ror	r4,r4,r8
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4320:	2d8b883a 	add	r5,r5,r22
	FF(d,a,b,c,m[5], 12,0x4787c62a);
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
    4324:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4328:	0104303a 	nor	r2,zero,r4
    432c:	11c4703a 	and	r2,r2,r7
    4330:	2186703a 	and	r3,r4,r6
    4334:	1886b03a 	or	r3,r3,r2
    4338:	00a25774 	movhi	r2,35165
    433c:	10b5ef84 	addi	r2,r2,-10306
    4340:	1887883a 	add	r3,r3,r2
    4344:	28cb883a 	add	r5,r5,r3
    4348:	2a8a583a 	ror	r5,r5,r10
	FF(a,b,c,d,m[12], 7,0x6b901122);
    434c:	3b8f883a 	add	r7,r7,r14
	FF(c,d,a,b,m[6], 17,0xa8304613);
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
    4350:	214b883a 	add	r5,r4,r5
	FF(a,b,c,d,m[12], 7,0x6b901122);
    4354:	0144303a 	nor	r2,zero,r5
    4358:	1184703a 	and	r2,r2,r6
    435c:	2906703a 	and	r3,r5,r4
    4360:	1886b03a 	or	r3,r3,r2
    4364:	009ae434 	movhi	r2,27536
    4368:	10844884 	addi	r2,r2,4386
    436c:	1887883a 	add	r3,r3,r2
    4370:	38cf883a 	add	r7,r7,r3
    4374:	3ace583a 	ror	r7,r7,r11
	FF(d,a,b,c,m[13],12,0xfd987193);
    4378:	348d883a 	add	r6,r6,r18
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    437c:	02c005c4 	movi	r11,23
	FF(b,c,d,a,m[7], 22,0xfd469501);
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
    4380:	29cf883a 	add	r7,r5,r7
	FF(d,a,b,c,m[13],12,0xfd987193);
    4384:	01c4303a 	nor	r2,zero,r7
    4388:	1104703a 	and	r2,r2,r4
    438c:	3946703a 	and	r3,r7,r5
    4390:	1886b03a 	or	r3,r3,r2
    4394:	00bf6634 	movhi	r2,64920
    4398:	109c64c4 	addi	r2,r2,29075
    439c:	1887883a 	add	r3,r3,r2
    43a0:	30cd883a 	add	r6,r6,r3
    43a4:	324c583a 	ror	r6,r6,r9
	FF(c,d,a,b,m[14],17,0xa679438e);
    43a8:	2349883a 	add	r4,r4,r13
	FF(a,b,c,d,m[8], 7,0x698098d8);
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
    43ac:	398d883a 	add	r6,r7,r6
	FF(c,d,a,b,m[14],17,0xa679438e);
    43b0:	0192303a 	nor	r9,zero,r6
    43b4:	4946703a 	and	r3,r9,r5
    43b8:	31c4703a 	and	r2,r6,r7
    43bc:	10c4b03a 	or	r2,r2,r3
    43c0:	00e99e74 	movhi	r3,42617
    43c4:	18d0e384 	addi	r3,r3,17294
    43c8:	10c5883a 	add	r2,r2,r3
    43cc:	2089883a 	add	r4,r4,r2
    43d0:	2208583a 	ror	r4,r4,r8
	FF(b,c,d,a,m[15],22,0x49b40821);
    43d4:	2bcb883a 	add	r5,r5,r15
	FF(d,a,b,c,m[9], 12,0x8b44f7af);
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
    43d8:	3109883a 	add	r4,r6,r4
	FF(b,c,d,a,m[15],22,0x49b40821);
    43dc:	0110303a 	nor	r8,zero,r4
    43e0:	41c6703a 	and	r3,r8,r7
    43e4:	2184703a 	and	r2,r4,r6
    43e8:	10c4b03a 	or	r2,r2,r3
    43ec:	00d26d34 	movhi	r3,18868
    43f0:	18c20844 	addi	r3,r3,2081
    43f4:	10c5883a 	add	r2,r2,r3
    43f8:	288b883a 	add	r5,r5,r2
    43fc:	2a8a583a 	ror	r5,r5,r10

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4400:	2252703a 	and	r9,r4,r9
    4404:	00fd87b4 	movhi	r3,63006
    4408:	18c95884 	addi	r3,r3,9570
	FF(c,d,a,b,m[10],17,0xffff5bb1);
	FF(b,c,d,a,m[11],22,0x895cd7be);
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);
    440c:	214b883a 	add	r5,r4,r5

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4410:	2984703a 	and	r2,r5,r6
    4414:	1244b03a 	or	r2,r2,r9
    4418:	10c5883a 	add	r2,r2,r3
    441c:	d8c00117 	ldw	r3,4(sp)
    4420:	028006c4 	movi	r10,27
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4424:	2a10703a 	and	r8,r5,r8
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4428:	38cf883a 	add	r7,r7,r3
    442c:	388f883a 	add	r7,r7,r2
    4430:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4434:	00f01074 	movhi	r3,49217
    4438:	18ecd004 	addi	r3,r3,-19648
	GG(c,d,a,b,m[11],14,0x265e5a51);
    443c:	02400484 	movi	r9,18
	FF(a,b,c,d,m[12], 7,0x6b901122);
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
    4440:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4444:	3904703a 	and	r2,r7,r4
    4448:	1204b03a 	or	r2,r2,r8
    444c:	10c5883a 	add	r2,r2,r3
    4450:	d8c00617 	ldw	r3,24(sp)
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4454:	2589883a 	add	r4,r4,r22
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    4458:	02000304 	movi	r8,12
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    445c:	30cd883a 	add	r6,r6,r3
    4460:	308d883a 	add	r6,r6,r2
    4464:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4468:	0146303a 	nor	r3,zero,r5
    446c:	38c6703a 	and	r3,r7,r3
	FF(d,a,b,c,m[13],12,0xfd987193);
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
    4470:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4474:	3144703a 	and	r2,r6,r5
    4478:	10c4b03a 	or	r2,r2,r3
    447c:	00c997b4 	movhi	r3,9822
    4480:	18d69444 	addi	r3,r3,23121
    4484:	10c5883a 	add	r2,r2,r3
    4488:	2089883a 	add	r4,r4,r2
    448c:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    4490:	01c6303a 	nor	r3,zero,r7
    4494:	30c6703a 	and	r3,r6,r3
	FF(c,d,a,b,m[14],17,0xa679438e);
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
    4498:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    449c:	21c4703a 	and	r2,r4,r7
    44a0:	10c4b03a 	or	r2,r2,r3
    44a4:	00fa6df4 	movhi	r3,59831
    44a8:	18f1ea84 	addi	r3,r3,-14422
    44ac:	10c5883a 	add	r2,r2,r3
    44b0:	2dcb883a 	add	r5,r5,r23
    44b4:	288b883a 	add	r5,r5,r2
    44b8:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44bc:	0186303a 	nor	r3,zero,r6
    44c0:	20c6703a 	and	r3,r4,r3
	FF(b,c,d,a,m[15],22,0x49b40821);

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
    44c4:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44c8:	2984703a 	and	r2,r5,r6
    44cc:	10c4b03a 	or	r2,r2,r3
    44d0:	00f58bf4 	movhi	r3,54831
    44d4:	18c41744 	addi	r3,r3,4189
    44d8:	10c5883a 	add	r2,r2,r3
    44dc:	3ccf883a 	add	r7,r7,r19
    44e0:	388f883a 	add	r7,r7,r2
    44e4:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[10], 9,0x02441453);
    44e8:	0106303a 	nor	r3,zero,r4
    44ec:	28c6703a 	and	r3,r5,r3

	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
    44f0:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[10], 9,0x02441453);
    44f4:	3904703a 	and	r2,r7,r4
    44f8:	10c4b03a 	or	r2,r2,r3
    44fc:	00c09134 	movhi	r3,580
    4500:	18c514c4 	addi	r3,r3,5203
    4504:	10c5883a 	add	r2,r2,r3
    4508:	344d883a 	add	r6,r6,r17
    450c:	308d883a 	add	r6,r6,r2
    4510:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4514:	0146303a 	nor	r3,zero,r5
    4518:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[1], 5,0xf61e2562);
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
    451c:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4520:	3144703a 	and	r2,r6,r5
    4524:	10c4b03a 	or	r2,r2,r3
    4528:	00f628b4 	movhi	r3,55458
    452c:	18f9a044 	addi	r3,r3,-6527
    4530:	10c5883a 	add	r2,r2,r3
    4534:	23c9883a 	add	r4,r4,r15
    4538:	2089883a 	add	r4,r4,r2
    453c:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    4540:	01c6303a 	nor	r3,zero,r7
    4544:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[6], 9,0xc040b340);
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
    4548:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    454c:	21c4703a 	and	r2,r4,r7
    4550:	10c4b03a 	or	r2,r2,r3
    4554:	00f9f534 	movhi	r3,59348
    4558:	18fef204 	addi	r3,r3,-1080
    455c:	10c5883a 	add	r2,r2,r3
    4560:	d8c00417 	ldw	r3,16(sp)
    4564:	28cb883a 	add	r5,r5,r3
    4568:	288b883a 	add	r5,r5,r2
    456c:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    4570:	0186303a 	nor	r3,zero,r6
    4574:	20c6703a 	and	r3,r4,r3
	GG(c,d,a,b,m[11],14,0x265e5a51);
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
    4578:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    457c:	2984703a 	and	r2,r5,r6
    4580:	10c4b03a 	or	r2,r2,r3
    4584:	00c878b4 	movhi	r3,8674
    4588:	18f37984 	addi	r3,r3,-12826
    458c:	10c5883a 	add	r2,r2,r3
    4590:	d8c00917 	ldw	r3,36(sp)
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    4594:	334d883a 	add	r6,r6,r13
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    4598:	38cf883a 	add	r7,r7,r3
    459c:	388f883a 	add	r7,r7,r2
    45a0:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    45a4:	0106303a 	nor	r3,zero,r4
    45a8:	28c6703a 	and	r3,r5,r3
	GG(b,c,d,a,m[0], 20,0xe9b6c7aa);
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
    45ac:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    45b0:	3904703a 	and	r2,r7,r4
    45b4:	10c4b03a 	or	r2,r2,r3
    45b8:	00f0cdf4 	movhi	r3,49975
    45bc:	18c1f584 	addi	r3,r3,2006
    45c0:	10c5883a 	add	r2,r2,r3
    45c4:	308d883a 	add	r6,r6,r2
    45c8:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45cc:	0146303a 	nor	r3,zero,r5
    45d0:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[5], 5,0xd62f105d);
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
    45d4:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45d8:	3144703a 	and	r2,r6,r5
    45dc:	10c4b03a 	or	r2,r2,r3
    45e0:	00fd3574 	movhi	r3,62677
    45e4:	18c361c4 	addi	r3,r3,3463
    45e8:	10c5883a 	add	r2,r2,r3
    45ec:	d8c00317 	ldw	r3,12(sp)
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    45f0:	2d4b883a 	add	r5,r5,r21
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    45f4:	20c9883a 	add	r4,r4,r3
    45f8:	2089883a 	add	r4,r4,r2
    45fc:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    4600:	01c6303a 	nor	r3,zero,r7
    4604:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[10], 9,0x02441453);
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
    4608:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    460c:	21c4703a 	and	r2,r4,r7
    4610:	10c4b03a 	or	r2,r2,r3
    4614:	00d156b4 	movhi	r3,17754
    4618:	18c53b44 	addi	r3,r3,5357
    461c:	10c5883a 	add	r2,r2,r3
    4620:	288b883a 	add	r5,r5,r2
    4624:	2a0a583a 	ror	r5,r5,r8
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    4628:	0186303a 	nor	r3,zero,r6
    462c:	20c6703a 	and	r3,r4,r3
	GG(c,d,a,b,m[15],14,0xd8a1e681);
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
    4630:	214b883a 	add	r5,r4,r5
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    4634:	2984703a 	and	r2,r5,r6
    4638:	10c4b03a 	or	r2,r2,r3
    463c:	00ea7934 	movhi	r3,43492
    4640:	18fa4144 	addi	r3,r3,-5883
    4644:	10c5883a 	add	r2,r2,r3
    4648:	3c8f883a 	add	r7,r7,r18
    464c:	388f883a 	add	r7,r7,r2
    4650:	3a8e583a 	ror	r7,r7,r10
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4654:	0106303a 	nor	r3,zero,r4
    4658:	28c6703a 	and	r3,r5,r3
	GG(b,c,d,a,m[4], 20,0xe7d3fbc8);
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
    465c:	29cf883a 	add	r7,r5,r7
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4660:	3904703a 	and	r2,r7,r4
    4664:	10c4b03a 	or	r2,r2,r3
    4668:	00ff3c34 	movhi	r3,64752
    466c:	18e8fe04 	addi	r3,r3,-23560
    4670:	10c5883a 	add	r2,r2,r3
    4674:	d8c00217 	ldw	r3,8(sp)
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    4678:	2409883a 	add	r4,r4,r16
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
    467c:	02800544 	movi	r10,21
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4680:	30cd883a 	add	r6,r6,r3
    4684:	308d883a 	add	r6,r6,r2
    4688:	32cc583a 	ror	r6,r6,r11
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    468c:	0146303a 	nor	r3,zero,r5
    4690:	38c6703a 	and	r3,r7,r3
	GG(a,b,c,d,m[9], 5,0x21e1cde6);
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
    4694:	398d883a 	add	r6,r7,r6
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    4698:	3144703a 	and	r2,r6,r5
    469c:	10c4b03a 	or	r2,r2,r3
    46a0:	00d9dbf4 	movhi	r3,26479
    46a4:	18c0b644 	addi	r3,r3,729
    46a8:	10c5883a 	add	r2,r2,r3
    46ac:	2089883a 	add	r4,r4,r2
    46b0:	2248583a 	ror	r4,r4,r9
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46b4:	01c6303a 	nor	r3,zero,r7
    46b8:	30c6703a 	and	r3,r6,r3
	GG(d,a,b,c,m[14], 9,0xc33707d6);
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
    46bc:	3109883a 	add	r4,r6,r4
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46c0:	21c4703a 	and	r2,r4,r7
    46c4:	10c4b03a 	or	r2,r2,r3
    46c8:	00e34ab4 	movhi	r3,36138
    46cc:	18d32284 	addi	r3,r3,19594
    46d0:	10c5883a 	add	r2,r2,r3
    46d4:	2b8b883a 	add	r5,r5,r14
    46d8:	288b883a 	add	r5,r5,r2
    46dc:	2a0a583a 	ror	r5,r5,r8

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    46e0:	3104f03a 	xor	r2,r6,r4
    46e4:	00fffeb4 	movhi	r3,65530
    46e8:	18ce5084 	addi	r3,r3,14658
	GG(c,d,a,b,m[3], 14,0xf4d50d87);
	GG(b,c,d,a,m[8], 20,0x455a14ed);
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);
    46ec:	214b883a 	add	r5,r4,r5

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    46f0:	2884f03a 	xor	r2,r5,r2
    46f4:	10c5883a 	add	r2,r2,r3
    46f8:	3ccf883a 	add	r7,r7,r19
    46fc:	02c00704 	movi	r11,28
    4700:	388f883a 	add	r7,r7,r2
    4704:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[8], 11,0x8771f681);
    4708:	2144f03a 	xor	r2,r4,r5
    470c:	00e1dcb4 	movhi	r3,34674
    4710:	18fda044 	addi	r3,r3,-2431
	GG(a,b,c,d,m[13], 5,0xa9e3e905);
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
    4714:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[8], 11,0x8771f681);
    4718:	3884f03a 	xor	r2,r7,r2
    471c:	10c5883a 	add	r2,r2,r3
    4720:	354d883a 	add	r6,r6,r21
    4724:	308d883a 	add	r6,r6,r2
    4728:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    472c:	29c4f03a 	xor	r2,r5,r7
    4730:	00db6774 	movhi	r3,28061
    4734:	18d84884 	addi	r3,r3,24866
	GG(d,a,b,c,m[2], 9,0xfcefa3f8);
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
    4738:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    473c:	3084f03a 	xor	r2,r6,r2
    4740:	10c5883a 	add	r2,r2,r3
    4744:	2589883a 	add	r4,r4,r22
    4748:	02400404 	movi	r9,16
    474c:	2089883a 	add	r4,r4,r2
    4750:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4754:	3984f03a 	xor	r2,r7,r6
    4758:	00ff7974 	movhi	r3,64997
    475c:	18ce0304 	addi	r3,r3,14348
	GG(c,d,a,b,m[7], 14,0x676f02d9);
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
    4760:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4764:	2084f03a 	xor	r2,r4,r2
    4768:	10c5883a 	add	r2,r2,r3
    476c:	2b4b883a 	add	r5,r5,r13
    4770:	02000244 	movi	r8,9
    4774:	288b883a 	add	r5,r5,r2
    4778:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    477c:	3104f03a 	xor	r2,r6,r4
    4780:	00e92ff4 	movhi	r3,42175
    4784:	18fa9104 	addi	r3,r3,-5564
	GG(b,c,d,a,m[12],20,0x8d2a4c8a);

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
    4788:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    478c:	2884f03a 	xor	r2,r5,r2
    4790:	10c5883a 	add	r2,r2,r3
    4794:	d8c00117 	ldw	r3,4(sp)
    4798:	38cf883a 	add	r7,r7,r3
    479c:	388f883a 	add	r7,r7,r2
    47a0:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47a4:	2144f03a 	xor	r2,r4,r5
    47a8:	00d2f7f4 	movhi	r3,19423
    47ac:	18f3ea44 	addi	r3,r3,-12375

	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
    47b0:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47b4:	3884f03a 	xor	r2,r7,r2
    47b8:	10c5883a 	add	r2,r2,r3
    47bc:	d8c00417 	ldw	r3,16(sp)
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47c0:	2409883a 	add	r4,r4,r16
	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47c4:	30cd883a 	add	r6,r6,r3
    47c8:	308d883a 	add	r6,r6,r2
    47cc:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47d0:	29c4f03a 	xor	r2,r5,r7
    47d4:	00fdaef4 	movhi	r3,63163
    47d8:	18d2d804 	addi	r3,r3,19296
	HH(a,b,c,d,m[5], 4,0xfffa3942);
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
    47dc:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47e0:	3084f03a 	xor	r2,r6,r2
    47e4:	10c5883a 	add	r2,r2,r3
    47e8:	2089883a 	add	r4,r4,r2
    47ec:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    47f0:	3984f03a 	xor	r2,r7,r6
    47f4:	00efb034 	movhi	r3,48832
    47f8:	18ef1c04 	addi	r3,r3,-17296
	HH(d,a,b,c,m[8], 11,0x8771f681);
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
    47fc:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    4800:	2084f03a 	xor	r2,r4,r2
    4804:	10c5883a 	add	r2,r2,r3
    4808:	2c4b883a 	add	r5,r5,r17
    480c:	288b883a 	add	r5,r5,r2
    4810:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4814:	3104f03a 	xor	r2,r6,r4
    4818:	00ca26f4 	movhi	r3,10395
    481c:	18dfb184 	addi	r3,r3,32454
	HH(c,d,a,b,m[11],16,0x6d9d6122);
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
    4820:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4824:	2884f03a 	xor	r2,r5,r2
    4828:	10c5883a 	add	r2,r2,r3
    482c:	3c8f883a 	add	r7,r7,r18
    4830:	388f883a 	add	r7,r7,r2
    4834:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4838:	2144f03a 	xor	r2,r4,r5
    483c:	00faa874 	movhi	r3,60065
    4840:	18c9fe84 	addi	r3,r3,10234
	HH(b,c,d,a,m[14],23,0xfde5380c);
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
    4844:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4848:	3884f03a 	xor	r2,r7,r2
    484c:	10c5883a 	add	r2,r2,r3
    4850:	35cd883a 	add	r6,r6,r23
    4854:	308d883a 	add	r6,r6,r2
    4858:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    485c:	29c4f03a 	xor	r2,r5,r7
    4860:	00f53bf4 	movhi	r3,54511
    4864:	18cc2144 	addi	r3,r3,12421
	HH(a,b,c,d,m[1], 4,0xa4beea44);
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
    4868:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    486c:	3084f03a 	xor	r2,r6,r2
    4870:	10c5883a 	add	r2,r2,r3
    4874:	d8c00317 	ldw	r3,12(sp)
    4878:	20c9883a 	add	r4,r4,r3
    487c:	2089883a 	add	r4,r4,r2
    4880:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[6], 23,0x04881d05);
    4884:	3984f03a 	xor	r2,r7,r6
    4888:	00c12234 	movhi	r3,1160
    488c:	18c74144 	addi	r3,r3,7429
	HH(d,a,b,c,m[4], 11,0x4bdecfa9);
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
    4890:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[6], 23,0x04881d05);
    4894:	2084f03a 	xor	r2,r4,r2
    4898:	10c5883a 	add	r2,r2,r3
    489c:	d8c00617 	ldw	r3,24(sp)
    48a0:	28cb883a 	add	r5,r5,r3
    48a4:	288b883a 	add	r5,r5,r2
    48a8:	2a0a583a 	ror	r5,r5,r8
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48ac:	3104f03a 	xor	r2,r6,r4
    48b0:	00f67574 	movhi	r3,55765
    48b4:	18f40e44 	addi	r3,r3,-12231
	HH(c,d,a,b,m[7], 16,0xf6bb4b60);
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
    48b8:	214b883a 	add	r5,r4,r5
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48bc:	2884f03a 	xor	r2,r5,r2
    48c0:	10c5883a 	add	r2,r2,r3
    48c4:	d8c00917 	ldw	r3,36(sp)
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48c8:	338d883a 	add	r6,r6,r14
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48cc:	38cf883a 	add	r7,r7,r3
    48d0:	388f883a 	add	r7,r7,r2
    48d4:	3ace583a 	ror	r7,r7,r11
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48d8:	2144f03a 	xor	r2,r4,r5
    48dc:	00f9b734 	movhi	r3,59100
    48e0:	18e67944 	addi	r3,r3,-26139
	HH(b,c,d,a,m[10],23,0xbebfbc70);
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
    48e4:	29cf883a 	add	r7,r5,r7
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    48e8:	3884f03a 	xor	r2,r7,r2
    48ec:	10c5883a 	add	r2,r2,r3
    48f0:	308d883a 	add	r6,r6,r2
    48f4:	328c583a 	ror	r6,r6,r10
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    48f8:	29c4f03a 	xor	r2,r5,r7
    48fc:	00c7e8b4 	movhi	r3,8098
    4900:	18df3e04 	addi	r3,r3,31992
	HH(a,b,c,d,m[13], 4,0x289b7ec6);
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
    4904:	398d883a 	add	r6,r7,r6
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    4908:	3084f03a 	xor	r2,r6,r2
    490c:	10c5883a 	add	r2,r2,r3
    4910:	23c9883a 	add	r4,r4,r15
    4914:	2089883a 	add	r4,r4,r2
    4918:	2248583a 	ror	r4,r4,r9
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    491c:	3984f03a 	xor	r2,r7,r6
    4920:	00f12b34 	movhi	r3,50348
    4924:	18d59944 	addi	r3,r3,22117
	HH(d,a,b,c,m[0], 11,0xeaa127fa);
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
    4928:	3109883a 	add	r4,r6,r4
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    492c:	2084f03a 	xor	r2,r4,r2
    4930:	10c5883a 	add	r2,r2,r3
    4934:	d8c00217 	ldw	r3,8(sp)

	II(a,b,c,d,m[0], 6,0xf4292244);
    4938:	3dcf883a 	add	r7,r7,r23
    493c:	02c00684 	movi	r11,26
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    4940:	28cb883a 	add	r5,r5,r3
    4944:	288b883a 	add	r5,r5,r2
    4948:	2a0a583a 	ror	r5,r5,r8

	II(a,b,c,d,m[0], 6,0xf4292244);
    494c:	0184303a 	nor	r2,zero,r6
    4950:	00fd0a74 	movhi	r3,62505
    4954:	18c89104 	addi	r3,r3,8772
	HH(c,d,a,b,m[3], 16,0xd4ef3085);
	HH(b,c,d,a,m[6], 23,0x04881d05);
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);
    4958:	214b883a 	add	r5,r4,r5

	II(a,b,c,d,m[0], 6,0xf4292244);
    495c:	2884b03a 	or	r2,r5,r2
    4960:	2084f03a 	xor	r2,r4,r2
    4964:	10c5883a 	add	r2,r2,r3
    4968:	388f883a 	add	r7,r7,r2
    496c:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[7], 10,0x432aff97);
    4970:	0104303a 	nor	r2,zero,r4
    4974:	00d0caf4 	movhi	r3,17195
    4978:	18ffe5c4 	addi	r3,r3,-105
	HH(a,b,c,d,m[9], 4,0xd9d4d039);
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
    497c:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[7], 10,0x432aff97);
    4980:	3884b03a 	or	r2,r7,r2
    4984:	2884f03a 	xor	r2,r5,r2
    4988:	10c5883a 	add	r2,r2,r3
    498c:	340d883a 	add	r6,r6,r16
    4990:	02800584 	movi	r10,22
    4994:	308d883a 	add	r6,r6,r2
    4998:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[14],15,0xab9423a7);
    499c:	0144303a 	nor	r2,zero,r5
    49a0:	00eae534 	movhi	r3,43924
    49a4:	18c8e9c4 	addi	r3,r3,9127
	HH(d,a,b,c,m[12],11,0xe6db99e5);
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
    49a8:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[14],15,0xab9423a7);
    49ac:	3084b03a 	or	r2,r6,r2
    49b0:	3884f03a 	xor	r2,r7,r2
    49b4:	10c5883a 	add	r2,r2,r3
    49b8:	2349883a 	add	r4,r4,r13
    49bc:	02400444 	movi	r9,17
    49c0:	2089883a 	add	r4,r4,r2
    49c4:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[5], 21,0xfc93a039);
    49c8:	01c4303a 	nor	r2,zero,r7
    49cc:	00ff2534 	movhi	r3,64660
    49d0:	18e80e44 	addi	r3,r3,-24519
	HH(c,d,a,b,m[15],16,0x1fa27cf8);
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
    49d4:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[5], 21,0xfc93a039);
    49d8:	2084b03a 	or	r2,r4,r2
    49dc:	3084f03a 	xor	r2,r6,r2
    49e0:	10c5883a 	add	r2,r2,r3
    49e4:	2ccb883a 	add	r5,r5,r19
    49e8:	020002c4 	movi	r8,11
    49ec:	288b883a 	add	r5,r5,r2
    49f0:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[12], 6,0x655b59c3);
    49f4:	0184303a 	nor	r2,zero,r6
    49f8:	00d956f4 	movhi	r3,25947
    49fc:	18d670c4 	addi	r3,r3,22979
	HH(b,c,d,a,m[2], 23,0xc4ac5665);

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
    4a00:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[12], 6,0x655b59c3);
    4a04:	2884b03a 	or	r2,r5,r2
    4a08:	2084f03a 	xor	r2,r4,r2
    4a0c:	10c5883a 	add	r2,r2,r3
    4a10:	3b8f883a 	add	r7,r7,r14
    4a14:	388f883a 	add	r7,r7,r2
    4a18:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a1c:	d8c00317 	ldw	r3,12(sp)
    4a20:	0104303a 	nor	r2,zero,r4

	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
    4a24:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a28:	3884b03a 	or	r2,r7,r2
    4a2c:	2884f03a 	xor	r2,r5,r2
    4a30:	30cd883a 	add	r6,r6,r3
    4a34:	00e3c374 	movhi	r3,36621
    4a38:	18f32484 	addi	r3,r3,-13166
    4a3c:	10c5883a 	add	r2,r2,r3
    4a40:	308d883a 	add	r6,r6,r2
    4a44:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a48:	0144303a 	nor	r2,zero,r5
    4a4c:	00fffc34 	movhi	r3,65520
    4a50:	18fd1f44 	addi	r3,r3,-2947
	II(a,b,c,d,m[0], 6,0xf4292244);
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
    4a54:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a58:	3084b03a 	or	r2,r6,r2
    4a5c:	3884f03a 	xor	r2,r7,r2
    4a60:	10c5883a 	add	r2,r2,r3
    4a64:	2449883a 	add	r4,r4,r17
    4a68:	2089883a 	add	r4,r4,r2
    4a6c:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4a70:	d8c00117 	ldw	r3,4(sp)
    4a74:	01c4303a 	nor	r2,zero,r7
	II(d,a,b,c,m[7], 10,0x432aff97);
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
    4a78:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4a7c:	2084b03a 	or	r2,r4,r2
    4a80:	3084f03a 	xor	r2,r6,r2
    4a84:	28cb883a 	add	r5,r5,r3
    4a88:	00e16134 	movhi	r3,34180
    4a8c:	18d77444 	addi	r3,r3,24017
    4a90:	10c5883a 	add	r2,r2,r3
    4a94:	288b883a 	add	r5,r5,r2
    4a98:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4a9c:	0184303a 	nor	r2,zero,r6
    4aa0:	00dbea34 	movhi	r3,28584
    4aa4:	18df93c4 	addi	r3,r3,32335
	II(c,d,a,b,m[14],15,0xab9423a7);
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
    4aa8:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4aac:	2884b03a 	or	r2,r5,r2
    4ab0:	2084f03a 	xor	r2,r4,r2
    4ab4:	10c5883a 	add	r2,r2,r3
    4ab8:	3d4f883a 	add	r7,r7,r21
    4abc:	388f883a 	add	r7,r7,r2
    4ac0:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4ac4:	0104303a 	nor	r2,zero,r4
    4ac8:	00ff8b74 	movhi	r3,65069
    4acc:	18f9b804 	addi	r3,r3,-6432
	II(b,c,d,a,m[5], 21,0xfc93a039);
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
    4ad0:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4ad4:	3884b03a 	or	r2,r7,r2
    4ad8:	2884f03a 	xor	r2,r5,r2
    4adc:	10c5883a 	add	r2,r2,r3
    4ae0:	33cd883a 	add	r6,r6,r15
    4ae4:	308d883a 	add	r6,r6,r2
    4ae8:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[6], 15,0xa3014314);
    4aec:	d8c00617 	ldw	r3,24(sp)
    4af0:	0144303a 	nor	r2,zero,r5
	II(a,b,c,d,m[12], 6,0x655b59c3);
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
    4af4:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[6], 15,0xa3014314);
    4af8:	3084b03a 	or	r2,r6,r2
    4afc:	3884f03a 	xor	r2,r7,r2
    4b00:	20c9883a 	add	r4,r4,r3
    4b04:	00e8c074 	movhi	r3,41729
    4b08:	18d0c504 	addi	r3,r3,17172
    4b0c:	10c5883a 	add	r2,r2,r3
    4b10:	2089883a 	add	r4,r4,r2
    4b14:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b18:	01c4303a 	nor	r2,zero,r7
    4b1c:	00d38234 	movhi	r3,19976
    4b20:	18c46844 	addi	r3,r3,4513
	II(d,a,b,c,m[3], 10,0x8f0ccc92);
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
    4b24:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b28:	2084b03a 	or	r2,r4,r2
    4b2c:	3084f03a 	xor	r2,r6,r2
    4b30:	10c5883a 	add	r2,r2,r3
    4b34:	2c8b883a 	add	r5,r5,r18
    4b38:	288b883a 	add	r5,r5,r2
    4b3c:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b40:	d8c00417 	ldw	r3,16(sp)
    4b44:	0184303a 	nor	r2,zero,r6
	II(c,d,a,b,m[10],15,0xffeff47d);
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
    4b48:	214b883a 	add	r5,r4,r5
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b4c:	2884b03a 	or	r2,r5,r2
    4b50:	2084f03a 	xor	r2,r4,r2
    4b54:	38cf883a 	add	r7,r7,r3
    4b58:	00fdd4f4 	movhi	r3,63315
    4b5c:	18dfa084 	addi	r3,r3,32386
    4b60:	10c5883a 	add	r2,r2,r3
    4b64:	388f883a 	add	r7,r7,r2
    4b68:	3ace583a 	ror	r7,r7,r11
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b6c:	0104303a 	nor	r2,zero,r4
    4b70:	00ef4ef4 	movhi	r3,48443
    4b74:	18fc8d44 	addi	r3,r3,-3531
	II(b,c,d,a,m[1], 21,0x85845dd1);
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
    4b78:	29cf883a 	add	r7,r5,r7
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b7c:	3884b03a 	or	r2,r7,r2
    4b80:	2884f03a 	xor	r2,r5,r2
    4b84:	10c5883a 	add	r2,r2,r3
    4b88:	358d883a 	add	r6,r6,r22
    4b8c:	308d883a 	add	r6,r6,r2
    4b90:	328c583a 	ror	r6,r6,r10
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4b94:	d8c00217 	ldw	r3,8(sp)
    4b98:	0144303a 	nor	r2,zero,r5
	II(a,b,c,d,m[8], 6,0x6fa87e4f);
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
    4b9c:	398d883a 	add	r6,r7,r6
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4ba0:	3084b03a 	or	r2,r6,r2
    4ba4:	3884f03a 	xor	r2,r7,r2
    4ba8:	20c9883a 	add	r4,r4,r3
    4bac:	00cab634 	movhi	r3,10968
    4bb0:	18f4aec4 	addi	r3,r3,-11589
    4bb4:	10c5883a 	add	r2,r2,r3
    4bb8:	2089883a 	add	r4,r4,r2
    4bbc:	2248583a 	ror	r4,r4,r9
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bc0:	d8c00917 	ldw	r3,36(sp)
    4bc4:	01c4303a 	nor	r2,zero,r7
	II(d,a,b,c,m[15],10,0xfe2ce6e0);
	II(c,d,a,b,m[6], 15,0xa3014314);
	II(b,c,d,a,m[13],21,0x4e0811a1);
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
    4bc8:	3109883a 	add	r4,r6,r4
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bcc:	2084b03a 	or	r2,r4,r2
    4bd0:	3084f03a 	xor	r2,r6,r2
    4bd4:	28cb883a 	add	r5,r5,r3
    4bd8:	00fae1f4 	movhi	r3,60295
    4bdc:	18f4e444 	addi	r3,r3,-11375
    4be0:	10c5883a 	add	r2,r2,r3
    4be4:	288b883a 	add	r5,r5,r2
    4be8:	2319883a 	add	r12,r4,r12
	ctx->state[2] += c;
    4bec:	a129883a 	add	r20,r20,r4
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4bf0:	e0801317 	ldw	r2,76(fp)
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
    4bf4:	e1001617 	ldw	r4,88(fp)
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4bf8:	2a0a583a 	ror	r5,r5,r8
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4bfc:	11cf883a 	add	r7,r2,r7
	ctx->state[1] += b;
	ctx->state[2] += c;
	ctx->state[3] += d;
    4c00:	218d883a 	add	r6,r4,r6
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
	ctx->state[1] += b;
    4c04:	2b0b883a 	add	r5,r5,r12
	ctx->state[2] += c;
	ctx->state[3] += d;
    4c08:	e1801615 	stw	r6,88(fp)
	II(a,b,c,d,m[4], 6,0xf7537e82);
	II(d,a,b,c,m[11],10,0xbd3af235);
	II(c,d,a,b,m[2], 15,0x2ad7d2bb);
	II(b,c,d,a,m[9], 21,0xeb86d391);

	ctx->state[0] += a;
    4c0c:	e1c01315 	stw	r7,76(fp)
	ctx->state[1] += b;
    4c10:	e1401415 	stw	r5,80(fp)
	ctx->state[2] += c;
    4c14:	e5001515 	stw	r20,84(fp)
	ctx->state[3] += d;
}
    4c18:	df001817 	ldw	fp,96(sp)
    4c1c:	ddc01717 	ldw	r23,92(sp)
    4c20:	dd801617 	ldw	r22,88(sp)
    4c24:	dd401517 	ldw	r21,84(sp)
    4c28:	dd001417 	ldw	r20,80(sp)
    4c2c:	dcc01317 	ldw	r19,76(sp)
    4c30:	dc801217 	ldw	r18,72(sp)
    4c34:	dc401117 	ldw	r17,68(sp)
    4c38:	dc001017 	ldw	r16,64(sp)
    4c3c:	dec01904 	addi	sp,sp,100
    4c40:	f800283a 	ret

00004c44 <md5_init>:
	ctx->bitlen[0] = 0;
	ctx->bitlen[1] = 0;
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xEFCDAB89;
	ctx->state[2] = 0x98BADCFE;
	ctx->state[3] = 0x10325476;
    4c44:	00840cb4 	movhi	r2,4146
    4c48:	10951d84 	addi	r2,r2,21622
    4c4c:	20801615 	stw	r2,88(r4)

void md5_init(MD5_CTX *ctx) {
	ctx->datalen = 0;
	ctx->bitlen[0] = 0;
	ctx->bitlen[1] = 0;
	ctx->state[0] = 0x67452301;
    4c50:	0099d174 	movhi	r2,26437
    4c54:	1088c044 	addi	r2,r2,8961
    4c58:	20801315 	stw	r2,76(r4)
	ctx->state[1] = 0xEFCDAB89;
    4c5c:	00bbf3b4 	movhi	r2,61390
    4c60:	10aae244 	addi	r2,r2,-21623
    4c64:	20801415 	stw	r2,80(r4)
	ctx->state[2] = 0x98BADCFE;
    4c68:	00a62ef4 	movhi	r2,39099
    4c6c:	10b73f84 	addi	r2,r2,-8962
    4c70:	20801515 	stw	r2,84(r4)
	ctx->state[2] += c;
	ctx->state[3] += d;
}

void md5_init(MD5_CTX *ctx) {
	ctx->datalen = 0;
    4c74:	20001015 	stw	zero,64(r4)
	ctx->bitlen[0] = 0;
    4c78:	20001115 	stw	zero,68(r4)
	ctx->bitlen[1] = 0;
    4c7c:	20001215 	stw	zero,72(r4)
	ctx->state[0] = 0x67452301;
	ctx->state[1] = 0xEFCDAB89;
	ctx->state[2] = 0x98BADCFE;
	ctx->state[3] = 0x10325476;
}
    4c80:	f800283a 	ret

00004c84 <md5_update>:

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
    4c84:	defffb04 	addi	sp,sp,-20
    4c88:	dcc00315 	stw	r19,12(sp)
    4c8c:	dc800215 	stw	r18,8(sp)
    4c90:	dc400115 	stw	r17,4(sp)
    4c94:	dc000015 	stw	r16,0(sp)
    4c98:	2827883a 	mov	r19,r5
    4c9c:	2021883a 	mov	r16,r4
    4ca0:	3025883a 	mov	r18,r6
    4ca4:	0023883a 	mov	r17,zero
    4ca8:	dfc00415 	stw	ra,16(sp)
    4cac:	00001606 	br	4d08 <md5_update+0x84>
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4cb0:	80801017 	ldw	r2,64(r16)
    4cb4:	18c00003 	ldbu	r3,0(r3)
		ctx->datalen++;
		if (ctx->datalen == 64) {
			md5_transform(ctx, ctx->data);
    4cb8:	8009883a 	mov	r4,r16
void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
    4cbc:	11800044 	addi	r6,r2,1

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4cc0:	8085883a 	add	r2,r16,r2
    4cc4:	10c00005 	stb	r3,0(r2)
		ctx->datalen++;
		if (ctx->datalen == 64) {
    4cc8:	00801004 	movi	r2,64
			md5_transform(ctx, ctx->data);
    4ccc:	800b883a 	mov	r5,r16
}

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
    4cd0:	8c400044 	addi	r17,r17,1
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
    4cd4:	81801015 	stw	r6,64(r16)
		if (ctx->datalen == 64) {
    4cd8:	30800b1e 	bne	r6,r2,4d08 <md5_update+0x84>
			md5_transform(ctx, ctx->data);
    4cdc:	000406c0 	call	406c <md5_transform>
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
    4ce0:	80c01117 	ldw	r3,68(r16)
    4ce4:	00bf7fc4 	movi	r2,-513
    4ce8:	10c0032e 	bgeu	r2,r3,4cf8 <md5_update+0x74>
    4cec:	80801217 	ldw	r2,72(r16)
    4cf0:	10800044 	addi	r2,r2,1
    4cf4:	80801215 	stw	r2,72(r16)
    4cf8:	80801117 	ldw	r2,68(r16)
			ctx->datalen = 0;
    4cfc:	80001015 	stw	zero,64(r16)
	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
		ctx->datalen++;
		if (ctx->datalen == 64) {
			md5_transform(ctx, ctx->data);
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
    4d00:	10808004 	addi	r2,r2,512
    4d04:	80801115 	stw	r2,68(r16)

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
		ctx->data[ctx->datalen] = data[i];
    4d08:	9c47883a 	add	r3,r19,r17
}

void md5_update(MD5_CTX *ctx, uchar data[], uint len) {
	uint t, i;

	for (i = 0; i < len; ++i) {
    4d0c:	8cbfe81e 	bne	r17,r18,4cb0 <md5_update+0x2c>
			md5_transform(ctx, ctx->data);
			DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
			ctx->datalen = 0;
		}
	}
}
    4d10:	dfc00417 	ldw	ra,16(sp)
    4d14:	dcc00317 	ldw	r19,12(sp)
    4d18:	dc800217 	ldw	r18,8(sp)
    4d1c:	dc400117 	ldw	r17,4(sp)
    4d20:	dc000017 	ldw	r16,0(sp)
    4d24:	dec00504 	addi	sp,sp,20
    4d28:	f800283a 	ret

00004d2c <md5_final>:

void md5_final(MD5_CTX *ctx, uchar hash[]) {
	uint i;

	i = ctx->datalen;
    4d2c:	20c01017 	ldw	r3,64(r4)
			ctx->datalen = 0;
		}
	}
}

void md5_final(MD5_CTX *ctx, uchar hash[]) {
    4d30:	defffd04 	addi	sp,sp,-12
	uint i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
    4d34:	00800dc4 	movi	r2,55
			ctx->datalen = 0;
		}
	}
}

void md5_final(MD5_CTX *ctx, uchar hash[]) {
    4d38:	dc400115 	stw	r17,4(sp)
    4d3c:	dc000015 	stw	r16,0(sp)
    4d40:	2823883a 	mov	r17,r5
    4d44:	2021883a 	mov	r16,r4
    4d48:	20cb883a 	add	r5,r4,r3
    4d4c:	dfc00215 	stw	ra,8(sp)
    4d50:	19000044 	addi	r4,r3,1
	uint i;

	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
    4d54:	10c00b36 	bltu	r2,r3,4d84 <md5_final+0x58>
		ctx->data[i++] = 0x80;
    4d58:	2007883a 	mov	r3,r4
    4d5c:	00bfe004 	movi	r2,-128
    4d60:	8109883a 	add	r4,r16,r4
    4d64:	01800e04 	movi	r6,56
    4d68:	28800005 	stb	r2,0(r5)
    4d6c:	00000206 	br	4d78 <md5_final+0x4c>
		while (i < 56)
			ctx->data[i++] = 0x00;
    4d70:	203fffc5 	stb	zero,-1(r4)
    4d74:	18c00044 	addi	r3,r3,1
    4d78:	21000044 	addi	r4,r4,1
	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
		while (i < 56)
    4d7c:	19bffc1e 	bne	r3,r6,4d70 <md5_final+0x44>
    4d80:	00001106 	br	4dc8 <md5_final+0x9c>
			ctx->data[i++] = 0x00;
	} else if (ctx->datalen >= 56) {
		ctx->data[i++] = 0x80;
    4d84:	2007883a 	mov	r3,r4
    4d88:	00bfe004 	movi	r2,-128
    4d8c:	8109883a 	add	r4,r16,r4
    4d90:	01800fc4 	movi	r6,63
    4d94:	28800005 	stb	r2,0(r5)
    4d98:	00000206 	br	4da4 <md5_final+0x78>
		while (i < 64)
			ctx->data[i++] = 0x00;
    4d9c:	203fffc5 	stb	zero,-1(r4)
    4da0:	18c00044 	addi	r3,r3,1
    4da4:	21000044 	addi	r4,r4,1
		ctx->data[i++] = 0x80;
		while (i < 56)
			ctx->data[i++] = 0x00;
	} else if (ctx->datalen >= 56) {
		ctx->data[i++] = 0x80;
		while (i < 64)
    4da8:	30fffc2e 	bgeu	r6,r3,4d9c <md5_final+0x70>
			ctx->data[i++] = 0x00;
		md5_transform(ctx, ctx->data);
    4dac:	800b883a 	mov	r5,r16
    4db0:	8009883a 	mov	r4,r16
    4db4:	000406c0 	call	406c <md5_transform>
		memset(ctx->data, 0, 56);
    4db8:	01800e04 	movi	r6,56
    4dbc:	8009883a 	mov	r4,r16
    4dc0:	000b883a 	mov	r5,zero
    4dc4:	00056b80 	call	56b8 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4dc8:	80801017 	ldw	r2,64(r16)
    4dcc:	80c01117 	ldw	r3,68(r16)
    4dd0:	100490fa 	slli	r2,r2,3
    4dd4:	0084303a 	nor	r2,zero,r2
    4dd8:	10c0032e 	bgeu	r2,r3,4de8 <md5_final+0xbc>
    4ddc:	80801217 	ldw	r2,72(r16)
    4de0:	10800044 	addi	r2,r2,1
    4de4:	80801215 	stw	r2,72(r16)
    4de8:	80801017 	ldw	r2,64(r16)
    4dec:	80c01117 	ldw	r3,68(r16)
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
    4df0:	81401217 	ldw	r5,72(r16)
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4df4:	100490fa 	slli	r2,r2,3
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);
    4df8:	8009883a 	mov	r4,r16
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
    4dfc:	2814d63a 	srli	r10,r5,24
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4e00:	1887883a 	add	r3,r3,r2
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
    4e04:	1812d63a 	srli	r9,r3,24
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
    4e08:	1804d23a 	srli	r2,r3,8
	ctx->data[58] = ctx->bitlen[0] >> 16;
    4e0c:	180cd43a 	srli	r6,r3,16
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
    4e10:	280ed23a 	srli	r7,r5,8
	ctx->data[62] = ctx->bitlen[1] >> 16;
    4e14:	2810d43a 	srli	r8,r5,16
		md5_transform(ctx, ctx->data);
		memset(ctx->data, 0, 56);
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
    4e18:	80c01115 	stw	r3,68(r16)
	ctx->data[56] = ctx->bitlen[0];
    4e1c:	80c00e05 	stb	r3,56(r16)
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
    4e20:	81400f05 	stb	r5,60(r16)
	}

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
    4e24:	80800e45 	stb	r2,57(r16)
	ctx->data[59] = ctx->bitlen[0] >> 24;
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
	ctx->data[62] = ctx->bitlen[1] >> 16;
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);
    4e28:	800b883a 	mov	r5,r16

	// Append to the padding the total message's length in bits and transform.
	DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
	ctx->data[56] = ctx->bitlen[0];
	ctx->data[57] = ctx->bitlen[0] >> 8;
	ctx->data[58] = ctx->bitlen[0] >> 16;
    4e2c:	81800e85 	stb	r6,58(r16)
	ctx->data[59] = ctx->bitlen[0] >> 24;
    4e30:	82400ec5 	stb	r9,59(r16)
	ctx->data[60] = ctx->bitlen[1];
	ctx->data[61] = ctx->bitlen[1] >> 8;
    4e34:	81c00f45 	stb	r7,61(r16)
	ctx->data[62] = ctx->bitlen[1] >> 16;
    4e38:	82000f85 	stb	r8,62(r16)
	ctx->data[63] = ctx->bitlen[1] >> 24;
    4e3c:	82800fc5 	stb	r10,63(r16)
	md5_transform(ctx, ctx->data);
    4e40:	000406c0 	call	406c <md5_transform>
    4e44:	0007883a 	mov	r3,zero
    4e48:	880b883a 	mov	r5,r17
    4e4c:	01000804 	movi	r4,32

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
		hash[i] = (ctx->state[0] >> (i * 8)) & 0x000000ff;
    4e50:	80801317 	ldw	r2,76(r16)
    4e54:	10c4d83a 	srl	r2,r2,r3
    4e58:	28800005 	stb	r2,0(r5)
		hash[i + 4] = (ctx->state[1] >> (i * 8)) & 0x000000ff;
    4e5c:	80801417 	ldw	r2,80(r16)
    4e60:	10c4d83a 	srl	r2,r2,r3
    4e64:	28800105 	stb	r2,4(r5)
		hash[i + 8] = (ctx->state[2] >> (i * 8)) & 0x000000ff;
    4e68:	80801517 	ldw	r2,84(r16)
    4e6c:	10c4d83a 	srl	r2,r2,r3
    4e70:	28800205 	stb	r2,8(r5)
		hash[i + 12] = (ctx->state[3] >> (i * 8)) & 0x000000ff;
    4e74:	80801617 	ldw	r2,88(r16)
    4e78:	10c4d83a 	srl	r2,r2,r3
    4e7c:	18c00204 	addi	r3,r3,8
    4e80:	28800305 	stb	r2,12(r5)
    4e84:	29400044 	addi	r5,r5,1
	ctx->data[63] = ctx->bitlen[1] >> 24;
	md5_transform(ctx, ctx->data);

	// Since this implementation uses little endian byte ordering and MD uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
    4e88:	193ff11e 	bne	r3,r4,4e50 <md5_final+0x124>
		hash[i] = (ctx->state[0] >> (i * 8)) & 0x000000ff;
		hash[i + 4] = (ctx->state[1] >> (i * 8)) & 0x000000ff;
		hash[i + 8] = (ctx->state[2] >> (i * 8)) & 0x000000ff;
		hash[i + 12] = (ctx->state[3] >> (i * 8)) & 0x000000ff;
	}
}
    4e8c:	dfc00217 	ldw	ra,8(sp)
    4e90:	dc400117 	ldw	r17,4(sp)
    4e94:	dc000017 	ldw	r16,0(sp)
    4e98:	dec00304 	addi	sp,sp,12
    4e9c:	f800283a 	ret

00004ea0 <print_hash>:

void print_hash(uchar hash[]) {
    4ea0:	defffd04 	addi	sp,sp,-12
    4ea4:	dc400115 	stw	r17,4(sp)
    4ea8:	dc000015 	stw	r16,0(sp)
    4eac:	dfc00215 	stw	ra,8(sp)
    4eb0:	2023883a 	mov	r17,r4
    4eb4:	0021883a 	mov	r16,zero
	int idx;
	for (idx = 0; idx < 16; idx++)
		if (hash[idx] < 16) {
    4eb8:	8c05883a 	add	r2,r17,r16
    4ebc:	10c00003 	ldbu	r3,0(r2)
    4ec0:	008003c4 	movi	r2,15
			printf("0%x", hash[idx]); //values less than 16 needs to be
    4ec4:	01000034 	movhi	r4,0
    4ec8:	21195504 	addi	r4,r4,25940
    4ecc:	180b883a 	mov	r5,r3
}

void print_hash(uchar hash[]) {
	int idx;
	for (idx = 0; idx < 16; idx++)
		if (hash[idx] < 16) {
    4ed0:	10c0032e 	bgeu	r2,r3,4ee0 <print_hash+0x40>
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
    4ed4:	180b883a 	mov	r5,r3
    4ed8:	01000034 	movhi	r4,0
    4edc:	21195604 	addi	r4,r4,25944
    4ee0:	00056d80 	call	56d8 <printf>
	}
}

void print_hash(uchar hash[]) {
	int idx;
	for (idx = 0; idx < 16; idx++)
    4ee4:	84000044 	addi	r16,r16,1
    4ee8:	00800404 	movi	r2,16
    4eec:	80bff21e 	bne	r16,r2,4eb8 <print_hash+0x18>
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
    4ef0:	01000284 	movi	r4,10
}
    4ef4:	dfc00217 	ldw	ra,8(sp)
    4ef8:	dc400117 	ldw	r17,4(sp)
    4efc:	dc000017 	ldw	r16,0(sp)
    4f00:	dec00304 	addi	sp,sp,12
			printf("0%x", hash[idx]); //values less than 16 needs to be
			//adjusted to two digits
		} else {
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
    4f04:	00057701 	jmpi	5770 <putchar>

00004f08 <findStringEqual33>:
}

void findStringEqual33(char *str, int index, int len) { //MD5_CTX *myMD5_obj
    4f08:	deffde04 	addi	sp,sp,-136
	//try every combination for the given input which produces 21 ..... 21
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
    4f0c:	30bfffc4 	addi	r2,r6,-1
			printf("%x", hash[idx]);//else already 2 digits
		}
	printf("\n");
}

void findStringEqual33(char *str, int index, int len) { //MD5_CTX *myMD5_obj
    4f10:	dd001f15 	stw	r20,124(sp)
    4f14:	dcc01e15 	stw	r19,120(sp)
    4f18:	dc401c15 	stw	r17,112(sp)
    4f1c:	dfc02115 	stw	ra,132(sp)
    4f20:	dd402015 	stw	r21,128(sp)
    4f24:	dc801d15 	stw	r18,116(sp)
    4f28:	dc001b15 	stw	r16,108(sp)
    4f2c:	3029883a 	mov	r20,r6
    4f30:	2827883a 	mov	r19,r5
    4f34:	2023883a 	mov	r17,r4
	//try every combination for the given input which produces 21 ..... 21
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
    4f38:	28803f0e 	bge	r5,r2,5038 <findStringEqual33+0x130>
    4f3c:	04800c04 	movi	r18,48
    4f40:	002b883a 	mov	r21,zero
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f44:	91403fcc 	andi	r5,r18,255
				str[index] = myChar;
				MD5_CTX testObj;
				md5_init(&testObj);
    4f48:	dc000404 	addi	r16,sp,16
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f4c:	2940201c 	xori	r5,r5,128
    4f50:	a8c03fcc 	andi	r3,r21,255
    4f54:	00800244 	movi	r2,9
				str[index] = myChar;
    4f58:	8ccd883a 	add	r6,r17,r19
				MD5_CTX testObj;
				md5_init(&testObj);
    4f5c:	8009883a 	mov	r4,r16
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar)) {
    4f60:	297fe004 	addi	r5,r5,-128
    4f64:	10c0022e 	bgeu	r2,r3,4f70 <findStringEqual33+0x68>
    4f68:	00801804 	movi	r2,96
    4f6c:	11402a0e 	bge	r2,r5,5018 <findStringEqual33+0x110>
				str[index] = myChar;
    4f70:	34800005 	stb	r18,0(r6)
				MD5_CTX testObj;
				md5_init(&testObj);
    4f74:	0004c440 	call	4c44 <md5_init>
				md5_update(&testObj, str, strlen(str));
    4f78:	8809883a 	mov	r4,r17
    4f7c:	00058380 	call	5838 <strlen>
    4f80:	100d883a 	mov	r6,r2
    4f84:	8009883a 	mov	r4,r16
    4f88:	880b883a 	mov	r5,r17
    4f8c:	0004c840 	call	4c84 <md5_update>
				md5_final(&testObj, hash);
    4f90:	8009883a 	mov	r4,r16
    4f94:	d80b883a 	mov	r5,sp
    4f98:	0004d2c0 	call	4d2c <md5_final>

				if ((hash[15] == 33) && (hash[0] == 33)) {
    4f9c:	d8c003c3 	ldbu	r3,15(sp)
    4fa0:	00800844 	movi	r2,33
    4fa4:	1880181e 	bne	r3,r2,5008 <findStringEqual33+0x100>
    4fa8:	d8800003 	ldbu	r2,0(sp)
    4fac:	10c0161e 	bne	r2,r3,5008 <findStringEqual33+0x100>
					hitCount = hitCount + 1;
    4fb0:	d0a04217 	ldw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
    4fb4:	01000034 	movhi	r4,0
    4fb8:	21195704 	addi	r4,r4,25948
				md5_init(&testObj);
				md5_update(&testObj, str, strlen(str));
				md5_final(&testObj, hash);

				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
    4fbc:	10800044 	addi	r2,r2,1
    4fc0:	d0a04215 	stw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
    4fc4:	00800104 	movi	r2,4
    4fc8:	a0800f1e 	bne	r20,r2,5008 <findStringEqual33+0x100>
						printf("The 4 digits input is: ");
    4fcc:	00056d80 	call	56d8 <printf>
						printf("%s", str);
    4fd0:	880b883a 	mov	r5,r17
    4fd4:	01000034 	movhi	r4,0
    4fd8:	21195d04 	addi	r4,r4,25972
    4fdc:	00056d80 	call	56d8 <printf>
						printf("\n");
    4fe0:	01000284 	movi	r4,10
    4fe4:	00057700 	call	5770 <putchar>
						printf("MD5 Digest is: ");
    4fe8:	01000034 	movhi	r4,0
    4fec:	21195e04 	addi	r4,r4,25976
    4ff0:	00056d80 	call	56d8 <printf>
						print_hash(hash);
    4ff4:	d809883a 	mov	r4,sp
    4ff8:	0004ea00 	call	4ea0 <print_hash>
						printf("----------------\n");
    4ffc:	01000034 	movhi	r4,0
    5000:	21196204 	addi	r4,r4,25992
    5004:	00058240 	call	5824 <puts>
					}
				}
				findStringEqual33(str, index + 1, len); //recursive call
    5008:	8809883a 	mov	r4,r17
    500c:	99400044 	addi	r5,r19,1
    5010:	a00d883a 	mov	r6,r20
    5014:	0004f080 	call	4f08 <findStringEqual33>
	//findStringEqual33(&testObj, hash, &testObj.datalen);
	int i, j;
	char myChar;
	uchar hash[16];
	if (index < (len - 1)) {
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
    5018:	94800044 	addi	r18,r18,1
    501c:	90c03fcc 	andi	r3,r18,255
    5020:	18c0201c 	xori	r3,r3,128
    5024:	18ffe004 	addi	r3,r3,-128
    5028:	00801ec4 	movi	r2,123
    502c:	ad400044 	addi	r21,r21,1
    5030:	18803d26 	beq	r3,r2,5128 <findStringEqual33+0x220>
    5034:	003fc306 	br	4f44 <findStringEqual33+0x3c>
    5038:	04800c04 	movi	r18,48
    503c:	002b883a 	mov	r21,zero
				findStringEqual33(str, index + 1, len); //recursive call
			}
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar
    5040:	a8c03fcc 	andi	r3,r21,255
    5044:	00800244 	movi	r2,9
    5048:	10c0042e 	bgeu	r2,r3,505c <findStringEqual33+0x154>
    504c:	90bfe7c4 	addi	r2,r18,-97
    5050:	10803fcc 	andi	r2,r2,255
    5054:	00c00644 	movi	r3,25
    5058:	18802c36 	bltu	r3,r2,510c <findStringEqual33+0x204>
					<= 122)) {
				str[index] = myChar;
				MD5_CTX testObj;
				md5_init(&testObj);
    505c:	dc000404 	addi	r16,sp,16
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
			if ((myChar >= 48 && myChar <= 57) || (myChar >= 97 && myChar
					<= 122)) {
				str[index] = myChar;
    5060:	8cc5883a 	add	r2,r17,r19
    5064:	14800005 	stb	r18,0(r2)
				MD5_CTX testObj;
				md5_init(&testObj);
    5068:	8009883a 	mov	r4,r16
    506c:	0004c440 	call	4c44 <md5_init>
				md5_update(&testObj, str, strlen(str));
    5070:	8809883a 	mov	r4,r17
    5074:	00058380 	call	5838 <strlen>
    5078:	100d883a 	mov	r6,r2
    507c:	8009883a 	mov	r4,r16
    5080:	880b883a 	mov	r5,r17
    5084:	0004c840 	call	4c84 <md5_update>
				md5_final(&testObj, hash);
    5088:	8009883a 	mov	r4,r16
    508c:	d80b883a 	mov	r5,sp
    5090:	0004d2c0 	call	4d2c <md5_final>

				if ((hash[15] == 33) && (hash[0] == 33)) {
    5094:	d8c003c3 	ldbu	r3,15(sp)
    5098:	00800844 	movi	r2,33
    509c:	18801b1e 	bne	r3,r2,510c <findStringEqual33+0x204>
    50a0:	d8800003 	ldbu	r2,0(sp)
    50a4:	10c0191e 	bne	r2,r3,510c <findStringEqual33+0x204>
					hitCount = hitCount + 1;
    50a8:	d0a04217 	ldw	r2,-32504(gp)
    50ac:	10800044 	addi	r2,r2,1
    50b0:	d0a04215 	stw	r2,-32504(gp)
					//printf("The 4 digits input is: ");
					if (len == 4) {
    50b4:	00800104 	movi	r2,4
    50b8:	a080141e 	bne	r20,r2,510c <findStringEqual33+0x204>
						printf("The 4 digits input is: ");
    50bc:	01000034 	movhi	r4,0
    50c0:	21195704 	addi	r4,r4,25948
    50c4:	00056d80 	call	56d8 <printf>
    50c8:	0021883a 	mov	r16,zero
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
							printf("%c", str[i]);
    50cc:	8c05883a 	add	r2,r17,r16
    50d0:	11000007 	ldb	r4,0(r2)
				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
    50d4:	84000044 	addi	r16,r16,1
							printf("%c", str[i]);
    50d8:	00057700 	call	5770 <putchar>
				if ((hash[15] == 33) && (hash[0] == 33)) {
					hitCount = hitCount + 1;
					//printf("The 4 digits input is: ");
					if (len == 4) {
						printf("The 4 digits input is: ");
						for (i = 0; i < (sizeof(str) / sizeof(str[0])); i++) {
    50dc:	00800104 	movi	r2,4
    50e0:	80bffa1e 	bne	r16,r2,50cc <findStringEqual33+0x1c4>
							printf("%c", str[i]);
						}
						printf("\n");
    50e4:	01000284 	movi	r4,10
    50e8:	00057700 	call	5770 <putchar>
						printf("MD5 Digest is: ");
    50ec:	01000034 	movhi	r4,0
    50f0:	21195e04 	addi	r4,r4,25976
    50f4:	00056d80 	call	56d8 <printf>
						print_hash(hash);
    50f8:	d809883a 	mov	r4,sp
    50fc:	0004ea00 	call	4ea0 <print_hash>
						printf("----------------\n");
    5100:	01000034 	movhi	r4,0
    5104:	21196204 	addi	r4,r4,25992
    5108:	00058240 	call	5824 <puts>
				}
				findStringEqual33(str, index + 1, len); //recursive call
			}
		}
	} else { //base case
		for (myChar = '0'; myChar <= 'z'; ++myChar) {
    510c:	94800044 	addi	r18,r18,1
    5110:	90c03fcc 	andi	r3,r18,255
    5114:	18c0201c 	xori	r3,r3,128
    5118:	18ffe004 	addi	r3,r3,-128
    511c:	00801ec4 	movi	r2,123
    5120:	ad400044 	addi	r21,r21,1
    5124:	18bfc61e 	bne	r3,r2,5040 <findStringEqual33+0x138>
				}
			}
		}
	}

}
    5128:	dfc02117 	ldw	ra,132(sp)
    512c:	dd402017 	ldw	r21,128(sp)
    5130:	dd001f17 	ldw	r20,124(sp)
    5134:	dcc01e17 	ldw	r19,120(sp)
    5138:	dc801d17 	ldw	r18,116(sp)
    513c:	dc401c17 	ldw	r17,112(sp)
    5140:	dc001b17 	ldw	r16,108(sp)
    5144:	dec02204 	addi	sp,sp,136
    5148:	f800283a 	ret

0000514c <main>:

int main() {
    514c:	deffa804 	addi	sp,sp,-352

	printf("Starting exercise3b...\n");
    5150:	01000034 	movhi	r4,0
    5154:	21196704 	addi	r4,r4,26012
		}
	}

}

int main() {
    5158:	dfc05715 	stw	ra,348(sp)
    515c:	df005615 	stw	fp,344(sp)
    5160:	ddc05515 	stw	r23,340(sp)
    5164:	dd805415 	stw	r22,336(sp)
    5168:	dd405315 	stw	r21,332(sp)
    516c:	dd005215 	stw	r20,328(sp)
    5170:	dcc05115 	stw	r19,324(sp)
    5174:	dc805015 	stw	r18,320(sp)
    5178:	dc404f15 	stw	r17,316(sp)
    517c:	dc004e15 	stw	r16,312(sp)

	printf("Starting exercise3b...\n");
    5180:	00058240 	call	5824 <puts>
	int len = 4;
	char str[len + 1]; //plus one for null character
    5184:	defffe04 	addi	sp,sp,-8
	memset(str, 0, len + 1);
    5188:	d809883a 	mov	r4,sp
    518c:	000b883a 	mov	r5,zero
    5190:	01800144 	movi	r6,5
    5194:	00056b80 	call	56b8 <memset>
	int index = 0;

	findStringEqual33(str, index, len);
    5198:	01800104 	movi	r6,4
    519c:	d809883a 	mov	r4,sp
    51a0:	000b883a 	mov	r5,zero
    51a4:	0004f080 	call	4f08 <findStringEqual33>
	printf("HitCounter is %d\n", hitCount);
    51a8:	d1604217 	ldw	r5,-32504(gp)
    51ac:	01000034 	movhi	r4,0
    51b0:	21196d04 	addi	r4,r4,26036
	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
    51b4:	dcc002c4 	addi	r19,sp,11
	char str[len + 1]; //plus one for null character
	memset(str, 0, len + 1);
	int index = 0;

	findStringEqual33(str, index, len);
	printf("HitCounter is %d\n", hitCount);
    51b8:	00056d80 	call	56d8 <printf>
	printf("Done!\n");
    51bc:	01000034 	movhi	r4,0
    51c0:	21197204 	addi	r4,r4,26056
    51c4:	00058240 	call	5824 <puts>

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
    51c8:	00c00034 	movhi	r3,0
    51cc:	18da1b04 	addi	r3,r3,26732
	hitCount = 0;

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
    51d0:	00800034 	movhi	r2,0
    51d4:	10998b04 	addi	r2,r2,26156
    51d8:	11c00003 	ldbu	r7,0(r2)
			test2[] = { "a" },
    51dc:	1a000043 	ldbu	r8,1(r3)
    51e0:	18800003 	ldbu	r2,0(r3)
			test3[] = { "abc" },
    51e4:	9809883a 	mov	r4,r19
    51e8:	01400034 	movhi	r5,0
    51ec:	29592204 	addi	r5,r5,25736
    51f0:	01800104 	movi	r6,4
			test4[] = { "message digest" },
    51f4:	dd0005c4 	addi	r20,sp,23
	hitCount = 0;

	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
    51f8:	d9c00205 	stb	r7,8(sp)
			test2[] = { "a" },
    51fc:	da000285 	stb	r8,10(sp)
    5200:	d8800245 	stb	r2,9(sp)
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
    5204:	dd400d84 	addi	r21,sp,54
	int index = 0;

	findStringEqual33(str, index, len);
	printf("HitCounter is %d\n", hitCount);
	printf("Done!\n");
	hitCount = 0;
    5208:	d0204215 	stw	zero,-32504(gp)
	//Initialize Test Inputs
	uchar
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
    520c:	000568c0 	call	568c <memcpy>
			test4[] = { "message digest" },
    5210:	a009883a 	mov	r4,r20
    5214:	01400034 	movhi	r5,0
    5218:	29592304 	addi	r5,r5,25740
    521c:	018003c4 	movi	r6,15
    5220:	000568c0 	call	568c <memcpy>
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    5224:	dd801444 	addi	r22,sp,81
			hash[16],
			test1[] = { "" },
			test2[] = { "a" },
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
    5228:	a809883a 	mov	r4,r21
    522c:	01400034 	movhi	r5,0
    5230:	29592704 	addi	r5,r5,25756
    5234:	018006c4 	movi	r6,27
    5238:	000568c0 	call	568c <memcpy>
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
    523c:	ddc02404 	addi	r23,sp,144
			test3[] = { "abc" },
			test4[] = { "message digest" },
			test5[] = { "abcdefghijklmnopqrstuvwxyz" },
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
    5240:	b009883a 	mov	r4,r22
    5244:	01400034 	movhi	r5,0
    5248:	29592e04 	addi	r5,r5,25784
    524c:	01800fc4 	movi	r6,63
    5250:	000568c0 	call	568c <memcpy>
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
			test8[] = { "ksxdvba" };
    5254:	df0003c4 	addi	fp,sp,15
			test6[] =
					{
							"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789" },
			test7[] =
					{
							"12345678901234567890123456789012345678901234567890123456789012345678901234567890" },
    5258:	b809883a 	mov	r4,r23
    525c:	01400034 	movhi	r5,0
    5260:	29593e04 	addi	r5,r5,25848
    5264:	01801444 	movi	r6,81
    5268:	000568c0 	call	568c <memcpy>
			test8[] = { "ksxdvba" };
    526c:	e009883a 	mov	r4,fp
    5270:	01400034 	movhi	r5,0
    5274:	29595304 	addi	r5,r5,25932
    5278:	01800204 	movi	r6,8
    527c:	000568c0 	call	568c <memcpy>

	//Initialize a MD5_CTX object or struct
	MD5_CTX testObj;

	// Reset the performance counter
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
    5280:	00a40014 	movui	r2,36864
    5284:	00c00044 	movi	r3,1
    5288:	10c00035 	stwio	r3,0(r2)

	// Start the performance counter
	PERF_START_MEASURING(performance_name);
    528c:	d0a00017 	ldw	r2,-32768(gp)
    5290:	10000135 	stwio	zero,4(r2)

	// Start measuring code section
	PERF_BEGIN(performance_name, 1);
    5294:	d0a00017 	ldw	r2,-32768(gp)
    5298:	10000535 	stwio	zero,20(r2)

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
    529c:	01000034 	movhi	r4,0
    52a0:	21197404 	addi	r4,r4,26064
    52a4:	00058240 	call	5824 <puts>
	printf("output is: ");
	md5_init(&testObj);
    52a8:	dc403904 	addi	r17,sp,228
	// Start measuring code section
	PERF_BEGIN(performance_name, 1);

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
	printf("output is: ");
    52ac:	01000034 	movhi	r4,0
    52b0:	21197904 	addi	r4,r4,26084
    52b4:	00056d80 	call	56d8 <printf>
	md5_init(&testObj);
    52b8:	8809883a 	mov	r4,r17
    52bc:	0004c440 	call	4c44 <md5_init>
	md5_update(&testObj, test1, strlen(test1));
    52c0:	d9000204 	addi	r4,sp,8
    52c4:	00058380 	call	5838 <strlen>
    52c8:	100d883a 	mov	r6,r2
    52cc:	8809883a 	mov	r4,r17
    52d0:	d9400204 	addi	r5,sp,8
	md5_final(&testObj, hash);
    52d4:	dc800984 	addi	r18,sp,38

	//MD5 ("") = d41d8cd98f00b204e9800998ecf8427e
	printf("Test 1 input is:  ,\n");
	printf("output is: ");
	md5_init(&testObj);
	md5_update(&testObj, test1, strlen(test1));
    52d8:	0004c840 	call	4c84 <md5_update>
	md5_final(&testObj, hash);
    52dc:	900b883a 	mov	r5,r18
    52e0:	8809883a 	mov	r4,r17
    52e4:	0004d2c0 	call	4d2c <md5_final>
	print_hash(hash);
    52e8:	9009883a 	mov	r4,r18
    52ec:	0004ea00 	call	4ea0 <print_hash>
	printf("output in decimal is: ");
    52f0:	01000034 	movhi	r4,0
    52f4:	21197c04 	addi	r4,r4,26096
    52f8:	00056d80 	call	56d8 <printf>

	// Stop measuring code section
	PERF_END(performance_name, 1);
    52fc:	d0a00017 	ldw	r2,-32768(gp)
    5300:	10000435 	stwio	zero,16(r2)

	// Start measuring code section
	PERF_BEGIN(performance_name, 2);
    5304:	d0a00017 	ldw	r2,-32768(gp)
    5308:	10000935 	stwio	zero,36(r2)
	//MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
	printf("Test 2 input is: a, \n");
    530c:	01000034 	movhi	r4,0
    5310:	21198204 	addi	r4,r4,26120
    5314:	00058240 	call	5824 <puts>
	printf("output is:  ");
    5318:	01000034 	movhi	r4,0
    531c:	21198804 	addi	r4,r4,26144
    5320:	00056d80 	call	56d8 <printf>
	md5_init(&testObj);
	md5_update(&testObj, test2, strlen(test2));
    5324:	dc000244 	addi	r16,sp,9
	// Start measuring code section
	PERF_BEGIN(performance_name, 2);
	//MD5 ("a") = 0cc175b9c0f1b6a831c399e269772661
	printf("Test 2 input is: a, \n");
	printf("output is:  ");
	md5_init(&testObj);
    5328:	8809883a 	mov	r4,r17
    532c:	0004c440 	call	4c44 <md5_init>
	md5_update(&testObj, test2, strlen(test2));
    5330:	8009883a 	mov	r4,r16
    5334:	00058380 	call	5838 <strlen>
    5338:	100d883a 	mov	r6,r2
    533c:	8809883a 	mov	r4,r17
    5340:	800b883a 	mov	r5,r16
    5344:	0004c840 	call	4c84 <md5_update>
	md5_final(&testObj, hash);
    5348:	8809883a 	mov	r4,r17
    534c:	900b883a 	mov	r5,r18
    5350:	0004d2c0 	call	4d2c <md5_final>
	print_hash(hash);
    5354:	9009883a 	mov	r4,r18
    5358:	0004ea00 	call	4ea0 <print_hash>

	// Stop measuring code section
	PERF_END(performance_name, 2);
    535c:	d0a00017 	ldw	r2,-32768(gp)
    5360:	10000835 	stwio	zero,32(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 3);
    5364:	d0a00017 	ldw	r2,-32768(gp)
    5368:	10000d35 	stwio	zero,52(r2)
	 //MD5 ("abc") = 900150983cd24fb0d6963f7d28e17f72
	 printf("Test 3 input is: abc, \n");
    536c:	01000034 	movhi	r4,0
    5370:	21198c04 	addi	r4,r4,26160
    5374:	00058240 	call	5824 <puts>
	 printf("output is:  ");
    5378:	01000034 	movhi	r4,0
    537c:	21198804 	addi	r4,r4,26144
    5380:	00056d80 	call	56d8 <printf>
	 md5_init(&testObj);
    5384:	8809883a 	mov	r4,r17
    5388:	0004c440 	call	4c44 <md5_init>
	 md5_update(&testObj, test3, strlen(test3));
    538c:	9809883a 	mov	r4,r19
    5390:	00058380 	call	5838 <strlen>
    5394:	100d883a 	mov	r6,r2
    5398:	8809883a 	mov	r4,r17
    539c:	980b883a 	mov	r5,r19
    53a0:	0004c840 	call	4c84 <md5_update>
	 md5_final(&testObj, hash);
    53a4:	8809883a 	mov	r4,r17
    53a8:	900b883a 	mov	r5,r18
    53ac:	0004d2c0 	call	4d2c <md5_final>
	 print_hash(hash);
    53b0:	9009883a 	mov	r4,r18
    53b4:	0004ea00 	call	4ea0 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 3);
    53b8:	d0a00017 	ldw	r2,-32768(gp)
    53bc:	10000c35 	stwio	zero,48(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 4);
    53c0:	d0a00017 	ldw	r2,-32768(gp)
    53c4:	10001135 	stwio	zero,68(r2)
	 //MD5 ("message digest") = f96b697d7cb7938d525a2f31aaf161d0
	 printf("Test 4 input is: message digest, \n");
    53c8:	01000034 	movhi	r4,0
    53cc:	21199204 	addi	r4,r4,26184
    53d0:	00058240 	call	5824 <puts>
	 printf("output is:  ");
    53d4:	01000034 	movhi	r4,0
    53d8:	21198804 	addi	r4,r4,26144
    53dc:	00056d80 	call	56d8 <printf>
	 md5_init(&testObj);
    53e0:	8809883a 	mov	r4,r17
    53e4:	0004c440 	call	4c44 <md5_init>
	 md5_update(&testObj, test4, strlen(test4));
    53e8:	a009883a 	mov	r4,r20
    53ec:	00058380 	call	5838 <strlen>
    53f0:	100d883a 	mov	r6,r2
    53f4:	8809883a 	mov	r4,r17
    53f8:	a00b883a 	mov	r5,r20
    53fc:	0004c840 	call	4c84 <md5_update>
	 md5_final(&testObj, hash);
    5400:	8809883a 	mov	r4,r17
    5404:	900b883a 	mov	r5,r18
    5408:	0004d2c0 	call	4d2c <md5_final>
	 print_hash(hash);
    540c:	9009883a 	mov	r4,r18
    5410:	0004ea00 	call	4ea0 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 4);
    5414:	d0a00017 	ldw	r2,-32768(gp)
    5418:	10001035 	stwio	zero,64(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 5);
    541c:	d0a00017 	ldw	r2,-32768(gp)
    5420:	10001535 	stwio	zero,84(r2)
	 //MD5 ("abcdefghijklmnopqrstuvwxyz") = c3fcd3d76192e4007dfb496cca67e13b
	 printf("Test 5 input is: abcdefghijklmnopqrstuvwxyz, \n");
    5424:	01000034 	movhi	r4,0
    5428:	21199b04 	addi	r4,r4,26220
    542c:	00058240 	call	5824 <puts>
	 printf("output is:  ");
    5430:	01000034 	movhi	r4,0
    5434:	21198804 	addi	r4,r4,26144
    5438:	00056d80 	call	56d8 <printf>
	 md5_init(&testObj);
    543c:	8809883a 	mov	r4,r17
    5440:	0004c440 	call	4c44 <md5_init>
	 md5_update(&testObj, test5, strlen(test5));
    5444:	a809883a 	mov	r4,r21
    5448:	00058380 	call	5838 <strlen>
    544c:	100d883a 	mov	r6,r2
    5450:	8809883a 	mov	r4,r17
    5454:	a80b883a 	mov	r5,r21
    5458:	0004c840 	call	4c84 <md5_update>
	 md5_final(&testObj, hash);
    545c:	8809883a 	mov	r4,r17
    5460:	900b883a 	mov	r5,r18
    5464:	0004d2c0 	call	4d2c <md5_final>
	 print_hash(hash);
    5468:	9009883a 	mov	r4,r18
    546c:	0004ea00 	call	4ea0 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 5);
    5470:	d0a00017 	ldw	r2,-32768(gp)
    5474:	10001435 	stwio	zero,80(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 6);
    5478:	d0a00017 	ldw	r2,-32768(gp)
    547c:	10001935 	stwio	zero,100(r2)
	 //MD5 ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") = d174ab98d277d9f5a5611c2c9f419d9f
	 printf(
    5480:	01000034 	movhi	r4,0
    5484:	2119a704 	addi	r4,r4,26268
    5488:	00058240 	call	5824 <puts>
	 "Test 6 input is: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789, \n");
	 printf("output is:  ");
    548c:	01000034 	movhi	r4,0
    5490:	21198804 	addi	r4,r4,26144
    5494:	00056d80 	call	56d8 <printf>
	 md5_init(&testObj);
    5498:	8809883a 	mov	r4,r17
    549c:	0004c440 	call	4c44 <md5_init>
	 md5_update(&testObj, test6, strlen(test6));
    54a0:	b009883a 	mov	r4,r22
    54a4:	00058380 	call	5838 <strlen>
    54a8:	100d883a 	mov	r6,r2
    54ac:	8809883a 	mov	r4,r17
    54b0:	b00b883a 	mov	r5,r22
    54b4:	0004c840 	call	4c84 <md5_update>
	 md5_final(&testObj, hash);
    54b8:	8809883a 	mov	r4,r17
    54bc:	900b883a 	mov	r5,r18
    54c0:	0004d2c0 	call	4d2c <md5_final>
	 print_hash(hash);
    54c4:	9009883a 	mov	r4,r18
    54c8:	0004ea00 	call	4ea0 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 6);
    54cc:	d0a00017 	ldw	r2,-32768(gp)
    54d0:	10001835 	stwio	zero,96(r2)

	 // Start measuring code section
	 PERF_BEGIN(performance_name, 7);
    54d4:	d0a00017 	ldw	r2,-32768(gp)
    54d8:	10001d35 	stwio	zero,116(r2)
	 //MD5 ("12345678901234567890123456789012345678901234567890123456789012345678901234567890") = 57edf4a22be3c955ac49da2e2107b67a
	 printf(
    54dc:	01000034 	movhi	r4,0
    54e0:	2119bc04 	addi	r4,r4,26352
    54e4:	00058240 	call	5824 <puts>
	 "Test 7 input is: 12345678901234567890123456789012345678901234567890123456789012345678901234567890, \n");
	 printf("output is:  ");
    54e8:	01000034 	movhi	r4,0
    54ec:	21198804 	addi	r4,r4,26144
    54f0:	00056d80 	call	56d8 <printf>
	 md5_init(&testObj);
    54f4:	8809883a 	mov	r4,r17
    54f8:	0004c440 	call	4c44 <md5_init>
	 md5_update(&testObj, test7, strlen(test7));
    54fc:	b809883a 	mov	r4,r23
    5500:	00058380 	call	5838 <strlen>
    5504:	100d883a 	mov	r6,r2
    5508:	8809883a 	mov	r4,r17
    550c:	b80b883a 	mov	r5,r23
    5510:	0004c840 	call	4c84 <md5_update>
	 md5_final(&testObj, hash);
    5514:	8809883a 	mov	r4,r17
    5518:	900b883a 	mov	r5,r18
    551c:	0004d2c0 	call	4d2c <md5_final>
	 print_hash(hash);
    5520:	9009883a 	mov	r4,r18
    5524:	0004ea00 	call	4ea0 <print_hash>

	 // Stop measuring code section
	 PERF_END(performance_name, 7);
    5528:	d0a00017 	ldw	r2,-32768(gp)
    552c:	10001c35 	stwio	zero,112(r2)
	// Stop the performance counter
	PERF_STOP_MEASURING(performance_name);
    5530:	d0a00017 	ldw	r2,-32768(gp)
    5534:	10000035 	stwio	zero,0(r2)
	printf("\n");
    5538:	01000284 	movi	r4,10
    553c:	00057700 	call	5770 <putchar>
	printf("Test 1 Performance Measure: %d\n", perf_get_section_time(performance_name, 1));
    5540:	d1200017 	ldw	r4,-32768(gp)
    5544:	01400044 	movi	r5,1
    5548:	00063ec0 	call	63ec <perf_get_section_time>
    554c:	180d883a 	mov	r6,r3
    5550:	01000034 	movhi	r4,0
    5554:	2119d504 	addi	r4,r4,26452
    5558:	100b883a 	mov	r5,r2
    555c:	00056d80 	call	56d8 <printf>
	printf("Test 2 Performance Measure: %d\n", perf_get_section_time(performance_name, 2));
    5560:	d1200017 	ldw	r4,-32768(gp)
    5564:	01400084 	movi	r5,2
    5568:	00063ec0 	call	63ec <perf_get_section_time>
    556c:	180d883a 	mov	r6,r3
    5570:	01000034 	movhi	r4,0
    5574:	2119dd04 	addi	r4,r4,26484
    5578:	100b883a 	mov	r5,r2
    557c:	00056d80 	call	56d8 <printf>
	printf("Test 3 Performance Measure: %d\n", perf_get_section_time(performance_name, 3));
    5580:	d1200017 	ldw	r4,-32768(gp)
    5584:	014000c4 	movi	r5,3
    5588:	00063ec0 	call	63ec <perf_get_section_time>
    558c:	180d883a 	mov	r6,r3
    5590:	01000034 	movhi	r4,0
    5594:	2119e504 	addi	r4,r4,26516
    5598:	100b883a 	mov	r5,r2
    559c:	00056d80 	call	56d8 <printf>
	printf("Test 4 Performance Measure: %d\n", perf_get_section_time(performance_name, 4));
    55a0:	d1200017 	ldw	r4,-32768(gp)
    55a4:	01400104 	movi	r5,4
    55a8:	00063ec0 	call	63ec <perf_get_section_time>
    55ac:	180d883a 	mov	r6,r3
    55b0:	01000034 	movhi	r4,0
    55b4:	2119ed04 	addi	r4,r4,26548
    55b8:	100b883a 	mov	r5,r2
    55bc:	00056d80 	call	56d8 <printf>
	printf("Test 5 Performance Measure: %d\n", perf_get_section_time(performance_name, 5));
    55c0:	d1200017 	ldw	r4,-32768(gp)
    55c4:	01400144 	movi	r5,5
    55c8:	00063ec0 	call	63ec <perf_get_section_time>
    55cc:	180d883a 	mov	r6,r3
    55d0:	01000034 	movhi	r4,0
    55d4:	2119f504 	addi	r4,r4,26580
    55d8:	100b883a 	mov	r5,r2
    55dc:	00056d80 	call	56d8 <printf>
	printf("Test 6 Performance Measure: %d\n", perf_get_section_time(performance_name, 6));
    55e0:	d1200017 	ldw	r4,-32768(gp)
    55e4:	01400184 	movi	r5,6
    55e8:	00063ec0 	call	63ec <perf_get_section_time>
    55ec:	180d883a 	mov	r6,r3
    55f0:	01000034 	movhi	r4,0
    55f4:	2119fd04 	addi	r4,r4,26612
    55f8:	100b883a 	mov	r5,r2
    55fc:	00056d80 	call	56d8 <printf>
	printf("Test 7 Performance Measure: %d\n", perf_get_section_time(performance_name, 7));
    5600:	d1200017 	ldw	r4,-32768(gp)
    5604:	014001c4 	movi	r5,7
    5608:	00063ec0 	call	63ec <perf_get_section_time>
    560c:	180d883a 	mov	r6,r3
    5610:	100b883a 	mov	r5,r2
    5614:	01000034 	movhi	r4,0
    5618:	211a0504 	addi	r4,r4,26644
    561c:	00056d80 	call	56d8 <printf>


	printf("Test 8, \n");
    5620:	01000034 	movhi	r4,0
    5624:	211a0d04 	addi	r4,r4,26676
    5628:	00058240 	call	5824 <puts>
	printf("Input is %s\n: ", test8);
    562c:	e00b883a 	mov	r5,fp
    5630:	01000034 	movhi	r4,0
    5634:	211a1004 	addi	r4,r4,26688
    5638:	00056d80 	call	56d8 <printf>
	printf("output is:  ");
    563c:	01000034 	movhi	r4,0
    5640:	21198804 	addi	r4,r4,26144
    5644:	00056d80 	call	56d8 <printf>
	md5_init(&testObj);
    5648:	8809883a 	mov	r4,r17
    564c:	0004c440 	call	4c44 <md5_init>
	md5_update(&testObj, test8, strlen(test8));
    5650:	e009883a 	mov	r4,fp
    5654:	00058380 	call	5838 <strlen>
    5658:	100d883a 	mov	r6,r2
    565c:	8809883a 	mov	r4,r17
    5660:	e00b883a 	mov	r5,fp
    5664:	0004c840 	call	4c84 <md5_update>
	md5_final(&testObj, hash);
    5668:	8809883a 	mov	r4,r17
    566c:	900b883a 	mov	r5,r18
    5670:	0004d2c0 	call	4d2c <md5_final>
	print_hash(hash);
    5674:	9009883a 	mov	r4,r18
    5678:	0004ea00 	call	4ea0 <print_hash>

	printf("Finished computing MD5...\n");
    567c:	01000034 	movhi	r4,0
    5680:	211a1404 	addi	r4,r4,26704
    5684:	00058240 	call	5824 <puts>
    5688:	003fff06 	br	5688 <main+0x53c>

0000568c <memcpy>:
    568c:	2011883a 	mov	r8,r4
    5690:	30000726 	beq	r6,zero,56b0 <memcpy+0x24>
    5694:	000f883a 	mov	r7,zero
    5698:	29c5883a 	add	r2,r5,r7
    569c:	11000003 	ldbu	r4,0(r2)
    56a0:	41c7883a 	add	r3,r8,r7
    56a4:	39c00044 	addi	r7,r7,1
    56a8:	19000005 	stb	r4,0(r3)
    56ac:	39bffa1e 	bne	r7,r6,5698 <memcpy+0xc>
    56b0:	4005883a 	mov	r2,r8
    56b4:	f800283a 	ret

000056b8 <memset>:
    56b8:	30000526 	beq	r6,zero,56d0 <memset+0x18>
    56bc:	310d883a 	add	r6,r6,r4
    56c0:	2005883a 	mov	r2,r4
    56c4:	11400005 	stb	r5,0(r2)
    56c8:	10800044 	addi	r2,r2,1
    56cc:	11bffd1e 	bne	r2,r6,56c4 <memset+0xc>
    56d0:	2005883a 	mov	r2,r4
    56d4:	f800283a 	ret

000056d8 <printf>:
    56d8:	defffb04 	addi	sp,sp,-20
    56dc:	dfc00115 	stw	ra,4(sp)
    56e0:	d9400215 	stw	r5,8(sp)
    56e4:	d9800315 	stw	r6,12(sp)
    56e8:	d9c00415 	stw	r7,16(sp)
    56ec:	00800034 	movhi	r2,0
    56f0:	109a5504 	addi	r2,r2,26964
    56f4:	11400017 	ldw	r5,0(r2)
    56f8:	d8800204 	addi	r2,sp,8
    56fc:	d8800015 	stw	r2,0(sp)
    5700:	29c00217 	ldw	r7,8(r5)
    5704:	100d883a 	mov	r6,r2
    5708:	00800034 	movhi	r2,0
    570c:	1097b404 	addi	r2,r2,24272
    5710:	200b883a 	mov	r5,r4
    5714:	38800115 	stw	r2,4(r7)
    5718:	3809883a 	mov	r4,r7
    571c:	0005eac0 	call	5eac <__vfprintf_internal>
    5720:	dfc00117 	ldw	ra,4(sp)
    5724:	dec00504 	addi	sp,sp,20
    5728:	f800283a 	ret

0000572c <_printf_r>:
    572c:	defffc04 	addi	sp,sp,-16
    5730:	dfc00115 	stw	ra,4(sp)
    5734:	d9800215 	stw	r6,8(sp)
    5738:	d9c00315 	stw	r7,12(sp)
    573c:	22000217 	ldw	r8,8(r4)
    5740:	d8800204 	addi	r2,sp,8
    5744:	d8800015 	stw	r2,0(sp)
    5748:	100f883a 	mov	r7,r2
    574c:	00800034 	movhi	r2,0
    5750:	1097b404 	addi	r2,r2,24272
    5754:	280d883a 	mov	r6,r5
    5758:	40800115 	stw	r2,4(r8)
    575c:	400b883a 	mov	r5,r8
    5760:	00058d80 	call	58d8 <___vfprintf_internal_r>
    5764:	dfc00117 	ldw	ra,4(sp)
    5768:	dec00404 	addi	sp,sp,16
    576c:	f800283a 	ret

00005770 <putchar>:
    5770:	00800034 	movhi	r2,0
    5774:	109a5504 	addi	r2,r2,26964
    5778:	11800017 	ldw	r6,0(r2)
    577c:	200b883a 	mov	r5,r4
    5780:	3009883a 	mov	r4,r6
    5784:	31800217 	ldw	r6,8(r6)
    5788:	0005ffc1 	jmpi	5ffc <_putc_r>

0000578c <_putchar_r>:
    578c:	21800217 	ldw	r6,8(r4)
    5790:	0005ffc1 	jmpi	5ffc <_putc_r>

00005794 <_puts_r>:
    5794:	defffd04 	addi	sp,sp,-12
    5798:	dc000015 	stw	r16,0(sp)
    579c:	2021883a 	mov	r16,r4
    57a0:	2809883a 	mov	r4,r5
    57a4:	dfc00215 	stw	ra,8(sp)
    57a8:	dc400115 	stw	r17,4(sp)
    57ac:	2823883a 	mov	r17,r5
    57b0:	00058380 	call	5838 <strlen>
    57b4:	80c00217 	ldw	r3,8(r16)
    57b8:	02000034 	movhi	r8,0
    57bc:	4217b404 	addi	r8,r8,24272
    57c0:	880d883a 	mov	r6,r17
    57c4:	100f883a 	mov	r7,r2
    57c8:	8009883a 	mov	r4,r16
    57cc:	180b883a 	mov	r5,r3
    57d0:	1a000115 	stw	r8,4(r3)
    57d4:	403ee83a 	callr	r8
    57d8:	047fffc4 	movi	r17,-1
    57dc:	8009883a 	mov	r4,r16
    57e0:	01800034 	movhi	r6,0
    57e4:	31997104 	addi	r6,r6,26052
    57e8:	01c00044 	movi	r7,1
    57ec:	1440071e 	bne	r2,r17,580c <_puts_r+0x78>
    57f0:	00ffffc4 	movi	r3,-1
    57f4:	1805883a 	mov	r2,r3
    57f8:	dfc00217 	ldw	ra,8(sp)
    57fc:	dc400117 	ldw	r17,4(sp)
    5800:	dc000017 	ldw	r16,0(sp)
    5804:	dec00304 	addi	sp,sp,12
    5808:	f800283a 	ret
    580c:	81400217 	ldw	r5,8(r16)
    5810:	28c00117 	ldw	r3,4(r5)
    5814:	183ee83a 	callr	r3
    5818:	0007883a 	mov	r3,zero
    581c:	147ff51e 	bne	r2,r17,57f4 <_puts_r+0x60>
    5820:	003ff306 	br	57f0 <_puts_r+0x5c>

00005824 <puts>:
    5824:	00800034 	movhi	r2,0
    5828:	109a5504 	addi	r2,r2,26964
    582c:	200b883a 	mov	r5,r4
    5830:	11000017 	ldw	r4,0(r2)
    5834:	00057941 	jmpi	5794 <_puts_r>

00005838 <strlen>:
    5838:	20800007 	ldb	r2,0(r4)
    583c:	10000526 	beq	r2,zero,5854 <strlen+0x1c>
    5840:	2007883a 	mov	r3,r4
    5844:	18c00044 	addi	r3,r3,1
    5848:	18800007 	ldb	r2,0(r3)
    584c:	103ffd1e 	bne	r2,zero,5844 <strlen+0xc>
    5850:	1905c83a 	sub	r2,r3,r4
    5854:	f800283a 	ret

00005858 <print_repeat>:
    5858:	defffb04 	addi	sp,sp,-20
    585c:	dc800315 	stw	r18,12(sp)
    5860:	dc400215 	stw	r17,8(sp)
    5864:	dc000115 	stw	r16,4(sp)
    5868:	dfc00415 	stw	ra,16(sp)
    586c:	2025883a 	mov	r18,r4
    5870:	2823883a 	mov	r17,r5
    5874:	3821883a 	mov	r16,r7
    5878:	d9800005 	stb	r6,0(sp)
    587c:	9009883a 	mov	r4,r18
    5880:	880b883a 	mov	r5,r17
    5884:	d80d883a 	mov	r6,sp
    5888:	01c00044 	movi	r7,1
    588c:	04000b0e 	bge	zero,r16,58bc <print_repeat+0x64>
    5890:	88c00117 	ldw	r3,4(r17)
    5894:	843fffc4 	addi	r16,r16,-1
    5898:	183ee83a 	callr	r3
    589c:	103ff726 	beq	r2,zero,587c <print_repeat+0x24>
    58a0:	00bfffc4 	movi	r2,-1
    58a4:	dfc00417 	ldw	ra,16(sp)
    58a8:	dc800317 	ldw	r18,12(sp)
    58ac:	dc400217 	ldw	r17,8(sp)
    58b0:	dc000117 	ldw	r16,4(sp)
    58b4:	dec00504 	addi	sp,sp,20
    58b8:	f800283a 	ret
    58bc:	0005883a 	mov	r2,zero
    58c0:	dfc00417 	ldw	ra,16(sp)
    58c4:	dc800317 	ldw	r18,12(sp)
    58c8:	dc400217 	ldw	r17,8(sp)
    58cc:	dc000117 	ldw	r16,4(sp)
    58d0:	dec00504 	addi	sp,sp,20
    58d4:	f800283a 	ret

000058d8 <___vfprintf_internal_r>:
    58d8:	deffec04 	addi	sp,sp,-80
    58dc:	ddc01115 	stw	r23,68(sp)
    58e0:	dd801015 	stw	r22,64(sp)
    58e4:	dcc00d15 	stw	r19,52(sp)
    58e8:	dc800c15 	stw	r18,48(sp)
    58ec:	dc000a15 	stw	r16,40(sp)
    58f0:	dfc01315 	stw	ra,76(sp)
    58f4:	df001215 	stw	fp,72(sp)
    58f8:	dd400f15 	stw	r21,60(sp)
    58fc:	dd000e15 	stw	r20,56(sp)
    5900:	dc400b15 	stw	r17,44(sp)
    5904:	d9000915 	stw	r4,36(sp)
    5908:	282d883a 	mov	r22,r5
    590c:	3825883a 	mov	r18,r7
    5910:	3027883a 	mov	r19,r6
    5914:	0021883a 	mov	r16,zero
    5918:	d8000815 	stw	zero,32(sp)
    591c:	d8000715 	stw	zero,28(sp)
    5920:	002f883a 	mov	r23,zero
    5924:	d8000615 	stw	zero,24(sp)
    5928:	d8000515 	stw	zero,20(sp)
    592c:	d8000415 	stw	zero,16(sp)
    5930:	d8000315 	stw	zero,12(sp)
    5934:	d8000215 	stw	zero,8(sp)
    5938:	99400003 	ldbu	r5,0(r19)
    593c:	01c00044 	movi	r7,1
    5940:	9cc00044 	addi	r19,r19,1
    5944:	29003fcc 	andi	r4,r5,255
    5948:	2100201c 	xori	r4,r4,128
    594c:	213fe004 	addi	r4,r4,-128
    5950:	20001626 	beq	r4,zero,59ac <___vfprintf_internal_r+0xd4>
    5954:	81c02226 	beq	r16,r7,59e0 <___vfprintf_internal_r+0x108>
    5958:	00800084 	movi	r2,2
    595c:	80802526 	beq	r16,r2,59f4 <___vfprintf_internal_r+0x11c>
    5960:	803ff51e 	bne	r16,zero,5938 <___vfprintf_internal_r+0x60>
    5964:	00800944 	movi	r2,37
    5968:	20811e1e 	bne	r4,r2,5de4 <___vfprintf_internal_r+0x50c>
    596c:	05ffffc4 	movi	r23,-1
    5970:	00800284 	movi	r2,10
    5974:	d9c00415 	stw	r7,16(sp)
    5978:	d8000815 	stw	zero,32(sp)
    597c:	d8000715 	stw	zero,28(sp)
    5980:	ddc00615 	stw	r23,24(sp)
    5984:	d8800515 	stw	r2,20(sp)
    5988:	d8000315 	stw	zero,12(sp)
    598c:	99400003 	ldbu	r5,0(r19)
    5990:	3821883a 	mov	r16,r7
    5994:	9cc00044 	addi	r19,r19,1
    5998:	29003fcc 	andi	r4,r5,255
    599c:	2100201c 	xori	r4,r4,128
    59a0:	213fe004 	addi	r4,r4,-128
    59a4:	01c00044 	movi	r7,1
    59a8:	203fea1e 	bne	r4,zero,5954 <___vfprintf_internal_r+0x7c>
    59ac:	d8800217 	ldw	r2,8(sp)
    59b0:	dfc01317 	ldw	ra,76(sp)
    59b4:	df001217 	ldw	fp,72(sp)
    59b8:	ddc01117 	ldw	r23,68(sp)
    59bc:	dd801017 	ldw	r22,64(sp)
    59c0:	dd400f17 	ldw	r21,60(sp)
    59c4:	dd000e17 	ldw	r20,56(sp)
    59c8:	dcc00d17 	ldw	r19,52(sp)
    59cc:	dc800c17 	ldw	r18,48(sp)
    59d0:	dc400b17 	ldw	r17,44(sp)
    59d4:	dc000a17 	ldw	r16,40(sp)
    59d8:	dec01404 	addi	sp,sp,80
    59dc:	f800283a 	ret
    59e0:	00800c04 	movi	r2,48
    59e4:	20805d26 	beq	r4,r2,5b5c <___vfprintf_internal_r+0x284>
    59e8:	00800944 	movi	r2,37
    59ec:	20810a26 	beq	r4,r2,5e18 <___vfprintf_internal_r+0x540>
    59f0:	04000084 	movi	r16,2
    59f4:	00800b84 	movi	r2,46
    59f8:	20805626 	beq	r4,r2,5b54 <___vfprintf_internal_r+0x27c>
    59fc:	29bff404 	addi	r6,r5,-48
    5a00:	30c03fcc 	andi	r3,r6,255
    5a04:	00800244 	movi	r2,9
    5a08:	10c00b36 	bltu	r2,r3,5a38 <___vfprintf_internal_r+0x160>
    5a0c:	d8c00617 	ldw	r3,24(sp)
    5a10:	3005883a 	mov	r2,r6
    5a14:	18005716 	blt	r3,zero,5b74 <___vfprintf_internal_r+0x29c>
    5a18:	d8800617 	ldw	r2,24(sp)
    5a1c:	10c002a4 	muli	r3,r2,10
    5a20:	30803fcc 	andi	r2,r6,255
    5a24:	1080201c 	xori	r2,r2,128
    5a28:	10bfe004 	addi	r2,r2,-128
    5a2c:	1887883a 	add	r3,r3,r2
    5a30:	d8c00615 	stw	r3,24(sp)
    5a34:	003fc006 	br	5938 <___vfprintf_internal_r+0x60>
    5a38:	00801b04 	movi	r2,108
    5a3c:	20804a26 	beq	r4,r2,5b68 <___vfprintf_internal_r+0x290>
    5a40:	28bfea04 	addi	r2,r5,-88
    5a44:	10803fcc 	andi	r2,r2,255
    5a48:	00c00804 	movi	r3,32
    5a4c:	18803f36 	bltu	r3,r2,5b4c <___vfprintf_internal_r+0x274>
    5a50:	1085883a 	add	r2,r2,r2
    5a54:	1085883a 	add	r2,r2,r2
    5a58:	00c00034 	movhi	r3,0
    5a5c:	18d69b04 	addi	r3,r3,23148
    5a60:	10c5883a 	add	r2,r2,r3
    5a64:	11000017 	ldw	r4,0(r2)
    5a68:	2000683a 	jmp	r4
    5a6c:	00005b90 	cmplti	zero,zero,366
    5a70:	00005b4c 	andi	zero,zero,365
    5a74:	00005b4c 	andi	zero,zero,365
    5a78:	00005b4c 	andi	zero,zero,365
    5a7c:	00005b4c 	andi	zero,zero,365
    5a80:	00005b4c 	andi	zero,zero,365
    5a84:	00005b4c 	andi	zero,zero,365
    5a88:	00005b4c 	andi	zero,zero,365
    5a8c:	00005b4c 	andi	zero,zero,365
    5a90:	00005b4c 	andi	zero,zero,365
    5a94:	00005b4c 	andi	zero,zero,365
    5a98:	00005ce8 	cmpgeui	zero,zero,371
    5a9c:	00005d3c 	xorhi	zero,zero,372
    5aa0:	00005b4c 	andi	zero,zero,365
    5aa4:	00005b4c 	andi	zero,zero,365
    5aa8:	00005b4c 	andi	zero,zero,365
    5aac:	00005b4c 	andi	zero,zero,365
    5ab0:	00005d3c 	xorhi	zero,zero,372
    5ab4:	00005b4c 	andi	zero,zero,365
    5ab8:	00005b4c 	andi	zero,zero,365
    5abc:	00005b4c 	andi	zero,zero,365
    5ac0:	00005b4c 	andi	zero,zero,365
    5ac4:	00005b4c 	andi	zero,zero,365
    5ac8:	00005d88 	cmpgei	zero,zero,374
    5acc:	00005b4c 	andi	zero,zero,365
    5ad0:	00005b4c 	andi	zero,zero,365
    5ad4:	00005b4c 	andi	zero,zero,365
    5ad8:	00005af0 	cmpltui	zero,zero,363
    5adc:	00005b4c 	andi	zero,zero,365
    5ae0:	00005d9c 	xori	zero,zero,374
    5ae4:	00005b4c 	andi	zero,zero,365
    5ae8:	00005b4c 	andi	zero,zero,365
    5aec:	00005da8 	cmpgeui	zero,zero,374
    5af0:	94400017 	ldw	r17,0(r18)
    5af4:	8809883a 	mov	r4,r17
    5af8:	00058380 	call	5838 <strlen>
    5afc:	d9000917 	ldw	r4,36(sp)
    5b00:	b8a9c83a 	sub	r20,r23,r2
    5b04:	b00b883a 	mov	r5,r22
    5b08:	01800804 	movi	r6,32
    5b0c:	a00f883a 	mov	r7,r20
    5b10:	1021883a 	mov	r16,r2
    5b14:	00058580 	call	5858 <print_repeat>
    5b18:	1000af1e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5b1c:	b0c00117 	ldw	r3,4(r22)
    5b20:	d9000917 	ldw	r4,36(sp)
    5b24:	880d883a 	mov	r6,r17
    5b28:	b00b883a 	mov	r5,r22
    5b2c:	800f883a 	mov	r7,r16
    5b30:	183ee83a 	callr	r3
    5b34:	1000a81e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5b38:	d8c00217 	ldw	r3,8(sp)
    5b3c:	94800104 	addi	r18,r18,4
    5b40:	1c05883a 	add	r2,r3,r16
    5b44:	a0a9883a 	add	r20,r20,r2
    5b48:	dd000215 	stw	r20,8(sp)
    5b4c:	0021883a 	mov	r16,zero
    5b50:	003f7906 	br	5938 <___vfprintf_internal_r+0x60>
    5b54:	d8000615 	stw	zero,24(sp)
    5b58:	003f7706 	br	5938 <___vfprintf_internal_r+0x60>
    5b5c:	04000084 	movi	r16,2
    5b60:	d9c00815 	stw	r7,32(sp)
    5b64:	003f7406 	br	5938 <___vfprintf_internal_r+0x60>
    5b68:	00c00044 	movi	r3,1
    5b6c:	d8c00715 	stw	r3,28(sp)
    5b70:	003f7106 	br	5938 <___vfprintf_internal_r+0x60>
    5b74:	b800a616 	blt	r23,zero,5e10 <___vfprintf_internal_r+0x538>
    5b78:	b9c002a4 	muli	r7,r23,10
    5b7c:	10803fcc 	andi	r2,r2,255
    5b80:	1080201c 	xori	r2,r2,128
    5b84:	10bfe004 	addi	r2,r2,-128
    5b88:	38af883a 	add	r23,r7,r2
    5b8c:	003f6a06 	br	5938 <___vfprintf_internal_r+0x60>
    5b90:	00800404 	movi	r2,16
    5b94:	00c00044 	movi	r3,1
    5b98:	d8800515 	stw	r2,20(sp)
    5b9c:	d8000415 	stw	zero,16(sp)
    5ba0:	d8c00315 	stw	r3,12(sp)
    5ba4:	102b883a 	mov	r21,r2
    5ba8:	d8c00717 	ldw	r3,28(sp)
    5bac:	1805003a 	cmpeq	r2,r3,zero
    5bb0:	1000661e 	bne	r2,zero,5d4c <___vfprintf_internal_r+0x474>
    5bb4:	d8800417 	ldw	r2,16(sp)
    5bb8:	1000661e 	bne	r2,zero,5d54 <___vfprintf_internal_r+0x47c>
    5bbc:	94400017 	ldw	r17,0(r18)
    5bc0:	94800104 	addi	r18,r18,4
    5bc4:	dc800115 	stw	r18,4(sp)
    5bc8:	8809883a 	mov	r4,r17
    5bcc:	a80b883a 	mov	r5,r21
    5bd0:	0021883a 	mov	r16,zero
    5bd4:	00062240 	call	6224 <__udivsi3>
    5bd8:	10006826 	beq	r2,zero,5d7c <___vfprintf_internal_r+0x4a4>
    5bdc:	07000044 	movi	fp,1
    5be0:	e029883a 	mov	r20,fp
    5be4:	1009883a 	mov	r4,r2
    5be8:	a80b883a 	mov	r5,r21
    5bec:	00062240 	call	6224 <__udivsi3>
    5bf0:	e7000044 	addi	fp,fp,1
    5bf4:	a569383a 	mul	r20,r20,r21
    5bf8:	103ffa1e 	bne	r2,zero,5be4 <___vfprintf_internal_r+0x30c>
    5bfc:	d8800817 	ldw	r2,32(sp)
    5c00:	bf2fc83a 	sub	r23,r23,fp
    5c04:	10009126 	beq	r2,zero,5e4c <___vfprintf_internal_r+0x574>
    5c08:	8005003a 	cmpeq	r2,r16,zero
    5c0c:	10000d1e 	bne	r2,zero,5c44 <___vfprintf_internal_r+0x36c>
    5c10:	b0c00117 	ldw	r3,4(r22)
    5c14:	d9000917 	ldw	r4,36(sp)
    5c18:	00800b44 	movi	r2,45
    5c1c:	d8800005 	stb	r2,0(sp)
    5c20:	b00b883a 	mov	r5,r22
    5c24:	d80d883a 	mov	r6,sp
    5c28:	01c00044 	movi	r7,1
    5c2c:	183ee83a 	callr	r3
    5c30:	1000691e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5c34:	d8c00217 	ldw	r3,8(sp)
    5c38:	bdffffc4 	addi	r23,r23,-1
    5c3c:	18c00044 	addi	r3,r3,1
    5c40:	d8c00215 	stw	r3,8(sp)
    5c44:	d9000917 	ldw	r4,36(sp)
    5c48:	b00b883a 	mov	r5,r22
    5c4c:	01800c04 	movi	r6,48
    5c50:	b80f883a 	mov	r7,r23
    5c54:	00058580 	call	5858 <print_repeat>
    5c58:	10005f1e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5c5c:	d8800217 	ldw	r2,8(sp)
    5c60:	b8a5883a 	add	r18,r23,r2
    5c64:	a0005726 	beq	r20,zero,5dc4 <___vfprintf_internal_r+0x4ec>
    5c68:	8809883a 	mov	r4,r17
    5c6c:	a00b883a 	mov	r5,r20
    5c70:	00062240 	call	6224 <__udivsi3>
    5c74:	11000c04 	addi	r4,r2,48
    5c78:	20c03fcc 	andi	r3,r4,255
    5c7c:	00800e44 	movi	r2,57
    5c80:	10c0052e 	bgeu	r2,r3,5c98 <___vfprintf_internal_r+0x3c0>
    5c84:	d8c00317 	ldw	r3,12(sp)
    5c88:	1805003a 	cmpeq	r2,r3,zero
    5c8c:	10004b1e 	bne	r2,zero,5dbc <___vfprintf_internal_r+0x4e4>
    5c90:	008001c4 	movi	r2,7
    5c94:	2089883a 	add	r4,r4,r2
    5c98:	b0c00117 	ldw	r3,4(r22)
    5c9c:	d9000005 	stb	r4,0(sp)
    5ca0:	d9000917 	ldw	r4,36(sp)
    5ca4:	b00b883a 	mov	r5,r22
    5ca8:	d80d883a 	mov	r6,sp
    5cac:	01c00044 	movi	r7,1
    5cb0:	183ee83a 	callr	r3
    5cb4:	1000481e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5cb8:	a009883a 	mov	r4,r20
    5cbc:	a80b883a 	mov	r5,r21
    5cc0:	00062240 	call	6224 <__udivsi3>
    5cc4:	1021883a 	mov	r16,r2
    5cc8:	94800044 	addi	r18,r18,1
    5ccc:	10003d26 	beq	r2,zero,5dc4 <___vfprintf_internal_r+0x4ec>
    5cd0:	a00b883a 	mov	r5,r20
    5cd4:	8809883a 	mov	r4,r17
    5cd8:	000622c0 	call	622c <__umodsi3>
    5cdc:	1023883a 	mov	r17,r2
    5ce0:	8029883a 	mov	r20,r16
    5ce4:	003fe006 	br	5c68 <___vfprintf_internal_r+0x390>
    5ce8:	d9000917 	ldw	r4,36(sp)
    5cec:	b00b883a 	mov	r5,r22
    5cf0:	01800804 	movi	r6,32
    5cf4:	b9ffffc4 	addi	r7,r23,-1
    5cf8:	00058580 	call	5858 <print_repeat>
    5cfc:	1000361e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5d00:	90800017 	ldw	r2,0(r18)
    5d04:	b0c00117 	ldw	r3,4(r22)
    5d08:	d9000917 	ldw	r4,36(sp)
    5d0c:	d8800005 	stb	r2,0(sp)
    5d10:	b00b883a 	mov	r5,r22
    5d14:	d80d883a 	mov	r6,sp
    5d18:	01c00044 	movi	r7,1
    5d1c:	183ee83a 	callr	r3
    5d20:	10002d1e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5d24:	d8800217 	ldw	r2,8(sp)
    5d28:	94800104 	addi	r18,r18,4
    5d2c:	0021883a 	mov	r16,zero
    5d30:	15c5883a 	add	r2,r2,r23
    5d34:	d8800215 	stw	r2,8(sp)
    5d38:	003eff06 	br	5938 <___vfprintf_internal_r+0x60>
    5d3c:	d8c00717 	ldw	r3,28(sp)
    5d40:	dd400517 	ldw	r21,20(sp)
    5d44:	1805003a 	cmpeq	r2,r3,zero
    5d48:	103f9a26 	beq	r2,zero,5bb4 <___vfprintf_internal_r+0x2dc>
    5d4c:	d8c00417 	ldw	r3,16(sp)
    5d50:	183f9a26 	beq	r3,zero,5bbc <___vfprintf_internal_r+0x2e4>
    5d54:	94400017 	ldw	r17,0(r18)
    5d58:	94800104 	addi	r18,r18,4
    5d5c:	dc800115 	stw	r18,4(sp)
    5d60:	883f990e 	bge	r17,zero,5bc8 <___vfprintf_internal_r+0x2f0>
    5d64:	0463c83a 	sub	r17,zero,r17
    5d68:	8809883a 	mov	r4,r17
    5d6c:	a80b883a 	mov	r5,r21
    5d70:	04000044 	movi	r16,1
    5d74:	00062240 	call	6224 <__udivsi3>
    5d78:	103f981e 	bne	r2,zero,5bdc <___vfprintf_internal_r+0x304>
    5d7c:	07000044 	movi	fp,1
    5d80:	e029883a 	mov	r20,fp
    5d84:	003f9d06 	br	5bfc <___vfprintf_internal_r+0x324>
    5d88:	00800204 	movi	r2,8
    5d8c:	102b883a 	mov	r21,r2
    5d90:	d8800515 	stw	r2,20(sp)
    5d94:	d8000415 	stw	zero,16(sp)
    5d98:	003f8306 	br	5ba8 <___vfprintf_internal_r+0x2d0>
    5d9c:	dd400517 	ldw	r21,20(sp)
    5da0:	d8000415 	stw	zero,16(sp)
    5da4:	003f8006 	br	5ba8 <___vfprintf_internal_r+0x2d0>
    5da8:	00c00404 	movi	r3,16
    5dac:	182b883a 	mov	r21,r3
    5db0:	d8c00515 	stw	r3,20(sp)
    5db4:	d8000415 	stw	zero,16(sp)
    5db8:	003f7b06 	br	5ba8 <___vfprintf_internal_r+0x2d0>
    5dbc:	008009c4 	movi	r2,39
    5dc0:	003fb406 	br	5c94 <___vfprintf_internal_r+0x3bc>
    5dc4:	9725883a 	add	r18,r18,fp
    5dc8:	dc800215 	stw	r18,8(sp)
    5dcc:	dc800117 	ldw	r18,4(sp)
    5dd0:	0021883a 	mov	r16,zero
    5dd4:	003ed806 	br	5938 <___vfprintf_internal_r+0x60>
    5dd8:	00bfffc4 	movi	r2,-1
    5ddc:	d8800215 	stw	r2,8(sp)
    5de0:	003ef206 	br	59ac <___vfprintf_internal_r+0xd4>
    5de4:	b0c00117 	ldw	r3,4(r22)
    5de8:	d9000917 	ldw	r4,36(sp)
    5dec:	d9400005 	stb	r5,0(sp)
    5df0:	d80d883a 	mov	r6,sp
    5df4:	b00b883a 	mov	r5,r22
    5df8:	183ee83a 	callr	r3
    5dfc:	103ff61e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5e00:	d8c00217 	ldw	r3,8(sp)
    5e04:	18c00044 	addi	r3,r3,1
    5e08:	d8c00215 	stw	r3,8(sp)
    5e0c:	003eca06 	br	5938 <___vfprintf_internal_r+0x60>
    5e10:	000f883a 	mov	r7,zero
    5e14:	003f5906 	br	5b7c <___vfprintf_internal_r+0x2a4>
    5e18:	b0c00117 	ldw	r3,4(r22)
    5e1c:	d9000005 	stb	r4,0(sp)
    5e20:	d9000917 	ldw	r4,36(sp)
    5e24:	b00b883a 	mov	r5,r22
    5e28:	d80d883a 	mov	r6,sp
    5e2c:	800f883a 	mov	r7,r16
    5e30:	183ee83a 	callr	r3
    5e34:	103fe81e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5e38:	d8800217 	ldw	r2,8(sp)
    5e3c:	1405883a 	add	r2,r2,r16
    5e40:	0021883a 	mov	r16,zero
    5e44:	d8800215 	stw	r2,8(sp)
    5e48:	003ebb06 	br	5938 <___vfprintf_internal_r+0x60>
    5e4c:	8021003a 	cmpeq	r16,r16,zero
    5e50:	80001426 	beq	r16,zero,5ea4 <___vfprintf_internal_r+0x5cc>
    5e54:	d9000917 	ldw	r4,36(sp)
    5e58:	b00b883a 	mov	r5,r22
    5e5c:	01800804 	movi	r6,32
    5e60:	b80f883a 	mov	r7,r23
    5e64:	00058580 	call	5858 <print_repeat>
    5e68:	103fdb1e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5e6c:	d8c00217 	ldw	r3,8(sp)
    5e70:	b8e5883a 	add	r18,r23,r3
    5e74:	803f7b1e 	bne	r16,zero,5c64 <___vfprintf_internal_r+0x38c>
    5e78:	b0c00117 	ldw	r3,4(r22)
    5e7c:	d9000917 	ldw	r4,36(sp)
    5e80:	00800b44 	movi	r2,45
    5e84:	d8800005 	stb	r2,0(sp)
    5e88:	b00b883a 	mov	r5,r22
    5e8c:	d80d883a 	mov	r6,sp
    5e90:	01c00044 	movi	r7,1
    5e94:	183ee83a 	callr	r3
    5e98:	103fcf1e 	bne	r2,zero,5dd8 <___vfprintf_internal_r+0x500>
    5e9c:	94800044 	addi	r18,r18,1
    5ea0:	003f7006 	br	5c64 <___vfprintf_internal_r+0x38c>
    5ea4:	bdffffc4 	addi	r23,r23,-1
    5ea8:	003fea06 	br	5e54 <___vfprintf_internal_r+0x57c>

00005eac <__vfprintf_internal>:
    5eac:	00800034 	movhi	r2,0
    5eb0:	109a5504 	addi	r2,r2,26964
    5eb4:	2013883a 	mov	r9,r4
    5eb8:	11000017 	ldw	r4,0(r2)
    5ebc:	2805883a 	mov	r2,r5
    5ec0:	300f883a 	mov	r7,r6
    5ec4:	480b883a 	mov	r5,r9
    5ec8:	100d883a 	mov	r6,r2
    5ecc:	00058d81 	jmpi	58d8 <___vfprintf_internal_r>

00005ed0 <__sfvwrite_small_dev>:
    5ed0:	2880000b 	ldhu	r2,0(r5)
    5ed4:	defffa04 	addi	sp,sp,-24
    5ed8:	dcc00315 	stw	r19,12(sp)
    5edc:	1080020c 	andi	r2,r2,8
    5ee0:	dc800215 	stw	r18,8(sp)
    5ee4:	dc400115 	stw	r17,4(sp)
    5ee8:	dfc00515 	stw	ra,20(sp)
    5eec:	dd000415 	stw	r20,16(sp)
    5ef0:	dc000015 	stw	r16,0(sp)
    5ef4:	2825883a 	mov	r18,r5
    5ef8:	2027883a 	mov	r19,r4
    5efc:	3023883a 	mov	r17,r6
    5f00:	10002026 	beq	r2,zero,5f84 <__sfvwrite_small_dev+0xb4>
    5f04:	2940008f 	ldh	r5,2(r5)
    5f08:	28000f16 	blt	r5,zero,5f48 <__sfvwrite_small_dev+0x78>
    5f0c:	01c01b0e 	bge	zero,r7,5f7c <__sfvwrite_small_dev+0xac>
    5f10:	3821883a 	mov	r16,r7
    5f14:	05010004 	movi	r20,1024
    5f18:	00000206 	br	5f24 <__sfvwrite_small_dev+0x54>
    5f1c:	0400170e 	bge	zero,r16,5f7c <__sfvwrite_small_dev+0xac>
    5f20:	9140008f 	ldh	r5,2(r18)
    5f24:	880d883a 	mov	r6,r17
    5f28:	9809883a 	mov	r4,r19
    5f2c:	800f883a 	mov	r7,r16
    5f30:	a400010e 	bge	r20,r16,5f38 <__sfvwrite_small_dev+0x68>
    5f34:	01c10004 	movi	r7,1024
    5f38:	00060700 	call	6070 <_write_r>
    5f3c:	88a3883a 	add	r17,r17,r2
    5f40:	80a1c83a 	sub	r16,r16,r2
    5f44:	00bff516 	blt	zero,r2,5f1c <__sfvwrite_small_dev+0x4c>
    5f48:	9080000b 	ldhu	r2,0(r18)
    5f4c:	00ffffc4 	movi	r3,-1
    5f50:	10801014 	ori	r2,r2,64
    5f54:	9080000d 	sth	r2,0(r18)
    5f58:	1805883a 	mov	r2,r3
    5f5c:	dfc00517 	ldw	ra,20(sp)
    5f60:	dd000417 	ldw	r20,16(sp)
    5f64:	dcc00317 	ldw	r19,12(sp)
    5f68:	dc800217 	ldw	r18,8(sp)
    5f6c:	dc400117 	ldw	r17,4(sp)
    5f70:	dc000017 	ldw	r16,0(sp)
    5f74:	dec00604 	addi	sp,sp,24
    5f78:	f800283a 	ret
    5f7c:	0007883a 	mov	r3,zero
    5f80:	003ff506 	br	5f58 <__sfvwrite_small_dev+0x88>
    5f84:	00ffffc4 	movi	r3,-1
    5f88:	003ff306 	br	5f58 <__sfvwrite_small_dev+0x88>

00005f8c <putc>:
    5f8c:	defffd04 	addi	sp,sp,-12
    5f90:	00800034 	movhi	r2,0
    5f94:	109a5504 	addi	r2,r2,26964
    5f98:	dc000115 	stw	r16,4(sp)
    5f9c:	2021883a 	mov	r16,r4
    5fa0:	11000017 	ldw	r4,0(r2)
    5fa4:	dc000005 	stb	r16,0(sp)
    5fa8:	00800034 	movhi	r2,0
    5fac:	1097b404 	addi	r2,r2,24272
    5fb0:	dfc00215 	stw	ra,8(sp)
    5fb4:	28800115 	stw	r2,4(r5)
    5fb8:	d80d883a 	mov	r6,sp
    5fbc:	01c00044 	movi	r7,1
    5fc0:	103ee83a 	callr	r2
    5fc4:	1007883a 	mov	r3,r2
    5fc8:	00bfffc4 	movi	r2,-1
    5fcc:	18800526 	beq	r3,r2,5fe4 <putc+0x58>
    5fd0:	8005883a 	mov	r2,r16
    5fd4:	dfc00217 	ldw	ra,8(sp)
    5fd8:	dc000117 	ldw	r16,4(sp)
    5fdc:	dec00304 	addi	sp,sp,12
    5fe0:	f800283a 	ret
    5fe4:	1821883a 	mov	r16,r3
    5fe8:	8005883a 	mov	r2,r16
    5fec:	dfc00217 	ldw	ra,8(sp)
    5ff0:	dc000117 	ldw	r16,4(sp)
    5ff4:	dec00304 	addi	sp,sp,12
    5ff8:	f800283a 	ret

00005ffc <_putc_r>:
    5ffc:	00800034 	movhi	r2,0
    6000:	109a5504 	addi	r2,r2,26964
    6004:	defffd04 	addi	sp,sp,-12
    6008:	11000017 	ldw	r4,0(r2)
    600c:	00800034 	movhi	r2,0
    6010:	1097b404 	addi	r2,r2,24272
    6014:	30800115 	stw	r2,4(r6)
    6018:	dc000115 	stw	r16,4(sp)
    601c:	2821883a 	mov	r16,r5
    6020:	dfc00215 	stw	ra,8(sp)
    6024:	300b883a 	mov	r5,r6
    6028:	01c00044 	movi	r7,1
    602c:	d80d883a 	mov	r6,sp
    6030:	dc000005 	stb	r16,0(sp)
    6034:	103ee83a 	callr	r2
    6038:	1007883a 	mov	r3,r2
    603c:	00bfffc4 	movi	r2,-1
    6040:	18800526 	beq	r3,r2,6058 <_putc_r+0x5c>
    6044:	8005883a 	mov	r2,r16
    6048:	dfc00217 	ldw	ra,8(sp)
    604c:	dc000117 	ldw	r16,4(sp)
    6050:	dec00304 	addi	sp,sp,12
    6054:	f800283a 	ret
    6058:	1821883a 	mov	r16,r3
    605c:	8005883a 	mov	r2,r16
    6060:	dfc00217 	ldw	ra,8(sp)
    6064:	dc000117 	ldw	r16,4(sp)
    6068:	dec00304 	addi	sp,sp,12
    606c:	f800283a 	ret

00006070 <_write_r>:
    6070:	defffd04 	addi	sp,sp,-12
    6074:	dc000015 	stw	r16,0(sp)
    6078:	04000034 	movhi	r16,0
    607c:	841a9704 	addi	r16,r16,27228
    6080:	dc400115 	stw	r17,4(sp)
    6084:	80000015 	stw	zero,0(r16)
    6088:	2023883a 	mov	r17,r4
    608c:	2809883a 	mov	r4,r5
    6090:	300b883a 	mov	r5,r6
    6094:	380d883a 	mov	r6,r7
    6098:	dfc00215 	stw	ra,8(sp)
    609c:	00062ec0 	call	62ec <write>
    60a0:	1007883a 	mov	r3,r2
    60a4:	00bfffc4 	movi	r2,-1
    60a8:	18800626 	beq	r3,r2,60c4 <_write_r+0x54>
    60ac:	1805883a 	mov	r2,r3
    60b0:	dfc00217 	ldw	ra,8(sp)
    60b4:	dc400117 	ldw	r17,4(sp)
    60b8:	dc000017 	ldw	r16,0(sp)
    60bc:	dec00304 	addi	sp,sp,12
    60c0:	f800283a 	ret
    60c4:	80800017 	ldw	r2,0(r16)
    60c8:	103ff826 	beq	r2,zero,60ac <_write_r+0x3c>
    60cc:	88800015 	stw	r2,0(r17)
    60d0:	1805883a 	mov	r2,r3
    60d4:	dfc00217 	ldw	ra,8(sp)
    60d8:	dc400117 	ldw	r17,4(sp)
    60dc:	dc000017 	ldw	r16,0(sp)
    60e0:	dec00304 	addi	sp,sp,12
    60e4:	f800283a 	ret

000060e8 <udivmodsi4>:
    60e8:	29001b2e 	bgeu	r5,r4,6158 <udivmodsi4+0x70>
    60ec:	28001a16 	blt	r5,zero,6158 <udivmodsi4+0x70>
    60f0:	00800044 	movi	r2,1
    60f4:	0007883a 	mov	r3,zero
    60f8:	01c007c4 	movi	r7,31
    60fc:	00000306 	br	610c <udivmodsi4+0x24>
    6100:	19c01326 	beq	r3,r7,6150 <udivmodsi4+0x68>
    6104:	18c00044 	addi	r3,r3,1
    6108:	28000416 	blt	r5,zero,611c <udivmodsi4+0x34>
    610c:	294b883a 	add	r5,r5,r5
    6110:	1085883a 	add	r2,r2,r2
    6114:	293ffa36 	bltu	r5,r4,6100 <udivmodsi4+0x18>
    6118:	10000d26 	beq	r2,zero,6150 <udivmodsi4+0x68>
    611c:	0007883a 	mov	r3,zero
    6120:	21400236 	bltu	r4,r5,612c <udivmodsi4+0x44>
    6124:	2149c83a 	sub	r4,r4,r5
    6128:	1886b03a 	or	r3,r3,r2
    612c:	1004d07a 	srli	r2,r2,1
    6130:	280ad07a 	srli	r5,r5,1
    6134:	103ffa1e 	bne	r2,zero,6120 <udivmodsi4+0x38>
    6138:	30000226 	beq	r6,zero,6144 <udivmodsi4+0x5c>
    613c:	2005883a 	mov	r2,r4
    6140:	f800283a 	ret
    6144:	1809883a 	mov	r4,r3
    6148:	2005883a 	mov	r2,r4
    614c:	f800283a 	ret
    6150:	0007883a 	mov	r3,zero
    6154:	003ff806 	br	6138 <udivmodsi4+0x50>
    6158:	00800044 	movi	r2,1
    615c:	0007883a 	mov	r3,zero
    6160:	003fef06 	br	6120 <udivmodsi4+0x38>

00006164 <__divsi3>:
    6164:	defffe04 	addi	sp,sp,-8
    6168:	dc000015 	stw	r16,0(sp)
    616c:	dfc00115 	stw	ra,4(sp)
    6170:	0021883a 	mov	r16,zero
    6174:	20000c16 	blt	r4,zero,61a8 <__divsi3+0x44>
    6178:	000d883a 	mov	r6,zero
    617c:	28000e16 	blt	r5,zero,61b8 <__divsi3+0x54>
    6180:	00060e80 	call	60e8 <udivmodsi4>
    6184:	1007883a 	mov	r3,r2
    6188:	8005003a 	cmpeq	r2,r16,zero
    618c:	1000011e 	bne	r2,zero,6194 <__divsi3+0x30>
    6190:	00c7c83a 	sub	r3,zero,r3
    6194:	1805883a 	mov	r2,r3
    6198:	dfc00117 	ldw	ra,4(sp)
    619c:	dc000017 	ldw	r16,0(sp)
    61a0:	dec00204 	addi	sp,sp,8
    61a4:	f800283a 	ret
    61a8:	0109c83a 	sub	r4,zero,r4
    61ac:	04000044 	movi	r16,1
    61b0:	000d883a 	mov	r6,zero
    61b4:	283ff20e 	bge	r5,zero,6180 <__divsi3+0x1c>
    61b8:	014bc83a 	sub	r5,zero,r5
    61bc:	8021003a 	cmpeq	r16,r16,zero
    61c0:	003fef06 	br	6180 <__divsi3+0x1c>

000061c4 <__modsi3>:
    61c4:	deffff04 	addi	sp,sp,-4
    61c8:	dfc00015 	stw	ra,0(sp)
    61cc:	01800044 	movi	r6,1
    61d0:	2807883a 	mov	r3,r5
    61d4:	20000416 	blt	r4,zero,61e8 <__modsi3+0x24>
    61d8:	28000c16 	blt	r5,zero,620c <__modsi3+0x48>
    61dc:	dfc00017 	ldw	ra,0(sp)
    61e0:	dec00104 	addi	sp,sp,4
    61e4:	00060e81 	jmpi	60e8 <udivmodsi4>
    61e8:	0109c83a 	sub	r4,zero,r4
    61ec:	28000b16 	blt	r5,zero,621c <__modsi3+0x58>
    61f0:	180b883a 	mov	r5,r3
    61f4:	01800044 	movi	r6,1
    61f8:	00060e80 	call	60e8 <udivmodsi4>
    61fc:	0085c83a 	sub	r2,zero,r2
    6200:	dfc00017 	ldw	ra,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	f800283a 	ret
    620c:	014bc83a 	sub	r5,zero,r5
    6210:	dfc00017 	ldw	ra,0(sp)
    6214:	dec00104 	addi	sp,sp,4
    6218:	00060e81 	jmpi	60e8 <udivmodsi4>
    621c:	0147c83a 	sub	r3,zero,r5
    6220:	003ff306 	br	61f0 <__modsi3+0x2c>

00006224 <__udivsi3>:
    6224:	000d883a 	mov	r6,zero
    6228:	00060e81 	jmpi	60e8 <udivmodsi4>

0000622c <__umodsi3>:
    622c:	01800044 	movi	r6,1
    6230:	00060e81 	jmpi	60e8 <udivmodsi4>

00006234 <alt_load_section>:
    6234:	2900051e 	bne	r5,r4,624c <alt_load_section+0x18>
    6238:	f800283a 	ret
    623c:	20800017 	ldw	r2,0(r4)
    6240:	21000104 	addi	r4,r4,4
    6244:	28800015 	stw	r2,0(r5)
    6248:	29400104 	addi	r5,r5,4
    624c:	29bffb1e 	bne	r5,r6,623c <alt_load_section+0x8>
    6250:	f800283a 	ret

00006254 <alt_load>:
    6254:	deffff04 	addi	sp,sp,-4
    6258:	01000034 	movhi	r4,0
    625c:	211a5904 	addi	r4,r4,26980
    6260:	01400034 	movhi	r5,0
    6264:	295a1c04 	addi	r5,r5,26736
    6268:	01800034 	movhi	r6,0
    626c:	319a5904 	addi	r6,r6,26980
    6270:	dfc00015 	stw	ra,0(sp)
    6274:	00062340 	call	6234 <alt_load_section>
    6278:	01000034 	movhi	r4,0
    627c:	21100804 	addi	r4,r4,16416
    6280:	01400034 	movhi	r5,0
    6284:	29500804 	addi	r5,r5,16416
    6288:	01800034 	movhi	r6,0
    628c:	31900804 	addi	r6,r6,16416
    6290:	00062340 	call	6234 <alt_load_section>
    6294:	01000034 	movhi	r4,0
    6298:	21192204 	addi	r4,r4,25736
    629c:	01400034 	movhi	r5,0
    62a0:	29592204 	addi	r5,r5,25736
    62a4:	01800034 	movhi	r6,0
    62a8:	319a1c04 	addi	r6,r6,26736
    62ac:	00062340 	call	6234 <alt_load_section>
    62b0:	00064240 	call	6424 <alt_dcache_flush_all>
    62b4:	dfc00017 	ldw	ra,0(sp)
    62b8:	dec00104 	addi	sp,sp,4
    62bc:	000643c1 	jmpi	643c <alt_icache_flush_all>

000062c0 <alt_main>:
    62c0:	deffff04 	addi	sp,sp,-4
    62c4:	0009883a 	mov	r4,zero
    62c8:	dfc00015 	stw	ra,0(sp)
    62cc:	00063740 	call	6374 <alt_irq_init>
    62d0:	00063640 	call	6364 <alt_sys_init>
    62d4:	d1204417 	ldw	r4,-32496(gp)
    62d8:	d1604517 	ldw	r5,-32492(gp)
    62dc:	d1a04617 	ldw	r6,-32488(gp)
    62e0:	dfc00017 	ldw	ra,0(sp)
    62e4:	dec00104 	addi	sp,sp,4
    62e8:	000514c1 	jmpi	514c <main>

000062ec <write>:
    62ec:	deffff04 	addi	sp,sp,-4
    62f0:	2007883a 	mov	r3,r4
    62f4:	00800044 	movi	r2,1
    62f8:	dfc00015 	stw	ra,0(sp)
    62fc:	000f883a 	mov	r7,zero
    6300:	01000034 	movhi	r4,0
    6304:	211a5704 	addi	r4,r4,26972
    6308:	18800526 	beq	r3,r2,6320 <write+0x34>
    630c:	00800084 	movi	r2,2
    6310:	1880061e 	bne	r3,r2,632c <write+0x40>
    6314:	01000034 	movhi	r4,0
    6318:	211a5704 	addi	r4,r4,26972
    631c:	000f883a 	mov	r7,zero
    6320:	dfc00017 	ldw	ra,0(sp)
    6324:	dec00104 	addi	sp,sp,4
    6328:	00063941 	jmpi	6394 <altera_avalon_jtag_uart_write>
    632c:	00800034 	movhi	r2,0
    6330:	109a5804 	addi	r2,r2,26976
    6334:	10800017 	ldw	r2,0(r2)
    6338:	00c00034 	movhi	r3,0
    633c:	18da9704 	addi	r3,r3,27228
    6340:	10000226 	beq	r2,zero,634c <write+0x60>
    6344:	103ee83a 	callr	r2
    6348:	1007883a 	mov	r3,r2
    634c:	00801444 	movi	r2,81
    6350:	18800015 	stw	r2,0(r3)
    6354:	00bfffc4 	movi	r2,-1
    6358:	dfc00017 	ldw	ra,0(sp)
    635c:	dec00104 	addi	sp,sp,4
    6360:	f800283a 	ret

00006364 <alt_sys_init>:
    6364:	00c00044 	movi	r3,1
    6368:	00a40014 	movui	r2,36864
    636c:	10c00035 	stwio	r3,0(r2)
    6370:	f800283a 	ret

00006374 <alt_irq_init>:
    6374:	deffff04 	addi	sp,sp,-4
    6378:	dfc00015 	stw	ra,0(sp)
    637c:	00064480 	call	6448 <altera_nios2_qsys_irq_init>
    6380:	00800044 	movi	r2,1
    6384:	1001703a 	wrctl	status,r2
    6388:	dfc00017 	ldw	ra,0(sp)
    638c:	dec00104 	addi	sp,sp,4
    6390:	f800283a 	ret

00006394 <altera_avalon_jtag_uart_write>:
    6394:	21000017 	ldw	r4,0(r4)
    6398:	298f883a 	add	r7,r5,r6
    639c:	20c00104 	addi	r3,r4,4
    63a0:	00000606 	br	63bc <altera_avalon_jtag_uart_write+0x28>
    63a4:	18800037 	ldwio	r2,0(r3)
    63a8:	10bfffec 	andhi	r2,r2,65535
    63ac:	10000326 	beq	r2,zero,63bc <altera_avalon_jtag_uart_write+0x28>
    63b0:	28800007 	ldb	r2,0(r5)
    63b4:	29400044 	addi	r5,r5,1
    63b8:	20800035 	stwio	r2,0(r4)
    63bc:	29fff936 	bltu	r5,r7,63a4 <altera_avalon_jtag_uart_write+0x10>
    63c0:	3005883a 	mov	r2,r6
    63c4:	f800283a 	ret

000063c8 <alt_get_performance_counter_base>:
    63c8:	00a40014 	movui	r2,36864
    63cc:	f800283a 	ret

000063d0 <alt_get_cpu_freq>:
    63d0:	0080bef4 	movhi	r2,763
    63d4:	10bc2004 	addi	r2,r2,-3968
    63d8:	f800283a 	ret

000063dc <perf_get_num_starts>:
    63dc:	280a913a 	slli	r5,r5,4
    63e0:	2149883a 	add	r4,r4,r5
    63e4:	20800237 	ldwio	r2,8(r4)
    63e8:	f800283a 	ret

000063ec <perf_get_section_time>:
    63ec:	20000035 	stwio	zero,0(r4)
    63f0:	280a913a 	slli	r5,r5,4
    63f4:	2149883a 	add	r4,r4,r5
    63f8:	23400037 	ldwio	r13,0(r4)
    63fc:	23000137 	ldwio	r12,4(r4)
    6400:	0015883a 	mov	r10,zero
    6404:	0013883a 	mov	r9,zero
    6408:	5348b03a 	or	r4,r10,r13
    640c:	624ab03a 	or	r5,r12,r9
    6410:	2005883a 	mov	r2,r4
    6414:	2807883a 	mov	r3,r5
    6418:	f800283a 	ret

0000641c <perf_get_total_time>:
    641c:	000b883a 	mov	r5,zero
    6420:	00063ec1 	jmpi	63ec <perf_get_section_time>

00006424 <alt_dcache_flush_all>:
    6424:	0005883a 	mov	r2,zero
    6428:	00c20004 	movi	r3,2048
    642c:	1000003b 	flushd	0(r2)
    6430:	10800804 	addi	r2,r2,32
    6434:	10fffd1e 	bne	r2,r3,642c <alt_dcache_flush_all+0x8>
    6438:	f800283a 	ret

0000643c <alt_icache_flush_all>:
    643c:	0009883a 	mov	r4,zero
    6440:	01440004 	movi	r5,4096
    6444:	00064501 	jmpi	6450 <alt_icache_flush>

00006448 <altera_nios2_qsys_irq_init>:
    6448:	000170fa 	wrctl	ienable,zero
    644c:	f800283a 	ret

00006450 <alt_icache_flush>:
    6450:	00840004 	movi	r2,4096
    6454:	2007883a 	mov	r3,r4
    6458:	1140012e 	bgeu	r2,r5,6460 <alt_icache_flush+0x10>
    645c:	100b883a 	mov	r5,r2
    6460:	194b883a 	add	r5,r3,r5
    6464:	00000206 	br	6470 <alt_icache_flush+0x20>
    6468:	1800603a 	flushi	r3
    646c:	18c00804 	addi	r3,r3,32
    6470:	197ffd36 	bltu	r3,r5,6468 <alt_icache_flush+0x18>
    6474:	208007cc 	andi	r2,r4,31
    6478:	10000126 	beq	r2,zero,6480 <alt_icache_flush+0x30>
    647c:	1800603a 	flushi	r3
    6480:	0000203a 	flushp
    6484:	f800283a 	ret

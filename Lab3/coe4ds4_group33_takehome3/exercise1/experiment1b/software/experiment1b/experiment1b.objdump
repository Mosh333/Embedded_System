
experiment1b.elf:     file format elf32-littlenios2
experiment1b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000d8b8 memsz 0x0000d8b8 flags r-x
    LOAD off    0x0000e8d8 vaddr 0x0008d8d8 paddr 0x0008f334 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010d90 vaddr 0x00090d90 paddr 0x00090d90 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d1bc  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000568  0008d370  0008d370  0000e370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0008d8d8  0008f334  0000e8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00090d90  00090d90  00010d90  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d18  00000000  00000000  00010358  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000015b4  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023e94  00000000  00000000  00012624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007d84  00000000  00000000  000364b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014a89  00000000  00000000  0003e23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001adc  00000000  00000000  00052cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002204  00000000  00000000  000547a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c129  00000000  00000000  000569a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00062ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00062b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006666d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00066670  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00066675  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00066676  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00066677  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00066682  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006668d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00066698  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  000666a4  2**0
                  CONTENTS, READONLY
 26 .jdi          0000490f  00000000  00000000  000666ca  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00046b3c  00000000  00000000  0006afd9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008d370 l    d  .rodata	00000000 .rodata
0008d8d8 l    d  .rwdata	00000000 .rwdata
00090d90 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 custom_counter_0.c
00000000 l    df *ABS*	00000000 custom_counter_1.c
00000000 l    df *ABS*	00000000 elevator_sim.c
00000000 l    df *ABS*	00000000 experiment1b.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00081228 l     F .text	00000058 __sprint_r
0008d606 l     O .rodata	00000010 blanks.3452
0008d5f6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0008328c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084c88 l     F .text	00000058 std
00084d94 l     F .text	00000008 __fp_lock
00084d9c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008d8d8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008f300 l     O .rwdata	00000004 charset
0008d63c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008d784 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00088f28 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008a054 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008a8c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008a928 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008aa28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008ad08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008ade8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008af44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b170 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008f328 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008b40c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008e294 l     O .rwdata	00001060 jtag_uart_0
0008b4e4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008b724 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008b94c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008c214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008c638 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008c774 l     F .text	000000dc alt_file_locked
0008c9d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008d0ec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008d2a0 l     F .text	00000040 alt_sim_halt
00086a44 g     F .text	00000094 _mprec_log10
00086b30 g     F .text	00000088 __any_on
0008823c g     F .text	00000070 _isatty_r
0008d75c g     O .rodata	00000028 __mprec_tinytens
0008afa4 g     F .text	0000006c alt_main
00081100 g     F .text	000000a0 _puts_r
00090dec g     O .bss	00000100 alt_irq
000882ac g     F .text	00000078 _lseek_r
0008f334 g       *ABS*	00000000 __flash_rwdata_start
00089a48 g     F .text	00000088 __eqdf2
0009107c g       *ABS*	00000000 __alt_heap_start
00081088 g     F .text	00000044 printf
00087d08 g     F .text	00000068 __sseek
00084cf0 g     F .text	000000a4 __sinit
000859c8 g     F .text	00000084 _setlocale_r
00084df0 g     F .text	00000068 __sfmoreglue
00080828 g     F .text	00000030 handle_counter_1_expire_interrupts
0008b030 g     F .text	00000020 __malloc_unlock
00080914 g     F .text	00000044 init_counter_1_irq
00080444 g     F .text	00000084 KEY3_Pressed
000864c0 g     F .text	000000e0 memmove
00080724 g     F .text	00000104 count_X_many_times
00084de0 g     F .text	00000010 _cleanup
00086bb8 g     F .text	000000bc _Balloc
00089b58 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00080bcc g     F .text	00000254 elevator_sim
00080020 g       *ABS*	00000000 __flash_exceptions_start
000806dc g     F .text	00000048 init_counter_0_irq
000881c8 g     F .text	00000074 _fstat_r
00090da8 g     O .bss	00000004 errno
00090db4 g     O .bss	00000004 alt_argv
000972f4 g       *ABS*	00000000 _gp
0008e114 g     O .rwdata	00000180 alt_fd_list
000808a0 g     F .text	00000024 read_counter_1
0008cbfc g     F .text	00000094 alt_find_dev
00086420 g     F .text	000000a0 memcpy
00084dd4 g     F .text	0000000c _cleanup_r
00089cf0 g     F .text	000000f8 __floatsidf
0008c6fc g     F .text	00000078 alt_io_redirect
00089c68 g     F .text	00000088 __ltdf2
0008d370 g       *ABS*	00000000 __DTOR_END__
000811a0 g     F .text	00000014 puts
00086994 g     F .text	000000b0 __ratio
0008bb64 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000810cc g     F .text	00000034 _printf_r
0008a190 g     F .text	00000008 __udivsi3
0008ac48 g     F .text	000000c0 isatty
0008d66c g     O .rodata	000000c8 __mprec_tens
000859a4 g     F .text	00000008 __locale_charset
0008ce68 g     F .text	00000090 alt_icache_flush
00090d9c g     O .bss	00000004 __malloc_top_pad
0008f2fc g     O .rwdata	00000004 __mb_cur_max
000859ac g     F .text	0000000c _localeconv_r
000872b0 g     F .text	0000003c __i2b
00085388 g     F .text	0000049c __sfvwrite_r
00087c90 g     F .text	00000070 _sbrk_r
00088324 g     F .text	00000078 _read_r
0008dcd8 g     O .rwdata	0000000c __lc_ctype
0008f31c g     O .rwdata	00000004 alt_max_fd
0008a5cc g     F .text	00000138 __unpack_d
000880a4 g     F .text	00000110 _fclose_r
00084c54 g     F .text	00000034 fflush
00090da0 g     O .bss	00000004 __malloc_max_sbrked_mem
0008aa88 g     F .text	000001c0 alt_irq_register
000893b8 g     F .text	00000074 __adddf3
000806ac g     F .text	00000030 load_counter_0_config
00086874 g     F .text	00000120 __b2d
00088978 g     F .text	000005b0 __umoddi3
0008ae54 g     F .text	000000f0 lseek
0008f2f8 g     O .rwdata	00000004 _global_impure_ptr
0008762c g     F .text	000005f4 _realloc_r
0009107c g       *ABS*	00000000 __bss_end
0008c540 g     F .text	000000f8 alt_iic_isr_register
0008cad0 g     F .text	0000010c alt_tick
0008839c g     F .text	000005dc __udivdi3
0008d734 g     O .rodata	00000028 __mprec_bigtens
0008750c g     F .text	00000120 __s2b
00089ec0 g     F .text	00000194 __floatunsidf
00086794 g     F .text	00000060 __mcmp
00084dbc g     F .text	00000018 __fp_lock_all
0008c4f8 g     F .text	00000048 alt_ic_irq_enabled
0008ca38 g     F .text	00000098 alt_alarm_stop
00090dac g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008e0ec g     O .rwdata	00000028 alt_dev_null
00080368 g     F .text	000000dc KEY2_Pressed
000805d4 g     F .text	00000038 handle_counter_0_expire_interrupts
0008c11c g     F .text	00000044 alt_dcache_flush_all
00086660 g     F .text	00000070 __hi0bits
00089de8 g     F .text	000000d8 __fixdfsi
0008f334 g       *ABS*	00000000 __ram_rwdata_end
0008f314 g     O .rwdata	00000008 alt_dev_list
000808e8 g     F .text	0000002c load_counter_1_config
0008b2ec g     F .text	00000120 write
0008d8d8 g       *ABS*	00000000 __ram_rodata_end
0008a954 g     F .text	000000d4 fstat
000873ec g     F .text	00000120 __pow5mult
00080b50 g     F .text	0000007c travel_to_next_requested_floor
00090d90 g     O .bss	00000004 __nlocale_changed
0008a198 g     F .text	00000008 __umodsi3
00080858 g     F .text	00000048 reset_counter_1
0009107c g       *ABS*	00000000 end
0008b664 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008d36c g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008a238 g     F .text	00000080 __clzsi2
0008bd88 g     F .text	00000240 altera_avalon_jtag_uart_write
00084ce0 g     F .text	00000004 __sfp_lock_acquire
0008633c g     F .text	000000e4 memchr
00081280 g     F .text	00001eac ___vfprintf_internal_r
00085074 g     F .text	00000314 _free_r
0008d0f0 g     F .text	000001b0 __call_exitprocs
00090d94 g     O .bss	00000004 __mlocale_changed
0008f308 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000004c _start
00090dbc g     O .bss	00000004 _alt_tick_rate
00086f7c g     F .text	0000014c __lshift
0008065c g     F .text	00000028 read_counter_0
00090dc0 g     O .bss	00000004 _alt_nticks
0008b050 g     F .text	00000120 read
0008b4a0 g     F .text	00000044 alt_sys_init
0008cfb8 g     F .text	00000134 __register_exitproc
0008060c g     F .text	00000050 reset_counter_0
000870c8 g     F .text	000001e8 __multiply
0008b9fc g     F .text	00000074 altera_avalon_jtag_uart_close
0008d8d8 g       *ABS*	00000000 __ram_rwdata_start
0008d370 g       *ABS*	00000000 __ram_rodata_start
00090dc4 g     O .bss	00000028 __malloc_current_mallinfo
00086c74 g     F .text	0000017c __d2b
00080200 g     F .text	00000168 KEY1_Pressed
00080958 g     F .text	00000160 disp_seven_seg
0008b51c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008cdb0 g     F .text	000000b8 alt_get_fd
0008a704 g     F .text	000000c8 __fpcmp_parts_d
00088034 g     F .text	00000070 _close_r
0008cf44 g     F .text	00000074 memcmp
0008b5cc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0009107c g       *ABS*	00000000 __alt_stack_base
0008b614 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00083150 g     F .text	0000013c __swsetup_r
000897f0 g     F .text	00000258 __divdf3
00084e58 g     F .text	000000f0 __sfp
00086ad8 g     F .text	00000058 __copybits
0008dce4 g     O .rwdata	00000408 __malloc_av_
00084cec g     F .text	00000004 __sinit_lock_release
0008942c g     F .text	000003c4 __muldf3
00080684 g     F .text	00000028 read_counter_0_interrupt
00087dec g     F .text	00000060 __sread
0008cc90 g     F .text	00000120 alt_find_file
0008c160 g     F .text	000000b4 alt_dev_llist_insert
0008b010 g     F .text	00000020 __malloc_lock
0008b230 g     F .text	000000bc sbrk
00084a58 g     F .text	000001fc _fflush_r
00087f80 g     F .text	000000b4 _calloc_r
00090d90 g       *ABS*	00000000 __bss_start
000865a0 g     F .text	00000098 memset
00080e20 g     F .text	000000fc main
00090db8 g     O .bss	00000004 alt_envp
00090da4 g     O .bss	00000004 __malloc_max_total_mem
0008b574 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00087d00 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
000881b4 g     F .text	00000014 fclose
00090eec g     O .bss	00000190 _atexit0
000834a4 g     F .text	000015b4 _dtoa_r
00085bfc g     F .text	00000740 _malloc_r
0008f320 g     O .rwdata	00000004 alt_errno
000858ec g     F .text	000000b8 _fwalk
0008a0d0 g     F .text	00000060 __divsi3
0008d790 g     O .rodata	00000014 __thenan_df
00084f48 g     F .text	0000012c _malloc_trim_r
0008d370 g       *ABS*	00000000 __CTOR_END__
00087e4c g     F .text	000000bc strcmp
0008d370 g       *ABS*	00000000 __flash_rodata_start
0008d370 g       *ABS*	00000000 __DTOR_LIST__
00089ad0 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008b46c g     F .text	00000034 alt_irq_init
0008b1d0 g     F .text	00000060 alt_release_fd
0008057c g     F .text	00000058 init_button_irq
0008d7a4 g     O .rodata	00000100 __clz_tab
00090d98 g     O .bss	00000004 _PathLocale
00081030 g     F .text	00000058 init_switches_irq
0008cef8 g     F .text	00000014 atexit
00087f08 g     F .text	00000078 _write_r
00085a4c g     F .text	0000001c setlocale
0008f2f4 g     O .rwdata	00000004 _impure_ptr
00090db0 g     O .bss	00000004 alt_argc
0008c2d8 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000867f4 g     F .text	00000080 __ulp
00087c20 g     F .text	00000040 __isinfd
00084da4 g     F .text	00000018 __fp_unlock_all
0008f30c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000859b8 g     F .text	00000010 localeconv
0008c36c g     F .text	00000050 alt_ic_isr_register
00080ab8 g     F .text	00000098 service_floor
0008f334 g       *ABS*	00000000 _edata
0009107c g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008ba70 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c458 g     F .text	000000a0 alt_ic_irq_disable
00087d70 g     F .text	0000007c __swrite
0008f304 g     O .rwdata	00000004 __malloc_trim_threshold
0008cbdc g     F .text	00000020 altera_nios2_qsys_irq_init
0008cf0c g     F .text	00000038 exit
00085824 g     F .text	000000c8 _fwalk_reent
000808c4 g     F .text	00000024 read_counter_1_interrupt
00086df0 g     F .text	0000018c __mdiff
0008a130 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084ce4 g     F .text	00000004 __sfp_lock_release
00080f1c g     F .text	00000114 switch_interrupt
0008d2e0 g     F .text	00000020 _exit
00087c60 g     F .text	00000030 __isnand
0008bfc8 g     F .text	00000154 alt_alarm_start
0008a1a0 g     F .text	00000098 __muldi3
00085a68 g     F .text	00000194 __smakebuf_r
000811b4 g     F .text	00000074 strlen
0008c850 g     F .text	00000188 open
00089be0 g     F .text	00000088 __gedf2
0008c33c g     F .text	00000030 alt_icache_flush_all
0008f324 g     O .rwdata	00000004 alt_priority_mask
0008c3bc g     F .text	0000009c alt_ic_irq_enable
0008312c g     F .text	00000024 __vfprintf_internal
00089338 g     F .text	00000080 __subdf3
000866d0 g     F .text	000000c4 __lo0bits
0008f32c g     O .rwdata	00000008 alt_alarm_list
0008c274 g     F .text	00000064 _do_ctors
000804c8 g     F .text	000000b4 handle_button_interrupts
0008a7cc g     F .text	000000fc close
0008ad68 g     F .text	00000080 alt_load
0008a2b8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084ce8 g     F .text	00000004 __sinit_lock_acquire
000872ec g     F .text	00000100 __multadd
00086638 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_sram_0-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c37b04 	addi	r3,r3,3564
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c37b04 	addi	r3,r3,3564
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   801c0:	00bffd16 	blt	zero,r2,801b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801cc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801d0:	d69cbd14 	ori	gp,gp,29428
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801d8:	10836414 	ori	r2,r2,3472

    movhi r3, %hi(__bss_end)
   801dc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801e0:	18c41f14 	ori	r3,r3,4220

    beq r2, r3, 1f
   801e4:	10c00326 	beq	r2,r3,801f4 <_start+0x40>

0:
    stw zero, (r2)
   801e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f0:	10fffd36 	bltu	r2,r3,801e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f4:	008ad680 	call	8ad68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f8:	008afa40 	call	8afa4 <alt_main>

000801fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801fc:	003fff06 	br	801fc <alt_after_alt_main>

00080200 <KEY1_Pressed>:

#include "define.h"

//not using KEY_0

void KEY1_Pressed(elevator_struct *elevator) {//when PB 1 pressed, load switches 16&& 15 for door open time
   80200:	defffb04 	addi	sp,sp,-20
   80204:	dfc00415 	stw	ra,16(sp)
   80208:	df000315 	stw	fp,12(sp)
   8020c:	df000304 	addi	fp,sp,12
   80210:	e13ffe15 	stw	r4,-8(fp)
	int sw1516 = (IORD(SWITCH_I_BASE, 0) >> 15) & 0x3;
   80214:	00800434 	movhi	r2,16
   80218:	10840804 	addi	r2,r2,4128
   8021c:	10800037 	ldwio	r2,0(r2)
   80220:	1005d3fa 	srai	r2,r2,15
   80224:	108000cc 	andi	r2,r2,3
   80228:	e0bffd15 	stw	r2,-12(fp)


	switch ((IORD(SWITCH_I_BASE, 0) >> 15) & 0x3) {
   8022c:	00800434 	movhi	r2,16
   80230:	10840804 	addi	r2,r2,4128
   80234:	10800037 	ldwio	r2,0(r2)
   80238:	1005d3fa 	srai	r2,r2,15
   8023c:	108000cc 	andi	r2,r2,3
   80240:	e0bfff15 	stw	r2,-4(fp)
   80244:	e0ffff17 	ldw	r3,-4(fp)
   80248:	18800060 	cmpeqi	r2,r3,1
   8024c:	1000111e 	bne	r2,zero,80294 <KEY1_Pressed+0x94>
   80250:	e0ffff17 	ldw	r3,-4(fp)
   80254:	18800088 	cmpgei	r2,r3,2
   80258:	1000041e 	bne	r2,zero,8026c <KEY1_Pressed+0x6c>
   8025c:	e0ffff17 	ldw	r3,-4(fp)
   80260:	1805003a 	cmpeq	r2,r3,zero
   80264:	1000081e 	bne	r2,zero,80288 <KEY1_Pressed+0x88>
   80268:	00001306 	br	802b8 <KEY1_Pressed+0xb8>
   8026c:	e0ffff17 	ldw	r3,-4(fp)
   80270:	188000a0 	cmpeqi	r2,r3,2
   80274:	10000a1e 	bne	r2,zero,802a0 <KEY1_Pressed+0xa0>
   80278:	e0ffff17 	ldw	r3,-4(fp)
   8027c:	188000e0 	cmpeqi	r2,r3,3
   80280:	10000a1e 	bne	r2,zero,802ac <KEY1_Pressed+0xac>
   80284:	00000c06 	br	802b8 <KEY1_Pressed+0xb8>
	case 0:
		elevator->door_open_time = 500; //all in milliseconds
   80288:	e0fffe17 	ldw	r3,-8(fp)
   8028c:	00807d04 	movi	r2,500
   80290:	18801215 	stw	r2,72(r3)
	case 1:
		elevator->door_open_time = 1000;
   80294:	e0fffe17 	ldw	r3,-8(fp)
   80298:	0080fa04 	movi	r2,1000
   8029c:	18801215 	stw	r2,72(r3)
	case 2:
		elevator->door_open_time = 1500;
   802a0:	e0fffe17 	ldw	r3,-8(fp)
   802a4:	00817704 	movi	r2,1500
   802a8:	18801215 	stw	r2,72(r3)
	case 3:
		elevator->door_open_time = 2000;
   802ac:	e0fffe17 	ldw	r3,-8(fp)
   802b0:	0081f404 	movi	r2,2000
   802b4:	18801215 	stw	r2,72(r3)
		//printf("PB 1 pressed");

	}
	if ((((IORD(PUSH_BUTTON_I_BASE, 0)) >> 1) & 0x1) == 1) { //active low so when detects 1, means let go of
   802b8:	00800434 	movhi	r2,16
   802bc:	10840404 	addi	r2,r2,4112
   802c0:	10800037 	ldwio	r2,0(r2)
   802c4:	1005d07a 	srai	r2,r2,1
   802c8:	1080004c 	andi	r2,r2,1
   802cc:	10803fcc 	andi	r2,r2,255
   802d0:	1005003a 	cmpeq	r2,r2,zero
   802d4:	10001f1e 	bne	r2,zero,80354 <KEY1_Pressed+0x154>
		//why does this work and above doesnt wtf?
		//printf("The value of switch 16 15 was %x\n", sw1516);
		if(sw1516 == 0)elevator->door_open_time = 500; //all in milliseconds
   802d8:	e0bffd17 	ldw	r2,-12(fp)
   802dc:	1004c03a 	cmpne	r2,r2,zero
   802e0:	1000031e 	bne	r2,zero,802f0 <KEY1_Pressed+0xf0>
   802e4:	e0fffe17 	ldw	r3,-8(fp)
   802e8:	00807d04 	movi	r2,500
   802ec:	18801215 	stw	r2,72(r3)
		if(sw1516 == 1)elevator->door_open_time = 1000;
   802f0:	e0bffd17 	ldw	r2,-12(fp)
   802f4:	10800058 	cmpnei	r2,r2,1
   802f8:	1000031e 	bne	r2,zero,80308 <KEY1_Pressed+0x108>
   802fc:	e0fffe17 	ldw	r3,-8(fp)
   80300:	0080fa04 	movi	r2,1000
   80304:	18801215 	stw	r2,72(r3)
		if(sw1516 == 2)elevator->door_open_time = 1500;
   80308:	e0bffd17 	ldw	r2,-12(fp)
   8030c:	10800098 	cmpnei	r2,r2,2
   80310:	1000031e 	bne	r2,zero,80320 <KEY1_Pressed+0x120>
   80314:	e0fffe17 	ldw	r3,-8(fp)
   80318:	00817704 	movi	r2,1500
   8031c:	18801215 	stw	r2,72(r3)
		if(sw1516 == 3)elevator->door_open_time = 2000;
   80320:	e0bffd17 	ldw	r2,-12(fp)
   80324:	108000d8 	cmpnei	r2,r2,3
   80328:	1000031e 	bne	r2,zero,80338 <KEY1_Pressed+0x138>
   8032c:	e0fffe17 	ldw	r3,-8(fp)
   80330:	0081f404 	movi	r2,2000
   80334:	18801215 	stw	r2,72(r3)
		printf("Update the door open time to %d ms\n", elevator->door_open_time);
   80338:	e0bffe17 	ldw	r2,-8(fp)
   8033c:	11401217 	ldw	r5,72(r2)
   80340:	01000274 	movhi	r4,9
   80344:	2134dc04 	addi	r4,r4,-11408
   80348:	00810880 	call	81088 <printf>
		load_counter_0_config(sw1516);
   8034c:	e13ffd17 	ldw	r4,-12(fp)
   80350:	00806ac0 	call	806ac <load_counter_0_config>
	}

}
   80354:	e037883a 	mov	sp,fp
   80358:	dfc00117 	ldw	ra,4(sp)
   8035c:	df000017 	ldw	fp,0(sp)
   80360:	dec00204 	addi	sp,sp,8
   80364:	f800283a 	ret

00080368 <KEY2_Pressed>:

void KEY2_Pressed(elevator_struct *elevator) {//when PB 2 pressed, load switches 16 && 15 for time b/w floors
   80368:	defffc04 	addi	sp,sp,-16
   8036c:	dfc00315 	stw	ra,12(sp)
   80370:	df000215 	stw	fp,8(sp)
   80374:	df000204 	addi	fp,sp,8
   80378:	e13fff15 	stw	r4,-4(fp)
	int sw1516=(IORD(SWITCH_I_BASE, 0)>>15)&0x3;
   8037c:	00800434 	movhi	r2,16
   80380:	10840804 	addi	r2,r2,4128
   80384:	10800037 	ldwio	r2,0(r2)
   80388:	1005d3fa 	srai	r2,r2,15
   8038c:	108000cc 	andi	r2,r2,3
   80390:	e0bffe15 	stw	r2,-8(fp)
	if ((((IORD(PUSH_BUTTON_I_BASE, 0)) >> 2) & 0x1) == 1) { //active low so when detects 1, means let go of
   80394:	00800434 	movhi	r2,16
   80398:	10840404 	addi	r2,r2,4112
   8039c:	10800037 	ldwio	r2,0(r2)
   803a0:	1005d0ba 	srai	r2,r2,2
   803a4:	1080004c 	andi	r2,r2,1
   803a8:	10803fcc 	andi	r2,r2,255
   803ac:	1005003a 	cmpeq	r2,r2,zero
   803b0:	10001f1e 	bne	r2,zero,80430 <KEY2_Pressed+0xc8>
		//why does this work and above doesnt wtf?
		//printf("The value of switch 16 15 was %x\n", sw1516);
		if(sw1516 == 0)elevator->floor_travel_time= 500; //all in milliseconds
   803b4:	e0bffe17 	ldw	r2,-8(fp)
   803b8:	1004c03a 	cmpne	r2,r2,zero
   803bc:	1000031e 	bne	r2,zero,803cc <KEY2_Pressed+0x64>
   803c0:	e0ffff17 	ldw	r3,-4(fp)
   803c4:	00807d04 	movi	r2,500
   803c8:	18801315 	stw	r2,76(r3)
		if(sw1516 == 1)elevator->floor_travel_time = 1000;
   803cc:	e0bffe17 	ldw	r2,-8(fp)
   803d0:	10800058 	cmpnei	r2,r2,1
   803d4:	1000031e 	bne	r2,zero,803e4 <KEY2_Pressed+0x7c>
   803d8:	e0ffff17 	ldw	r3,-4(fp)
   803dc:	0080fa04 	movi	r2,1000
   803e0:	18801315 	stw	r2,76(r3)
		if(sw1516 == 2)elevator->floor_travel_time = 1500;
   803e4:	e0bffe17 	ldw	r2,-8(fp)
   803e8:	10800098 	cmpnei	r2,r2,2
   803ec:	1000031e 	bne	r2,zero,803fc <KEY2_Pressed+0x94>
   803f0:	e0ffff17 	ldw	r3,-4(fp)
   803f4:	00817704 	movi	r2,1500
   803f8:	18801315 	stw	r2,76(r3)
		if(sw1516 == 3)elevator->floor_travel_time = 2000;
   803fc:	e0bffe17 	ldw	r2,-8(fp)
   80400:	108000d8 	cmpnei	r2,r2,3
   80404:	1000031e 	bne	r2,zero,80414 <KEY2_Pressed+0xac>
   80408:	e0ffff17 	ldw	r3,-4(fp)
   8040c:	0081f404 	movi	r2,2000
   80410:	18801315 	stw	r2,76(r3)
		printf("Update the floor_travel_time to %d ms\n", elevator->floor_travel_time);
   80414:	e0bfff17 	ldw	r2,-4(fp)
   80418:	11401317 	ldw	r5,76(r2)
   8041c:	01000274 	movhi	r4,9
   80420:	2134e504 	addi	r4,r4,-11372
   80424:	00810880 	call	81088 <printf>
		load_counter_1_config(sw1516);
   80428:	e13ffe17 	ldw	r4,-8(fp)
   8042c:	00808e80 	call	808e8 <load_counter_1_config>

//	if ((((IORD(PUSH_BUTTON_I_BASE, 0)) >> 2) & 0x1) == 1) { //active low so when detects 1, means let go of
//		printf("PB 2 pressed, update the inter-floor travel time to %d\n", elevator->floor_travel_time);
//		load_counter_1_config(elevator->floor_travel_time);
//	}
}
   80430:	e037883a 	mov	sp,fp
   80434:	dfc00117 	ldw	ra,4(sp)
   80438:	df000017 	ldw	fp,0(sp)
   8043c:	dec00204 	addi	sp,sp,8
   80440:	f800283a 	ret

00080444 <KEY3_Pressed>:

void KEY3_Pressed(elevator_struct *elevator) {//when PB 3 pressed, KEEP DOOR OPEN, IF RELEASED, CAN CLOSE DOOR
   80444:	defffc04 	addi	sp,sp,-16
   80448:	dfc00315 	stw	ra,12(sp)
   8044c:	df000215 	stw	fp,8(sp)
   80450:	df000204 	addi	fp,sp,8
   80454:	e13fff15 	stw	r4,-4(fp)
	// GET DATA BIT FOR BUTTON[3]
	int button = ((IORD(PUSH_BUTTON_I_BASE, 0)) >> 3) & 0x1;
   80458:	00800434 	movhi	r2,16
   8045c:	10840404 	addi	r2,r2,4112
   80460:	10800037 	ldwio	r2,0(r2)
   80464:	1005d0fa 	srai	r2,r2,3
   80468:	1080004c 	andi	r2,r2,1
   8046c:	e0bffe15 	stw	r2,-8(fp)
	//printf("The button 3 bit is %d", button);
	//printf("Button 3 pressed\n");
	if (button != 1) {
   80470:	e0bffe17 	ldw	r2,-8(fp)
   80474:	10800060 	cmpeqi	r2,r2,1
   80478:	1000061e 	bne	r2,zero,80494 <KEY3_Pressed+0x50>
		printf("dont close button is pressed!\n");
   8047c:	01000274 	movhi	r4,9
   80480:	2134ef04 	addi	r4,r4,-11332
   80484:	00811a00 	call	811a0 <puts>
		elevator->keep_door_open = 1;
   80488:	e0ffff17 	ldw	r3,-4(fp)
   8048c:	00800044 	movi	r2,1
   80490:	18801115 	stw	r2,68(r3)
	}
	if (button != 0) {
   80494:	e0bffe17 	ldw	r2,-8(fp)
   80498:	1005003a 	cmpeq	r2,r2,zero
   8049c:	1000051e 	bne	r2,zero,804b4 <KEY3_Pressed+0x70>
		printf("dont close button has been let go\n");
   804a0:	01000274 	movhi	r4,9
   804a4:	2134f704 	addi	r4,r4,-11300
   804a8:	00811a00 	call	811a0 <puts>
		elevator->keep_door_open = 0;
   804ac:	e0bfff17 	ldw	r2,-4(fp)
   804b0:	10001115 	stw	zero,68(r2)
	}
}
   804b4:	e037883a 	mov	sp,fp
   804b8:	dfc00117 	ldw	ra,4(sp)
   804bc:	df000017 	ldw	fp,0(sp)
   804c0:	dec00204 	addi	sp,sp,8
   804c4:	f800283a 	ret

000804c8 <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts(elevator_struct *elevator) {
   804c8:	defffc04 	addi	sp,sp,-16
   804cc:	dfc00315 	stw	ra,12(sp)
   804d0:	df000215 	stw	fp,8(sp)
   804d4:	df000204 	addi	fp,sp,8
   804d8:	e13ffe15 	stw	r4,-8(fp)
	IOWR(LED_GREEN_O_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
   804dc:	00800434 	movhi	r2,16
   804e0:	10840704 	addi	r2,r2,4124
   804e4:	10c00037 	ldwio	r3,0(r2)
   804e8:	00800434 	movhi	r2,16
   804ec:	10840704 	addi	r2,r2,4124
   804f0:	10800037 	ldwio	r2,0(r2)
   804f4:	1887383a 	mul	r3,r3,r2
   804f8:	00800434 	movhi	r2,16
   804fc:	10840c04 	addi	r2,r2,4144
   80500:	10c00035 	stwio	r3,0(r2)
	//printf("Button %d pressed\n",(IORD(PUSH_BUTTON_I_BASE, 3)) );
	switch (IORD(PUSH_BUTTON_I_BASE, 3)) {
   80504:	00800434 	movhi	r2,16
   80508:	10840704 	addi	r2,r2,4124
   8050c:	10800037 	ldwio	r2,0(r2)
   80510:	e0bfff15 	stw	r2,-4(fp)
   80514:	e0ffff17 	ldw	r3,-4(fp)
   80518:	18800120 	cmpeqi	r2,r3,4
   8051c:	10000a1e 	bne	r2,zero,80548 <handle_button_interrupts+0x80>
   80520:	e0ffff17 	ldw	r3,-4(fp)
   80524:	18800220 	cmpeqi	r2,r3,8
   80528:	10000a1e 	bne	r2,zero,80554 <handle_button_interrupts+0x8c>
   8052c:	e0ffff17 	ldw	r3,-4(fp)
   80530:	188000a0 	cmpeqi	r2,r3,2
   80534:	1000011e 	bne	r2,zero,8053c <handle_button_interrupts+0x74>
   80538:	00000806 	br	8055c <handle_button_interrupts+0x94>
	//case 1: KEY0_Pressed(); break;
	case 2:
		KEY1_Pressed(elevator);
   8053c:	e13ffe17 	ldw	r4,-8(fp)
   80540:	00802000 	call	80200 <KEY1_Pressed>
		break;
   80544:	00000506 	br	8055c <handle_button_interrupts+0x94>
	case 4:
		KEY2_Pressed(elevator);
   80548:	e13ffe17 	ldw	r4,-8(fp)
   8054c:	00803680 	call	80368 <KEY2_Pressed>
		break;
   80550:	00000206 	br	8055c <handle_button_interrupts+0x94>
	case 8:
		KEY3_Pressed(elevator);
   80554:	e13ffe17 	ldw	r4,-8(fp)
   80558:	00804440 	call	80444 <KEY3_Pressed>
		break;
	}
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   8055c:	00800434 	movhi	r2,16
   80560:	10840704 	addi	r2,r2,4124
   80564:	10000035 	stwio	zero,0(r2)
}
   80568:	e037883a 	mov	sp,fp
   8056c:	dfc00117 	ldw	ra,4(sp)
   80570:	df000017 	ldw	fp,0(sp)
   80574:	dec00204 	addi	sp,sp,8
   80578:	f800283a 	ret

0008057c <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq(elevator_struct *elevator) {
   8057c:	defffd04 	addi	sp,sp,-12
   80580:	dfc00215 	stw	ra,8(sp)
   80584:	df000115 	stw	fp,4(sp)
   80588:	df000104 	addi	fp,sp,4
   8058c:	e13fff15 	stw	r4,-4(fp)
	// Enable all 4 button interrupts
	IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   80590:	00800434 	movhi	r2,16
   80594:	10840604 	addi	r2,r2,4120
   80598:	00c003c4 	movi	r3,15
   8059c:	10c00035 	stwio	r3,0(r2)

	// Reset the edge capture register
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   805a0:	00800434 	movhi	r2,16
   805a4:	10840704 	addi	r2,r2,4124
   805a8:	10000035 	stwio	zero,0(r2)


	// Register the interrupt handler by detecting that all keys are off

	alt_irq_register(PUSH_BUTTON_I_IRQ, (void*) elevator, (void*) handle_button_interrupts);
   805ac:	01000044 	movi	r4,1
   805b0:	e17fff17 	ldw	r5,-4(fp)
   805b4:	01800234 	movhi	r6,8
   805b8:	31813204 	addi	r6,r6,1224
   805bc:	008aa880 	call	8aa88 <alt_irq_register>

}
   805c0:	e037883a 	mov	sp,fp
   805c4:	dfc00117 	ldw	ra,4(sp)
   805c8:	df000017 	ldw	fp,0(sp)
   805cc:	dec00204 	addi	sp,sp,8
   805d0:	f800283a 	ret

000805d4 <handle_counter_0_expire_interrupts>:
#include "define.h"
//custom counter 0 is for controlling the door open/close

// ISR when the counter is expired
void handle_counter_0_expire_interrupts(elevator_struct *elevator)
{
   805d4:	defffe04 	addi	sp,sp,-8
   805d8:	df000115 	stw	fp,4(sp)
   805dc:	df000104 	addi	fp,sp,4
   805e0:	e13fff15 	stw	r4,-4(fp)
	//printf("\nThe doors may be closed if the hold open button is not held  \n");
	elevator->door_close_ready=1;
   805e4:	e0bfff17 	ldw	r2,-4(fp)
   805e8:	00c00044 	movi	r3,1
   805ec:	10c01015 	stw	r3,64(r2)
	//printf("elevator->door_close_ready= %d  \n", elevator->door_close_ready);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   805f0:	00800434 	movhi	r2,16
   805f4:	10841204 	addi	r2,r2,4168
   805f8:	10000035 	stwio	zero,0(r2)
}
   805fc:	e037883a 	mov	sp,fp
   80600:	df000017 	ldw	fp,0(sp)
   80604:	dec00104 	addi	sp,sp,4
   80608:	f800283a 	ret

0008060c <reset_counter_0>:

void reset_counter_0(elevator_struct *elevator) {
   8060c:	defffe04 	addi	sp,sp,-8
   80610:	df000115 	stw	fp,4(sp)
   80614:	df000104 	addi	fp,sp,4
   80618:	e13fff15 	stw	r4,-4(fp)
	//printf("Resetting counter 0 value\n");

	elevator->door_close_ready=0;
   8061c:	e0bfff17 	ldw	r2,-4(fp)
   80620:	10001015 	stw	zero,64(r2)

	//printf("elevator->door_close_ready= %d  \n", elevator->door_close_ready);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
   80624:	00c00434 	movhi	r3,16
   80628:	18c41104 	addi	r3,r3,4164
   8062c:	00800044 	movi	r2,1
   80630:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);
   80634:	00800434 	movhi	r2,16
   80638:	10841104 	addi	r2,r2,4164
   8063c:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80640:	00800434 	movhi	r2,16
   80644:	10841204 	addi	r2,r2,4168
   80648:	10000035 	stwio	zero,0(r2)
}
   8064c:	e037883a 	mov	sp,fp
   80650:	df000017 	ldw	fp,0(sp)
   80654:	dec00104 	addi	sp,sp,4
   80658:	f800283a 	ret

0008065c <read_counter_0>:

int read_counter_0(){
   8065c:	deffff04 	addi	sp,sp,-4
   80660:	df000015 	stw	fp,0(sp)
   80664:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
   80668:	00800434 	movhi	r2,16
   8066c:	10841004 	addi	r2,r2,4160
   80670:	10800037 	ldwio	r2,0(r2)
}
   80674:	e037883a 	mov	sp,fp
   80678:	df000017 	ldw	fp,0(sp)
   8067c:	dec00104 	addi	sp,sp,4
   80680:	f800283a 	ret

00080684 <read_counter_0_interrupt>:

int read_counter_0_interrupt() {
   80684:	deffff04 	addi	sp,sp,-4
   80688:	df000015 	stw	fp,0(sp)
   8068c:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
   80690:	00800434 	movhi	r2,16
   80694:	10841204 	addi	r2,r2,4168
   80698:	10800037 	ldwio	r2,0(r2)
}
   8069c:	e037883a 	mov	sp,fp
   806a0:	df000017 	ldw	fp,0(sp)
   806a4:	dec00104 	addi	sp,sp,4
   806a8:	f800283a 	ret

000806ac <load_counter_0_config>:

void load_counter_0_config(int config) {
   806ac:	defffe04 	addi	sp,sp,-8
   806b0:	df000115 	stw	fp,4(sp)
   806b4:	df000104 	addi	fp,sp,4
   806b8:	e13fff15 	stw	r4,-4(fp)
	//printf("Loading counter 0 config %d\n", config);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, config);
   806bc:	00c00434 	movhi	r3,16
   806c0:	18c41304 	addi	r3,r3,4172
   806c4:	e0bfff17 	ldw	r2,-4(fp)
   806c8:	18800035 	stwio	r2,0(r3)
}
   806cc:	e037883a 	mov	sp,fp
   806d0:	df000017 	ldw	fp,0(sp)
   806d4:	dec00104 	addi	sp,sp,4
   806d8:	f800283a 	ret

000806dc <init_counter_0_irq>:

// Function for initializing the ISR of the Counter
void init_counter_0_irq(elevator_struct *elevator) {
   806dc:	defffd04 	addi	sp,sp,-12
   806e0:	dfc00215 	stw	ra,8(sp)
   806e4:	df000115 	stw	fp,4(sp)
   806e8:	df000104 	addi	fp,sp,4
   806ec:	e13fff15 	stw	r4,-4(fp)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   806f0:	00800434 	movhi	r2,16
   806f4:	10841204 	addi	r2,r2,4168
   806f8:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)elevator , (void*)handle_counter_0_expire_interrupts );
   806fc:	01000084 	movi	r4,2
   80700:	e17fff17 	ldw	r5,-4(fp)
   80704:	01800234 	movhi	r6,8
   80708:	31817504 	addi	r6,r6,1492
   8070c:	008aa880 	call	8aa88 <alt_irq_register>
}
   80710:	e037883a 	mov	sp,fp
   80714:	dfc00117 	ldw	ra,4(sp)
   80718:	df000017 	ldw	fp,0(sp)
   8071c:	dec00204 	addi	sp,sp,8
   80720:	f800283a 	ret

00080724 <count_X_many_times>:
////////////////////////
// CODE SECTION BEGIN //
////////////////////////
//custom counter 1 is for inter-floor travelling
#include "define.h"
void count_X_many_times(elevator_struct *elevator){
   80724:	defffb04 	addi	sp,sp,-20
   80728:	dfc00415 	stw	ra,16(sp)
   8072c:	df000315 	stw	fp,12(sp)
   80730:	df000304 	addi	fp,sp,12
   80734:	e13fff15 	stw	r4,-4(fp)
	//run the counter X many times where x is the amount of floors between your current and next floors

	int x=abs(elevator->current_floor-elevator->next_floor);
   80738:	e0bfff17 	ldw	r2,-4(fp)
   8073c:	10c00117 	ldw	r3,4(r2)
   80740:	e0bfff17 	ldw	r2,-4(fp)
   80744:	10800217 	ldw	r2,8(r2)
   80748:	1885c83a 	sub	r2,r3,r2
   8074c:	e0bffe15 	stw	r2,-8(fp)
   80750:	e0bffe17 	ldw	r2,-8(fp)
   80754:	1004403a 	cmpge	r2,r2,zero
   80758:	1000031e 	bne	r2,zero,80768 <count_X_many_times+0x44>
   8075c:	e0bffe17 	ldw	r2,-8(fp)
   80760:	0085c83a 	sub	r2,zero,r2
   80764:	e0bffe15 	stw	r2,-8(fp)
	int iterations=0;
   80768:	e03ffd15 	stw	zero,-12(fp)

	while(iterations<x){
   8076c:	00002106 	br	807f4 <count_X_many_times+0xd0>
		reset_counter_1(elevator);
   80770:	e13fff17 	ldw	r4,-4(fp)
   80774:	00808580 	call	80858 <reset_counter_1>
		while(elevator->counter_1_running==1);//WAIT
   80778:	e0bfff17 	ldw	r2,-4(fp)
   8077c:	10801417 	ldw	r2,80(r2)
   80780:	10800060 	cmpeqi	r2,r2,1
   80784:	103ffc1e 	bne	r2,zero,80778 <count_X_many_times+0x54>
		iterations++;
   80788:	e0bffd17 	ldw	r2,-12(fp)
   8078c:	10800044 	addi	r2,r2,1
   80790:	e0bffd15 	stw	r2,-12(fp)
		if(elevator->direction==1){
   80794:	e0bfff17 	ldw	r2,-4(fp)
   80798:	10800317 	ldw	r2,12(r2)
   8079c:	10800058 	cmpnei	r2,r2,1
   807a0:	1000051e 	bne	r2,zero,807b8 <count_X_many_times+0x94>
			elevator->current_floor++;
   807a4:	e0bfff17 	ldw	r2,-4(fp)
   807a8:	10800117 	ldw	r2,4(r2)
   807ac:	10c00044 	addi	r3,r2,1
   807b0:	e0bfff17 	ldw	r2,-4(fp)
   807b4:	10c00115 	stw	r3,4(r2)
		}
		if(elevator->direction==-1){
   807b8:	e0bfff17 	ldw	r2,-4(fp)
   807bc:	10800317 	ldw	r2,12(r2)
   807c0:	10bfffd8 	cmpnei	r2,r2,-1
   807c4:	1000051e 	bne	r2,zero,807dc <count_X_many_times+0xb8>
					elevator->current_floor--;
   807c8:	e0bfff17 	ldw	r2,-4(fp)
   807cc:	10800117 	ldw	r2,4(r2)
   807d0:	10ffffc4 	addi	r3,r2,-1
   807d4:	e0bfff17 	ldw	r2,-4(fp)
   807d8:	10c00115 	stw	r3,4(r2)
				}


		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(
   807dc:	e0bfff17 	ldw	r2,-4(fp)
   807e0:	11000117 	ldw	r4,4(r2)
   807e4:	00809580 	call	80958 <disp_seven_seg>
   807e8:	1007883a 	mov	r3,r2
   807ec:	00800404 	movi	r2,16
   807f0:	10c00035 	stwio	r3,0(r2)
	//run the counter X many times where x is the amount of floors between your current and next floors

	int x=abs(elevator->current_floor-elevator->next_floor);
	int iterations=0;

	while(iterations<x){
   807f4:	e0fffd17 	ldw	r3,-12(fp)
   807f8:	e0bffe17 	ldw	r2,-8(fp)
   807fc:	18bfdc16 	blt	r3,r2,80770 <count_X_many_times+0x4c>

		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(
				elevator->current_floor));

	}
	elevator->arrived_at_floor=1;
   80800:	e0bfff17 	ldw	r2,-4(fp)
   80804:	00c00044 	movi	r3,1
   80808:	10c01515 	stw	r3,84(r2)
	elevator->motion=0;
   8080c:	e0bfff17 	ldw	r2,-4(fp)
   80810:	10000015 	stw	zero,0(r2)


}
   80814:	e037883a 	mov	sp,fp
   80818:	dfc00117 	ldw	ra,4(sp)
   8081c:	df000017 	ldw	fp,0(sp)
   80820:	dec00204 	addi	sp,sp,8
   80824:	f800283a 	ret

00080828 <handle_counter_1_expire_interrupts>:
// ISR when the counter is expired
void handle_counter_1_expire_interrupts(elevator_struct *elevator)
{
   80828:	defffe04 	addi	sp,sp,-8
   8082c:	df000115 	stw	fp,4(sp)
   80830:	df000104 	addi	fp,sp,4
   80834:	e13fff15 	stw	r4,-4(fp)
	//printf("Counter 1 expires\n");
	elevator->counter_1_running=0;
   80838:	e0bfff17 	ldw	r2,-4(fp)
   8083c:	10001415 	stw	zero,80(r2)
	//printf("\ncurrent_floor is %d", elevator->current_floor);



	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   80840:	00800204 	movi	r2,8
   80844:	10000035 	stwio	zero,0(r2)
}
   80848:	e037883a 	mov	sp,fp
   8084c:	df000017 	ldw	fp,0(sp)
   80850:	dec00104 	addi	sp,sp,4
   80854:	f800283a 	ret

00080858 <reset_counter_1>:

void reset_counter_1(elevator_struct *elevator) {
   80858:	defffe04 	addi	sp,sp,-8
   8085c:	df000115 	stw	fp,4(sp)
   80860:	df000104 	addi	fp,sp,4
   80864:	e13fff15 	stw	r4,-4(fp)
	//printf("Resetting counter 1 value\n");

	elevator->counter_1_running=1;
   80868:	e0ffff17 	ldw	r3,-4(fp)
   8086c:	00800044 	movi	r2,1
   80870:	18801415 	stw	r2,80(r3)



	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 1, 1);
   80874:	00c00104 	movi	r3,4
   80878:	00800044 	movi	r2,1
   8087c:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 1, 0);
   80880:	00800104 	movi	r2,4
   80884:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   80888:	00800204 	movi	r2,8
   8088c:	10000035 	stwio	zero,0(r2)
}
   80890:	e037883a 	mov	sp,fp
   80894:	df000017 	ldw	fp,0(sp)
   80898:	dec00104 	addi	sp,sp,4
   8089c:	f800283a 	ret

000808a0 <read_counter_1>:

int read_counter_1(){
   808a0:	deffff04 	addi	sp,sp,-4
   808a4:	df000015 	stw	fp,0(sp)
   808a8:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_1_BASE, 0);
   808ac:	0005883a 	mov	r2,zero
   808b0:	10800037 	ldwio	r2,0(r2)
}
   808b4:	e037883a 	mov	sp,fp
   808b8:	df000017 	ldw	fp,0(sp)
   808bc:	dec00104 	addi	sp,sp,4
   808c0:	f800283a 	ret

000808c4 <read_counter_1_interrupt>:

int read_counter_1_interrupt() {
   808c4:	deffff04 	addi	sp,sp,-4
   808c8:	df000015 	stw	fp,0(sp)
   808cc:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_1_BASE, 2);
   808d0:	00800204 	movi	r2,8
   808d4:	10800037 	ldwio	r2,0(r2)
}
   808d8:	e037883a 	mov	sp,fp
   808dc:	df000017 	ldw	fp,0(sp)
   808e0:	dec00104 	addi	sp,sp,4
   808e4:	f800283a 	ret

000808e8 <load_counter_1_config>:

void load_counter_1_config(int config) {
   808e8:	defffe04 	addi	sp,sp,-8
   808ec:	df000115 	stw	fp,4(sp)
   808f0:	df000104 	addi	fp,sp,4
   808f4:	e13fff15 	stw	r4,-4(fp)
	//printf("Loading counter 1 config %d\n", config);

	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 3, config);
   808f8:	00c00304 	movi	r3,12
   808fc:	e0bfff17 	ldw	r2,-4(fp)
   80900:	18800035 	stwio	r2,0(r3)
}
   80904:	e037883a 	mov	sp,fp
   80908:	df000017 	ldw	fp,0(sp)
   8090c:	dec00104 	addi	sp,sp,4
   80910:	f800283a 	ret

00080914 <init_counter_1_irq>:

// Function for initializing the ISR of the Counter
void init_counter_1_irq(elevator_struct *elevator) {
   80914:	defffd04 	addi	sp,sp,-12
   80918:	dfc00215 	stw	ra,8(sp)
   8091c:	df000115 	stw	fp,4(sp)
   80920:	df000104 	addi	fp,sp,4
   80924:	e13fff15 	stw	r4,-4(fp)
	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   80928:	00800204 	movi	r2,8
   8092c:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_1_IRQ, (void*)elevator, (void*)handle_counter_1_expire_interrupts );
   80930:	010000c4 	movi	r4,3
   80934:	e17fff17 	ldw	r5,-4(fp)
   80938:	01800234 	movhi	r6,8
   8093c:	31820a04 	addi	r6,r6,2088
   80940:	008aa880 	call	8aa88 <alt_irq_register>
}
   80944:	e037883a 	mov	sp,fp
   80948:	dfc00117 	ldw	ra,4(sp)
   8094c:	df000017 	ldw	fp,0(sp)
   80950:	dec00204 	addi	sp,sp,8
   80954:	f800283a 	ret

00080958 <disp_seven_seg>:
 *      Author: ECE\ganesr3
 */

#include "define.h"

alt_u16 disp_seven_seg(alt_u8 val) {
   80958:	defffc04 	addi	sp,sp,-16
   8095c:	df000315 	stw	fp,12(sp)
   80960:	df000304 	addi	fp,sp,12
   80964:	e13ffd05 	stb	r4,-12(fp)
	switch (val) {
   80968:	e0bffd03 	ldbu	r2,-12(fp)
   8096c:	e0bfff15 	stw	r2,-4(fp)
   80970:	e0ffff17 	ldw	r3,-4(fp)
   80974:	18800428 	cmpgeui	r2,r3,16
   80978:	1000481e 	bne	r2,zero,80a9c <disp_seven_seg+0x144>
   8097c:	e13fff17 	ldw	r4,-4(fp)
   80980:	e13fff17 	ldw	r4,-4(fp)
   80984:	2105883a 	add	r2,r4,r4
   80988:	1087883a 	add	r3,r2,r2
   8098c:	00800234 	movhi	r2,8
   80990:	10826804 	addi	r2,r2,2464
   80994:	1885883a 	add	r2,r3,r2
   80998:	10800017 	ldw	r2,0(r2)
   8099c:	1000683a 	jmp	r2
   809a0:	000809e0 	cmpeqi	zero,zero,8231
   809a4:	000809ec 	andhi	zero,zero,8231
   809a8:	000809f8 	rdprs	zero,zero,8231
   809ac:	00080a04 	movi	zero,8232
   809b0:	00080a10 	cmplti	zero,zero,8232
   809b4:	00080a1c 	xori	zero,zero,8232
   809b8:	00080a28 	cmpgeui	zero,zero,8232
   809bc:	00080a34 	movhi	zero,8232
   809c0:	00080a40 	call	80a4 <__alt_mem_sram_0-0x77f5c>
   809c4:	00080a48 	cmpgei	zero,zero,8233
   809c8:	00080a54 	movui	zero,8233
   809cc:	00080a60 	cmpeqi	zero,zero,8233
   809d0:	00080a6c 	andhi	zero,zero,8233
   809d4:	00080a78 	rdprs	zero,zero,8233
   809d8:	00080a84 	movi	zero,8234
   809dc:	00080a90 	cmplti	zero,zero,8234
	case 0:
		return 0x40;
   809e0:	00801004 	movi	r2,64
   809e4:	e0bffe15 	stw	r2,-8(fp)
   809e8:	00002e06 	br	80aa4 <disp_seven_seg+0x14c>
	case 1:
		return 0x79;
   809ec:	00c01e44 	movi	r3,121
   809f0:	e0fffe15 	stw	r3,-8(fp)
   809f4:	00002b06 	br	80aa4 <disp_seven_seg+0x14c>
	case 2:
		return 0x24;
   809f8:	01000904 	movi	r4,36
   809fc:	e13ffe15 	stw	r4,-8(fp)
   80a00:	00002806 	br	80aa4 <disp_seven_seg+0x14c>
	case 3:
		return 0x30;
   80a04:	00800c04 	movi	r2,48
   80a08:	e0bffe15 	stw	r2,-8(fp)
   80a0c:	00002506 	br	80aa4 <disp_seven_seg+0x14c>
	case 4:
		return 0x19;
   80a10:	00c00644 	movi	r3,25
   80a14:	e0fffe15 	stw	r3,-8(fp)
   80a18:	00002206 	br	80aa4 <disp_seven_seg+0x14c>
	case 5:
		return 0x12;
   80a1c:	01000484 	movi	r4,18
   80a20:	e13ffe15 	stw	r4,-8(fp)
   80a24:	00001f06 	br	80aa4 <disp_seven_seg+0x14c>
	case 6:
		return 0x02;
   80a28:	00800084 	movi	r2,2
   80a2c:	e0bffe15 	stw	r2,-8(fp)
   80a30:	00001c06 	br	80aa4 <disp_seven_seg+0x14c>
	case 7:
		return 0x78;
   80a34:	00c01e04 	movi	r3,120
   80a38:	e0fffe15 	stw	r3,-8(fp)
   80a3c:	00001906 	br	80aa4 <disp_seven_seg+0x14c>
	case 8:
		return 0x00;
   80a40:	e03ffe15 	stw	zero,-8(fp)
   80a44:	00001706 	br	80aa4 <disp_seven_seg+0x14c>
	case 9:
		return 0x18;
   80a48:	01000604 	movi	r4,24
   80a4c:	e13ffe15 	stw	r4,-8(fp)
   80a50:	00001406 	br	80aa4 <disp_seven_seg+0x14c>
	case 10:
		return 0x08;
   80a54:	00800204 	movi	r2,8
   80a58:	e0bffe15 	stw	r2,-8(fp)
   80a5c:	00001106 	br	80aa4 <disp_seven_seg+0x14c>
	case 11:
		return 0x03;
   80a60:	00c000c4 	movi	r3,3
   80a64:	e0fffe15 	stw	r3,-8(fp)
   80a68:	00000e06 	br	80aa4 <disp_seven_seg+0x14c>
	case 12:
		return 0x46;
   80a6c:	01001184 	movi	r4,70
   80a70:	e13ffe15 	stw	r4,-8(fp)
   80a74:	00000b06 	br	80aa4 <disp_seven_seg+0x14c>
	case 13:
		return 0x21;
   80a78:	00800844 	movi	r2,33
   80a7c:	e0bffe15 	stw	r2,-8(fp)
   80a80:	00000806 	br	80aa4 <disp_seven_seg+0x14c>
	case 14:
		return 0x06;
   80a84:	00c00184 	movi	r3,6
   80a88:	e0fffe15 	stw	r3,-8(fp)
   80a8c:	00000506 	br	80aa4 <disp_seven_seg+0x14c>
	case 15:
		return 0x0e;
   80a90:	01000384 	movi	r4,14
   80a94:	e13ffe15 	stw	r4,-8(fp)
   80a98:	00000206 	br	80aa4 <disp_seven_seg+0x14c>
	default:
		return 0x7f;
   80a9c:	00801fc4 	movi	r2,127
   80aa0:	e0bffe15 	stw	r2,-8(fp)
   80aa4:	e0bffe17 	ldw	r2,-8(fp)
	}
}
   80aa8:	e037883a 	mov	sp,fp
   80aac:	df000017 	ldw	fp,0(sp)
   80ab0:	dec00104 	addi	sp,sp,4
   80ab4:	f800283a 	ret

00080ab8 <service_floor>:

void service_floor(elevator_struct *elevator) {
   80ab8:	defffd04 	addi	sp,sp,-12
   80abc:	dfc00215 	stw	ra,8(sp)
   80ac0:	df000115 	stw	fp,4(sp)
   80ac4:	df000104 	addi	fp,sp,4
   80ac8:	e13fff15 	stw	r4,-4(fp)

	//this function will use counter 0 to keep door open
	reset_counter_0();
   80acc:	008060c0 	call	8060c <reset_counter_0>
	//keep door open until
	//printf("starting while loop\n");
	//printf("ONE if we need to keep door open:%d", elevator->keep_door_open);
	printf("<-[]->   Doors OPEN on floor %d\n", elevator->current_floor);
   80ad0:	e0bfff17 	ldw	r2,-4(fp)
   80ad4:	11400117 	ldw	r5,4(r2)
   80ad8:	01000274 	movhi	r4,9
   80adc:	21350004 	addi	r4,r4,-11264
   80ae0:	00810880 	call	81088 <printf>
   80ae4:	00000006 	br	80ae8 <service_floor+0x30>
	while (1) {

		if (elevator->keep_door_open == 0) {
   80ae8:	e0bfff17 	ldw	r2,-4(fp)
   80aec:	10801117 	ldw	r2,68(r2)
   80af0:	1004c03a 	cmpne	r2,r2,zero
   80af4:	103ffc1e 	bne	r2,zero,80ae8 <service_floor+0x30>
			if (elevator->door_close_ready == 1) {
   80af8:	e0bfff17 	ldw	r2,-4(fp)
   80afc:	10801017 	ldw	r2,64(r2)
   80b00:	10800058 	cmpnei	r2,r2,1
   80b04:	103ff81e 	bne	r2,zero,80ae8 <service_floor+0x30>

				elevator->request_queue[elevator->current_floor] = 0;//this floor has been serviced
   80b08:	e0bfff17 	ldw	r2,-4(fp)
   80b0c:	10800117 	ldw	r2,4(r2)
   80b10:	e0ffff17 	ldw	r3,-4(fp)
   80b14:	1085883a 	add	r2,r2,r2
   80b18:	1085883a 	add	r2,r2,r2
   80b1c:	10c5883a 	add	r2,r2,r3
   80b20:	10800404 	addi	r2,r2,16
   80b24:	10000015 	stw	zero,0(r2)
				printf("->[]<-   Doors CLOSED on floor %d\n\n\n",
   80b28:	e0bfff17 	ldw	r2,-4(fp)
   80b2c:	11400117 	ldw	r5,4(r2)
   80b30:	01000274 	movhi	r4,9
   80b34:	21350904 	addi	r4,r4,-11228
   80b38:	00810880 	call	81088 <printf>
				//	elevator->current_floor);
				break;
			}
		}
	}
}
   80b3c:	e037883a 	mov	sp,fp
   80b40:	dfc00117 	ldw	ra,4(sp)
   80b44:	df000017 	ldw	fp,0(sp)
   80b48:	dec00204 	addi	sp,sp,8
   80b4c:	f800283a 	ret

00080b50 <travel_to_next_requested_floor>:

void travel_to_next_requested_floor(elevator_struct* elevator) {
   80b50:	defffd04 	addi	sp,sp,-12
   80b54:	dfc00215 	stw	ra,8(sp)
   80b58:	df000115 	stw	fp,4(sp)
   80b5c:	df000104 	addi	fp,sp,4
   80b60:	e13fff15 	stw	r4,-4(fp)

	count_X_many_times(elevator);
   80b64:	e13fff17 	ldw	r4,-4(fp)
   80b68:	00807240 	call	80724 <count_X_many_times>
	while (~elevator->arrived_at_floor) {
   80b6c:	00000b06 	br	80b9c <travel_to_next_requested_floor+0x4c>
		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(
   80b70:	e0bfff17 	ldw	r2,-4(fp)
   80b74:	10800117 	ldw	r2,4(r2)
   80b78:	11003fcc 	andi	r4,r2,255
   80b7c:	00809580 	call	80958 <disp_seven_seg>
   80b80:	10ffffcc 	andi	r3,r2,65535
   80b84:	00800404 	movi	r2,16
   80b88:	10c00035 	stwio	r3,0(r2)
				elevator->current_floor));
		if (elevator->arrived_at_floor) {
   80b8c:	e0bfff17 	ldw	r2,-4(fp)
   80b90:	10801517 	ldw	r2,84(r2)
   80b94:	1004c03a 	cmpne	r2,r2,zero
   80b98:	1000051e 	bne	r2,zero,80bb0 <travel_to_next_requested_floor+0x60>
}

void travel_to_next_requested_floor(elevator_struct* elevator) {

	count_X_many_times(elevator);
	while (~elevator->arrived_at_floor) {
   80b9c:	e0bfff17 	ldw	r2,-4(fp)
   80ba0:	10801517 	ldw	r2,84(r2)
   80ba4:	0084303a 	nor	r2,zero,r2
   80ba8:	1004c03a 	cmpne	r2,r2,zero
   80bac:	103ff01e 	bne	r2,zero,80b70 <travel_to_next_requested_floor+0x20>
		if (elevator->arrived_at_floor) {
			break;
		}
	}
//	printf("I have arrived at floor %d\n", elevator->current_floor);
	elevator->motion = 0;
   80bb0:	e0bfff17 	ldw	r2,-4(fp)
   80bb4:	10000015 	stw	zero,0(r2)
	return;

}
   80bb8:	e037883a 	mov	sp,fp
   80bbc:	dfc00117 	ldw	ra,4(sp)
   80bc0:	df000017 	ldw	fp,0(sp)
   80bc4:	dec00204 	addi	sp,sp,8
   80bc8:	f800283a 	ret

00080bcc <elevator_sim>:
 alt_u16 dispFloor;
 //dispFloor = disp_seven_seg(elevator->current_floor);
 IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(elevator->current_floor));
 }*/

void elevator_sim(elevator_struct* elevator) {
   80bcc:	defffb04 	addi	sp,sp,-20
   80bd0:	dfc00415 	stw	ra,16(sp)
   80bd4:	df000315 	stw	fp,12(sp)
   80bd8:	df000304 	addi	fp,sp,12
   80bdc:	e13fff15 	stw	r4,-4(fp)

	int i = 0;
   80be0:	e03ffe15 	stw	zero,-8(fp)
	int rleds = 0;
   80be4:	e03ffd15 	stw	zero,-12(fp)
   80be8:	00000006 	br	80bec <elevator_sim+0x20>
		//		printf("\n");

		//Notes:
		//we need to
		//rleds=0;
		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(
   80bec:	e0bfff17 	ldw	r2,-4(fp)
   80bf0:	10800117 	ldw	r2,4(r2)
   80bf4:	11003fcc 	andi	r4,r2,255
   80bf8:	00809580 	call	80958 <disp_seven_seg>
   80bfc:	10ffffcc 	andi	r3,r2,65535
   80c00:	00800404 	movi	r2,16
   80c04:	10c00035 	stwio	r3,0(r2)
				elevator->current_floor));
		rleds = 0;
   80c08:	e03ffd15 	stw	zero,-12(fp)
		for (i = 0; i <= 11; i++) {
   80c0c:	e03ffe15 	stw	zero,-8(fp)
   80c10:	00001206 	br	80c5c <elevator_sim+0x90>
			if (elevator->request_queue[i] == 1) {
   80c14:	e0bffe17 	ldw	r2,-8(fp)
   80c18:	e0ffff17 	ldw	r3,-4(fp)
   80c1c:	1085883a 	add	r2,r2,r2
   80c20:	1085883a 	add	r2,r2,r2
   80c24:	10c5883a 	add	r2,r2,r3
   80c28:	10800404 	addi	r2,r2,16
   80c2c:	10800017 	ldw	r2,0(r2)
   80c30:	10800058 	cmpnei	r2,r2,1
   80c34:	1000061e 	bne	r2,zero,80c50 <elevator_sim+0x84>
				rleds = rleds | (0x1 << i);
   80c38:	00c00044 	movi	r3,1
   80c3c:	e0bffe17 	ldw	r2,-8(fp)
   80c40:	1886983a 	sll	r3,r3,r2
   80c44:	e0bffd17 	ldw	r2,-12(fp)
   80c48:	10c4b03a 	or	r2,r2,r3
   80c4c:	e0bffd15 	stw	r2,-12(fp)
		//we need to
		//rleds=0;
		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg(
				elevator->current_floor));
		rleds = 0;
		for (i = 0; i <= 11; i++) {
   80c50:	e0bffe17 	ldw	r2,-8(fp)
   80c54:	10800044 	addi	r2,r2,1
   80c58:	e0bffe15 	stw	r2,-8(fp)
   80c5c:	e0bffe17 	ldw	r2,-8(fp)
   80c60:	10800310 	cmplti	r2,r2,12
   80c64:	103feb1e 	bne	r2,zero,80c14 <elevator_sim+0x48>
			if (elevator->request_queue[i] == 1) {
				rleds = rleds | (0x1 << i);
			}
		}//figure out the floors that have requests
		IOWR(LED_RED_O_BASE, 0, rleds);
   80c68:	00c00434 	movhi	r3,16
   80c6c:	18c40004 	addi	r3,r3,4096
   80c70:	e0bffd17 	ldw	r2,-12(fp)
   80c74:	18800035 	stwio	r2,0(r3)

		if (elevator->motion == 0) {//we are stopped at a floor
   80c78:	e0bfff17 	ldw	r2,-4(fp)
   80c7c:	10800017 	ldw	r2,0(r2)
   80c80:	1004c03a 	cmpne	r2,r2,zero
   80c84:	10005f1e 	bne	r2,zero,80e04 <elevator_sim+0x238>
			//printf("The elevator is not in motion\n");
			//check if we need to open doors this floor
			if (elevator->request_queue[elevator->current_floor] == 1) {//this means that the floor that we are stopped at has not been serviced
   80c88:	e0bfff17 	ldw	r2,-4(fp)
   80c8c:	10800117 	ldw	r2,4(r2)
   80c90:	e0ffff17 	ldw	r3,-4(fp)
   80c94:	1085883a 	add	r2,r2,r2
   80c98:	1085883a 	add	r2,r2,r2
   80c9c:	10c5883a 	add	r2,r2,r3
   80ca0:	10800404 	addi	r2,r2,16
   80ca4:	10800017 	ldw	r2,0(r2)
   80ca8:	10800058 	cmpnei	r2,r2,1
   80cac:	10000a1e 	bne	r2,zero,80cd8 <elevator_sim+0x10c>
				//we need to service it
				//	printf("We need to service floor %d\n", elevator->current_floor);
				service_floor(elevator);
   80cb0:	e13fff17 	ldw	r4,-4(fp)
   80cb4:	0080ab80 	call	80ab8 <service_floor>
				//	printf("the floor has been serviced\n");
				elevator->request_queue[elevator->current_floor] = 0;
   80cb8:	e0bfff17 	ldw	r2,-4(fp)
   80cbc:	10800117 	ldw	r2,4(r2)
   80cc0:	e0ffff17 	ldw	r3,-4(fp)
   80cc4:	1085883a 	add	r2,r2,r2
   80cc8:	1085883a 	add	r2,r2,r2
   80ccc:	10c5883a 	add	r2,r2,r3
   80cd0:	10800404 	addi	r2,r2,16
   80cd4:	10000015 	stw	zero,0(r2)

			}

			//time to find floors that need to be serviced
			if (elevator->direction == 1) {
   80cd8:	e0bfff17 	ldw	r2,-4(fp)
   80cdc:	10800317 	ldw	r2,12(r2)
   80ce0:	10800058 	cmpnei	r2,r2,1
   80ce4:	1000211e 	bne	r2,zero,80d6c <elevator_sim+0x1a0>
				for (i = elevator->current_floor + 1; i <= 11; i++) {
   80ce8:	e0bfff17 	ldw	r2,-4(fp)
   80cec:	10800117 	ldw	r2,4(r2)
   80cf0:	10800044 	addi	r2,r2,1
   80cf4:	e0bffe15 	stw	r2,-8(fp)
   80cf8:	00001306 	br	80d48 <elevator_sim+0x17c>
					if (elevator->request_queue[i] == 1) {
   80cfc:	e0bffe17 	ldw	r2,-8(fp)
   80d00:	e0ffff17 	ldw	r3,-4(fp)
   80d04:	1085883a 	add	r2,r2,r2
   80d08:	1085883a 	add	r2,r2,r2
   80d0c:	10c5883a 	add	r2,r2,r3
   80d10:	10800404 	addi	r2,r2,16
   80d14:	10800017 	ldw	r2,0(r2)
   80d18:	10800058 	cmpnei	r2,r2,1
   80d1c:	1000071e 	bne	r2,zero,80d3c <elevator_sim+0x170>
						elevator->next_floor = i;
   80d20:	e0ffff17 	ldw	r3,-4(fp)
   80d24:	e0bffe17 	ldw	r2,-8(fp)
   80d28:	18800215 	stw	r2,8(r3)
						elevator->motion = 1;
   80d2c:	e0ffff17 	ldw	r3,-4(fp)
   80d30:	00800044 	movi	r2,1
   80d34:	18800015 	stw	r2,0(r3)
						//	printf("\ncurrent_floor is %d", elevator->current_floor);
						//	printf("\nWe figured out that the next floor is %d\n",
						//elevator->next_floor);
						break;
   80d38:	00000606 	br	80d54 <elevator_sim+0x188>

			}

			//time to find floors that need to be serviced
			if (elevator->direction == 1) {
				for (i = elevator->current_floor + 1; i <= 11; i++) {
   80d3c:	e0bffe17 	ldw	r2,-8(fp)
   80d40:	10800044 	addi	r2,r2,1
   80d44:	e0bffe15 	stw	r2,-8(fp)
   80d48:	e0bffe17 	ldw	r2,-8(fp)
   80d4c:	10800310 	cmplti	r2,r2,12
   80d50:	103fea1e 	bne	r2,zero,80cfc <elevator_sim+0x130>
					// && elevator->next_floor!=0

				}//if no floors requested above, change direction

				//	printf("i value equals: %d", i);
				if (i == 12) {
   80d54:	e0bffe17 	ldw	r2,-8(fp)
   80d58:	10800318 	cmpnei	r2,r2,12
   80d5c:	1000031e 	bne	r2,zero,80d6c <elevator_sim+0x1a0>
					elevator->direction = -1;
   80d60:	e0ffff17 	ldw	r3,-4(fp)
   80d64:	00bfffc4 	movi	r2,-1
   80d68:	18800315 	stw	r2,12(r3)
					//printf("changing direction to go down");
				}
			}
			if (elevator->direction == -1) {
   80d6c:	e0bfff17 	ldw	r2,-4(fp)
   80d70:	10800317 	ldw	r2,12(r2)
   80d74:	10bfffd8 	cmpnei	r2,r2,-1
   80d78:	10001b1e 	bne	r2,zero,80de8 <elevator_sim+0x21c>
				for (i = elevator->current_floor - 1; i >= 0; i--) {
   80d7c:	e0bfff17 	ldw	r2,-4(fp)
   80d80:	10800117 	ldw	r2,4(r2)
   80d84:	10bfffc4 	addi	r2,r2,-1
   80d88:	e0bffe15 	stw	r2,-8(fp)
   80d8c:	00001306 	br	80ddc <elevator_sim+0x210>
					if (elevator->request_queue[i] == 1) {
   80d90:	e0bffe17 	ldw	r2,-8(fp)
   80d94:	e0ffff17 	ldw	r3,-4(fp)
   80d98:	1085883a 	add	r2,r2,r2
   80d9c:	1085883a 	add	r2,r2,r2
   80da0:	10c5883a 	add	r2,r2,r3
   80da4:	10800404 	addi	r2,r2,16
   80da8:	10800017 	ldw	r2,0(r2)
   80dac:	10800058 	cmpnei	r2,r2,1
   80db0:	1000071e 	bne	r2,zero,80dd0 <elevator_sim+0x204>
						elevator->next_floor = i;
   80db4:	e0ffff17 	ldw	r3,-4(fp)
   80db8:	e0bffe17 	ldw	r2,-8(fp)
   80dbc:	18800215 	stw	r2,8(r3)
						elevator->motion = 1;
   80dc0:	e0ffff17 	ldw	r3,-4(fp)
   80dc4:	00800044 	movi	r2,1
   80dc8:	18800015 	stw	r2,0(r3)
						//	printf("\ncurrent_floor is %d", elevator->current_floor);
						//printf("\nWe figured out that the next floor is %d\n",
						//	elevator->next_floor);
						break;
   80dcc:	00000606 	br	80de8 <elevator_sim+0x21c>
					elevator->direction = -1;
					//printf("changing direction to go down");
				}
			}
			if (elevator->direction == -1) {
				for (i = elevator->current_floor - 1; i >= 0; i--) {
   80dd0:	e0bffe17 	ldw	r2,-8(fp)
   80dd4:	10bfffc4 	addi	r2,r2,-1
   80dd8:	e0bffe15 	stw	r2,-8(fp)
   80ddc:	e0bffe17 	ldw	r2,-8(fp)
   80de0:	1004403a 	cmpge	r2,r2,zero
   80de4:	103fea1e 	bne	r2,zero,80d90 <elevator_sim+0x1c4>
						break;
						//break at next higher requested floor
					}
				}//if no floors requested above, change direction
			}
			if (i == -1) {
   80de8:	e0bffe17 	ldw	r2,-8(fp)
   80dec:	10bfffd8 	cmpnei	r2,r2,-1
   80df0:	103f7e1e 	bne	r2,zero,80bec <elevator_sim+0x20>
				elevator->direction = 1;
   80df4:	e0ffff17 	ldw	r3,-4(fp)
   80df8:	00800044 	movi	r2,1
   80dfc:	18800315 	stw	r2,12(r3)
   80e00:	003f7a06 	br	80bec <elevator_sim+0x20>
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		else if (elevator->motion == 1) {//if elevator motion==1 means we are in motion
   80e04:	e0bfff17 	ldw	r2,-4(fp)
   80e08:	10800017 	ldw	r2,0(r2)
   80e0c:	10800058 	cmpnei	r2,r2,1
   80e10:	103f761e 	bne	r2,zero,80bec <elevator_sim+0x20>
			//printf("We are travelling to floor: %d\n", elevator->next_floor);
			travel_to_next_requested_floor(elevator);
   80e14:	e13fff17 	ldw	r4,-4(fp)
   80e18:	0080b500 	call	80b50 <travel_to_next_requested_floor>

		}//else{//if elevator motion==1 means we are in motion


	}
   80e1c:	003f7306 	br	80bec <elevator_sim+0x20>

00080e20 <main>:

#include "define.h"


int main()
{
   80e20:	deffe704 	addi	sp,sp,-100
   80e24:	dfc01815 	stw	ra,96(sp)
   80e28:	df001715 	stw	fp,92(sp)
   80e2c:	df001704 	addi	fp,sp,92
	int i;
	elevator_struct elevator;

	elevator.motion = 0;
   80e30:	e03fea15 	stw	zero,-88(fp)
	elevator.current_floor = 0;
   80e34:	e03feb15 	stw	zero,-84(fp)
	elevator.direction = 1;
   80e38:	00800044 	movi	r2,1
   80e3c:	e0bfed15 	stw	r2,-76(fp)
	elevator.next_floor = 0;
   80e40:	e03fec15 	stw	zero,-80(fp)
	for(i=0;i<12;i++){
   80e44:	e03fe915 	stw	zero,-92(fp)
   80e48:	00000a06 	br	80e74 <main+0x54>
		elevator.request_queue[i] = 0;
   80e4c:	e0bfe917 	ldw	r2,-92(fp)
   80e50:	1085883a 	add	r2,r2,r2
   80e54:	1085883a 	add	r2,r2,r2
   80e58:	e0ffe904 	addi	r3,fp,-92
   80e5c:	10c5883a 	add	r2,r2,r3
   80e60:	10800504 	addi	r2,r2,20
   80e64:	10000015 	stw	zero,0(r2)

	elevator.motion = 0;
	elevator.current_floor = 0;
	elevator.direction = 1;
	elevator.next_floor = 0;
	for(i=0;i<12;i++){
   80e68:	e0bfe917 	ldw	r2,-92(fp)
   80e6c:	10800044 	addi	r2,r2,1
   80e70:	e0bfe915 	stw	r2,-92(fp)
   80e74:	e0bfe917 	ldw	r2,-92(fp)
   80e78:	10800310 	cmplti	r2,r2,12
   80e7c:	103ff31e 	bne	r2,zero,80e4c <main+0x2c>
		elevator.request_queue[i] = 0;
	}
	elevator.door_close_ready = 0;
   80e80:	e03ffa15 	stw	zero,-24(fp)
	elevator.keep_door_open = 0;
   80e84:	e03ffb15 	stw	zero,-20(fp)
	elevator.door_open_time = 0;
   80e88:	e03ffc15 	stw	zero,-16(fp)
	elevator.arrived_at_floor = 0;
   80e8c:	e03fff15 	stw	zero,-4(fp)
	elevator.floor_travel_time = 0;
   80e90:	e03ffd15 	stw	zero,-12(fp)
	elevator.counter_1_running = 0;
   80e94:	e03ffe15 	stw	zero,-8(fp)

	printf("Start main...\n");
   80e98:	01000274 	movhi	r4,9
   80e9c:	21351304 	addi	r4,r4,-11188
   80ea0:	00811a00 	call	811a0 <puts>

	init_button_irq(&elevator);
   80ea4:	e13fea04 	addi	r4,fp,-88
   80ea8:	008057c0 	call	8057c <init_button_irq>
	printf("PB initialized...\n");
   80eac:	01000274 	movhi	r4,9
   80eb0:	21351704 	addi	r4,r4,-11172
   80eb4:	00811a00 	call	811a0 <puts>

	init_counter_0_irq(&elevator);
   80eb8:	e13fea04 	addi	r4,fp,-88
   80ebc:	00806dc0 	call	806dc <init_counter_0_irq>
	printf("Counter IRQ 0 initialized...\n");
   80ec0:	01000274 	movhi	r4,9
   80ec4:	21351c04 	addi	r4,r4,-11152
   80ec8:	00811a00 	call	811a0 <puts>

	init_counter_1_irq(&elevator);
   80ecc:	e13fea04 	addi	r4,fp,-88
   80ed0:	00809140 	call	80914 <init_counter_1_irq>
	printf("Counter IRQ 1 initialized...\n");
   80ed4:	01000274 	movhi	r4,9
   80ed8:	21352404 	addi	r4,r4,-11120
   80edc:	00811a00 	call	811a0 <puts>


	init_switches_irq(&elevator);
   80ee0:	e13fea04 	addi	r4,fp,-88
   80ee4:	00810300 	call	81030 <init_switches_irq>
	printf("Switches IRQ initialized...\n");
   80ee8:	01000274 	movhi	r4,9
   80eec:	21352c04 	addi	r4,r4,-11088
   80ef0:	00811a00 	call	811a0 <puts>



	printf("\n-----------------------------------------------------------------\n------The ITB (Year 2030) elevator simulator will now begin------\n-----------------------------------------------------------------\n");
   80ef4:	01000274 	movhi	r4,9
   80ef8:	21353304 	addi	r4,r4,-11060
   80efc:	00811a00 	call	811a0 <puts>


	//printf("The address location of Seven Segment Peripheral is: %x\n", SEVEN_SEGMENT_N_O_0_BASE);


	elevator_sim(&elevator);
   80f00:	e13fea04 	addi	r4,fp,-88
   80f04:	0080bcc0 	call	80bcc <elevator_sim>

}
   80f08:	e037883a 	mov	sp,fp
   80f0c:	dfc00117 	ldw	ra,4(sp)
   80f10:	df000017 	ldw	fp,0(sp)
   80f14:	dec00204 	addi	sp,sp,8
   80f18:	f800283a 	ret

00080f1c <switch_interrupt>:

extern volatile int request_queue;

//************************Need to figure out logic to implement real time update of 7 Seg based on custom counter************************************//

void switch_interrupt(elevator_struct *elevator){
   80f1c:	defffb04 	addi	sp,sp,-20
   80f20:	df000415 	stw	fp,16(sp)
   80f24:	df000404 	addi	fp,sp,16
   80f28:	e13fff15 	stw	r4,-4(fp)
	int i=0;
   80f2c:	e03ffe15 	stw	zero,-8(fp)
	int sw= IORD(SWITCH_I_BASE, 3)& 0xFFF;
   80f30:	00800434 	movhi	r2,16
   80f34:	10840b04 	addi	r2,r2,4140
   80f38:	10800037 	ldwio	r2,0(r2)
   80f3c:	1083ffcc 	andi	r2,r2,4095
   80f40:	e0bffd15 	stw	r2,-12(fp)
	int rleds=0;
   80f44:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<=11;i++){
   80f48:	e03ffe15 	stw	zero,-8(fp)
   80f4c:	00000a06 	br	80f78 <switch_interrupt+0x5c>
		if((sw>>i)&0x1)break;
   80f50:	e0fffd17 	ldw	r3,-12(fp)
   80f54:	e0bffe17 	ldw	r2,-8(fp)
   80f58:	1885d83a 	sra	r2,r3,r2
   80f5c:	1080004c 	andi	r2,r2,1
   80f60:	10803fcc 	andi	r2,r2,255
   80f64:	1004c03a 	cmpne	r2,r2,zero
   80f68:	1000061e 	bne	r2,zero,80f84 <switch_interrupt+0x68>

void switch_interrupt(elevator_struct *elevator){
	int i=0;
	int sw= IORD(SWITCH_I_BASE, 3)& 0xFFF;
	int rleds=0;
	for(i=0;i<=11;i++){
   80f6c:	e0bffe17 	ldw	r2,-8(fp)
   80f70:	10800044 	addi	r2,r2,1
   80f74:	e0bffe15 	stw	r2,-8(fp)
   80f78:	e0bffe17 	ldw	r2,-8(fp)
   80f7c:	10800310 	cmplti	r2,r2,12
   80f80:	103ff31e 	bne	r2,zero,80f50 <switch_interrupt+0x34>
		if((sw>>i)&0x1)break;
	}
	elevator->request_queue[i]=1;
   80f84:	e0bffe17 	ldw	r2,-8(fp)
   80f88:	e0ffff17 	ldw	r3,-4(fp)
   80f8c:	1085883a 	add	r2,r2,r2
   80f90:	1085883a 	add	r2,r2,r2
   80f94:	10c5883a 	add	r2,r2,r3
   80f98:	10c00404 	addi	r3,r2,16
   80f9c:	00800044 	movi	r2,1
   80fa0:	18800015 	stw	r2,0(r3)



	rleds=0;
   80fa4:	e03ffc15 	stw	zero,-16(fp)
	for (i = 0; i <= 11; i++) {
   80fa8:	e03ffe15 	stw	zero,-8(fp)
   80fac:	00001206 	br	80ff8 <switch_interrupt+0xdc>
		if (elevator->request_queue[i] == 1) {
   80fb0:	e0bffe17 	ldw	r2,-8(fp)
   80fb4:	e0ffff17 	ldw	r3,-4(fp)
   80fb8:	1085883a 	add	r2,r2,r2
   80fbc:	1085883a 	add	r2,r2,r2
   80fc0:	10c5883a 	add	r2,r2,r3
   80fc4:	10800404 	addi	r2,r2,16
   80fc8:	10800017 	ldw	r2,0(r2)
   80fcc:	10800058 	cmpnei	r2,r2,1
   80fd0:	1000061e 	bne	r2,zero,80fec <switch_interrupt+0xd0>
			rleds = rleds | (0x1 << i);
   80fd4:	00c00044 	movi	r3,1
   80fd8:	e0bffe17 	ldw	r2,-8(fp)
   80fdc:	1886983a 	sll	r3,r3,r2
   80fe0:	e0bffc17 	ldw	r2,-16(fp)
   80fe4:	10c4b03a 	or	r2,r2,r3
   80fe8:	e0bffc15 	stw	r2,-16(fp)
	elevator->request_queue[i]=1;



	rleds=0;
	for (i = 0; i <= 11; i++) {
   80fec:	e0bffe17 	ldw	r2,-8(fp)
   80ff0:	10800044 	addi	r2,r2,1
   80ff4:	e0bffe15 	stw	r2,-8(fp)
   80ff8:	e0bffe17 	ldw	r2,-8(fp)
   80ffc:	10800310 	cmplti	r2,r2,12
   81000:	103feb1e 	bne	r2,zero,80fb0 <switch_interrupt+0x94>
		if (elevator->request_queue[i] == 1) {
			rleds = rleds | (0x1 << i);
		}
	}//figure out the floors that have requests
	IOWR(LED_RED_O_BASE, 0, rleds);
   81004:	00800434 	movhi	r2,16
   81008:	10840004 	addi	r2,r2,4096
   8100c:	e0fffc17 	ldw	r3,-16(fp)
   81010:	10c00035 	stwio	r3,0(r2)
	//	printf("%d",elevator->request_queue[i]);
	//}

	//printf("\n-----Out IRQ------\n", i);

	IOWR(SWITCH_I_BASE, 3, 0x0);
   81014:	00800434 	movhi	r2,16
   81018:	10840b04 	addi	r2,r2,4140
   8101c:	10000035 	stwio	zero,0(r2)

	//IOWR(LED_RED_O_BASE, 0, rleds);
	//return;


}
   81020:	e037883a 	mov	sp,fp
   81024:	df000017 	ldw	fp,0(sp)
   81028:	dec00104 	addi	sp,sp,4
   8102c:	f800283a 	ret

00081030 <init_switches_irq>:



// Function for initializing the ISR of the Counter
void init_switches_irq(elevator_struct *elevator) {
   81030:	defffd04 	addi	sp,sp,-12
   81034:	dfc00215 	stw	ra,8(sp)
   81038:	df000115 	stw	fp,4(sp)
   8103c:	df000104 	addi	fp,sp,4
   81040:	e13fff15 	stw	r4,-4(fp)
	IOWR(SWITCH_I_BASE, 3, 0x0); //check this, do we need it?
   81044:	00800434 	movhi	r2,16
   81048:	10840b04 	addi	r2,r2,4140
   8104c:	10000035 	stwio	zero,0(r2)
	IOWR(SWITCH_I_BASE, 2, 0xFFF);//unmask the lowest 12 switches (0-11)
   81050:	00c00434 	movhi	r3,16
   81054:	18c40a04 	addi	r3,r3,4136
   81058:	0083ffc4 	movi	r2,4095
   8105c:	18800035 	stwio	r2,0(r3)
	alt_irq_register(SWITCH_I_IRQ, (void*)elevator, (void*)switch_interrupt );
   81060:	01000104 	movi	r4,4
   81064:	e17fff17 	ldw	r5,-4(fp)
   81068:	01800234 	movhi	r6,8
   8106c:	3183c704 	addi	r6,r6,3868
   81070:	008aa880 	call	8aa88 <alt_irq_register>
}
   81074:	e037883a 	mov	sp,fp
   81078:	dfc00117 	ldw	ra,4(sp)
   8107c:	df000017 	ldw	fp,0(sp)
   81080:	dec00204 	addi	sp,sp,8
   81084:	f800283a 	ret

00081088 <printf>:
   81088:	defffb04 	addi	sp,sp,-20
   8108c:	dfc00115 	stw	ra,4(sp)
   81090:	d9400215 	stw	r5,8(sp)
   81094:	d9800315 	stw	r6,12(sp)
   81098:	d9c00415 	stw	r7,16(sp)
   8109c:	00800274 	movhi	r2,9
   810a0:	10bcbd04 	addi	r2,r2,-3340
   810a4:	10c00017 	ldw	r3,0(r2)
   810a8:	200b883a 	mov	r5,r4
   810ac:	d8800204 	addi	r2,sp,8
   810b0:	19000217 	ldw	r4,8(r3)
   810b4:	100d883a 	mov	r6,r2
   810b8:	d8800015 	stw	r2,0(sp)
   810bc:	008312c0 	call	8312c <__vfprintf_internal>
   810c0:	dfc00117 	ldw	ra,4(sp)
   810c4:	dec00504 	addi	sp,sp,20
   810c8:	f800283a 	ret

000810cc <_printf_r>:
   810cc:	defffc04 	addi	sp,sp,-16
   810d0:	dfc00115 	stw	ra,4(sp)
   810d4:	d9800215 	stw	r6,8(sp)
   810d8:	d9c00315 	stw	r7,12(sp)
   810dc:	280d883a 	mov	r6,r5
   810e0:	21400217 	ldw	r5,8(r4)
   810e4:	d8c00204 	addi	r3,sp,8
   810e8:	180f883a 	mov	r7,r3
   810ec:	d8c00015 	stw	r3,0(sp)
   810f0:	00812800 	call	81280 <___vfprintf_internal_r>
   810f4:	dfc00117 	ldw	ra,4(sp)
   810f8:	dec00404 	addi	sp,sp,16
   810fc:	f800283a 	ret

00081100 <_puts_r>:
   81100:	defff604 	addi	sp,sp,-40
   81104:	dc400715 	stw	r17,28(sp)
   81108:	2023883a 	mov	r17,r4
   8110c:	2809883a 	mov	r4,r5
   81110:	dfc00915 	stw	ra,36(sp)
   81114:	dcc00815 	stw	r19,32(sp)
   81118:	2827883a 	mov	r19,r5
   8111c:	00811b40 	call	811b4 <strlen>
   81120:	89400217 	ldw	r5,8(r17)
   81124:	00c00274 	movhi	r3,9
   81128:	18f56504 	addi	r3,r3,-10860
   8112c:	01c00044 	movi	r7,1
   81130:	12000044 	addi	r8,r2,1
   81134:	d8c00515 	stw	r3,20(sp)
   81138:	d9c00615 	stw	r7,24(sp)
   8113c:	d8c00304 	addi	r3,sp,12
   81140:	01c00084 	movi	r7,2
   81144:	8809883a 	mov	r4,r17
   81148:	d80d883a 	mov	r6,sp
   8114c:	d8c00015 	stw	r3,0(sp)
   81150:	dcc00315 	stw	r19,12(sp)
   81154:	da000215 	stw	r8,8(sp)
   81158:	d9c00115 	stw	r7,4(sp)
   8115c:	d8800415 	stw	r2,16(sp)
   81160:	00853880 	call	85388 <__sfvwrite_r>
   81164:	00ffffc4 	movi	r3,-1
   81168:	10000626 	beq	r2,zero,81184 <_puts_r+0x84>
   8116c:	1805883a 	mov	r2,r3
   81170:	dfc00917 	ldw	ra,36(sp)
   81174:	dcc00817 	ldw	r19,32(sp)
   81178:	dc400717 	ldw	r17,28(sp)
   8117c:	dec00a04 	addi	sp,sp,40
   81180:	f800283a 	ret
   81184:	00c00284 	movi	r3,10
   81188:	1805883a 	mov	r2,r3
   8118c:	dfc00917 	ldw	ra,36(sp)
   81190:	dcc00817 	ldw	r19,32(sp)
   81194:	dc400717 	ldw	r17,28(sp)
   81198:	dec00a04 	addi	sp,sp,40
   8119c:	f800283a 	ret

000811a0 <puts>:
   811a0:	00800274 	movhi	r2,9
   811a4:	10bcbd04 	addi	r2,r2,-3340
   811a8:	200b883a 	mov	r5,r4
   811ac:	11000017 	ldw	r4,0(r2)
   811b0:	00811001 	jmpi	81100 <_puts_r>

000811b4 <strlen>:
   811b4:	208000cc 	andi	r2,r4,3
   811b8:	2011883a 	mov	r8,r4
   811bc:	1000161e 	bne	r2,zero,81218 <strlen+0x64>
   811c0:	20c00017 	ldw	r3,0(r4)
   811c4:	017fbff4 	movhi	r5,65279
   811c8:	297fbfc4 	addi	r5,r5,-257
   811cc:	01e02074 	movhi	r7,32897
   811d0:	39e02004 	addi	r7,r7,-32640
   811d4:	1945883a 	add	r2,r3,r5
   811d8:	11c4703a 	and	r2,r2,r7
   811dc:	00c6303a 	nor	r3,zero,r3
   811e0:	1886703a 	and	r3,r3,r2
   811e4:	18000c1e 	bne	r3,zero,81218 <strlen+0x64>
   811e8:	280d883a 	mov	r6,r5
   811ec:	380b883a 	mov	r5,r7
   811f0:	21000104 	addi	r4,r4,4
   811f4:	20800017 	ldw	r2,0(r4)
   811f8:	1187883a 	add	r3,r2,r6
   811fc:	1946703a 	and	r3,r3,r5
   81200:	0084303a 	nor	r2,zero,r2
   81204:	10c4703a 	and	r2,r2,r3
   81208:	103ff926 	beq	r2,zero,811f0 <strlen+0x3c>
   8120c:	20800007 	ldb	r2,0(r4)
   81210:	10000326 	beq	r2,zero,81220 <strlen+0x6c>
   81214:	21000044 	addi	r4,r4,1
   81218:	20800007 	ldb	r2,0(r4)
   8121c:	103ffd1e 	bne	r2,zero,81214 <strlen+0x60>
   81220:	2205c83a 	sub	r2,r4,r8
   81224:	f800283a 	ret

00081228 <__sprint_r>:
   81228:	30800217 	ldw	r2,8(r6)
   8122c:	defffe04 	addi	sp,sp,-8
   81230:	dc000015 	stw	r16,0(sp)
   81234:	dfc00115 	stw	ra,4(sp)
   81238:	3021883a 	mov	r16,r6
   8123c:	0007883a 	mov	r3,zero
   81240:	1000061e 	bne	r2,zero,8125c <__sprint_r+0x34>
   81244:	1805883a 	mov	r2,r3
   81248:	30000115 	stw	zero,4(r6)
   8124c:	dfc00117 	ldw	ra,4(sp)
   81250:	dc000017 	ldw	r16,0(sp)
   81254:	dec00204 	addi	sp,sp,8
   81258:	f800283a 	ret
   8125c:	00853880 	call	85388 <__sfvwrite_r>
   81260:	1007883a 	mov	r3,r2
   81264:	1805883a 	mov	r2,r3
   81268:	80000115 	stw	zero,4(r16)
   8126c:	80000215 	stw	zero,8(r16)
   81270:	dfc00117 	ldw	ra,4(sp)
   81274:	dc000017 	ldw	r16,0(sp)
   81278:	dec00204 	addi	sp,sp,8
   8127c:	f800283a 	ret

00081280 <___vfprintf_internal_r>:
   81280:	defea404 	addi	sp,sp,-1392
   81284:	dd815815 	stw	r22,1376(sp)
   81288:	dc015215 	stw	r16,1352(sp)
   8128c:	d9c15115 	stw	r7,1348(sp)
   81290:	dfc15b15 	stw	ra,1388(sp)
   81294:	df015a15 	stw	fp,1384(sp)
   81298:	ddc15915 	stw	r23,1380(sp)
   8129c:	dd415715 	stw	r21,1372(sp)
   812a0:	dd015615 	stw	r20,1368(sp)
   812a4:	dcc15515 	stw	r19,1364(sp)
   812a8:	dc815415 	stw	r18,1360(sp)
   812ac:	dc415315 	stw	r17,1356(sp)
   812b0:	282d883a 	mov	r22,r5
   812b4:	3021883a 	mov	r16,r6
   812b8:	d9014f15 	stw	r4,1340(sp)
   812bc:	00859ac0 	call	859ac <_localeconv_r>
   812c0:	10800017 	ldw	r2,0(r2)
   812c4:	d9c15117 	ldw	r7,1348(sp)
   812c8:	d8814915 	stw	r2,1316(sp)
   812cc:	d8814f17 	ldw	r2,1340(sp)
   812d0:	10000226 	beq	r2,zero,812dc <___vfprintf_internal_r+0x5c>
   812d4:	10800e17 	ldw	r2,56(r2)
   812d8:	10020d26 	beq	r2,zero,81b10 <___vfprintf_internal_r+0x890>
   812dc:	b080030b 	ldhu	r2,12(r22)
   812e0:	1080020c 	andi	r2,r2,8
   812e4:	10020e26 	beq	r2,zero,81b20 <___vfprintf_internal_r+0x8a0>
   812e8:	b0800417 	ldw	r2,16(r22)
   812ec:	10020c26 	beq	r2,zero,81b20 <___vfprintf_internal_r+0x8a0>
   812f0:	b200030b 	ldhu	r8,12(r22)
   812f4:	00800284 	movi	r2,10
   812f8:	40c0068c 	andi	r3,r8,26
   812fc:	18802f1e 	bne	r3,r2,813bc <___vfprintf_internal_r+0x13c>
   81300:	b080038f 	ldh	r2,14(r22)
   81304:	10002d16 	blt	r2,zero,813bc <___vfprintf_internal_r+0x13c>
   81308:	b240038b 	ldhu	r9,14(r22)
   8130c:	b2800717 	ldw	r10,28(r22)
   81310:	b2c00917 	ldw	r11,36(r22)
   81314:	d9014f17 	ldw	r4,1340(sp)
   81318:	dc402904 	addi	r17,sp,164
   8131c:	d8804004 	addi	r2,sp,256
   81320:	00c10004 	movi	r3,1024
   81324:	423fff4c 	andi	r8,r8,65533
   81328:	800d883a 	mov	r6,r16
   8132c:	880b883a 	mov	r5,r17
   81330:	da002c0d 	sth	r8,176(sp)
   81334:	da402c8d 	sth	r9,178(sp)
   81338:	da803015 	stw	r10,192(sp)
   8133c:	dac03215 	stw	r11,200(sp)
   81340:	d8802d15 	stw	r2,180(sp)
   81344:	d8c02e15 	stw	r3,184(sp)
   81348:	d8802915 	stw	r2,164(sp)
   8134c:	d8c02b15 	stw	r3,172(sp)
   81350:	d8002f15 	stw	zero,188(sp)
   81354:	00812800 	call	81280 <___vfprintf_internal_r>
   81358:	d8814b15 	stw	r2,1324(sp)
   8135c:	10000416 	blt	r2,zero,81370 <___vfprintf_internal_r+0xf0>
   81360:	d9014f17 	ldw	r4,1340(sp)
   81364:	880b883a 	mov	r5,r17
   81368:	0084a580 	call	84a58 <_fflush_r>
   8136c:	1002321e 	bne	r2,zero,81c38 <___vfprintf_internal_r+0x9b8>
   81370:	d8802c0b 	ldhu	r2,176(sp)
   81374:	1080100c 	andi	r2,r2,64
   81378:	10000326 	beq	r2,zero,81388 <___vfprintf_internal_r+0x108>
   8137c:	b080030b 	ldhu	r2,12(r22)
   81380:	10801014 	ori	r2,r2,64
   81384:	b080030d 	sth	r2,12(r22)
   81388:	d8814b17 	ldw	r2,1324(sp)
   8138c:	dfc15b17 	ldw	ra,1388(sp)
   81390:	df015a17 	ldw	fp,1384(sp)
   81394:	ddc15917 	ldw	r23,1380(sp)
   81398:	dd815817 	ldw	r22,1376(sp)
   8139c:	dd415717 	ldw	r21,1372(sp)
   813a0:	dd015617 	ldw	r20,1368(sp)
   813a4:	dcc15517 	ldw	r19,1364(sp)
   813a8:	dc815417 	ldw	r18,1360(sp)
   813ac:	dc415317 	ldw	r17,1356(sp)
   813b0:	dc015217 	ldw	r16,1352(sp)
   813b4:	dec15c04 	addi	sp,sp,1392
   813b8:	f800283a 	ret
   813bc:	0005883a 	mov	r2,zero
   813c0:	0007883a 	mov	r3,zero
   813c4:	dd401904 	addi	r21,sp,100
   813c8:	d8814215 	stw	r2,1288(sp)
   813cc:	802f883a 	mov	r23,r16
   813d0:	d8c14315 	stw	r3,1292(sp)
   813d4:	d8014b15 	stw	zero,1324(sp)
   813d8:	d8014815 	stw	zero,1312(sp)
   813dc:	d8014415 	stw	zero,1296(sp)
   813e0:	d8014715 	stw	zero,1308(sp)
   813e4:	dd400c15 	stw	r21,48(sp)
   813e8:	d8000e15 	stw	zero,56(sp)
   813ec:	d8000d15 	stw	zero,52(sp)
   813f0:	b8800007 	ldb	r2,0(r23)
   813f4:	10001926 	beq	r2,zero,8145c <___vfprintf_internal_r+0x1dc>
   813f8:	00c00944 	movi	r3,37
   813fc:	10c01726 	beq	r2,r3,8145c <___vfprintf_internal_r+0x1dc>
   81400:	b821883a 	mov	r16,r23
   81404:	00000106 	br	8140c <___vfprintf_internal_r+0x18c>
   81408:	10c00326 	beq	r2,r3,81418 <___vfprintf_internal_r+0x198>
   8140c:	84000044 	addi	r16,r16,1
   81410:	80800007 	ldb	r2,0(r16)
   81414:	103ffc1e 	bne	r2,zero,81408 <___vfprintf_internal_r+0x188>
   81418:	85e7c83a 	sub	r19,r16,r23
   8141c:	98000e26 	beq	r19,zero,81458 <___vfprintf_internal_r+0x1d8>
   81420:	dc800e17 	ldw	r18,56(sp)
   81424:	dc400d17 	ldw	r17,52(sp)
   81428:	008001c4 	movi	r2,7
   8142c:	94e5883a 	add	r18,r18,r19
   81430:	8c400044 	addi	r17,r17,1
   81434:	adc00015 	stw	r23,0(r21)
   81438:	dc800e15 	stw	r18,56(sp)
   8143c:	acc00115 	stw	r19,4(r21)
   81440:	dc400d15 	stw	r17,52(sp)
   81444:	14428b16 	blt	r2,r17,81e74 <___vfprintf_internal_r+0xbf4>
   81448:	ad400204 	addi	r21,r21,8
   8144c:	d9014b17 	ldw	r4,1324(sp)
   81450:	24c9883a 	add	r4,r4,r19
   81454:	d9014b15 	stw	r4,1324(sp)
   81458:	802f883a 	mov	r23,r16
   8145c:	b8800007 	ldb	r2,0(r23)
   81460:	10013c26 	beq	r2,zero,81954 <___vfprintf_internal_r+0x6d4>
   81464:	bdc00044 	addi	r23,r23,1
   81468:	d8000405 	stb	zero,16(sp)
   8146c:	b8c00007 	ldb	r3,0(r23)
   81470:	04ffffc4 	movi	r19,-1
   81474:	d8014c15 	stw	zero,1328(sp)
   81478:	d8014a15 	stw	zero,1320(sp)
   8147c:	d8c14d15 	stw	r3,1332(sp)
   81480:	bdc00044 	addi	r23,r23,1
   81484:	d9414d17 	ldw	r5,1332(sp)
   81488:	00801604 	movi	r2,88
   8148c:	28fff804 	addi	r3,r5,-32
   81490:	10c06036 	bltu	r2,r3,81614 <___vfprintf_internal_r+0x394>
   81494:	18c5883a 	add	r2,r3,r3
   81498:	1085883a 	add	r2,r2,r2
   8149c:	00c00234 	movhi	r3,8
   814a0:	18c52c04 	addi	r3,r3,5296
   814a4:	10c5883a 	add	r2,r2,r3
   814a8:	11000017 	ldw	r4,0(r2)
   814ac:	2000683a 	jmp	r4
   814b0:	00082424 	muli	zero,zero,8336
   814b4:	00081614 	movui	zero,8280
   814b8:	00081614 	movui	zero,8280
   814bc:	00082410 	cmplti	zero,zero,8336
   814c0:	00081614 	movui	zero,8280
   814c4:	00081614 	movui	zero,8280
   814c8:	00081614 	movui	zero,8280
   814cc:	00081614 	movui	zero,8280
   814d0:	00081614 	movui	zero,8280
   814d4:	00081614 	movui	zero,8280
   814d8:	000821f0 	cmpltui	zero,zero,8327
   814dc:	00082400 	call	8240 <__alt_mem_sram_0-0x77dc0>
   814e0:	00081614 	movui	zero,8280
   814e4:	00082208 	cmpgei	zero,zero,8328
   814e8:	0008249c 	xori	zero,zero,8338
   814ec:	00081614 	movui	zero,8280
   814f0:	00082488 	cmpgei	zero,zero,8338
   814f4:	00082450 	cmplti	zero,zero,8337
   814f8:	00082450 	cmplti	zero,zero,8337
   814fc:	00082450 	cmplti	zero,zero,8337
   81500:	00082450 	cmplti	zero,zero,8337
   81504:	00082450 	cmplti	zero,zero,8337
   81508:	00082450 	cmplti	zero,zero,8337
   8150c:	00082450 	cmplti	zero,zero,8337
   81510:	00082450 	cmplti	zero,zero,8337
   81514:	00082450 	cmplti	zero,zero,8337
   81518:	00081614 	movui	zero,8280
   8151c:	00081614 	movui	zero,8280
   81520:	00081614 	movui	zero,8280
   81524:	00081614 	movui	zero,8280
   81528:	00081614 	movui	zero,8280
   8152c:	00081614 	movui	zero,8280
   81530:	00081614 	movui	zero,8280
   81534:	00081614 	movui	zero,8280
   81538:	00081614 	movui	zero,8280
   8153c:	00081614 	movui	zero,8280
   81540:	00081c6c 	andhi	zero,zero,8305
   81544:	000822d8 	cmpnei	zero,zero,8331
   81548:	00081614 	movui	zero,8280
   8154c:	000822d8 	cmpnei	zero,zero,8331
   81550:	00081614 	movui	zero,8280
   81554:	00081614 	movui	zero,8280
   81558:	00081614 	movui	zero,8280
   8155c:	00081614 	movui	zero,8280
   81560:	0008243c 	xorhi	zero,zero,8336
   81564:	00081614 	movui	zero,8280
   81568:	00081614 	movui	zero,8280
   8156c:	00081d20 	cmpeqi	zero,zero,8308
   81570:	00081614 	movui	zero,8280
   81574:	00081614 	movui	zero,8280
   81578:	00081614 	movui	zero,8280
   8157c:	00081614 	movui	zero,8280
   81580:	00081614 	movui	zero,8280
   81584:	00081d6c 	andhi	zero,zero,8309
   81588:	00081614 	movui	zero,8280
   8158c:	00081614 	movui	zero,8280
   81590:	0008238c 	andi	zero,zero,8334
   81594:	00081614 	movui	zero,8280
   81598:	00081614 	movui	zero,8280
   8159c:	00081614 	movui	zero,8280
   815a0:	00081614 	movui	zero,8280
   815a4:	00081614 	movui	zero,8280
   815a8:	00081614 	movui	zero,8280
   815ac:	00081614 	movui	zero,8280
   815b0:	00081614 	movui	zero,8280
   815b4:	00081614 	movui	zero,8280
   815b8:	00081614 	movui	zero,8280
   815bc:	00082360 	cmpeqi	zero,zero,8333
   815c0:	00081c78 	rdprs	zero,zero,8305
   815c4:	000822d8 	cmpnei	zero,zero,8331
   815c8:	000822d8 	cmpnei	zero,zero,8331
   815cc:	000822d8 	cmpnei	zero,zero,8331
   815d0:	000822c4 	movi	zero,8331
   815d4:	00081c78 	rdprs	zero,zero,8305
   815d8:	00081614 	movui	zero,8280
   815dc:	00081614 	movui	zero,8280
   815e0:	0008224c 	andi	zero,zero,8329
   815e4:	00081614 	movui	zero,8280
   815e8:	0008221c 	xori	zero,zero,8328
   815ec:	00081d2c 	andhi	zero,zero,8308
   815f0:	0008227c 	xorhi	zero,zero,8329
   815f4:	00082268 	cmpgeui	zero,zero,8329
   815f8:	00081614 	movui	zero,8280
   815fc:	000824f8 	rdprs	zero,zero,8339
   81600:	00081614 	movui	zero,8280
   81604:	00081d78 	rdprs	zero,zero,8309
   81608:	00081614 	movui	zero,8280
   8160c:	00081614 	movui	zero,8280
   81610:	000823f0 	cmpltui	zero,zero,8335
   81614:	d9014d17 	ldw	r4,1332(sp)
   81618:	2000ce26 	beq	r4,zero,81954 <___vfprintf_internal_r+0x6d4>
   8161c:	01400044 	movi	r5,1
   81620:	d9800f04 	addi	r6,sp,60
   81624:	d9c14015 	stw	r7,1280(sp)
   81628:	d9414515 	stw	r5,1300(sp)
   8162c:	d9814115 	stw	r6,1284(sp)
   81630:	280f883a 	mov	r7,r5
   81634:	d9000f05 	stb	r4,60(sp)
   81638:	d8000405 	stb	zero,16(sp)
   8163c:	d8014615 	stw	zero,1304(sp)
   81640:	d8c14c17 	ldw	r3,1328(sp)
   81644:	1880008c 	andi	r2,r3,2
   81648:	1005003a 	cmpeq	r2,r2,zero
   8164c:	d8815015 	stw	r2,1344(sp)
   81650:	1000031e 	bne	r2,zero,81660 <___vfprintf_internal_r+0x3e0>
   81654:	d9014517 	ldw	r4,1300(sp)
   81658:	21000084 	addi	r4,r4,2
   8165c:	d9014515 	stw	r4,1300(sp)
   81660:	d9414c17 	ldw	r5,1328(sp)
   81664:	2940210c 	andi	r5,r5,132
   81668:	d9414e15 	stw	r5,1336(sp)
   8166c:	28002d1e 	bne	r5,zero,81724 <___vfprintf_internal_r+0x4a4>
   81670:	d9814a17 	ldw	r6,1320(sp)
   81674:	d8814517 	ldw	r2,1300(sp)
   81678:	30a1c83a 	sub	r16,r6,r2
   8167c:	0400290e 	bge	zero,r16,81724 <___vfprintf_internal_r+0x4a4>
   81680:	00800404 	movi	r2,16
   81684:	1404580e 	bge	r2,r16,827e8 <___vfprintf_internal_r+0x1568>
   81688:	dc800e17 	ldw	r18,56(sp)
   8168c:	dc400d17 	ldw	r17,52(sp)
   81690:	1027883a 	mov	r19,r2
   81694:	07000274 	movhi	fp,9
   81698:	e7358184 	addi	fp,fp,-10746
   8169c:	050001c4 	movi	r20,7
   816a0:	00000306 	br	816b0 <___vfprintf_internal_r+0x430>
   816a4:	843ffc04 	addi	r16,r16,-16
   816a8:	ad400204 	addi	r21,r21,8
   816ac:	9c00130e 	bge	r19,r16,816fc <___vfprintf_internal_r+0x47c>
   816b0:	94800404 	addi	r18,r18,16
   816b4:	8c400044 	addi	r17,r17,1
   816b8:	af000015 	stw	fp,0(r21)
   816bc:	acc00115 	stw	r19,4(r21)
   816c0:	dc800e15 	stw	r18,56(sp)
   816c4:	dc400d15 	stw	r17,52(sp)
   816c8:	a47ff60e 	bge	r20,r17,816a4 <___vfprintf_internal_r+0x424>
   816cc:	d9014f17 	ldw	r4,1340(sp)
   816d0:	b00b883a 	mov	r5,r22
   816d4:	d9800c04 	addi	r6,sp,48
   816d8:	d9c15115 	stw	r7,1348(sp)
   816dc:	00812280 	call	81228 <__sprint_r>
   816e0:	d9c15117 	ldw	r7,1348(sp)
   816e4:	10009e1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   816e8:	843ffc04 	addi	r16,r16,-16
   816ec:	dc800e17 	ldw	r18,56(sp)
   816f0:	dc400d17 	ldw	r17,52(sp)
   816f4:	dd401904 	addi	r21,sp,100
   816f8:	9c3fed16 	blt	r19,r16,816b0 <___vfprintf_internal_r+0x430>
   816fc:	9425883a 	add	r18,r18,r16
   81700:	8c400044 	addi	r17,r17,1
   81704:	008001c4 	movi	r2,7
   81708:	af000015 	stw	fp,0(r21)
   8170c:	ac000115 	stw	r16,4(r21)
   81710:	dc800e15 	stw	r18,56(sp)
   81714:	dc400d15 	stw	r17,52(sp)
   81718:	1441f516 	blt	r2,r17,81ef0 <___vfprintf_internal_r+0xc70>
   8171c:	ad400204 	addi	r21,r21,8
   81720:	00000206 	br	8172c <___vfprintf_internal_r+0x4ac>
   81724:	dc800e17 	ldw	r18,56(sp)
   81728:	dc400d17 	ldw	r17,52(sp)
   8172c:	d8800407 	ldb	r2,16(sp)
   81730:	10000b26 	beq	r2,zero,81760 <___vfprintf_internal_r+0x4e0>
   81734:	00800044 	movi	r2,1
   81738:	94800044 	addi	r18,r18,1
   8173c:	8c400044 	addi	r17,r17,1
   81740:	a8800115 	stw	r2,4(r21)
   81744:	d8c00404 	addi	r3,sp,16
   81748:	008001c4 	movi	r2,7
   8174c:	a8c00015 	stw	r3,0(r21)
   81750:	dc800e15 	stw	r18,56(sp)
   81754:	dc400d15 	stw	r17,52(sp)
   81758:	1441da16 	blt	r2,r17,81ec4 <___vfprintf_internal_r+0xc44>
   8175c:	ad400204 	addi	r21,r21,8
   81760:	d9015017 	ldw	r4,1344(sp)
   81764:	20000b1e 	bne	r4,zero,81794 <___vfprintf_internal_r+0x514>
   81768:	d8800444 	addi	r2,sp,17
   8176c:	94800084 	addi	r18,r18,2
   81770:	8c400044 	addi	r17,r17,1
   81774:	a8800015 	stw	r2,0(r21)
   81778:	00c00084 	movi	r3,2
   8177c:	008001c4 	movi	r2,7
   81780:	a8c00115 	stw	r3,4(r21)
   81784:	dc800e15 	stw	r18,56(sp)
   81788:	dc400d15 	stw	r17,52(sp)
   8178c:	1441c216 	blt	r2,r17,81e98 <___vfprintf_internal_r+0xc18>
   81790:	ad400204 	addi	r21,r21,8
   81794:	d9414e17 	ldw	r5,1336(sp)
   81798:	00802004 	movi	r2,128
   8179c:	2880b126 	beq	r5,r2,81a64 <___vfprintf_internal_r+0x7e4>
   817a0:	d8c14617 	ldw	r3,1304(sp)
   817a4:	19e1c83a 	sub	r16,r3,r7
   817a8:	0400260e 	bge	zero,r16,81844 <___vfprintf_internal_r+0x5c4>
   817ac:	00800404 	movi	r2,16
   817b0:	1403c90e 	bge	r2,r16,826d8 <___vfprintf_internal_r+0x1458>
   817b4:	1027883a 	mov	r19,r2
   817b8:	07000274 	movhi	fp,9
   817bc:	e7357d84 	addi	fp,fp,-10762
   817c0:	050001c4 	movi	r20,7
   817c4:	00000306 	br	817d4 <___vfprintf_internal_r+0x554>
   817c8:	843ffc04 	addi	r16,r16,-16
   817cc:	ad400204 	addi	r21,r21,8
   817d0:	9c00130e 	bge	r19,r16,81820 <___vfprintf_internal_r+0x5a0>
   817d4:	94800404 	addi	r18,r18,16
   817d8:	8c400044 	addi	r17,r17,1
   817dc:	af000015 	stw	fp,0(r21)
   817e0:	acc00115 	stw	r19,4(r21)
   817e4:	dc800e15 	stw	r18,56(sp)
   817e8:	dc400d15 	stw	r17,52(sp)
   817ec:	a47ff60e 	bge	r20,r17,817c8 <___vfprintf_internal_r+0x548>
   817f0:	d9014f17 	ldw	r4,1340(sp)
   817f4:	b00b883a 	mov	r5,r22
   817f8:	d9800c04 	addi	r6,sp,48
   817fc:	d9c15115 	stw	r7,1348(sp)
   81800:	00812280 	call	81228 <__sprint_r>
   81804:	d9c15117 	ldw	r7,1348(sp)
   81808:	1000551e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   8180c:	843ffc04 	addi	r16,r16,-16
   81810:	dc800e17 	ldw	r18,56(sp)
   81814:	dc400d17 	ldw	r17,52(sp)
   81818:	dd401904 	addi	r21,sp,100
   8181c:	9c3fed16 	blt	r19,r16,817d4 <___vfprintf_internal_r+0x554>
   81820:	9425883a 	add	r18,r18,r16
   81824:	8c400044 	addi	r17,r17,1
   81828:	008001c4 	movi	r2,7
   8182c:	af000015 	stw	fp,0(r21)
   81830:	ac000115 	stw	r16,4(r21)
   81834:	dc800e15 	stw	r18,56(sp)
   81838:	dc400d15 	stw	r17,52(sp)
   8183c:	14418216 	blt	r2,r17,81e48 <___vfprintf_internal_r+0xbc8>
   81840:	ad400204 	addi	r21,r21,8
   81844:	d9014c17 	ldw	r4,1328(sp)
   81848:	2080400c 	andi	r2,r4,256
   8184c:	10004a1e 	bne	r2,zero,81978 <___vfprintf_internal_r+0x6f8>
   81850:	d9414117 	ldw	r5,1284(sp)
   81854:	91e5883a 	add	r18,r18,r7
   81858:	8c400044 	addi	r17,r17,1
   8185c:	008001c4 	movi	r2,7
   81860:	a9400015 	stw	r5,0(r21)
   81864:	a9c00115 	stw	r7,4(r21)
   81868:	dc800e15 	stw	r18,56(sp)
   8186c:	dc400d15 	stw	r17,52(sp)
   81870:	14416716 	blt	r2,r17,81e10 <___vfprintf_internal_r+0xb90>
   81874:	a8c00204 	addi	r3,r21,8
   81878:	d9814c17 	ldw	r6,1328(sp)
   8187c:	3080010c 	andi	r2,r6,4
   81880:	10002826 	beq	r2,zero,81924 <___vfprintf_internal_r+0x6a4>
   81884:	d8814a17 	ldw	r2,1320(sp)
   81888:	d9014517 	ldw	r4,1300(sp)
   8188c:	1121c83a 	sub	r16,r2,r4
   81890:	0400240e 	bge	zero,r16,81924 <___vfprintf_internal_r+0x6a4>
   81894:	00800404 	movi	r2,16
   81898:	14044f0e 	bge	r2,r16,829d8 <___vfprintf_internal_r+0x1758>
   8189c:	dc400d17 	ldw	r17,52(sp)
   818a0:	1027883a 	mov	r19,r2
   818a4:	07000274 	movhi	fp,9
   818a8:	e7358184 	addi	fp,fp,-10746
   818ac:	050001c4 	movi	r20,7
   818b0:	00000306 	br	818c0 <___vfprintf_internal_r+0x640>
   818b4:	843ffc04 	addi	r16,r16,-16
   818b8:	18c00204 	addi	r3,r3,8
   818bc:	9c00110e 	bge	r19,r16,81904 <___vfprintf_internal_r+0x684>
   818c0:	94800404 	addi	r18,r18,16
   818c4:	8c400044 	addi	r17,r17,1
   818c8:	1f000015 	stw	fp,0(r3)
   818cc:	1cc00115 	stw	r19,4(r3)
   818d0:	dc800e15 	stw	r18,56(sp)
   818d4:	dc400d15 	stw	r17,52(sp)
   818d8:	a47ff60e 	bge	r20,r17,818b4 <___vfprintf_internal_r+0x634>
   818dc:	d9014f17 	ldw	r4,1340(sp)
   818e0:	b00b883a 	mov	r5,r22
   818e4:	d9800c04 	addi	r6,sp,48
   818e8:	00812280 	call	81228 <__sprint_r>
   818ec:	10001c1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   818f0:	843ffc04 	addi	r16,r16,-16
   818f4:	dc800e17 	ldw	r18,56(sp)
   818f8:	dc400d17 	ldw	r17,52(sp)
   818fc:	d8c01904 	addi	r3,sp,100
   81900:	9c3fef16 	blt	r19,r16,818c0 <___vfprintf_internal_r+0x640>
   81904:	9425883a 	add	r18,r18,r16
   81908:	8c400044 	addi	r17,r17,1
   8190c:	008001c4 	movi	r2,7
   81910:	1f000015 	stw	fp,0(r3)
   81914:	1c000115 	stw	r16,4(r3)
   81918:	dc800e15 	stw	r18,56(sp)
   8191c:	dc400d15 	stw	r17,52(sp)
   81920:	1440cb16 	blt	r2,r17,81c50 <___vfprintf_internal_r+0x9d0>
   81924:	d8814a17 	ldw	r2,1320(sp)
   81928:	d9414517 	ldw	r5,1300(sp)
   8192c:	1140010e 	bge	r2,r5,81934 <___vfprintf_internal_r+0x6b4>
   81930:	2805883a 	mov	r2,r5
   81934:	d9814b17 	ldw	r6,1324(sp)
   81938:	308d883a 	add	r6,r6,r2
   8193c:	d9814b15 	stw	r6,1324(sp)
   81940:	90013b1e 	bne	r18,zero,81e30 <___vfprintf_internal_r+0xbb0>
   81944:	d9c14017 	ldw	r7,1280(sp)
   81948:	dd401904 	addi	r21,sp,100
   8194c:	d8000d15 	stw	zero,52(sp)
   81950:	003ea706 	br	813f0 <___vfprintf_internal_r+0x170>
   81954:	d8800e17 	ldw	r2,56(sp)
   81958:	10053f1e 	bne	r2,zero,82e58 <___vfprintf_internal_r+0x1bd8>
   8195c:	d8000d15 	stw	zero,52(sp)
   81960:	b080030b 	ldhu	r2,12(r22)
   81964:	1080100c 	andi	r2,r2,64
   81968:	103e8726 	beq	r2,zero,81388 <___vfprintf_internal_r+0x108>
   8196c:	00bfffc4 	movi	r2,-1
   81970:	d8814b15 	stw	r2,1324(sp)
   81974:	003e8406 	br	81388 <___vfprintf_internal_r+0x108>
   81978:	d9814d17 	ldw	r6,1332(sp)
   8197c:	00801944 	movi	r2,101
   81980:	11806e16 	blt	r2,r6,81b3c <___vfprintf_internal_r+0x8bc>
   81984:	d9414717 	ldw	r5,1308(sp)
   81988:	00c00044 	movi	r3,1
   8198c:	1943430e 	bge	r3,r5,8269c <___vfprintf_internal_r+0x141c>
   81990:	d8814117 	ldw	r2,1284(sp)
   81994:	94800044 	addi	r18,r18,1
   81998:	8c400044 	addi	r17,r17,1
   8199c:	a8800015 	stw	r2,0(r21)
   819a0:	008001c4 	movi	r2,7
   819a4:	a8c00115 	stw	r3,4(r21)
   819a8:	dc800e15 	stw	r18,56(sp)
   819ac:	dc400d15 	stw	r17,52(sp)
   819b0:	1441ca16 	blt	r2,r17,820dc <___vfprintf_internal_r+0xe5c>
   819b4:	a8c00204 	addi	r3,r21,8
   819b8:	d9014917 	ldw	r4,1316(sp)
   819bc:	00800044 	movi	r2,1
   819c0:	94800044 	addi	r18,r18,1
   819c4:	8c400044 	addi	r17,r17,1
   819c8:	18800115 	stw	r2,4(r3)
   819cc:	008001c4 	movi	r2,7
   819d0:	19000015 	stw	r4,0(r3)
   819d4:	dc800e15 	stw	r18,56(sp)
   819d8:	dc400d15 	stw	r17,52(sp)
   819dc:	1441b616 	blt	r2,r17,820b8 <___vfprintf_internal_r+0xe38>
   819e0:	1cc00204 	addi	r19,r3,8
   819e4:	d9014217 	ldw	r4,1288(sp)
   819e8:	d9414317 	ldw	r5,1292(sp)
   819ec:	000d883a 	mov	r6,zero
   819f0:	000f883a 	mov	r7,zero
   819f4:	0089ad00 	call	89ad0 <__nedf2>
   819f8:	10017426 	beq	r2,zero,81fcc <___vfprintf_internal_r+0xd4c>
   819fc:	d9414717 	ldw	r5,1308(sp)
   81a00:	d9814117 	ldw	r6,1284(sp)
   81a04:	8c400044 	addi	r17,r17,1
   81a08:	2c85883a 	add	r2,r5,r18
   81a0c:	14bfffc4 	addi	r18,r2,-1
   81a10:	28bfffc4 	addi	r2,r5,-1
   81a14:	30c00044 	addi	r3,r6,1
   81a18:	98800115 	stw	r2,4(r19)
   81a1c:	008001c4 	movi	r2,7
   81a20:	98c00015 	stw	r3,0(r19)
   81a24:	dc800e15 	stw	r18,56(sp)
   81a28:	dc400d15 	stw	r17,52(sp)
   81a2c:	14418e16 	blt	r2,r17,82068 <___vfprintf_internal_r+0xde8>
   81a30:	9cc00204 	addi	r19,r19,8
   81a34:	d9414817 	ldw	r5,1312(sp)
   81a38:	d8800804 	addi	r2,sp,32
   81a3c:	8c400044 	addi	r17,r17,1
   81a40:	9165883a 	add	r18,r18,r5
   81a44:	98800015 	stw	r2,0(r19)
   81a48:	008001c4 	movi	r2,7
   81a4c:	99400115 	stw	r5,4(r19)
   81a50:	dc800e15 	stw	r18,56(sp)
   81a54:	dc400d15 	stw	r17,52(sp)
   81a58:	1440ed16 	blt	r2,r17,81e10 <___vfprintf_internal_r+0xb90>
   81a5c:	98c00204 	addi	r3,r19,8
   81a60:	003f8506 	br	81878 <___vfprintf_internal_r+0x5f8>
   81a64:	d9814a17 	ldw	r6,1320(sp)
   81a68:	d8814517 	ldw	r2,1300(sp)
   81a6c:	30a1c83a 	sub	r16,r6,r2
   81a70:	043f4b0e 	bge	zero,r16,817a0 <___vfprintf_internal_r+0x520>
   81a74:	00800404 	movi	r2,16
   81a78:	1404340e 	bge	r2,r16,82b4c <___vfprintf_internal_r+0x18cc>
   81a7c:	1027883a 	mov	r19,r2
   81a80:	07000274 	movhi	fp,9
   81a84:	e7357d84 	addi	fp,fp,-10762
   81a88:	050001c4 	movi	r20,7
   81a8c:	00000306 	br	81a9c <___vfprintf_internal_r+0x81c>
   81a90:	843ffc04 	addi	r16,r16,-16
   81a94:	ad400204 	addi	r21,r21,8
   81a98:	9c00130e 	bge	r19,r16,81ae8 <___vfprintf_internal_r+0x868>
   81a9c:	94800404 	addi	r18,r18,16
   81aa0:	8c400044 	addi	r17,r17,1
   81aa4:	af000015 	stw	fp,0(r21)
   81aa8:	acc00115 	stw	r19,4(r21)
   81aac:	dc800e15 	stw	r18,56(sp)
   81ab0:	dc400d15 	stw	r17,52(sp)
   81ab4:	a47ff60e 	bge	r20,r17,81a90 <___vfprintf_internal_r+0x810>
   81ab8:	d9014f17 	ldw	r4,1340(sp)
   81abc:	b00b883a 	mov	r5,r22
   81ac0:	d9800c04 	addi	r6,sp,48
   81ac4:	d9c15115 	stw	r7,1348(sp)
   81ac8:	00812280 	call	81228 <__sprint_r>
   81acc:	d9c15117 	ldw	r7,1348(sp)
   81ad0:	103fa31e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81ad4:	843ffc04 	addi	r16,r16,-16
   81ad8:	dc800e17 	ldw	r18,56(sp)
   81adc:	dc400d17 	ldw	r17,52(sp)
   81ae0:	dd401904 	addi	r21,sp,100
   81ae4:	9c3fed16 	blt	r19,r16,81a9c <___vfprintf_internal_r+0x81c>
   81ae8:	9425883a 	add	r18,r18,r16
   81aec:	8c400044 	addi	r17,r17,1
   81af0:	008001c4 	movi	r2,7
   81af4:	af000015 	stw	fp,0(r21)
   81af8:	ac000115 	stw	r16,4(r21)
   81afc:	dc800e15 	stw	r18,56(sp)
   81b00:	dc400d15 	stw	r17,52(sp)
   81b04:	14416116 	blt	r2,r17,8208c <___vfprintf_internal_r+0xe0c>
   81b08:	ad400204 	addi	r21,r21,8
   81b0c:	003f2406 	br	817a0 <___vfprintf_internal_r+0x520>
   81b10:	d9014f17 	ldw	r4,1340(sp)
   81b14:	0084cf00 	call	84cf0 <__sinit>
   81b18:	d9c15117 	ldw	r7,1348(sp)
   81b1c:	003def06 	br	812dc <___vfprintf_internal_r+0x5c>
   81b20:	d9014f17 	ldw	r4,1340(sp)
   81b24:	b00b883a 	mov	r5,r22
   81b28:	d9c15115 	stw	r7,1348(sp)
   81b2c:	00831500 	call	83150 <__swsetup_r>
   81b30:	d9c15117 	ldw	r7,1348(sp)
   81b34:	103dee26 	beq	r2,zero,812f0 <___vfprintf_internal_r+0x70>
   81b38:	003f8c06 	br	8196c <___vfprintf_internal_r+0x6ec>
   81b3c:	d9014217 	ldw	r4,1288(sp)
   81b40:	d9414317 	ldw	r5,1292(sp)
   81b44:	000d883a 	mov	r6,zero
   81b48:	000f883a 	mov	r7,zero
   81b4c:	0089a480 	call	89a48 <__eqdf2>
   81b50:	1000f21e 	bne	r2,zero,81f1c <___vfprintf_internal_r+0xc9c>
   81b54:	00800274 	movhi	r2,9
   81b58:	10b57d04 	addi	r2,r2,-10764
   81b5c:	94800044 	addi	r18,r18,1
   81b60:	8c400044 	addi	r17,r17,1
   81b64:	a8800015 	stw	r2,0(r21)
   81b68:	00c00044 	movi	r3,1
   81b6c:	008001c4 	movi	r2,7
   81b70:	a8c00115 	stw	r3,4(r21)
   81b74:	dc800e15 	stw	r18,56(sp)
   81b78:	dc400d15 	stw	r17,52(sp)
   81b7c:	1442fa16 	blt	r2,r17,82768 <___vfprintf_internal_r+0x14e8>
   81b80:	a8c00204 	addi	r3,r21,8
   81b84:	d8800517 	ldw	r2,20(sp)
   81b88:	d9014717 	ldw	r4,1308(sp)
   81b8c:	11015c0e 	bge	r2,r4,82100 <___vfprintf_internal_r+0xe80>
   81b90:	dc400d17 	ldw	r17,52(sp)
   81b94:	d9814917 	ldw	r6,1316(sp)
   81b98:	00800044 	movi	r2,1
   81b9c:	94800044 	addi	r18,r18,1
   81ba0:	8c400044 	addi	r17,r17,1
   81ba4:	18800115 	stw	r2,4(r3)
   81ba8:	008001c4 	movi	r2,7
   81bac:	19800015 	stw	r6,0(r3)
   81bb0:	dc800e15 	stw	r18,56(sp)
   81bb4:	dc400d15 	stw	r17,52(sp)
   81bb8:	14431016 	blt	r2,r17,827fc <___vfprintf_internal_r+0x157c>
   81bbc:	18c00204 	addi	r3,r3,8
   81bc0:	d8814717 	ldw	r2,1308(sp)
   81bc4:	143fffc4 	addi	r16,r2,-1
   81bc8:	043f2b0e 	bge	zero,r16,81878 <___vfprintf_internal_r+0x5f8>
   81bcc:	00800404 	movi	r2,16
   81bd0:	1402a20e 	bge	r2,r16,8265c <___vfprintf_internal_r+0x13dc>
   81bd4:	dc400d17 	ldw	r17,52(sp)
   81bd8:	1027883a 	mov	r19,r2
   81bdc:	07000274 	movhi	fp,9
   81be0:	e7357d84 	addi	fp,fp,-10762
   81be4:	050001c4 	movi	r20,7
   81be8:	00000306 	br	81bf8 <___vfprintf_internal_r+0x978>
   81bec:	18c00204 	addi	r3,r3,8
   81bf0:	843ffc04 	addi	r16,r16,-16
   81bf4:	9c029c0e 	bge	r19,r16,82668 <___vfprintf_internal_r+0x13e8>
   81bf8:	94800404 	addi	r18,r18,16
   81bfc:	8c400044 	addi	r17,r17,1
   81c00:	1f000015 	stw	fp,0(r3)
   81c04:	1cc00115 	stw	r19,4(r3)
   81c08:	dc800e15 	stw	r18,56(sp)
   81c0c:	dc400d15 	stw	r17,52(sp)
   81c10:	a47ff60e 	bge	r20,r17,81bec <___vfprintf_internal_r+0x96c>
   81c14:	d9014f17 	ldw	r4,1340(sp)
   81c18:	b00b883a 	mov	r5,r22
   81c1c:	d9800c04 	addi	r6,sp,48
   81c20:	00812280 	call	81228 <__sprint_r>
   81c24:	103f4e1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81c28:	dc800e17 	ldw	r18,56(sp)
   81c2c:	dc400d17 	ldw	r17,52(sp)
   81c30:	d8c01904 	addi	r3,sp,100
   81c34:	003fee06 	br	81bf0 <___vfprintf_internal_r+0x970>
   81c38:	d8802c0b 	ldhu	r2,176(sp)
   81c3c:	00ffffc4 	movi	r3,-1
   81c40:	d8c14b15 	stw	r3,1324(sp)
   81c44:	1080100c 	andi	r2,r2,64
   81c48:	103dcc1e 	bne	r2,zero,8137c <___vfprintf_internal_r+0xfc>
   81c4c:	003dce06 	br	81388 <___vfprintf_internal_r+0x108>
   81c50:	d9014f17 	ldw	r4,1340(sp)
   81c54:	b00b883a 	mov	r5,r22
   81c58:	d9800c04 	addi	r6,sp,48
   81c5c:	00812280 	call	81228 <__sprint_r>
   81c60:	103f3f1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81c64:	dc800e17 	ldw	r18,56(sp)
   81c68:	003f2e06 	br	81924 <___vfprintf_internal_r+0x6a4>
   81c6c:	d9414c17 	ldw	r5,1328(sp)
   81c70:	29400414 	ori	r5,r5,16
   81c74:	d9414c15 	stw	r5,1328(sp)
   81c78:	d9814c17 	ldw	r6,1328(sp)
   81c7c:	3080080c 	andi	r2,r6,32
   81c80:	10014f1e 	bne	r2,zero,821c0 <___vfprintf_internal_r+0xf40>
   81c84:	d8c14c17 	ldw	r3,1328(sp)
   81c88:	1880040c 	andi	r2,r3,16
   81c8c:	1002ea1e 	bne	r2,zero,82838 <___vfprintf_internal_r+0x15b8>
   81c90:	d9014c17 	ldw	r4,1328(sp)
   81c94:	2080100c 	andi	r2,r4,64
   81c98:	1002e726 	beq	r2,zero,82838 <___vfprintf_internal_r+0x15b8>
   81c9c:	3880000f 	ldh	r2,0(r7)
   81ca0:	39c00104 	addi	r7,r7,4
   81ca4:	d9c14015 	stw	r7,1280(sp)
   81ca8:	1023d7fa 	srai	r17,r2,31
   81cac:	1021883a 	mov	r16,r2
   81cb0:	88037216 	blt	r17,zero,82a7c <___vfprintf_internal_r+0x17fc>
   81cb4:	01000044 	movi	r4,1
   81cb8:	98000416 	blt	r19,zero,81ccc <___vfprintf_internal_r+0xa4c>
   81cbc:	d8c14c17 	ldw	r3,1328(sp)
   81cc0:	00bfdfc4 	movi	r2,-129
   81cc4:	1886703a 	and	r3,r3,r2
   81cc8:	d8c14c15 	stw	r3,1328(sp)
   81ccc:	8444b03a 	or	r2,r16,r17
   81cd0:	1002261e 	bne	r2,zero,8256c <___vfprintf_internal_r+0x12ec>
   81cd4:	9802251e 	bne	r19,zero,8256c <___vfprintf_internal_r+0x12ec>
   81cd8:	20803fcc 	andi	r2,r4,255
   81cdc:	10029b26 	beq	r2,zero,8274c <___vfprintf_internal_r+0x14cc>
   81ce0:	d8c01904 	addi	r3,sp,100
   81ce4:	dd000f04 	addi	r20,sp,60
   81ce8:	d8c14115 	stw	r3,1284(sp)
   81cec:	d8c14117 	ldw	r3,1284(sp)
   81cf0:	dcc14515 	stw	r19,1300(sp)
   81cf4:	a0c5c83a 	sub	r2,r20,r3
   81cf8:	11c00a04 	addi	r7,r2,40
   81cfc:	99c0010e 	bge	r19,r7,81d04 <___vfprintf_internal_r+0xa84>
   81d00:	d9c14515 	stw	r7,1300(sp)
   81d04:	dcc14615 	stw	r19,1304(sp)
   81d08:	d8800407 	ldb	r2,16(sp)
   81d0c:	103e4c26 	beq	r2,zero,81640 <___vfprintf_internal_r+0x3c0>
   81d10:	d8814517 	ldw	r2,1300(sp)
   81d14:	10800044 	addi	r2,r2,1
   81d18:	d8814515 	stw	r2,1300(sp)
   81d1c:	003e4806 	br	81640 <___vfprintf_internal_r+0x3c0>
   81d20:	d9814c17 	ldw	r6,1328(sp)
   81d24:	31800414 	ori	r6,r6,16
   81d28:	d9814c15 	stw	r6,1328(sp)
   81d2c:	d8c14c17 	ldw	r3,1328(sp)
   81d30:	1880080c 	andi	r2,r3,32
   81d34:	1001271e 	bne	r2,zero,821d4 <___vfprintf_internal_r+0xf54>
   81d38:	d9414c17 	ldw	r5,1328(sp)
   81d3c:	2880040c 	andi	r2,r5,16
   81d40:	1002b61e 	bne	r2,zero,8281c <___vfprintf_internal_r+0x159c>
   81d44:	d9814c17 	ldw	r6,1328(sp)
   81d48:	3080100c 	andi	r2,r6,64
   81d4c:	1002b326 	beq	r2,zero,8281c <___vfprintf_internal_r+0x159c>
   81d50:	3c00000b 	ldhu	r16,0(r7)
   81d54:	0009883a 	mov	r4,zero
   81d58:	39c00104 	addi	r7,r7,4
   81d5c:	0023883a 	mov	r17,zero
   81d60:	d9c14015 	stw	r7,1280(sp)
   81d64:	d8000405 	stb	zero,16(sp)
   81d68:	003fd306 	br	81cb8 <___vfprintf_internal_r+0xa38>
   81d6c:	d9014c17 	ldw	r4,1328(sp)
   81d70:	21000414 	ori	r4,r4,16
   81d74:	d9014c15 	stw	r4,1328(sp)
   81d78:	d9414c17 	ldw	r5,1328(sp)
   81d7c:	2880080c 	andi	r2,r5,32
   81d80:	1001081e 	bne	r2,zero,821a4 <___vfprintf_internal_r+0xf24>
   81d84:	d8c14c17 	ldw	r3,1328(sp)
   81d88:	1880040c 	andi	r2,r3,16
   81d8c:	1002b01e 	bne	r2,zero,82850 <___vfprintf_internal_r+0x15d0>
   81d90:	d9014c17 	ldw	r4,1328(sp)
   81d94:	2080100c 	andi	r2,r4,64
   81d98:	1002ad26 	beq	r2,zero,82850 <___vfprintf_internal_r+0x15d0>
   81d9c:	3c00000b 	ldhu	r16,0(r7)
   81da0:	01000044 	movi	r4,1
   81da4:	39c00104 	addi	r7,r7,4
   81da8:	0023883a 	mov	r17,zero
   81dac:	d9c14015 	stw	r7,1280(sp)
   81db0:	d8000405 	stb	zero,16(sp)
   81db4:	003fc006 	br	81cb8 <___vfprintf_internal_r+0xa38>
   81db8:	d9014f17 	ldw	r4,1340(sp)
   81dbc:	b00b883a 	mov	r5,r22
   81dc0:	d9800c04 	addi	r6,sp,48
   81dc4:	00812280 	call	81228 <__sprint_r>
   81dc8:	103ee51e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81dcc:	dc800e17 	ldw	r18,56(sp)
   81dd0:	d8c01904 	addi	r3,sp,100
   81dd4:	d9814c17 	ldw	r6,1328(sp)
   81dd8:	3080004c 	andi	r2,r6,1
   81ddc:	1005003a 	cmpeq	r2,r2,zero
   81de0:	103ea51e 	bne	r2,zero,81878 <___vfprintf_internal_r+0x5f8>
   81de4:	00800044 	movi	r2,1
   81de8:	dc400d17 	ldw	r17,52(sp)
   81dec:	18800115 	stw	r2,4(r3)
   81df0:	d8814917 	ldw	r2,1316(sp)
   81df4:	94800044 	addi	r18,r18,1
   81df8:	8c400044 	addi	r17,r17,1
   81dfc:	18800015 	stw	r2,0(r3)
   81e00:	008001c4 	movi	r2,7
   81e04:	dc800e15 	stw	r18,56(sp)
   81e08:	dc400d15 	stw	r17,52(sp)
   81e0c:	14421e0e 	bge	r2,r17,82688 <___vfprintf_internal_r+0x1408>
   81e10:	d9014f17 	ldw	r4,1340(sp)
   81e14:	b00b883a 	mov	r5,r22
   81e18:	d9800c04 	addi	r6,sp,48
   81e1c:	00812280 	call	81228 <__sprint_r>
   81e20:	103ecf1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81e24:	dc800e17 	ldw	r18,56(sp)
   81e28:	d8c01904 	addi	r3,sp,100
   81e2c:	003e9206 	br	81878 <___vfprintf_internal_r+0x5f8>
   81e30:	d9014f17 	ldw	r4,1340(sp)
   81e34:	b00b883a 	mov	r5,r22
   81e38:	d9800c04 	addi	r6,sp,48
   81e3c:	00812280 	call	81228 <__sprint_r>
   81e40:	103ec026 	beq	r2,zero,81944 <___vfprintf_internal_r+0x6c4>
   81e44:	003ec606 	br	81960 <___vfprintf_internal_r+0x6e0>
   81e48:	d9014f17 	ldw	r4,1340(sp)
   81e4c:	b00b883a 	mov	r5,r22
   81e50:	d9800c04 	addi	r6,sp,48
   81e54:	d9c15115 	stw	r7,1348(sp)
   81e58:	00812280 	call	81228 <__sprint_r>
   81e5c:	d9c15117 	ldw	r7,1348(sp)
   81e60:	103ebf1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81e64:	dc800e17 	ldw	r18,56(sp)
   81e68:	dc400d17 	ldw	r17,52(sp)
   81e6c:	dd401904 	addi	r21,sp,100
   81e70:	003e7406 	br	81844 <___vfprintf_internal_r+0x5c4>
   81e74:	d9014f17 	ldw	r4,1340(sp)
   81e78:	b00b883a 	mov	r5,r22
   81e7c:	d9800c04 	addi	r6,sp,48
   81e80:	d9c15115 	stw	r7,1348(sp)
   81e84:	00812280 	call	81228 <__sprint_r>
   81e88:	d9c15117 	ldw	r7,1348(sp)
   81e8c:	103eb41e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81e90:	dd401904 	addi	r21,sp,100
   81e94:	003d6d06 	br	8144c <___vfprintf_internal_r+0x1cc>
   81e98:	d9014f17 	ldw	r4,1340(sp)
   81e9c:	b00b883a 	mov	r5,r22
   81ea0:	d9800c04 	addi	r6,sp,48
   81ea4:	d9c15115 	stw	r7,1348(sp)
   81ea8:	00812280 	call	81228 <__sprint_r>
   81eac:	d9c15117 	ldw	r7,1348(sp)
   81eb0:	103eab1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81eb4:	dc800e17 	ldw	r18,56(sp)
   81eb8:	dc400d17 	ldw	r17,52(sp)
   81ebc:	dd401904 	addi	r21,sp,100
   81ec0:	003e3406 	br	81794 <___vfprintf_internal_r+0x514>
   81ec4:	d9014f17 	ldw	r4,1340(sp)
   81ec8:	b00b883a 	mov	r5,r22
   81ecc:	d9800c04 	addi	r6,sp,48
   81ed0:	d9c15115 	stw	r7,1348(sp)
   81ed4:	00812280 	call	81228 <__sprint_r>
   81ed8:	d9c15117 	ldw	r7,1348(sp)
   81edc:	103ea01e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81ee0:	dc800e17 	ldw	r18,56(sp)
   81ee4:	dc400d17 	ldw	r17,52(sp)
   81ee8:	dd401904 	addi	r21,sp,100
   81eec:	003e1c06 	br	81760 <___vfprintf_internal_r+0x4e0>
   81ef0:	d9014f17 	ldw	r4,1340(sp)
   81ef4:	b00b883a 	mov	r5,r22
   81ef8:	d9800c04 	addi	r6,sp,48
   81efc:	d9c15115 	stw	r7,1348(sp)
   81f00:	00812280 	call	81228 <__sprint_r>
   81f04:	d9c15117 	ldw	r7,1348(sp)
   81f08:	103e951e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81f0c:	dc800e17 	ldw	r18,56(sp)
   81f10:	dc400d17 	ldw	r17,52(sp)
   81f14:	dd401904 	addi	r21,sp,100
   81f18:	003e0406 	br	8172c <___vfprintf_internal_r+0x4ac>
   81f1c:	d9000517 	ldw	r4,20(sp)
   81f20:	0102520e 	bge	zero,r4,8286c <___vfprintf_internal_r+0x15ec>
   81f24:	d9814717 	ldw	r6,1308(sp)
   81f28:	21807a16 	blt	r4,r6,82114 <___vfprintf_internal_r+0xe94>
   81f2c:	d8814117 	ldw	r2,1284(sp)
   81f30:	91a5883a 	add	r18,r18,r6
   81f34:	8c400044 	addi	r17,r17,1
   81f38:	a8800015 	stw	r2,0(r21)
   81f3c:	008001c4 	movi	r2,7
   81f40:	a9800115 	stw	r6,4(r21)
   81f44:	dc800e15 	stw	r18,56(sp)
   81f48:	dc400d15 	stw	r17,52(sp)
   81f4c:	1442f616 	blt	r2,r17,82b28 <___vfprintf_internal_r+0x18a8>
   81f50:	a8c00204 	addi	r3,r21,8
   81f54:	d9414717 	ldw	r5,1308(sp)
   81f58:	2161c83a 	sub	r16,r4,r5
   81f5c:	043f9d0e 	bge	zero,r16,81dd4 <___vfprintf_internal_r+0xb54>
   81f60:	00800404 	movi	r2,16
   81f64:	1402130e 	bge	r2,r16,827b4 <___vfprintf_internal_r+0x1534>
   81f68:	dc400d17 	ldw	r17,52(sp)
   81f6c:	1027883a 	mov	r19,r2
   81f70:	07000274 	movhi	fp,9
   81f74:	e7357d84 	addi	fp,fp,-10762
   81f78:	050001c4 	movi	r20,7
   81f7c:	00000306 	br	81f8c <___vfprintf_internal_r+0xd0c>
   81f80:	18c00204 	addi	r3,r3,8
   81f84:	843ffc04 	addi	r16,r16,-16
   81f88:	9c020d0e 	bge	r19,r16,827c0 <___vfprintf_internal_r+0x1540>
   81f8c:	94800404 	addi	r18,r18,16
   81f90:	8c400044 	addi	r17,r17,1
   81f94:	1f000015 	stw	fp,0(r3)
   81f98:	1cc00115 	stw	r19,4(r3)
   81f9c:	dc800e15 	stw	r18,56(sp)
   81fa0:	dc400d15 	stw	r17,52(sp)
   81fa4:	a47ff60e 	bge	r20,r17,81f80 <___vfprintf_internal_r+0xd00>
   81fa8:	d9014f17 	ldw	r4,1340(sp)
   81fac:	b00b883a 	mov	r5,r22
   81fb0:	d9800c04 	addi	r6,sp,48
   81fb4:	00812280 	call	81228 <__sprint_r>
   81fb8:	103e691e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   81fbc:	dc800e17 	ldw	r18,56(sp)
   81fc0:	dc400d17 	ldw	r17,52(sp)
   81fc4:	d8c01904 	addi	r3,sp,100
   81fc8:	003fee06 	br	81f84 <___vfprintf_internal_r+0xd04>
   81fcc:	d8814717 	ldw	r2,1308(sp)
   81fd0:	143fffc4 	addi	r16,r2,-1
   81fd4:	043e970e 	bge	zero,r16,81a34 <___vfprintf_internal_r+0x7b4>
   81fd8:	00800404 	movi	r2,16
   81fdc:	1400180e 	bge	r2,r16,82040 <___vfprintf_internal_r+0xdc0>
   81fe0:	1029883a 	mov	r20,r2
   81fe4:	07000274 	movhi	fp,9
   81fe8:	e7357d84 	addi	fp,fp,-10762
   81fec:	054001c4 	movi	r21,7
   81ff0:	00000306 	br	82000 <___vfprintf_internal_r+0xd80>
   81ff4:	9cc00204 	addi	r19,r19,8
   81ff8:	843ffc04 	addi	r16,r16,-16
   81ffc:	a400120e 	bge	r20,r16,82048 <___vfprintf_internal_r+0xdc8>
   82000:	94800404 	addi	r18,r18,16
   82004:	8c400044 	addi	r17,r17,1
   82008:	9f000015 	stw	fp,0(r19)
   8200c:	9d000115 	stw	r20,4(r19)
   82010:	dc800e15 	stw	r18,56(sp)
   82014:	dc400d15 	stw	r17,52(sp)
   82018:	ac7ff60e 	bge	r21,r17,81ff4 <___vfprintf_internal_r+0xd74>
   8201c:	d9014f17 	ldw	r4,1340(sp)
   82020:	b00b883a 	mov	r5,r22
   82024:	d9800c04 	addi	r6,sp,48
   82028:	00812280 	call	81228 <__sprint_r>
   8202c:	103e4c1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82030:	dc800e17 	ldw	r18,56(sp)
   82034:	dc400d17 	ldw	r17,52(sp)
   82038:	dcc01904 	addi	r19,sp,100
   8203c:	003fee06 	br	81ff8 <___vfprintf_internal_r+0xd78>
   82040:	07000274 	movhi	fp,9
   82044:	e7357d84 	addi	fp,fp,-10762
   82048:	9425883a 	add	r18,r18,r16
   8204c:	8c400044 	addi	r17,r17,1
   82050:	008001c4 	movi	r2,7
   82054:	9f000015 	stw	fp,0(r19)
   82058:	9c000115 	stw	r16,4(r19)
   8205c:	dc800e15 	stw	r18,56(sp)
   82060:	dc400d15 	stw	r17,52(sp)
   82064:	147e720e 	bge	r2,r17,81a30 <___vfprintf_internal_r+0x7b0>
   82068:	d9014f17 	ldw	r4,1340(sp)
   8206c:	b00b883a 	mov	r5,r22
   82070:	d9800c04 	addi	r6,sp,48
   82074:	00812280 	call	81228 <__sprint_r>
   82078:	103e391e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   8207c:	dc800e17 	ldw	r18,56(sp)
   82080:	dc400d17 	ldw	r17,52(sp)
   82084:	dcc01904 	addi	r19,sp,100
   82088:	003e6a06 	br	81a34 <___vfprintf_internal_r+0x7b4>
   8208c:	d9014f17 	ldw	r4,1340(sp)
   82090:	b00b883a 	mov	r5,r22
   82094:	d9800c04 	addi	r6,sp,48
   82098:	d9c15115 	stw	r7,1348(sp)
   8209c:	00812280 	call	81228 <__sprint_r>
   820a0:	d9c15117 	ldw	r7,1348(sp)
   820a4:	103e2e1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   820a8:	dc800e17 	ldw	r18,56(sp)
   820ac:	dc400d17 	ldw	r17,52(sp)
   820b0:	dd401904 	addi	r21,sp,100
   820b4:	003dba06 	br	817a0 <___vfprintf_internal_r+0x520>
   820b8:	d9014f17 	ldw	r4,1340(sp)
   820bc:	b00b883a 	mov	r5,r22
   820c0:	d9800c04 	addi	r6,sp,48
   820c4:	00812280 	call	81228 <__sprint_r>
   820c8:	103e251e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   820cc:	dc800e17 	ldw	r18,56(sp)
   820d0:	dc400d17 	ldw	r17,52(sp)
   820d4:	dcc01904 	addi	r19,sp,100
   820d8:	003e4206 	br	819e4 <___vfprintf_internal_r+0x764>
   820dc:	d9014f17 	ldw	r4,1340(sp)
   820e0:	b00b883a 	mov	r5,r22
   820e4:	d9800c04 	addi	r6,sp,48
   820e8:	00812280 	call	81228 <__sprint_r>
   820ec:	103e1c1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   820f0:	dc800e17 	ldw	r18,56(sp)
   820f4:	dc400d17 	ldw	r17,52(sp)
   820f8:	d8c01904 	addi	r3,sp,100
   820fc:	003e2e06 	br	819b8 <___vfprintf_internal_r+0x738>
   82100:	d9414c17 	ldw	r5,1328(sp)
   82104:	2880004c 	andi	r2,r5,1
   82108:	1005003a 	cmpeq	r2,r2,zero
   8210c:	103dda1e 	bne	r2,zero,81878 <___vfprintf_internal_r+0x5f8>
   82110:	003e9f06 	br	81b90 <___vfprintf_internal_r+0x910>
   82114:	d8c14117 	ldw	r3,1284(sp)
   82118:	9125883a 	add	r18,r18,r4
   8211c:	8c400044 	addi	r17,r17,1
   82120:	008001c4 	movi	r2,7
   82124:	a8c00015 	stw	r3,0(r21)
   82128:	a9000115 	stw	r4,4(r21)
   8212c:	dc800e15 	stw	r18,56(sp)
   82130:	dc400d15 	stw	r17,52(sp)
   82134:	14426616 	blt	r2,r17,82ad0 <___vfprintf_internal_r+0x1850>
   82138:	a8c00204 	addi	r3,r21,8
   8213c:	d9414917 	ldw	r5,1316(sp)
   82140:	00800044 	movi	r2,1
   82144:	94800044 	addi	r18,r18,1
   82148:	8c400044 	addi	r17,r17,1
   8214c:	18800115 	stw	r2,4(r3)
   82150:	008001c4 	movi	r2,7
   82154:	19400015 	stw	r5,0(r3)
   82158:	dc800e15 	stw	r18,56(sp)
   8215c:	dc400d15 	stw	r17,52(sp)
   82160:	2021883a 	mov	r16,r4
   82164:	14425016 	blt	r2,r17,82aa8 <___vfprintf_internal_r+0x1828>
   82168:	19400204 	addi	r5,r3,8
   8216c:	d9814717 	ldw	r6,1308(sp)
   82170:	8c400044 	addi	r17,r17,1
   82174:	dc400d15 	stw	r17,52(sp)
   82178:	3107c83a 	sub	r3,r6,r4
   8217c:	d9014117 	ldw	r4,1284(sp)
   82180:	90e5883a 	add	r18,r18,r3
   82184:	28c00115 	stw	r3,4(r5)
   82188:	8105883a 	add	r2,r16,r4
   8218c:	28800015 	stw	r2,0(r5)
   82190:	008001c4 	movi	r2,7
   82194:	dc800e15 	stw	r18,56(sp)
   82198:	147f1d16 	blt	r2,r17,81e10 <___vfprintf_internal_r+0xb90>
   8219c:	28c00204 	addi	r3,r5,8
   821a0:	003db506 	br	81878 <___vfprintf_internal_r+0x5f8>
   821a4:	3c000017 	ldw	r16,0(r7)
   821a8:	3c400117 	ldw	r17,4(r7)
   821ac:	39800204 	addi	r6,r7,8
   821b0:	01000044 	movi	r4,1
   821b4:	d9814015 	stw	r6,1280(sp)
   821b8:	d8000405 	stb	zero,16(sp)
   821bc:	003ebe06 	br	81cb8 <___vfprintf_internal_r+0xa38>
   821c0:	3c000017 	ldw	r16,0(r7)
   821c4:	3c400117 	ldw	r17,4(r7)
   821c8:	38800204 	addi	r2,r7,8
   821cc:	d8814015 	stw	r2,1280(sp)
   821d0:	003eb706 	br	81cb0 <___vfprintf_internal_r+0xa30>
   821d4:	3c000017 	ldw	r16,0(r7)
   821d8:	3c400117 	ldw	r17,4(r7)
   821dc:	39000204 	addi	r4,r7,8
   821e0:	d9014015 	stw	r4,1280(sp)
   821e4:	0009883a 	mov	r4,zero
   821e8:	d8000405 	stb	zero,16(sp)
   821ec:	003eb206 	br	81cb8 <___vfprintf_internal_r+0xa38>
   821f0:	38c00017 	ldw	r3,0(r7)
   821f4:	39c00104 	addi	r7,r7,4
   821f8:	d8c14a15 	stw	r3,1320(sp)
   821fc:	1800d10e 	bge	r3,zero,82544 <___vfprintf_internal_r+0x12c4>
   82200:	00c7c83a 	sub	r3,zero,r3
   82204:	d8c14a15 	stw	r3,1320(sp)
   82208:	d9014c17 	ldw	r4,1328(sp)
   8220c:	b8c00007 	ldb	r3,0(r23)
   82210:	21000114 	ori	r4,r4,4
   82214:	d9014c15 	stw	r4,1328(sp)
   82218:	003c9806 	br	8147c <___vfprintf_internal_r+0x1fc>
   8221c:	d9814c17 	ldw	r6,1328(sp)
   82220:	3080080c 	andi	r2,r6,32
   82224:	1001f026 	beq	r2,zero,829e8 <___vfprintf_internal_r+0x1768>
   82228:	d9014b17 	ldw	r4,1324(sp)
   8222c:	38800017 	ldw	r2,0(r7)
   82230:	39c00104 	addi	r7,r7,4
   82234:	d9c14015 	stw	r7,1280(sp)
   82238:	2007d7fa 	srai	r3,r4,31
   8223c:	d9c14017 	ldw	r7,1280(sp)
   82240:	11000015 	stw	r4,0(r2)
   82244:	10c00115 	stw	r3,4(r2)
   82248:	003c6906 	br	813f0 <___vfprintf_internal_r+0x170>
   8224c:	b8c00007 	ldb	r3,0(r23)
   82250:	00801b04 	movi	r2,108
   82254:	18824f26 	beq	r3,r2,82b94 <___vfprintf_internal_r+0x1914>
   82258:	d9414c17 	ldw	r5,1328(sp)
   8225c:	29400414 	ori	r5,r5,16
   82260:	d9414c15 	stw	r5,1328(sp)
   82264:	003c8506 	br	8147c <___vfprintf_internal_r+0x1fc>
   82268:	d9814c17 	ldw	r6,1328(sp)
   8226c:	b8c00007 	ldb	r3,0(r23)
   82270:	31800814 	ori	r6,r6,32
   82274:	d9814c15 	stw	r6,1328(sp)
   82278:	003c8006 	br	8147c <___vfprintf_internal_r+0x1fc>
   8227c:	d8814c17 	ldw	r2,1328(sp)
   82280:	3c000017 	ldw	r16,0(r7)
   82284:	00c01e04 	movi	r3,120
   82288:	10800094 	ori	r2,r2,2
   8228c:	d8814c15 	stw	r2,1328(sp)
   82290:	39c00104 	addi	r7,r7,4
   82294:	01400274 	movhi	r5,9
   82298:	29756604 	addi	r5,r5,-10856
   8229c:	00800c04 	movi	r2,48
   822a0:	0023883a 	mov	r17,zero
   822a4:	01000084 	movi	r4,2
   822a8:	d9c14015 	stw	r7,1280(sp)
   822ac:	d8c14d15 	stw	r3,1332(sp)
   822b0:	d9414415 	stw	r5,1296(sp)
   822b4:	d8800445 	stb	r2,17(sp)
   822b8:	d8c00485 	stb	r3,18(sp)
   822bc:	d8000405 	stb	zero,16(sp)
   822c0:	003e7d06 	br	81cb8 <___vfprintf_internal_r+0xa38>
   822c4:	d8814c17 	ldw	r2,1328(sp)
   822c8:	b8c00007 	ldb	r3,0(r23)
   822cc:	10801014 	ori	r2,r2,64
   822d0:	d8814c15 	stw	r2,1328(sp)
   822d4:	003c6906 	br	8147c <___vfprintf_internal_r+0x1fc>
   822d8:	d9414c17 	ldw	r5,1328(sp)
   822dc:	2880020c 	andi	r2,r5,8
   822e0:	1001df26 	beq	r2,zero,82a60 <___vfprintf_internal_r+0x17e0>
   822e4:	39800017 	ldw	r6,0(r7)
   822e8:	38800204 	addi	r2,r7,8
   822ec:	d8814015 	stw	r2,1280(sp)
   822f0:	d9814215 	stw	r6,1288(sp)
   822f4:	39c00117 	ldw	r7,4(r7)
   822f8:	d9c14315 	stw	r7,1292(sp)
   822fc:	d9014217 	ldw	r4,1288(sp)
   82300:	d9414317 	ldw	r5,1292(sp)
   82304:	0087c200 	call	87c20 <__isinfd>
   82308:	10021726 	beq	r2,zero,82b68 <___vfprintf_internal_r+0x18e8>
   8230c:	d9014217 	ldw	r4,1288(sp)
   82310:	d9414317 	ldw	r5,1292(sp)
   82314:	000d883a 	mov	r6,zero
   82318:	000f883a 	mov	r7,zero
   8231c:	0089c680 	call	89c68 <__ltdf2>
   82320:	1002ca16 	blt	r2,zero,82e4c <___vfprintf_internal_r+0x1bcc>
   82324:	d9414d17 	ldw	r5,1332(sp)
   82328:	008011c4 	movi	r2,71
   8232c:	11420a16 	blt	r2,r5,82b58 <___vfprintf_internal_r+0x18d8>
   82330:	01800274 	movhi	r6,9
   82334:	31b56b04 	addi	r6,r6,-10836
   82338:	d9814115 	stw	r6,1284(sp)
   8233c:	d9014c17 	ldw	r4,1328(sp)
   82340:	00c000c4 	movi	r3,3
   82344:	00bfdfc4 	movi	r2,-129
   82348:	2088703a 	and	r4,r4,r2
   8234c:	180f883a 	mov	r7,r3
   82350:	d8c14515 	stw	r3,1300(sp)
   82354:	d9014c15 	stw	r4,1328(sp)
   82358:	d8014615 	stw	zero,1304(sp)
   8235c:	003e6a06 	br	81d08 <___vfprintf_internal_r+0xa88>
   82360:	38800017 	ldw	r2,0(r7)
   82364:	00c00044 	movi	r3,1
   82368:	39c00104 	addi	r7,r7,4
   8236c:	d9c14015 	stw	r7,1280(sp)
   82370:	d9000f04 	addi	r4,sp,60
   82374:	180f883a 	mov	r7,r3
   82378:	d8c14515 	stw	r3,1300(sp)
   8237c:	d9014115 	stw	r4,1284(sp)
   82380:	d8800f05 	stb	r2,60(sp)
   82384:	d8000405 	stb	zero,16(sp)
   82388:	003cac06 	br	8163c <___vfprintf_internal_r+0x3bc>
   8238c:	01400274 	movhi	r5,9
   82390:	29757104 	addi	r5,r5,-10812
   82394:	d9414415 	stw	r5,1296(sp)
   82398:	d9814c17 	ldw	r6,1328(sp)
   8239c:	3080080c 	andi	r2,r6,32
   823a0:	1000f926 	beq	r2,zero,82788 <___vfprintf_internal_r+0x1508>
   823a4:	3c000017 	ldw	r16,0(r7)
   823a8:	3c400117 	ldw	r17,4(r7)
   823ac:	38800204 	addi	r2,r7,8
   823b0:	d8814015 	stw	r2,1280(sp)
   823b4:	d9414c17 	ldw	r5,1328(sp)
   823b8:	2880004c 	andi	r2,r5,1
   823bc:	1005003a 	cmpeq	r2,r2,zero
   823c0:	1000b31e 	bne	r2,zero,82690 <___vfprintf_internal_r+0x1410>
   823c4:	8444b03a 	or	r2,r16,r17
   823c8:	1000b126 	beq	r2,zero,82690 <___vfprintf_internal_r+0x1410>
   823cc:	d9814d17 	ldw	r6,1332(sp)
   823d0:	29400094 	ori	r5,r5,2
   823d4:	00800c04 	movi	r2,48
   823d8:	01000084 	movi	r4,2
   823dc:	d9414c15 	stw	r5,1328(sp)
   823e0:	d8800445 	stb	r2,17(sp)
   823e4:	d9800485 	stb	r6,18(sp)
   823e8:	d8000405 	stb	zero,16(sp)
   823ec:	003e3206 	br	81cb8 <___vfprintf_internal_r+0xa38>
   823f0:	01800274 	movhi	r6,9
   823f4:	31b56604 	addi	r6,r6,-10856
   823f8:	d9814415 	stw	r6,1296(sp)
   823fc:	003fe606 	br	82398 <___vfprintf_internal_r+0x1118>
   82400:	00800ac4 	movi	r2,43
   82404:	d8800405 	stb	r2,16(sp)
   82408:	b8c00007 	ldb	r3,0(r23)
   8240c:	003c1b06 	br	8147c <___vfprintf_internal_r+0x1fc>
   82410:	d8814c17 	ldw	r2,1328(sp)
   82414:	b8c00007 	ldb	r3,0(r23)
   82418:	10800054 	ori	r2,r2,1
   8241c:	d8814c15 	stw	r2,1328(sp)
   82420:	003c1606 	br	8147c <___vfprintf_internal_r+0x1fc>
   82424:	d8800407 	ldb	r2,16(sp)
   82428:	1000461e 	bne	r2,zero,82544 <___vfprintf_internal_r+0x12c4>
   8242c:	00800804 	movi	r2,32
   82430:	d8800405 	stb	r2,16(sp)
   82434:	b8c00007 	ldb	r3,0(r23)
   82438:	003c1006 	br	8147c <___vfprintf_internal_r+0x1fc>
   8243c:	d9814c17 	ldw	r6,1328(sp)
   82440:	b8c00007 	ldb	r3,0(r23)
   82444:	31800214 	ori	r6,r6,8
   82448:	d9814c15 	stw	r6,1328(sp)
   8244c:	003c0b06 	br	8147c <___vfprintf_internal_r+0x1fc>
   82450:	0007883a 	mov	r3,zero
   82454:	01000244 	movi	r4,9
   82458:	188002a4 	muli	r2,r3,10
   8245c:	b8c00007 	ldb	r3,0(r23)
   82460:	d9814d17 	ldw	r6,1332(sp)
   82464:	bdc00044 	addi	r23,r23,1
   82468:	d8c14d15 	stw	r3,1332(sp)
   8246c:	d9414d17 	ldw	r5,1332(sp)
   82470:	3085883a 	add	r2,r6,r2
   82474:	10fff404 	addi	r3,r2,-48
   82478:	28bff404 	addi	r2,r5,-48
   8247c:	20bff62e 	bgeu	r4,r2,82458 <___vfprintf_internal_r+0x11d8>
   82480:	d8c14a15 	stw	r3,1320(sp)
   82484:	003bff06 	br	81484 <___vfprintf_internal_r+0x204>
   82488:	d9414c17 	ldw	r5,1328(sp)
   8248c:	b8c00007 	ldb	r3,0(r23)
   82490:	29402014 	ori	r5,r5,128
   82494:	d9414c15 	stw	r5,1328(sp)
   82498:	003bf806 	br	8147c <___vfprintf_internal_r+0x1fc>
   8249c:	b8c00007 	ldb	r3,0(r23)
   824a0:	00800a84 	movi	r2,42
   824a4:	bdc00044 	addi	r23,r23,1
   824a8:	18831526 	beq	r3,r2,83100 <___vfprintf_internal_r+0x1e80>
   824ac:	d8c14d15 	stw	r3,1332(sp)
   824b0:	18bff404 	addi	r2,r3,-48
   824b4:	00c00244 	movi	r3,9
   824b8:	18827836 	bltu	r3,r2,82e9c <___vfprintf_internal_r+0x1c1c>
   824bc:	000d883a 	mov	r6,zero
   824c0:	308002a4 	muli	r2,r6,10
   824c4:	b9800007 	ldb	r6,0(r23)
   824c8:	d9414d17 	ldw	r5,1332(sp)
   824cc:	bdc00044 	addi	r23,r23,1
   824d0:	d9814d15 	stw	r6,1332(sp)
   824d4:	d9014d17 	ldw	r4,1332(sp)
   824d8:	1145883a 	add	r2,r2,r5
   824dc:	11bff404 	addi	r6,r2,-48
   824e0:	20bff404 	addi	r2,r4,-48
   824e4:	18bff62e 	bgeu	r3,r2,824c0 <___vfprintf_internal_r+0x1240>
   824e8:	3027883a 	mov	r19,r6
   824ec:	303be50e 	bge	r6,zero,81484 <___vfprintf_internal_r+0x204>
   824f0:	04ffffc4 	movi	r19,-1
   824f4:	003be306 	br	81484 <___vfprintf_internal_r+0x204>
   824f8:	d8000405 	stb	zero,16(sp)
   824fc:	39800017 	ldw	r6,0(r7)
   82500:	39c00104 	addi	r7,r7,4
   82504:	d9c14015 	stw	r7,1280(sp)
   82508:	d9814115 	stw	r6,1284(sp)
   8250c:	3001c926 	beq	r6,zero,82c34 <___vfprintf_internal_r+0x19b4>
   82510:	98000e16 	blt	r19,zero,8254c <___vfprintf_internal_r+0x12cc>
   82514:	d9014117 	ldw	r4,1284(sp)
   82518:	000b883a 	mov	r5,zero
   8251c:	980d883a 	mov	r6,r19
   82520:	008633c0 	call	8633c <memchr>
   82524:	10025926 	beq	r2,zero,82e8c <___vfprintf_internal_r+0x1c0c>
   82528:	d8c14117 	ldw	r3,1284(sp)
   8252c:	10cfc83a 	sub	r7,r2,r3
   82530:	99c19e16 	blt	r19,r7,82bac <___vfprintf_internal_r+0x192c>
   82534:	d9c14515 	stw	r7,1300(sp)
   82538:	38000916 	blt	r7,zero,82560 <___vfprintf_internal_r+0x12e0>
   8253c:	d8014615 	stw	zero,1304(sp)
   82540:	003df106 	br	81d08 <___vfprintf_internal_r+0xa88>
   82544:	b8c00007 	ldb	r3,0(r23)
   82548:	003bcc06 	br	8147c <___vfprintf_internal_r+0x1fc>
   8254c:	d9014117 	ldw	r4,1284(sp)
   82550:	00811b40 	call	811b4 <strlen>
   82554:	d8814515 	stw	r2,1300(sp)
   82558:	100f883a 	mov	r7,r2
   8255c:	103ff70e 	bge	r2,zero,8253c <___vfprintf_internal_r+0x12bc>
   82560:	d8014515 	stw	zero,1300(sp)
   82564:	d8014615 	stw	zero,1304(sp)
   82568:	003de706 	br	81d08 <___vfprintf_internal_r+0xa88>
   8256c:	20c03fcc 	andi	r3,r4,255
   82570:	00800044 	movi	r2,1
   82574:	18802d26 	beq	r3,r2,8262c <___vfprintf_internal_r+0x13ac>
   82578:	18800e36 	bltu	r3,r2,825b4 <___vfprintf_internal_r+0x1334>
   8257c:	00800084 	movi	r2,2
   82580:	1880fa26 	beq	r3,r2,8296c <___vfprintf_internal_r+0x16ec>
   82584:	01000274 	movhi	r4,9
   82588:	21357604 	addi	r4,r4,-10792
   8258c:	00811b40 	call	811b4 <strlen>
   82590:	100f883a 	mov	r7,r2
   82594:	dcc14515 	stw	r19,1300(sp)
   82598:	9880010e 	bge	r19,r2,825a0 <___vfprintf_internal_r+0x1320>
   8259c:	d8814515 	stw	r2,1300(sp)
   825a0:	00800274 	movhi	r2,9
   825a4:	10b57604 	addi	r2,r2,-10792
   825a8:	dcc14615 	stw	r19,1304(sp)
   825ac:	d8814115 	stw	r2,1284(sp)
   825b0:	003dd506 	br	81d08 <___vfprintf_internal_r+0xa88>
   825b4:	d9401904 	addi	r5,sp,100
   825b8:	dd000f04 	addi	r20,sp,60
   825bc:	d9414115 	stw	r5,1284(sp)
   825c0:	880a977a 	slli	r5,r17,29
   825c4:	d9814117 	ldw	r6,1284(sp)
   825c8:	8004d0fa 	srli	r2,r16,3
   825cc:	8806d0fa 	srli	r3,r17,3
   825d0:	810001cc 	andi	r4,r16,7
   825d4:	2884b03a 	or	r2,r5,r2
   825d8:	31bfffc4 	addi	r6,r6,-1
   825dc:	21000c04 	addi	r4,r4,48
   825e0:	d9814115 	stw	r6,1284(sp)
   825e4:	10cab03a 	or	r5,r2,r3
   825e8:	31000005 	stb	r4,0(r6)
   825ec:	1021883a 	mov	r16,r2
   825f0:	1823883a 	mov	r17,r3
   825f4:	283ff21e 	bne	r5,zero,825c0 <___vfprintf_internal_r+0x1340>
   825f8:	d8c14c17 	ldw	r3,1328(sp)
   825fc:	1880004c 	andi	r2,r3,1
   82600:	1005003a 	cmpeq	r2,r2,zero
   82604:	103db91e 	bne	r2,zero,81cec <___vfprintf_internal_r+0xa6c>
   82608:	20803fcc 	andi	r2,r4,255
   8260c:	1080201c 	xori	r2,r2,128
   82610:	10bfe004 	addi	r2,r2,-128
   82614:	00c00c04 	movi	r3,48
   82618:	10fdb426 	beq	r2,r3,81cec <___vfprintf_internal_r+0xa6c>
   8261c:	31bfffc4 	addi	r6,r6,-1
   82620:	d9814115 	stw	r6,1284(sp)
   82624:	30c00005 	stb	r3,0(r6)
   82628:	003db006 	br	81cec <___vfprintf_internal_r+0xa6c>
   8262c:	88800068 	cmpgeui	r2,r17,1
   82630:	10002c1e 	bne	r2,zero,826e4 <___vfprintf_internal_r+0x1464>
   82634:	8800021e 	bne	r17,zero,82640 <___vfprintf_internal_r+0x13c0>
   82638:	00800244 	movi	r2,9
   8263c:	14002936 	bltu	r2,r16,826e4 <___vfprintf_internal_r+0x1464>
   82640:	d90018c4 	addi	r4,sp,99
   82644:	dd000f04 	addi	r20,sp,60
   82648:	d9014115 	stw	r4,1284(sp)
   8264c:	d9014117 	ldw	r4,1284(sp)
   82650:	80800c04 	addi	r2,r16,48
   82654:	20800005 	stb	r2,0(r4)
   82658:	003da406 	br	81cec <___vfprintf_internal_r+0xa6c>
   8265c:	dc400d17 	ldw	r17,52(sp)
   82660:	07000274 	movhi	fp,9
   82664:	e7357d84 	addi	fp,fp,-10762
   82668:	9425883a 	add	r18,r18,r16
   8266c:	8c400044 	addi	r17,r17,1
   82670:	008001c4 	movi	r2,7
   82674:	1f000015 	stw	fp,0(r3)
   82678:	1c000115 	stw	r16,4(r3)
   8267c:	dc800e15 	stw	r18,56(sp)
   82680:	dc400d15 	stw	r17,52(sp)
   82684:	147de216 	blt	r2,r17,81e10 <___vfprintf_internal_r+0xb90>
   82688:	18c00204 	addi	r3,r3,8
   8268c:	003c7a06 	br	81878 <___vfprintf_internal_r+0x5f8>
   82690:	01000084 	movi	r4,2
   82694:	d8000405 	stb	zero,16(sp)
   82698:	003d8706 	br	81cb8 <___vfprintf_internal_r+0xa38>
   8269c:	d9814c17 	ldw	r6,1328(sp)
   826a0:	30c4703a 	and	r2,r6,r3
   826a4:	1005003a 	cmpeq	r2,r2,zero
   826a8:	103cb926 	beq	r2,zero,81990 <___vfprintf_internal_r+0x710>
   826ac:	d9014117 	ldw	r4,1284(sp)
   826b0:	94800044 	addi	r18,r18,1
   826b4:	8c400044 	addi	r17,r17,1
   826b8:	008001c4 	movi	r2,7
   826bc:	a9000015 	stw	r4,0(r21)
   826c0:	a8c00115 	stw	r3,4(r21)
   826c4:	dc800e15 	stw	r18,56(sp)
   826c8:	dc400d15 	stw	r17,52(sp)
   826cc:	147e6616 	blt	r2,r17,82068 <___vfprintf_internal_r+0xde8>
   826d0:	acc00204 	addi	r19,r21,8
   826d4:	003cd706 	br	81a34 <___vfprintf_internal_r+0x7b4>
   826d8:	07000274 	movhi	fp,9
   826dc:	e7357d84 	addi	fp,fp,-10762
   826e0:	003c4f06 	br	81820 <___vfprintf_internal_r+0x5a0>
   826e4:	dd000f04 	addi	r20,sp,60
   826e8:	dc801904 	addi	r18,sp,100
   826ec:	8009883a 	mov	r4,r16
   826f0:	880b883a 	mov	r5,r17
   826f4:	01800284 	movi	r6,10
   826f8:	000f883a 	mov	r7,zero
   826fc:	00889780 	call	88978 <__umoddi3>
   82700:	12000c04 	addi	r8,r2,48
   82704:	94bfffc4 	addi	r18,r18,-1
   82708:	8009883a 	mov	r4,r16
   8270c:	880b883a 	mov	r5,r17
   82710:	01800284 	movi	r6,10
   82714:	000f883a 	mov	r7,zero
   82718:	92000005 	stb	r8,0(r18)
   8271c:	008839c0 	call	8839c <__udivdi3>
   82720:	1009883a 	mov	r4,r2
   82724:	1021883a 	mov	r16,r2
   82728:	18800068 	cmpgeui	r2,r3,1
   8272c:	1823883a 	mov	r17,r3
   82730:	103fee1e 	bne	r2,zero,826ec <___vfprintf_internal_r+0x146c>
   82734:	1800021e 	bne	r3,zero,82740 <___vfprintf_internal_r+0x14c0>
   82738:	00800244 	movi	r2,9
   8273c:	113feb36 	bltu	r2,r4,826ec <___vfprintf_internal_r+0x146c>
   82740:	94bfffc4 	addi	r18,r18,-1
   82744:	dc814115 	stw	r18,1284(sp)
   82748:	003fc006 	br	8264c <___vfprintf_internal_r+0x13cc>
   8274c:	d9014c17 	ldw	r4,1328(sp)
   82750:	2080004c 	andi	r2,r4,1
   82754:	10009a1e 	bne	r2,zero,829c0 <___vfprintf_internal_r+0x1740>
   82758:	d9401904 	addi	r5,sp,100
   8275c:	dd000f04 	addi	r20,sp,60
   82760:	d9414115 	stw	r5,1284(sp)
   82764:	003d6106 	br	81cec <___vfprintf_internal_r+0xa6c>
   82768:	d9014f17 	ldw	r4,1340(sp)
   8276c:	b00b883a 	mov	r5,r22
   82770:	d9800c04 	addi	r6,sp,48
   82774:	00812280 	call	81228 <__sprint_r>
   82778:	103c791e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   8277c:	dc800e17 	ldw	r18,56(sp)
   82780:	d8c01904 	addi	r3,sp,100
   82784:	003cff06 	br	81b84 <___vfprintf_internal_r+0x904>
   82788:	d8c14c17 	ldw	r3,1328(sp)
   8278c:	1880040c 	andi	r2,r3,16
   82790:	1000711e 	bne	r2,zero,82958 <___vfprintf_internal_r+0x16d8>
   82794:	d9014c17 	ldw	r4,1328(sp)
   82798:	2080100c 	andi	r2,r4,64
   8279c:	10006e26 	beq	r2,zero,82958 <___vfprintf_internal_r+0x16d8>
   827a0:	3c00000b 	ldhu	r16,0(r7)
   827a4:	0023883a 	mov	r17,zero
   827a8:	39c00104 	addi	r7,r7,4
   827ac:	d9c14015 	stw	r7,1280(sp)
   827b0:	003f0006 	br	823b4 <___vfprintf_internal_r+0x1134>
   827b4:	dc400d17 	ldw	r17,52(sp)
   827b8:	07000274 	movhi	fp,9
   827bc:	e7357d84 	addi	fp,fp,-10762
   827c0:	9425883a 	add	r18,r18,r16
   827c4:	8c400044 	addi	r17,r17,1
   827c8:	008001c4 	movi	r2,7
   827cc:	1f000015 	stw	fp,0(r3)
   827d0:	1c000115 	stw	r16,4(r3)
   827d4:	dc800e15 	stw	r18,56(sp)
   827d8:	dc400d15 	stw	r17,52(sp)
   827dc:	147d7616 	blt	r2,r17,81db8 <___vfprintf_internal_r+0xb38>
   827e0:	18c00204 	addi	r3,r3,8
   827e4:	003d7b06 	br	81dd4 <___vfprintf_internal_r+0xb54>
   827e8:	dc800e17 	ldw	r18,56(sp)
   827ec:	dc400d17 	ldw	r17,52(sp)
   827f0:	07000274 	movhi	fp,9
   827f4:	e7358184 	addi	fp,fp,-10746
   827f8:	003bc006 	br	816fc <___vfprintf_internal_r+0x47c>
   827fc:	d9014f17 	ldw	r4,1340(sp)
   82800:	b00b883a 	mov	r5,r22
   82804:	d9800c04 	addi	r6,sp,48
   82808:	00812280 	call	81228 <__sprint_r>
   8280c:	103c541e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82810:	dc800e17 	ldw	r18,56(sp)
   82814:	d8c01904 	addi	r3,sp,100
   82818:	003ce906 	br	81bc0 <___vfprintf_internal_r+0x940>
   8281c:	3c000017 	ldw	r16,0(r7)
   82820:	0009883a 	mov	r4,zero
   82824:	39c00104 	addi	r7,r7,4
   82828:	0023883a 	mov	r17,zero
   8282c:	d9c14015 	stw	r7,1280(sp)
   82830:	d8000405 	stb	zero,16(sp)
   82834:	003d2006 	br	81cb8 <___vfprintf_internal_r+0xa38>
   82838:	38800017 	ldw	r2,0(r7)
   8283c:	39c00104 	addi	r7,r7,4
   82840:	d9c14015 	stw	r7,1280(sp)
   82844:	1023d7fa 	srai	r17,r2,31
   82848:	1021883a 	mov	r16,r2
   8284c:	003d1806 	br	81cb0 <___vfprintf_internal_r+0xa30>
   82850:	3c000017 	ldw	r16,0(r7)
   82854:	01000044 	movi	r4,1
   82858:	39c00104 	addi	r7,r7,4
   8285c:	0023883a 	mov	r17,zero
   82860:	d9c14015 	stw	r7,1280(sp)
   82864:	d8000405 	stb	zero,16(sp)
   82868:	003d1306 	br	81cb8 <___vfprintf_internal_r+0xa38>
   8286c:	00800274 	movhi	r2,9
   82870:	10b57d04 	addi	r2,r2,-10764
   82874:	94800044 	addi	r18,r18,1
   82878:	8c400044 	addi	r17,r17,1
   8287c:	a8800015 	stw	r2,0(r21)
   82880:	00c00044 	movi	r3,1
   82884:	008001c4 	movi	r2,7
   82888:	a8c00115 	stw	r3,4(r21)
   8288c:	dc800e15 	stw	r18,56(sp)
   82890:	dc400d15 	stw	r17,52(sp)
   82894:	1440ca16 	blt	r2,r17,82bc0 <___vfprintf_internal_r+0x1940>
   82898:	a8c00204 	addi	r3,r21,8
   8289c:	2000061e 	bne	r4,zero,828b8 <___vfprintf_internal_r+0x1638>
   828a0:	d9414717 	ldw	r5,1308(sp)
   828a4:	2800041e 	bne	r5,zero,828b8 <___vfprintf_internal_r+0x1638>
   828a8:	d9814c17 	ldw	r6,1328(sp)
   828ac:	3080004c 	andi	r2,r6,1
   828b0:	1005003a 	cmpeq	r2,r2,zero
   828b4:	103bf01e 	bne	r2,zero,81878 <___vfprintf_internal_r+0x5f8>
   828b8:	00800044 	movi	r2,1
   828bc:	dc400d17 	ldw	r17,52(sp)
   828c0:	18800115 	stw	r2,4(r3)
   828c4:	d8814917 	ldw	r2,1316(sp)
   828c8:	94800044 	addi	r18,r18,1
   828cc:	8c400044 	addi	r17,r17,1
   828d0:	18800015 	stw	r2,0(r3)
   828d4:	008001c4 	movi	r2,7
   828d8:	dc800e15 	stw	r18,56(sp)
   828dc:	dc400d15 	stw	r17,52(sp)
   828e0:	1440ca16 	blt	r2,r17,82c0c <___vfprintf_internal_r+0x198c>
   828e4:	18c00204 	addi	r3,r3,8
   828e8:	0121c83a 	sub	r16,zero,r4
   828ec:	0400500e 	bge	zero,r16,82a30 <___vfprintf_internal_r+0x17b0>
   828f0:	00800404 	movi	r2,16
   828f4:	1400800e 	bge	r2,r16,82af8 <___vfprintf_internal_r+0x1878>
   828f8:	1027883a 	mov	r19,r2
   828fc:	07000274 	movhi	fp,9
   82900:	e7357d84 	addi	fp,fp,-10762
   82904:	050001c4 	movi	r20,7
   82908:	00000306 	br	82918 <___vfprintf_internal_r+0x1698>
   8290c:	18c00204 	addi	r3,r3,8
   82910:	843ffc04 	addi	r16,r16,-16
   82914:	9c007a0e 	bge	r19,r16,82b00 <___vfprintf_internal_r+0x1880>
   82918:	94800404 	addi	r18,r18,16
   8291c:	8c400044 	addi	r17,r17,1
   82920:	1f000015 	stw	fp,0(r3)
   82924:	1cc00115 	stw	r19,4(r3)
   82928:	dc800e15 	stw	r18,56(sp)
   8292c:	dc400d15 	stw	r17,52(sp)
   82930:	a47ff60e 	bge	r20,r17,8290c <___vfprintf_internal_r+0x168c>
   82934:	d9014f17 	ldw	r4,1340(sp)
   82938:	b00b883a 	mov	r5,r22
   8293c:	d9800c04 	addi	r6,sp,48
   82940:	00812280 	call	81228 <__sprint_r>
   82944:	103c061e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82948:	dc800e17 	ldw	r18,56(sp)
   8294c:	dc400d17 	ldw	r17,52(sp)
   82950:	d8c01904 	addi	r3,sp,100
   82954:	003fee06 	br	82910 <___vfprintf_internal_r+0x1690>
   82958:	3c000017 	ldw	r16,0(r7)
   8295c:	0023883a 	mov	r17,zero
   82960:	39c00104 	addi	r7,r7,4
   82964:	d9c14015 	stw	r7,1280(sp)
   82968:	003e9206 	br	823b4 <___vfprintf_internal_r+0x1134>
   8296c:	d9401904 	addi	r5,sp,100
   82970:	dd000f04 	addi	r20,sp,60
   82974:	d9414115 	stw	r5,1284(sp)
   82978:	d9814417 	ldw	r6,1296(sp)
   8297c:	880a973a 	slli	r5,r17,28
   82980:	8004d13a 	srli	r2,r16,4
   82984:	810003cc 	andi	r4,r16,15
   82988:	3109883a 	add	r4,r6,r4
   8298c:	2884b03a 	or	r2,r5,r2
   82990:	21400003 	ldbu	r5,0(r4)
   82994:	d9014117 	ldw	r4,1284(sp)
   82998:	8806d13a 	srli	r3,r17,4
   8299c:	1021883a 	mov	r16,r2
   829a0:	213fffc4 	addi	r4,r4,-1
   829a4:	d9014115 	stw	r4,1284(sp)
   829a8:	d9814117 	ldw	r6,1284(sp)
   829ac:	10c8b03a 	or	r4,r2,r3
   829b0:	1823883a 	mov	r17,r3
   829b4:	31400005 	stb	r5,0(r6)
   829b8:	203fef1e 	bne	r4,zero,82978 <___vfprintf_internal_r+0x16f8>
   829bc:	003ccb06 	br	81cec <___vfprintf_internal_r+0xa6c>
   829c0:	00800c04 	movi	r2,48
   829c4:	d98018c4 	addi	r6,sp,99
   829c8:	dd000f04 	addi	r20,sp,60
   829cc:	d88018c5 	stb	r2,99(sp)
   829d0:	d9814115 	stw	r6,1284(sp)
   829d4:	003cc506 	br	81cec <___vfprintf_internal_r+0xa6c>
   829d8:	dc400d17 	ldw	r17,52(sp)
   829dc:	07000274 	movhi	fp,9
   829e0:	e7358184 	addi	fp,fp,-10746
   829e4:	003bc706 	br	81904 <___vfprintf_internal_r+0x684>
   829e8:	d9414c17 	ldw	r5,1328(sp)
   829ec:	2880040c 	andi	r2,r5,16
   829f0:	10007c26 	beq	r2,zero,82be4 <___vfprintf_internal_r+0x1964>
   829f4:	38800017 	ldw	r2,0(r7)
   829f8:	39c00104 	addi	r7,r7,4
   829fc:	d9c14015 	stw	r7,1280(sp)
   82a00:	d9814b17 	ldw	r6,1324(sp)
   82a04:	d9c14017 	ldw	r7,1280(sp)
   82a08:	11800015 	stw	r6,0(r2)
   82a0c:	003a7806 	br	813f0 <___vfprintf_internal_r+0x170>
   82a10:	d9014f17 	ldw	r4,1340(sp)
   82a14:	b00b883a 	mov	r5,r22
   82a18:	d9800c04 	addi	r6,sp,48
   82a1c:	00812280 	call	81228 <__sprint_r>
   82a20:	103bcf1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82a24:	dc800e17 	ldw	r18,56(sp)
   82a28:	dc400d17 	ldw	r17,52(sp)
   82a2c:	d8c01904 	addi	r3,sp,100
   82a30:	d9014717 	ldw	r4,1308(sp)
   82a34:	d9414117 	ldw	r5,1284(sp)
   82a38:	8c400044 	addi	r17,r17,1
   82a3c:	9125883a 	add	r18,r18,r4
   82a40:	008001c4 	movi	r2,7
   82a44:	19400015 	stw	r5,0(r3)
   82a48:	19000115 	stw	r4,4(r3)
   82a4c:	dc800e15 	stw	r18,56(sp)
   82a50:	dc400d15 	stw	r17,52(sp)
   82a54:	147cee16 	blt	r2,r17,81e10 <___vfprintf_internal_r+0xb90>
   82a58:	18c00204 	addi	r3,r3,8
   82a5c:	003b8606 	br	81878 <___vfprintf_internal_r+0x5f8>
   82a60:	38c00017 	ldw	r3,0(r7)
   82a64:	39000204 	addi	r4,r7,8
   82a68:	d9014015 	stw	r4,1280(sp)
   82a6c:	d8c14215 	stw	r3,1288(sp)
   82a70:	39c00117 	ldw	r7,4(r7)
   82a74:	d9c14315 	stw	r7,1292(sp)
   82a78:	003e2006 	br	822fc <___vfprintf_internal_r+0x107c>
   82a7c:	0005883a 	mov	r2,zero
   82a80:	1409c83a 	sub	r4,r2,r16
   82a84:	1105803a 	cmpltu	r2,r2,r4
   82a88:	044bc83a 	sub	r5,zero,r17
   82a8c:	2885c83a 	sub	r2,r5,r2
   82a90:	2021883a 	mov	r16,r4
   82a94:	1023883a 	mov	r17,r2
   82a98:	01000044 	movi	r4,1
   82a9c:	00800b44 	movi	r2,45
   82aa0:	d8800405 	stb	r2,16(sp)
   82aa4:	003c8406 	br	81cb8 <___vfprintf_internal_r+0xa38>
   82aa8:	d9014f17 	ldw	r4,1340(sp)
   82aac:	b00b883a 	mov	r5,r22
   82ab0:	d9800c04 	addi	r6,sp,48
   82ab4:	00812280 	call	81228 <__sprint_r>
   82ab8:	103ba91e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82abc:	dc800e17 	ldw	r18,56(sp)
   82ac0:	dc400d17 	ldw	r17,52(sp)
   82ac4:	d9000517 	ldw	r4,20(sp)
   82ac8:	d9401904 	addi	r5,sp,100
   82acc:	003da706 	br	8216c <___vfprintf_internal_r+0xeec>
   82ad0:	d9014f17 	ldw	r4,1340(sp)
   82ad4:	b00b883a 	mov	r5,r22
   82ad8:	d9800c04 	addi	r6,sp,48
   82adc:	00812280 	call	81228 <__sprint_r>
   82ae0:	103b9f1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82ae4:	dc800e17 	ldw	r18,56(sp)
   82ae8:	dc400d17 	ldw	r17,52(sp)
   82aec:	d9000517 	ldw	r4,20(sp)
   82af0:	d8c01904 	addi	r3,sp,100
   82af4:	003d9106 	br	8213c <___vfprintf_internal_r+0xebc>
   82af8:	07000274 	movhi	fp,9
   82afc:	e7357d84 	addi	fp,fp,-10762
   82b00:	9425883a 	add	r18,r18,r16
   82b04:	8c400044 	addi	r17,r17,1
   82b08:	008001c4 	movi	r2,7
   82b0c:	1f000015 	stw	fp,0(r3)
   82b10:	1c000115 	stw	r16,4(r3)
   82b14:	dc800e15 	stw	r18,56(sp)
   82b18:	dc400d15 	stw	r17,52(sp)
   82b1c:	147fbc16 	blt	r2,r17,82a10 <___vfprintf_internal_r+0x1790>
   82b20:	18c00204 	addi	r3,r3,8
   82b24:	003fc206 	br	82a30 <___vfprintf_internal_r+0x17b0>
   82b28:	d9014f17 	ldw	r4,1340(sp)
   82b2c:	b00b883a 	mov	r5,r22
   82b30:	d9800c04 	addi	r6,sp,48
   82b34:	00812280 	call	81228 <__sprint_r>
   82b38:	103b891e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82b3c:	dc800e17 	ldw	r18,56(sp)
   82b40:	d9000517 	ldw	r4,20(sp)
   82b44:	d8c01904 	addi	r3,sp,100
   82b48:	003d0206 	br	81f54 <___vfprintf_internal_r+0xcd4>
   82b4c:	07000274 	movhi	fp,9
   82b50:	e7357d84 	addi	fp,fp,-10762
   82b54:	003be406 	br	81ae8 <___vfprintf_internal_r+0x868>
   82b58:	00800274 	movhi	r2,9
   82b5c:	10b56c04 	addi	r2,r2,-10832
   82b60:	d8814115 	stw	r2,1284(sp)
   82b64:	003df506 	br	8233c <___vfprintf_internal_r+0x10bc>
   82b68:	d9014217 	ldw	r4,1288(sp)
   82b6c:	d9414317 	ldw	r5,1292(sp)
   82b70:	0087c600 	call	87c60 <__isnand>
   82b74:	10003926 	beq	r2,zero,82c5c <___vfprintf_internal_r+0x19dc>
   82b78:	d9414d17 	ldw	r5,1332(sp)
   82b7c:	008011c4 	movi	r2,71
   82b80:	1140ce16 	blt	r2,r5,82ebc <___vfprintf_internal_r+0x1c3c>
   82b84:	01800274 	movhi	r6,9
   82b88:	31b56d04 	addi	r6,r6,-10828
   82b8c:	d9814115 	stw	r6,1284(sp)
   82b90:	003dea06 	br	8233c <___vfprintf_internal_r+0x10bc>
   82b94:	d9014c17 	ldw	r4,1328(sp)
   82b98:	bdc00044 	addi	r23,r23,1
   82b9c:	b8c00007 	ldb	r3,0(r23)
   82ba0:	21000814 	ori	r4,r4,32
   82ba4:	d9014c15 	stw	r4,1328(sp)
   82ba8:	003a3406 	br	8147c <___vfprintf_internal_r+0x1fc>
   82bac:	dcc14515 	stw	r19,1300(sp)
   82bb0:	98011016 	blt	r19,zero,82ff4 <___vfprintf_internal_r+0x1d74>
   82bb4:	980f883a 	mov	r7,r19
   82bb8:	d8014615 	stw	zero,1304(sp)
   82bbc:	003c5206 	br	81d08 <___vfprintf_internal_r+0xa88>
   82bc0:	d9014f17 	ldw	r4,1340(sp)
   82bc4:	b00b883a 	mov	r5,r22
   82bc8:	d9800c04 	addi	r6,sp,48
   82bcc:	00812280 	call	81228 <__sprint_r>
   82bd0:	103b631e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82bd4:	dc800e17 	ldw	r18,56(sp)
   82bd8:	d9000517 	ldw	r4,20(sp)
   82bdc:	d8c01904 	addi	r3,sp,100
   82be0:	003f2e06 	br	8289c <___vfprintf_internal_r+0x161c>
   82be4:	d8c14c17 	ldw	r3,1328(sp)
   82be8:	1880100c 	andi	r2,r3,64
   82bec:	1000a026 	beq	r2,zero,82e70 <___vfprintf_internal_r+0x1bf0>
   82bf0:	38800017 	ldw	r2,0(r7)
   82bf4:	39c00104 	addi	r7,r7,4
   82bf8:	d9c14015 	stw	r7,1280(sp)
   82bfc:	d9014b17 	ldw	r4,1324(sp)
   82c00:	d9c14017 	ldw	r7,1280(sp)
   82c04:	1100000d 	sth	r4,0(r2)
   82c08:	0039f906 	br	813f0 <___vfprintf_internal_r+0x170>
   82c0c:	d9014f17 	ldw	r4,1340(sp)
   82c10:	b00b883a 	mov	r5,r22
   82c14:	d9800c04 	addi	r6,sp,48
   82c18:	00812280 	call	81228 <__sprint_r>
   82c1c:	103b501e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82c20:	dc800e17 	ldw	r18,56(sp)
   82c24:	dc400d17 	ldw	r17,52(sp)
   82c28:	d9000517 	ldw	r4,20(sp)
   82c2c:	d8c01904 	addi	r3,sp,100
   82c30:	003f2d06 	br	828e8 <___vfprintf_internal_r+0x1668>
   82c34:	00800184 	movi	r2,6
   82c38:	14c09a36 	bltu	r2,r19,82ea4 <___vfprintf_internal_r+0x1c24>
   82c3c:	dcc14515 	stw	r19,1300(sp)
   82c40:	9800010e 	bge	r19,zero,82c48 <___vfprintf_internal_r+0x19c8>
   82c44:	d8014515 	stw	zero,1300(sp)
   82c48:	00800274 	movhi	r2,9
   82c4c:	10b56f04 	addi	r2,r2,-10820
   82c50:	980f883a 	mov	r7,r19
   82c54:	d8814115 	stw	r2,1284(sp)
   82c58:	003a7806 	br	8163c <___vfprintf_internal_r+0x3bc>
   82c5c:	00bfffc4 	movi	r2,-1
   82c60:	9880e226 	beq	r19,r2,82fec <___vfprintf_internal_r+0x1d6c>
   82c64:	d9414d17 	ldw	r5,1332(sp)
   82c68:	008019c4 	movi	r2,103
   82c6c:	2880dc26 	beq	r5,r2,82fe0 <___vfprintf_internal_r+0x1d60>
   82c70:	008011c4 	movi	r2,71
   82c74:	2880da26 	beq	r5,r2,82fe0 <___vfprintf_internal_r+0x1d60>
   82c78:	d9414c17 	ldw	r5,1328(sp)
   82c7c:	d9014317 	ldw	r4,1292(sp)
   82c80:	d9814217 	ldw	r6,1288(sp)
   82c84:	29404014 	ori	r5,r5,256
   82c88:	d9414c15 	stw	r5,1328(sp)
   82c8c:	2000cc16 	blt	r4,zero,82fc0 <___vfprintf_internal_r+0x1d40>
   82c90:	3021883a 	mov	r16,r6
   82c94:	2023883a 	mov	r17,r4
   82c98:	0039883a 	mov	fp,zero
   82c9c:	d9414d17 	ldw	r5,1332(sp)
   82ca0:	00801984 	movi	r2,102
   82ca4:	2880b726 	beq	r5,r2,82f84 <___vfprintf_internal_r+0x1d04>
   82ca8:	00801184 	movi	r2,70
   82cac:	2880b526 	beq	r5,r2,82f84 <___vfprintf_internal_r+0x1d04>
   82cb0:	00801944 	movi	r2,101
   82cb4:	2880c826 	beq	r5,r2,82fd8 <___vfprintf_internal_r+0x1d58>
   82cb8:	00801144 	movi	r2,69
   82cbc:	2880c626 	beq	r5,r2,82fd8 <___vfprintf_internal_r+0x1d58>
   82cc0:	9829883a 	mov	r20,r19
   82cc4:	d9014f17 	ldw	r4,1340(sp)
   82cc8:	d8800504 	addi	r2,sp,20
   82ccc:	880d883a 	mov	r6,r17
   82cd0:	d8800115 	stw	r2,4(sp)
   82cd4:	d8c00604 	addi	r3,sp,24
   82cd8:	d8800704 	addi	r2,sp,28
   82cdc:	800b883a 	mov	r5,r16
   82ce0:	01c00084 	movi	r7,2
   82ce4:	d8c00215 	stw	r3,8(sp)
   82ce8:	d8800315 	stw	r2,12(sp)
   82cec:	dd000015 	stw	r20,0(sp)
   82cf0:	00834a40 	call	834a4 <_dtoa_r>
   82cf4:	d9814d17 	ldw	r6,1332(sp)
   82cf8:	d8814115 	stw	r2,1284(sp)
   82cfc:	008019c4 	movi	r2,103
   82d00:	30809526 	beq	r6,r2,82f58 <___vfprintf_internal_r+0x1cd8>
   82d04:	d8c14d17 	ldw	r3,1332(sp)
   82d08:	008011c4 	movi	r2,71
   82d0c:	18809226 	beq	r3,r2,82f58 <___vfprintf_internal_r+0x1cd8>
   82d10:	d9414117 	ldw	r5,1284(sp)
   82d14:	d9814d17 	ldw	r6,1332(sp)
   82d18:	00801984 	movi	r2,102
   82d1c:	2d25883a 	add	r18,r5,r20
   82d20:	30808626 	beq	r6,r2,82f3c <___vfprintf_internal_r+0x1cbc>
   82d24:	00801184 	movi	r2,70
   82d28:	30808426 	beq	r6,r2,82f3c <___vfprintf_internal_r+0x1cbc>
   82d2c:	000d883a 	mov	r6,zero
   82d30:	000f883a 	mov	r7,zero
   82d34:	880b883a 	mov	r5,r17
   82d38:	8009883a 	mov	r4,r16
   82d3c:	0089a480 	call	89a48 <__eqdf2>
   82d40:	1000751e 	bne	r2,zero,82f18 <___vfprintf_internal_r+0x1c98>
   82d44:	9005883a 	mov	r2,r18
   82d48:	dc800715 	stw	r18,28(sp)
   82d4c:	d9014117 	ldw	r4,1284(sp)
   82d50:	d9414d17 	ldw	r5,1332(sp)
   82d54:	00c019c4 	movi	r3,103
   82d58:	1125c83a 	sub	r18,r2,r4
   82d5c:	28c06826 	beq	r5,r3,82f00 <___vfprintf_internal_r+0x1c80>
   82d60:	008011c4 	movi	r2,71
   82d64:	28806626 	beq	r5,r2,82f00 <___vfprintf_internal_r+0x1c80>
   82d68:	d9000517 	ldw	r4,20(sp)
   82d6c:	d8c14d17 	ldw	r3,1332(sp)
   82d70:	00801944 	movi	r2,101
   82d74:	10c05516 	blt	r2,r3,82ecc <___vfprintf_internal_r+0x1c4c>
   82d78:	213fffc4 	addi	r4,r4,-1
   82d7c:	d9000515 	stw	r4,20(sp)
   82d80:	d8c00805 	stb	r3,32(sp)
   82d84:	2021883a 	mov	r16,r4
   82d88:	2000c116 	blt	r4,zero,83090 <___vfprintf_internal_r+0x1e10>
   82d8c:	00800ac4 	movi	r2,43
   82d90:	d8800845 	stb	r2,33(sp)
   82d94:	00800244 	movi	r2,9
   82d98:	1400af0e 	bge	r2,r16,83058 <___vfprintf_internal_r+0x1dd8>
   82d9c:	1027883a 	mov	r19,r2
   82da0:	dc400b84 	addi	r17,sp,46
   82da4:	8009883a 	mov	r4,r16
   82da8:	01400284 	movi	r5,10
   82dac:	008a1300 	call	8a130 <__modsi3>
   82db0:	10800c04 	addi	r2,r2,48
   82db4:	8c7fffc4 	addi	r17,r17,-1
   82db8:	8009883a 	mov	r4,r16
   82dbc:	01400284 	movi	r5,10
   82dc0:	88800005 	stb	r2,0(r17)
   82dc4:	008a0d00 	call	8a0d0 <__divsi3>
   82dc8:	1021883a 	mov	r16,r2
   82dcc:	98bff516 	blt	r19,r2,82da4 <___vfprintf_internal_r+0x1b24>
   82dd0:	10c00c04 	addi	r3,r2,48
   82dd4:	d88009c4 	addi	r2,sp,39
   82dd8:	108001c4 	addi	r2,r2,7
   82ddc:	897fffc4 	addi	r5,r17,-1
   82de0:	88ffffc5 	stb	r3,-1(r17)
   82de4:	2880a72e 	bgeu	r5,r2,83084 <___vfprintf_internal_r+0x1e04>
   82de8:	1009883a 	mov	r4,r2
   82dec:	d9800804 	addi	r6,sp,32
   82df0:	d8c00884 	addi	r3,sp,34
   82df4:	28800003 	ldbu	r2,0(r5)
   82df8:	29400044 	addi	r5,r5,1
   82dfc:	18800005 	stb	r2,0(r3)
   82e00:	18c00044 	addi	r3,r3,1
   82e04:	293ffb36 	bltu	r5,r4,82df4 <___vfprintf_internal_r+0x1b74>
   82e08:	1987c83a 	sub	r3,r3,r6
   82e0c:	00800044 	movi	r2,1
   82e10:	d8c14815 	stw	r3,1312(sp)
   82e14:	90cf883a 	add	r7,r18,r3
   82e18:	1480960e 	bge	r2,r18,83074 <___vfprintf_internal_r+0x1df4>
   82e1c:	39c00044 	addi	r7,r7,1
   82e20:	d9c14515 	stw	r7,1300(sp)
   82e24:	38003416 	blt	r7,zero,82ef8 <___vfprintf_internal_r+0x1c78>
   82e28:	e0803fcc 	andi	r2,fp,255
   82e2c:	1080201c 	xori	r2,r2,128
   82e30:	10bfe004 	addi	r2,r2,-128
   82e34:	10004e26 	beq	r2,zero,82f70 <___vfprintf_internal_r+0x1cf0>
   82e38:	00800b44 	movi	r2,45
   82e3c:	dc814715 	stw	r18,1308(sp)
   82e40:	d8014615 	stw	zero,1304(sp)
   82e44:	d8800405 	stb	r2,16(sp)
   82e48:	003bb106 	br	81d10 <___vfprintf_internal_r+0xa90>
   82e4c:	00800b44 	movi	r2,45
   82e50:	d8800405 	stb	r2,16(sp)
   82e54:	003d3306 	br	82324 <___vfprintf_internal_r+0x10a4>
   82e58:	d9014f17 	ldw	r4,1340(sp)
   82e5c:	b00b883a 	mov	r5,r22
   82e60:	d9800c04 	addi	r6,sp,48
   82e64:	00812280 	call	81228 <__sprint_r>
   82e68:	103abd1e 	bne	r2,zero,81960 <___vfprintf_internal_r+0x6e0>
   82e6c:	003abb06 	br	8195c <___vfprintf_internal_r+0x6dc>
   82e70:	38800017 	ldw	r2,0(r7)
   82e74:	39c00104 	addi	r7,r7,4
   82e78:	d9c14015 	stw	r7,1280(sp)
   82e7c:	d9414b17 	ldw	r5,1324(sp)
   82e80:	d9c14017 	ldw	r7,1280(sp)
   82e84:	11400015 	stw	r5,0(r2)
   82e88:	00395906 	br	813f0 <___vfprintf_internal_r+0x170>
   82e8c:	980f883a 	mov	r7,r19
   82e90:	dcc14515 	stw	r19,1300(sp)
   82e94:	d8014615 	stw	zero,1304(sp)
   82e98:	003b9b06 	br	81d08 <___vfprintf_internal_r+0xa88>
   82e9c:	0027883a 	mov	r19,zero
   82ea0:	00397806 	br	81484 <___vfprintf_internal_r+0x204>
   82ea4:	00c00274 	movhi	r3,9
   82ea8:	18f56f04 	addi	r3,r3,-10820
   82eac:	100f883a 	mov	r7,r2
   82eb0:	d8814515 	stw	r2,1300(sp)
   82eb4:	d8c14115 	stw	r3,1284(sp)
   82eb8:	0039e006 	br	8163c <___vfprintf_internal_r+0x3bc>
   82ebc:	00800274 	movhi	r2,9
   82ec0:	10b56e04 	addi	r2,r2,-10824
   82ec4:	d8814115 	stw	r2,1284(sp)
   82ec8:	003d1c06 	br	8233c <___vfprintf_internal_r+0x10bc>
   82ecc:	d9414d17 	ldw	r5,1332(sp)
   82ed0:	00801984 	movi	r2,102
   82ed4:	28804926 	beq	r5,r2,82ffc <___vfprintf_internal_r+0x1d7c>
   82ed8:	200f883a 	mov	r7,r4
   82edc:	24805716 	blt	r4,r18,8303c <___vfprintf_internal_r+0x1dbc>
   82ee0:	d9414c17 	ldw	r5,1328(sp)
   82ee4:	2880004c 	andi	r2,r5,1
   82ee8:	10000126 	beq	r2,zero,82ef0 <___vfprintf_internal_r+0x1c70>
   82eec:	21c00044 	addi	r7,r4,1
   82ef0:	d9c14515 	stw	r7,1300(sp)
   82ef4:	383fcc0e 	bge	r7,zero,82e28 <___vfprintf_internal_r+0x1ba8>
   82ef8:	d8014515 	stw	zero,1300(sp)
   82efc:	003fca06 	br	82e28 <___vfprintf_internal_r+0x1ba8>
   82f00:	d9000517 	ldw	r4,20(sp)
   82f04:	00bfff04 	movi	r2,-4
   82f08:	1100480e 	bge	r2,r4,8302c <___vfprintf_internal_r+0x1dac>
   82f0c:	99004716 	blt	r19,r4,8302c <___vfprintf_internal_r+0x1dac>
   82f10:	d8c14d15 	stw	r3,1332(sp)
   82f14:	003ff006 	br	82ed8 <___vfprintf_internal_r+0x1c58>
   82f18:	d8800717 	ldw	r2,28(sp)
   82f1c:	14bf8b2e 	bgeu	r2,r18,82d4c <___vfprintf_internal_r+0x1acc>
   82f20:	9007883a 	mov	r3,r18
   82f24:	01000c04 	movi	r4,48
   82f28:	11000005 	stb	r4,0(r2)
   82f2c:	10800044 	addi	r2,r2,1
   82f30:	d8800715 	stw	r2,28(sp)
   82f34:	18bffc1e 	bne	r3,r2,82f28 <___vfprintf_internal_r+0x1ca8>
   82f38:	003f8406 	br	82d4c <___vfprintf_internal_r+0x1acc>
   82f3c:	d8814117 	ldw	r2,1284(sp)
   82f40:	10c00007 	ldb	r3,0(r2)
   82f44:	00800c04 	movi	r2,48
   82f48:	18805b26 	beq	r3,r2,830b8 <___vfprintf_internal_r+0x1e38>
   82f4c:	d9000517 	ldw	r4,20(sp)
   82f50:	9125883a 	add	r18,r18,r4
   82f54:	003f7506 	br	82d2c <___vfprintf_internal_r+0x1aac>
   82f58:	d9014c17 	ldw	r4,1328(sp)
   82f5c:	2080004c 	andi	r2,r4,1
   82f60:	1005003a 	cmpeq	r2,r2,zero
   82f64:	103f6a26 	beq	r2,zero,82d10 <___vfprintf_internal_r+0x1a90>
   82f68:	d8800717 	ldw	r2,28(sp)
   82f6c:	003f7706 	br	82d4c <___vfprintf_internal_r+0x1acc>
   82f70:	d9c14515 	stw	r7,1300(sp)
   82f74:	38004d16 	blt	r7,zero,830ac <___vfprintf_internal_r+0x1e2c>
   82f78:	dc814715 	stw	r18,1308(sp)
   82f7c:	d8014615 	stw	zero,1304(sp)
   82f80:	003b6106 	br	81d08 <___vfprintf_internal_r+0xa88>
   82f84:	d9014f17 	ldw	r4,1340(sp)
   82f88:	d8800504 	addi	r2,sp,20
   82f8c:	d8800115 	stw	r2,4(sp)
   82f90:	d8c00604 	addi	r3,sp,24
   82f94:	d8800704 	addi	r2,sp,28
   82f98:	800b883a 	mov	r5,r16
   82f9c:	880d883a 	mov	r6,r17
   82fa0:	01c000c4 	movi	r7,3
   82fa4:	d8c00215 	stw	r3,8(sp)
   82fa8:	d8800315 	stw	r2,12(sp)
   82fac:	dcc00015 	stw	r19,0(sp)
   82fb0:	9829883a 	mov	r20,r19
   82fb4:	00834a40 	call	834a4 <_dtoa_r>
   82fb8:	d8814115 	stw	r2,1284(sp)
   82fbc:	003f5106 	br	82d04 <___vfprintf_internal_r+0x1a84>
   82fc0:	d8c14217 	ldw	r3,1288(sp)
   82fc4:	d9014317 	ldw	r4,1292(sp)
   82fc8:	07000b44 	movi	fp,45
   82fcc:	1821883a 	mov	r16,r3
   82fd0:	2460003c 	xorhi	r17,r4,32768
   82fd4:	003f3106 	br	82c9c <___vfprintf_internal_r+0x1a1c>
   82fd8:	9d000044 	addi	r20,r19,1
   82fdc:	003f3906 	br	82cc4 <___vfprintf_internal_r+0x1a44>
   82fe0:	983f251e 	bne	r19,zero,82c78 <___vfprintf_internal_r+0x19f8>
   82fe4:	04c00044 	movi	r19,1
   82fe8:	003f2306 	br	82c78 <___vfprintf_internal_r+0x19f8>
   82fec:	04c00184 	movi	r19,6
   82ff0:	003f2106 	br	82c78 <___vfprintf_internal_r+0x19f8>
   82ff4:	d8014515 	stw	zero,1300(sp)
   82ff8:	003eee06 	br	82bb4 <___vfprintf_internal_r+0x1934>
   82ffc:	200f883a 	mov	r7,r4
   83000:	0100370e 	bge	zero,r4,830e0 <___vfprintf_internal_r+0x1e60>
   83004:	9800031e 	bne	r19,zero,83014 <___vfprintf_internal_r+0x1d94>
   83008:	d9814c17 	ldw	r6,1328(sp)
   8300c:	3080004c 	andi	r2,r6,1
   83010:	103fb726 	beq	r2,zero,82ef0 <___vfprintf_internal_r+0x1c70>
   83014:	20800044 	addi	r2,r4,1
   83018:	98a7883a 	add	r19,r19,r2
   8301c:	dcc14515 	stw	r19,1300(sp)
   83020:	980f883a 	mov	r7,r19
   83024:	983f800e 	bge	r19,zero,82e28 <___vfprintf_internal_r+0x1ba8>
   83028:	003fb306 	br	82ef8 <___vfprintf_internal_r+0x1c78>
   8302c:	d9814d17 	ldw	r6,1332(sp)
   83030:	31bfff84 	addi	r6,r6,-2
   83034:	d9814d15 	stw	r6,1332(sp)
   83038:	003f4c06 	br	82d6c <___vfprintf_internal_r+0x1aec>
   8303c:	0100180e 	bge	zero,r4,830a0 <___vfprintf_internal_r+0x1e20>
   83040:	00800044 	movi	r2,1
   83044:	1485883a 	add	r2,r2,r18
   83048:	d8814515 	stw	r2,1300(sp)
   8304c:	100f883a 	mov	r7,r2
   83050:	103f750e 	bge	r2,zero,82e28 <___vfprintf_internal_r+0x1ba8>
   83054:	003fa806 	br	82ef8 <___vfprintf_internal_r+0x1c78>
   83058:	80c00c04 	addi	r3,r16,48
   8305c:	00800c04 	movi	r2,48
   83060:	d8c008c5 	stb	r3,35(sp)
   83064:	d9800804 	addi	r6,sp,32
   83068:	d8c00904 	addi	r3,sp,36
   8306c:	d8800885 	stb	r2,34(sp)
   83070:	003f6506 	br	82e08 <___vfprintf_internal_r+0x1b88>
   83074:	d9014c17 	ldw	r4,1328(sp)
   83078:	2084703a 	and	r2,r4,r2
   8307c:	103f9c26 	beq	r2,zero,82ef0 <___vfprintf_internal_r+0x1c70>
   83080:	003f6606 	br	82e1c <___vfprintf_internal_r+0x1b9c>
   83084:	d9800804 	addi	r6,sp,32
   83088:	d8c00884 	addi	r3,sp,34
   8308c:	003f5e06 	br	82e08 <___vfprintf_internal_r+0x1b88>
   83090:	00800b44 	movi	r2,45
   83094:	0121c83a 	sub	r16,zero,r4
   83098:	d8800845 	stb	r2,33(sp)
   8309c:	003f3d06 	br	82d94 <___vfprintf_internal_r+0x1b14>
   830a0:	00800084 	movi	r2,2
   830a4:	1105c83a 	sub	r2,r2,r4
   830a8:	003fe606 	br	83044 <___vfprintf_internal_r+0x1dc4>
   830ac:	d8014515 	stw	zero,1300(sp)
   830b0:	dc814715 	stw	r18,1308(sp)
   830b4:	003fb106 	br	82f7c <___vfprintf_internal_r+0x1cfc>
   830b8:	000d883a 	mov	r6,zero
   830bc:	000f883a 	mov	r7,zero
   830c0:	8009883a 	mov	r4,r16
   830c4:	880b883a 	mov	r5,r17
   830c8:	0089ad00 	call	89ad0 <__nedf2>
   830cc:	103f9f26 	beq	r2,zero,82f4c <___vfprintf_internal_r+0x1ccc>
   830d0:	00800044 	movi	r2,1
   830d4:	1509c83a 	sub	r4,r2,r20
   830d8:	d9000515 	stw	r4,20(sp)
   830dc:	003f9b06 	br	82f4c <___vfprintf_internal_r+0x1ccc>
   830e0:	98000d1e 	bne	r19,zero,83118 <___vfprintf_internal_r+0x1e98>
   830e4:	d8c14c17 	ldw	r3,1328(sp)
   830e8:	1880004c 	andi	r2,r3,1
   830ec:	10000a1e 	bne	r2,zero,83118 <___vfprintf_internal_r+0x1e98>
   830f0:	01000044 	movi	r4,1
   830f4:	200f883a 	mov	r7,r4
   830f8:	d9014515 	stw	r4,1300(sp)
   830fc:	003f4a06 	br	82e28 <___vfprintf_internal_r+0x1ba8>
   83100:	3cc00017 	ldw	r19,0(r7)
   83104:	39c00104 	addi	r7,r7,4
   83108:	983d0e0e 	bge	r19,zero,82544 <___vfprintf_internal_r+0x12c4>
   8310c:	b8c00007 	ldb	r3,0(r23)
   83110:	04ffffc4 	movi	r19,-1
   83114:	0038d906 	br	8147c <___vfprintf_internal_r+0x1fc>
   83118:	9cc00084 	addi	r19,r19,2
   8311c:	dcc14515 	stw	r19,1300(sp)
   83120:	980f883a 	mov	r7,r19
   83124:	983f400e 	bge	r19,zero,82e28 <___vfprintf_internal_r+0x1ba8>
   83128:	003f7306 	br	82ef8 <___vfprintf_internal_r+0x1c78>

0008312c <__vfprintf_internal>:
   8312c:	00800274 	movhi	r2,9
   83130:	10bcbd04 	addi	r2,r2,-3340
   83134:	2013883a 	mov	r9,r4
   83138:	11000017 	ldw	r4,0(r2)
   8313c:	2805883a 	mov	r2,r5
   83140:	300f883a 	mov	r7,r6
   83144:	480b883a 	mov	r5,r9
   83148:	100d883a 	mov	r6,r2
   8314c:	00812801 	jmpi	81280 <___vfprintf_internal_r>

00083150 <__swsetup_r>:
   83150:	00800274 	movhi	r2,9
   83154:	10bcbd04 	addi	r2,r2,-3340
   83158:	10c00017 	ldw	r3,0(r2)
   8315c:	defffd04 	addi	sp,sp,-12
   83160:	dc400115 	stw	r17,4(sp)
   83164:	dc000015 	stw	r16,0(sp)
   83168:	dfc00215 	stw	ra,8(sp)
   8316c:	2023883a 	mov	r17,r4
   83170:	2821883a 	mov	r16,r5
   83174:	18000226 	beq	r3,zero,83180 <__swsetup_r+0x30>
   83178:	18800e17 	ldw	r2,56(r3)
   8317c:	10001f26 	beq	r2,zero,831fc <__swsetup_r+0xac>
   83180:	8100030b 	ldhu	r4,12(r16)
   83184:	2080020c 	andi	r2,r4,8
   83188:	10002826 	beq	r2,zero,8322c <__swsetup_r+0xdc>
   8318c:	81400417 	ldw	r5,16(r16)
   83190:	28001d26 	beq	r5,zero,83208 <__swsetup_r+0xb8>
   83194:	2080004c 	andi	r2,r4,1
   83198:	1005003a 	cmpeq	r2,r2,zero
   8319c:	10000b26 	beq	r2,zero,831cc <__swsetup_r+0x7c>
   831a0:	2080008c 	andi	r2,r4,2
   831a4:	10001226 	beq	r2,zero,831f0 <__swsetup_r+0xa0>
   831a8:	0005883a 	mov	r2,zero
   831ac:	80800215 	stw	r2,8(r16)
   831b0:	28000b26 	beq	r5,zero,831e0 <__swsetup_r+0x90>
   831b4:	0005883a 	mov	r2,zero
   831b8:	dfc00217 	ldw	ra,8(sp)
   831bc:	dc400117 	ldw	r17,4(sp)
   831c0:	dc000017 	ldw	r16,0(sp)
   831c4:	dec00304 	addi	sp,sp,12
   831c8:	f800283a 	ret
   831cc:	80800517 	ldw	r2,20(r16)
   831d0:	80000215 	stw	zero,8(r16)
   831d4:	0085c83a 	sub	r2,zero,r2
   831d8:	80800615 	stw	r2,24(r16)
   831dc:	283ff51e 	bne	r5,zero,831b4 <__swsetup_r+0x64>
   831e0:	2080200c 	andi	r2,r4,128
   831e4:	103ff326 	beq	r2,zero,831b4 <__swsetup_r+0x64>
   831e8:	00bfffc4 	movi	r2,-1
   831ec:	003ff206 	br	831b8 <__swsetup_r+0x68>
   831f0:	80800517 	ldw	r2,20(r16)
   831f4:	80800215 	stw	r2,8(r16)
   831f8:	003fed06 	br	831b0 <__swsetup_r+0x60>
   831fc:	1809883a 	mov	r4,r3
   83200:	0084cf00 	call	84cf0 <__sinit>
   83204:	003fde06 	br	83180 <__swsetup_r+0x30>
   83208:	20c0a00c 	andi	r3,r4,640
   8320c:	00808004 	movi	r2,512
   83210:	18bfe026 	beq	r3,r2,83194 <__swsetup_r+0x44>
   83214:	8809883a 	mov	r4,r17
   83218:	800b883a 	mov	r5,r16
   8321c:	0085a680 	call	85a68 <__smakebuf_r>
   83220:	8100030b 	ldhu	r4,12(r16)
   83224:	81400417 	ldw	r5,16(r16)
   83228:	003fda06 	br	83194 <__swsetup_r+0x44>
   8322c:	2080040c 	andi	r2,r4,16
   83230:	103fed26 	beq	r2,zero,831e8 <__swsetup_r+0x98>
   83234:	2080010c 	andi	r2,r4,4
   83238:	10001226 	beq	r2,zero,83284 <__swsetup_r+0x134>
   8323c:	81400c17 	ldw	r5,48(r16)
   83240:	28000526 	beq	r5,zero,83258 <__swsetup_r+0x108>
   83244:	80801004 	addi	r2,r16,64
   83248:	28800226 	beq	r5,r2,83254 <__swsetup_r+0x104>
   8324c:	8809883a 	mov	r4,r17
   83250:	00850740 	call	85074 <_free_r>
   83254:	80000c15 	stw	zero,48(r16)
   83258:	8080030b 	ldhu	r2,12(r16)
   8325c:	81400417 	ldw	r5,16(r16)
   83260:	80000115 	stw	zero,4(r16)
   83264:	10bff6cc 	andi	r2,r2,65499
   83268:	8080030d 	sth	r2,12(r16)
   8326c:	81400015 	stw	r5,0(r16)
   83270:	8080030b 	ldhu	r2,12(r16)
   83274:	10800214 	ori	r2,r2,8
   83278:	113fffcc 	andi	r4,r2,65535
   8327c:	8080030d 	sth	r2,12(r16)
   83280:	003fc306 	br	83190 <__swsetup_r+0x40>
   83284:	81400417 	ldw	r5,16(r16)
   83288:	003ff906 	br	83270 <__swsetup_r+0x120>

0008328c <quorem>:
   8328c:	28c00417 	ldw	r3,16(r5)
   83290:	20800417 	ldw	r2,16(r4)
   83294:	defff604 	addi	sp,sp,-40
   83298:	ddc00715 	stw	r23,28(sp)
   8329c:	dd400515 	stw	r21,20(sp)
   832a0:	dfc00915 	stw	ra,36(sp)
   832a4:	df000815 	stw	fp,32(sp)
   832a8:	dd800615 	stw	r22,24(sp)
   832ac:	dd000415 	stw	r20,16(sp)
   832b0:	dcc00315 	stw	r19,12(sp)
   832b4:	dc800215 	stw	r18,8(sp)
   832b8:	dc400115 	stw	r17,4(sp)
   832bc:	dc000015 	stw	r16,0(sp)
   832c0:	202f883a 	mov	r23,r4
   832c4:	282b883a 	mov	r21,r5
   832c8:	10c07416 	blt	r2,r3,8349c <quorem+0x210>
   832cc:	1c7fffc4 	addi	r17,r3,-1
   832d0:	8c45883a 	add	r2,r17,r17
   832d4:	1085883a 	add	r2,r2,r2
   832d8:	2c000504 	addi	r16,r5,20
   832dc:	24c00504 	addi	r19,r4,20
   832e0:	14ed883a 	add	r22,r2,r19
   832e4:	80a5883a 	add	r18,r16,r2
   832e8:	b7000017 	ldw	fp,0(r22)
   832ec:	91400017 	ldw	r5,0(r18)
   832f0:	e009883a 	mov	r4,fp
   832f4:	29400044 	addi	r5,r5,1
   832f8:	008a1900 	call	8a190 <__udivsi3>
   832fc:	1029883a 	mov	r20,r2
   83300:	10003c1e 	bne	r2,zero,833f4 <quorem+0x168>
   83304:	a80b883a 	mov	r5,r21
   83308:	b809883a 	mov	r4,r23
   8330c:	00867940 	call	86794 <__mcmp>
   83310:	10002b16 	blt	r2,zero,833c0 <quorem+0x134>
   83314:	a5000044 	addi	r20,r20,1
   83318:	980f883a 	mov	r7,r19
   8331c:	0011883a 	mov	r8,zero
   83320:	0009883a 	mov	r4,zero
   83324:	81400017 	ldw	r5,0(r16)
   83328:	38c00017 	ldw	r3,0(r7)
   8332c:	84000104 	addi	r16,r16,4
   83330:	28bfffcc 	andi	r2,r5,65535
   83334:	2085883a 	add	r2,r4,r2
   83338:	11bfffcc 	andi	r6,r2,65535
   8333c:	193fffcc 	andi	r4,r3,65535
   83340:	1004d43a 	srli	r2,r2,16
   83344:	280ad43a 	srli	r5,r5,16
   83348:	2189c83a 	sub	r4,r4,r6
   8334c:	2209883a 	add	r4,r4,r8
   83350:	1806d43a 	srli	r3,r3,16
   83354:	288b883a 	add	r5,r5,r2
   83358:	200dd43a 	srai	r6,r4,16
   8335c:	28bfffcc 	andi	r2,r5,65535
   83360:	1887c83a 	sub	r3,r3,r2
   83364:	1987883a 	add	r3,r3,r6
   83368:	3900000d 	sth	r4,0(r7)
   8336c:	38c0008d 	sth	r3,2(r7)
   83370:	2808d43a 	srli	r4,r5,16
   83374:	39c00104 	addi	r7,r7,4
   83378:	1811d43a 	srai	r8,r3,16
   8337c:	943fe92e 	bgeu	r18,r16,83324 <quorem+0x98>
   83380:	8c45883a 	add	r2,r17,r17
   83384:	1085883a 	add	r2,r2,r2
   83388:	9885883a 	add	r2,r19,r2
   8338c:	10c00017 	ldw	r3,0(r2)
   83390:	18000b1e 	bne	r3,zero,833c0 <quorem+0x134>
   83394:	113fff04 	addi	r4,r2,-4
   83398:	9900082e 	bgeu	r19,r4,833bc <quorem+0x130>
   8339c:	10bfff17 	ldw	r2,-4(r2)
   833a0:	10000326 	beq	r2,zero,833b0 <quorem+0x124>
   833a4:	00000506 	br	833bc <quorem+0x130>
   833a8:	20800017 	ldw	r2,0(r4)
   833ac:	1000031e 	bne	r2,zero,833bc <quorem+0x130>
   833b0:	213fff04 	addi	r4,r4,-4
   833b4:	8c7fffc4 	addi	r17,r17,-1
   833b8:	993ffb36 	bltu	r19,r4,833a8 <quorem+0x11c>
   833bc:	bc400415 	stw	r17,16(r23)
   833c0:	a005883a 	mov	r2,r20
   833c4:	dfc00917 	ldw	ra,36(sp)
   833c8:	df000817 	ldw	fp,32(sp)
   833cc:	ddc00717 	ldw	r23,28(sp)
   833d0:	dd800617 	ldw	r22,24(sp)
   833d4:	dd400517 	ldw	r21,20(sp)
   833d8:	dd000417 	ldw	r20,16(sp)
   833dc:	dcc00317 	ldw	r19,12(sp)
   833e0:	dc800217 	ldw	r18,8(sp)
   833e4:	dc400117 	ldw	r17,4(sp)
   833e8:	dc000017 	ldw	r16,0(sp)
   833ec:	dec00a04 	addi	sp,sp,40
   833f0:	f800283a 	ret
   833f4:	980f883a 	mov	r7,r19
   833f8:	8011883a 	mov	r8,r16
   833fc:	0013883a 	mov	r9,zero
   83400:	000d883a 	mov	r6,zero
   83404:	40c00017 	ldw	r3,0(r8)
   83408:	39000017 	ldw	r4,0(r7)
   8340c:	42000104 	addi	r8,r8,4
   83410:	18bfffcc 	andi	r2,r3,65535
   83414:	a085383a 	mul	r2,r20,r2
   83418:	1806d43a 	srli	r3,r3,16
   8341c:	217fffcc 	andi	r5,r4,65535
   83420:	3085883a 	add	r2,r6,r2
   83424:	11bfffcc 	andi	r6,r2,65535
   83428:	a0c7383a 	mul	r3,r20,r3
   8342c:	1004d43a 	srli	r2,r2,16
   83430:	298bc83a 	sub	r5,r5,r6
   83434:	2a4b883a 	add	r5,r5,r9
   83438:	2008d43a 	srli	r4,r4,16
   8343c:	1887883a 	add	r3,r3,r2
   83440:	280dd43a 	srai	r6,r5,16
   83444:	18bfffcc 	andi	r2,r3,65535
   83448:	2089c83a 	sub	r4,r4,r2
   8344c:	2189883a 	add	r4,r4,r6
   83450:	3900008d 	sth	r4,2(r7)
   83454:	3940000d 	sth	r5,0(r7)
   83458:	180cd43a 	srli	r6,r3,16
   8345c:	39c00104 	addi	r7,r7,4
   83460:	2013d43a 	srai	r9,r4,16
   83464:	923fe72e 	bgeu	r18,r8,83404 <quorem+0x178>
   83468:	e03fa61e 	bne	fp,zero,83304 <quorem+0x78>
   8346c:	b0ffff04 	addi	r3,r22,-4
   83470:	98c0082e 	bgeu	r19,r3,83494 <quorem+0x208>
   83474:	b0bfff17 	ldw	r2,-4(r22)
   83478:	10000326 	beq	r2,zero,83488 <quorem+0x1fc>
   8347c:	00000506 	br	83494 <quorem+0x208>
   83480:	18800017 	ldw	r2,0(r3)
   83484:	1000031e 	bne	r2,zero,83494 <quorem+0x208>
   83488:	18ffff04 	addi	r3,r3,-4
   8348c:	8c7fffc4 	addi	r17,r17,-1
   83490:	98fffb36 	bltu	r19,r3,83480 <quorem+0x1f4>
   83494:	bc400415 	stw	r17,16(r23)
   83498:	003f9a06 	br	83304 <quorem+0x78>
   8349c:	0005883a 	mov	r2,zero
   834a0:	003fc806 	br	833c4 <quorem+0x138>

000834a4 <_dtoa_r>:
   834a4:	22001017 	ldw	r8,64(r4)
   834a8:	deffda04 	addi	sp,sp,-152
   834ac:	dd402115 	stw	r21,132(sp)
   834b0:	dd002015 	stw	r20,128(sp)
   834b4:	dc801e15 	stw	r18,120(sp)
   834b8:	dc401d15 	stw	r17,116(sp)
   834bc:	dfc02515 	stw	ra,148(sp)
   834c0:	df002415 	stw	fp,144(sp)
   834c4:	ddc02315 	stw	r23,140(sp)
   834c8:	dd802215 	stw	r22,136(sp)
   834cc:	dcc01f15 	stw	r19,124(sp)
   834d0:	dc001c15 	stw	r16,112(sp)
   834d4:	d9001615 	stw	r4,88(sp)
   834d8:	3023883a 	mov	r17,r6
   834dc:	2829883a 	mov	r20,r5
   834e0:	d9c01715 	stw	r7,92(sp)
   834e4:	dc802817 	ldw	r18,160(sp)
   834e8:	302b883a 	mov	r21,r6
   834ec:	40000a26 	beq	r8,zero,83518 <_dtoa_r+0x74>
   834f0:	20801117 	ldw	r2,68(r4)
   834f4:	400b883a 	mov	r5,r8
   834f8:	40800115 	stw	r2,4(r8)
   834fc:	20c01117 	ldw	r3,68(r4)
   83500:	00800044 	movi	r2,1
   83504:	10c4983a 	sll	r2,r2,r3
   83508:	40800215 	stw	r2,8(r8)
   8350c:	00866380 	call	86638 <_Bfree>
   83510:	d8c01617 	ldw	r3,88(sp)
   83514:	18001015 	stw	zero,64(r3)
   83518:	8800a316 	blt	r17,zero,837a8 <_dtoa_r+0x304>
   8351c:	90000015 	stw	zero,0(r18)
   83520:	a8dffc2c 	andhi	r3,r21,32752
   83524:	009ffc34 	movhi	r2,32752
   83528:	18809126 	beq	r3,r2,83770 <_dtoa_r+0x2cc>
   8352c:	000d883a 	mov	r6,zero
   83530:	000f883a 	mov	r7,zero
   83534:	a009883a 	mov	r4,r20
   83538:	a80b883a 	mov	r5,r21
   8353c:	dd001215 	stw	r20,72(sp)
   83540:	dd401315 	stw	r21,76(sp)
   83544:	0089ad00 	call	89ad0 <__nedf2>
   83548:	1000171e 	bne	r2,zero,835a8 <_dtoa_r+0x104>
   8354c:	d9802717 	ldw	r6,156(sp)
   83550:	00800044 	movi	r2,1
   83554:	30800015 	stw	r2,0(r6)
   83558:	d8802917 	ldw	r2,164(sp)
   8355c:	10029b26 	beq	r2,zero,83fcc <_dtoa_r+0xb28>
   83560:	d9002917 	ldw	r4,164(sp)
   83564:	00800274 	movhi	r2,9
   83568:	10b57d44 	addi	r2,r2,-10763
   8356c:	10ffffc4 	addi	r3,r2,-1
   83570:	20800015 	stw	r2,0(r4)
   83574:	1805883a 	mov	r2,r3
   83578:	dfc02517 	ldw	ra,148(sp)
   8357c:	df002417 	ldw	fp,144(sp)
   83580:	ddc02317 	ldw	r23,140(sp)
   83584:	dd802217 	ldw	r22,136(sp)
   83588:	dd402117 	ldw	r21,132(sp)
   8358c:	dd002017 	ldw	r20,128(sp)
   83590:	dcc01f17 	ldw	r19,124(sp)
   83594:	dc801e17 	ldw	r18,120(sp)
   83598:	dc401d17 	ldw	r17,116(sp)
   8359c:	dc001c17 	ldw	r16,112(sp)
   835a0:	dec02604 	addi	sp,sp,152
   835a4:	f800283a 	ret
   835a8:	d9001617 	ldw	r4,88(sp)
   835ac:	d9401217 	ldw	r5,72(sp)
   835b0:	d8800104 	addi	r2,sp,4
   835b4:	a80d883a 	mov	r6,r21
   835b8:	d9c00204 	addi	r7,sp,8
   835bc:	d8800015 	stw	r2,0(sp)
   835c0:	0086c740 	call	86c74 <__d2b>
   835c4:	d8800715 	stw	r2,28(sp)
   835c8:	a804d53a 	srli	r2,r21,20
   835cc:	1101ffcc 	andi	r4,r2,2047
   835d0:	20008626 	beq	r4,zero,837ec <_dtoa_r+0x348>
   835d4:	d8c01217 	ldw	r3,72(sp)
   835d8:	00800434 	movhi	r2,16
   835dc:	10bfffc4 	addi	r2,r2,-1
   835e0:	ddc00117 	ldw	r23,4(sp)
   835e4:	a884703a 	and	r2,r21,r2
   835e8:	1811883a 	mov	r8,r3
   835ec:	124ffc34 	orhi	r9,r2,16368
   835f0:	25bf0044 	addi	r22,r4,-1023
   835f4:	d8000815 	stw	zero,32(sp)
   835f8:	0005883a 	mov	r2,zero
   835fc:	00cffe34 	movhi	r3,16376
   83600:	480b883a 	mov	r5,r9
   83604:	4009883a 	mov	r4,r8
   83608:	180f883a 	mov	r7,r3
   8360c:	100d883a 	mov	r6,r2
   83610:	00893380 	call	89338 <__subdf3>
   83614:	0218dbf4 	movhi	r8,25455
   83618:	4210d844 	addi	r8,r8,17249
   8361c:	024ff4f4 	movhi	r9,16339
   83620:	4a61e9c4 	addi	r9,r9,-30809
   83624:	480f883a 	mov	r7,r9
   83628:	400d883a 	mov	r6,r8
   8362c:	180b883a 	mov	r5,r3
   83630:	1009883a 	mov	r4,r2
   83634:	008942c0 	call	8942c <__muldf3>
   83638:	0222d874 	movhi	r8,35681
   8363c:	42322cc4 	addi	r8,r8,-14157
   83640:	024ff1f4 	movhi	r9,16327
   83644:	4a628a04 	addi	r9,r9,-30168
   83648:	480f883a 	mov	r7,r9
   8364c:	400d883a 	mov	r6,r8
   83650:	180b883a 	mov	r5,r3
   83654:	1009883a 	mov	r4,r2
   83658:	00893b80 	call	893b8 <__adddf3>
   8365c:	b009883a 	mov	r4,r22
   83660:	1021883a 	mov	r16,r2
   83664:	1823883a 	mov	r17,r3
   83668:	0089cf00 	call	89cf0 <__floatsidf>
   8366c:	021427f4 	movhi	r8,20639
   83670:	421e7ec4 	addi	r8,r8,31227
   83674:	024ff4f4 	movhi	r9,16339
   83678:	4a5104c4 	addi	r9,r9,17427
   8367c:	480f883a 	mov	r7,r9
   83680:	400d883a 	mov	r6,r8
   83684:	180b883a 	mov	r5,r3
   83688:	1009883a 	mov	r4,r2
   8368c:	008942c0 	call	8942c <__muldf3>
   83690:	180f883a 	mov	r7,r3
   83694:	880b883a 	mov	r5,r17
   83698:	100d883a 	mov	r6,r2
   8369c:	8009883a 	mov	r4,r16
   836a0:	00893b80 	call	893b8 <__adddf3>
   836a4:	1009883a 	mov	r4,r2
   836a8:	180b883a 	mov	r5,r3
   836ac:	1021883a 	mov	r16,r2
   836b0:	1823883a 	mov	r17,r3
   836b4:	0089de80 	call	89de8 <__fixdfsi>
   836b8:	000d883a 	mov	r6,zero
   836bc:	000f883a 	mov	r7,zero
   836c0:	8009883a 	mov	r4,r16
   836c4:	880b883a 	mov	r5,r17
   836c8:	d8800d15 	stw	r2,52(sp)
   836cc:	0089c680 	call	89c68 <__ltdf2>
   836d0:	10031716 	blt	r2,zero,84330 <_dtoa_r+0xe8c>
   836d4:	d8c00d17 	ldw	r3,52(sp)
   836d8:	00800584 	movi	r2,22
   836dc:	10c1482e 	bgeu	r2,r3,83c00 <_dtoa_r+0x75c>
   836e0:	01000044 	movi	r4,1
   836e4:	d9000c15 	stw	r4,48(sp)
   836e8:	bd85c83a 	sub	r2,r23,r22
   836ec:	11bfffc4 	addi	r6,r2,-1
   836f0:	30030b16 	blt	r6,zero,84320 <_dtoa_r+0xe7c>
   836f4:	d9800a15 	stw	r6,40(sp)
   836f8:	d8001115 	stw	zero,68(sp)
   836fc:	d8c00d17 	ldw	r3,52(sp)
   83700:	1802ff16 	blt	r3,zero,84300 <_dtoa_r+0xe5c>
   83704:	d9000a17 	ldw	r4,40(sp)
   83708:	d8c00915 	stw	r3,36(sp)
   8370c:	d8001015 	stw	zero,64(sp)
   83710:	20c9883a 	add	r4,r4,r3
   83714:	d9000a15 	stw	r4,40(sp)
   83718:	d9001717 	ldw	r4,92(sp)
   8371c:	00800244 	movi	r2,9
   83720:	11004636 	bltu	r2,r4,8383c <_dtoa_r+0x398>
   83724:	00800144 	movi	r2,5
   83728:	11020416 	blt	r2,r4,83f3c <_dtoa_r+0xa98>
   8372c:	04400044 	movi	r17,1
   83730:	d8c01717 	ldw	r3,92(sp)
   83734:	00800144 	movi	r2,5
   83738:	10c1ed36 	bltu	r2,r3,83ef0 <_dtoa_r+0xa4c>
   8373c:	18c5883a 	add	r2,r3,r3
   83740:	1085883a 	add	r2,r2,r2
   83744:	00c00234 	movhi	r3,8
   83748:	18cdd604 	addi	r3,r3,14168
   8374c:	10c5883a 	add	r2,r2,r3
   83750:	11000017 	ldw	r4,0(r2)
   83754:	2000683a 	jmp	r4
   83758:	00083844 	movi	zero,8417
   8375c:	00083844 	movi	zero,8417
   83760:	00084244 	movi	zero,8457
   83764:	0008421c 	xori	zero,zero,8456
   83768:	00084260 	cmpeqi	zero,zero,8457
   8376c:	0008426c 	andhi	zero,zero,8457
   83770:	d9002717 	ldw	r4,156(sp)
   83774:	0089c3c4 	movi	r2,9999
   83778:	20800015 	stw	r2,0(r4)
   8377c:	a0001026 	beq	r20,zero,837c0 <_dtoa_r+0x31c>
   83780:	00c00274 	movhi	r3,9
   83784:	18f58904 	addi	r3,r3,-10716
   83788:	d9802917 	ldw	r6,164(sp)
   8378c:	303f7926 	beq	r6,zero,83574 <_dtoa_r+0xd0>
   83790:	188000c7 	ldb	r2,3(r3)
   83794:	190000c4 	addi	r4,r3,3
   83798:	1000101e 	bne	r2,zero,837dc <_dtoa_r+0x338>
   8379c:	d8802917 	ldw	r2,164(sp)
   837a0:	11000015 	stw	r4,0(r2)
   837a4:	003f7306 	br	83574 <_dtoa_r+0xd0>
   837a8:	00a00034 	movhi	r2,32768
   837ac:	10bfffc4 	addi	r2,r2,-1
   837b0:	00c00044 	movi	r3,1
   837b4:	88aa703a 	and	r21,r17,r2
   837b8:	90c00015 	stw	r3,0(r18)
   837bc:	003f5806 	br	83520 <_dtoa_r+0x7c>
   837c0:	00800434 	movhi	r2,16
   837c4:	10bfffc4 	addi	r2,r2,-1
   837c8:	a884703a 	and	r2,r21,r2
   837cc:	103fec1e 	bne	r2,zero,83780 <_dtoa_r+0x2dc>
   837d0:	00c00274 	movhi	r3,9
   837d4:	18f58604 	addi	r3,r3,-10728
   837d8:	003feb06 	br	83788 <_dtoa_r+0x2e4>
   837dc:	d8802917 	ldw	r2,164(sp)
   837e0:	19000204 	addi	r4,r3,8
   837e4:	11000015 	stw	r4,0(r2)
   837e8:	003f6206 	br	83574 <_dtoa_r+0xd0>
   837ec:	ddc00117 	ldw	r23,4(sp)
   837f0:	d8800217 	ldw	r2,8(sp)
   837f4:	01000804 	movi	r4,32
   837f8:	b8c10c84 	addi	r3,r23,1074
   837fc:	18a3883a 	add	r17,r3,r2
   83800:	2441b80e 	bge	r4,r17,83ee4 <_dtoa_r+0xa40>
   83804:	00c01004 	movi	r3,64
   83808:	1c47c83a 	sub	r3,r3,r17
   8380c:	88bff804 	addi	r2,r17,-32
   83810:	a8c6983a 	sll	r3,r21,r3
   83814:	a084d83a 	srl	r2,r20,r2
   83818:	1888b03a 	or	r4,r3,r2
   8381c:	0089ec00 	call	89ec0 <__floatunsidf>
   83820:	1011883a 	mov	r8,r2
   83824:	00bf8434 	movhi	r2,65040
   83828:	01000044 	movi	r4,1
   8382c:	10d3883a 	add	r9,r2,r3
   83830:	8dbef344 	addi	r22,r17,-1075
   83834:	d9000815 	stw	r4,32(sp)
   83838:	003f6f06 	br	835f8 <_dtoa_r+0x154>
   8383c:	d8001715 	stw	zero,92(sp)
   83840:	04400044 	movi	r17,1
   83844:	00bfffc4 	movi	r2,-1
   83848:	00c00044 	movi	r3,1
   8384c:	d8800e15 	stw	r2,56(sp)
   83850:	d8002615 	stw	zero,152(sp)
   83854:	d8800f15 	stw	r2,60(sp)
   83858:	d8c00b15 	stw	r3,44(sp)
   8385c:	1021883a 	mov	r16,r2
   83860:	d8801617 	ldw	r2,88(sp)
   83864:	10001115 	stw	zero,68(r2)
   83868:	d8801617 	ldw	r2,88(sp)
   8386c:	11401117 	ldw	r5,68(r2)
   83870:	1009883a 	mov	r4,r2
   83874:	0086bb80 	call	86bb8 <_Balloc>
   83878:	d8c01617 	ldw	r3,88(sp)
   8387c:	d8800515 	stw	r2,20(sp)
   83880:	18801015 	stw	r2,64(r3)
   83884:	00800384 	movi	r2,14
   83888:	14006836 	bltu	r2,r16,83a2c <_dtoa_r+0x588>
   8388c:	8805003a 	cmpeq	r2,r17,zero
   83890:	1000661e 	bne	r2,zero,83a2c <_dtoa_r+0x588>
   83894:	d9000d17 	ldw	r4,52(sp)
   83898:	0102300e 	bge	zero,r4,8415c <_dtoa_r+0xcb8>
   8389c:	208003cc 	andi	r2,r4,15
   838a0:	100490fa 	slli	r2,r2,3
   838a4:	2025d13a 	srai	r18,r4,4
   838a8:	00c00274 	movhi	r3,9
   838ac:	18f59b04 	addi	r3,r3,-10644
   838b0:	10c5883a 	add	r2,r2,r3
   838b4:	90c0040c 	andi	r3,r18,16
   838b8:	14000017 	ldw	r16,0(r2)
   838bc:	14400117 	ldw	r17,4(r2)
   838c0:	18036a1e 	bne	r3,zero,8466c <_dtoa_r+0x11c8>
   838c4:	05800084 	movi	r22,2
   838c8:	90001026 	beq	r18,zero,8390c <_dtoa_r+0x468>
   838cc:	04c00274 	movhi	r19,9
   838d0:	9cf5cd04 	addi	r19,r19,-10444
   838d4:	9080004c 	andi	r2,r18,1
   838d8:	1005003a 	cmpeq	r2,r2,zero
   838dc:	1000081e 	bne	r2,zero,83900 <_dtoa_r+0x45c>
   838e0:	99800017 	ldw	r6,0(r19)
   838e4:	99c00117 	ldw	r7,4(r19)
   838e8:	880b883a 	mov	r5,r17
   838ec:	8009883a 	mov	r4,r16
   838f0:	008942c0 	call	8942c <__muldf3>
   838f4:	1021883a 	mov	r16,r2
   838f8:	b5800044 	addi	r22,r22,1
   838fc:	1823883a 	mov	r17,r3
   83900:	9025d07a 	srai	r18,r18,1
   83904:	9cc00204 	addi	r19,r19,8
   83908:	903ff21e 	bne	r18,zero,838d4 <_dtoa_r+0x430>
   8390c:	a80b883a 	mov	r5,r21
   83910:	a009883a 	mov	r4,r20
   83914:	880f883a 	mov	r7,r17
   83918:	800d883a 	mov	r6,r16
   8391c:	00897f00 	call	897f0 <__divdf3>
   83920:	1029883a 	mov	r20,r2
   83924:	182b883a 	mov	r21,r3
   83928:	d8c00c17 	ldw	r3,48(sp)
   8392c:	1805003a 	cmpeq	r2,r3,zero
   83930:	1000081e 	bne	r2,zero,83954 <_dtoa_r+0x4b0>
   83934:	0005883a 	mov	r2,zero
   83938:	00cffc34 	movhi	r3,16368
   8393c:	180f883a 	mov	r7,r3
   83940:	a009883a 	mov	r4,r20
   83944:	a80b883a 	mov	r5,r21
   83948:	100d883a 	mov	r6,r2
   8394c:	0089c680 	call	89c68 <__ltdf2>
   83950:	1003fe16 	blt	r2,zero,8494c <_dtoa_r+0x14a8>
   83954:	b009883a 	mov	r4,r22
   83958:	0089cf00 	call	89cf0 <__floatsidf>
   8395c:	180b883a 	mov	r5,r3
   83960:	1009883a 	mov	r4,r2
   83964:	a00d883a 	mov	r6,r20
   83968:	a80f883a 	mov	r7,r21
   8396c:	008942c0 	call	8942c <__muldf3>
   83970:	0011883a 	mov	r8,zero
   83974:	02500734 	movhi	r9,16412
   83978:	1009883a 	mov	r4,r2
   8397c:	180b883a 	mov	r5,r3
   83980:	480f883a 	mov	r7,r9
   83984:	400d883a 	mov	r6,r8
   83988:	00893b80 	call	893b8 <__adddf3>
   8398c:	d9000f17 	ldw	r4,60(sp)
   83990:	102d883a 	mov	r22,r2
   83994:	00bf3034 	movhi	r2,64704
   83998:	18b9883a 	add	fp,r3,r2
   8399c:	e02f883a 	mov	r23,fp
   839a0:	20028f1e 	bne	r4,zero,843e0 <_dtoa_r+0xf3c>
   839a4:	0005883a 	mov	r2,zero
   839a8:	00d00534 	movhi	r3,16404
   839ac:	a009883a 	mov	r4,r20
   839b0:	a80b883a 	mov	r5,r21
   839b4:	180f883a 	mov	r7,r3
   839b8:	100d883a 	mov	r6,r2
   839bc:	00893380 	call	89338 <__subdf3>
   839c0:	1009883a 	mov	r4,r2
   839c4:	e00f883a 	mov	r7,fp
   839c8:	180b883a 	mov	r5,r3
   839cc:	b00d883a 	mov	r6,r22
   839d0:	1025883a 	mov	r18,r2
   839d4:	1827883a 	mov	r19,r3
   839d8:	0089b580 	call	89b58 <__gtdf2>
   839dc:	00834f16 	blt	zero,r2,8471c <_dtoa_r+0x1278>
   839e0:	e0e0003c 	xorhi	r3,fp,32768
   839e4:	9009883a 	mov	r4,r18
   839e8:	980b883a 	mov	r5,r19
   839ec:	180f883a 	mov	r7,r3
   839f0:	b00d883a 	mov	r6,r22
   839f4:	0089c680 	call	89c68 <__ltdf2>
   839f8:	1000080e 	bge	r2,zero,83a1c <_dtoa_r+0x578>
   839fc:	0027883a 	mov	r19,zero
   83a00:	0025883a 	mov	r18,zero
   83a04:	d8802617 	ldw	r2,152(sp)
   83a08:	df000517 	ldw	fp,20(sp)
   83a0c:	d8000615 	stw	zero,24(sp)
   83a10:	0084303a 	nor	r2,zero,r2
   83a14:	d8800d15 	stw	r2,52(sp)
   83a18:	00019b06 	br	84088 <_dtoa_r+0xbe4>
   83a1c:	d9801217 	ldw	r6,72(sp)
   83a20:	d8801317 	ldw	r2,76(sp)
   83a24:	3029883a 	mov	r20,r6
   83a28:	102b883a 	mov	r21,r2
   83a2c:	d8c00217 	ldw	r3,8(sp)
   83a30:	18008516 	blt	r3,zero,83c48 <_dtoa_r+0x7a4>
   83a34:	d9000d17 	ldw	r4,52(sp)
   83a38:	00800384 	movi	r2,14
   83a3c:	11008216 	blt	r2,r4,83c48 <_dtoa_r+0x7a4>
   83a40:	200490fa 	slli	r2,r4,3
   83a44:	d9802617 	ldw	r6,152(sp)
   83a48:	00c00274 	movhi	r3,9
   83a4c:	18f59b04 	addi	r3,r3,-10644
   83a50:	10c5883a 	add	r2,r2,r3
   83a54:	14800017 	ldw	r18,0(r2)
   83a58:	14c00117 	ldw	r19,4(r2)
   83a5c:	30031e16 	blt	r6,zero,846d8 <_dtoa_r+0x1234>
   83a60:	d9000517 	ldw	r4,20(sp)
   83a64:	d8c00f17 	ldw	r3,60(sp)
   83a68:	a823883a 	mov	r17,r21
   83a6c:	a021883a 	mov	r16,r20
   83a70:	192b883a 	add	r21,r3,r4
   83a74:	2039883a 	mov	fp,r4
   83a78:	00000f06 	br	83ab8 <_dtoa_r+0x614>
   83a7c:	0005883a 	mov	r2,zero
   83a80:	00d00934 	movhi	r3,16420
   83a84:	5009883a 	mov	r4,r10
   83a88:	580b883a 	mov	r5,r11
   83a8c:	180f883a 	mov	r7,r3
   83a90:	100d883a 	mov	r6,r2
   83a94:	008942c0 	call	8942c <__muldf3>
   83a98:	180b883a 	mov	r5,r3
   83a9c:	000d883a 	mov	r6,zero
   83aa0:	000f883a 	mov	r7,zero
   83aa4:	1009883a 	mov	r4,r2
   83aa8:	1021883a 	mov	r16,r2
   83aac:	1823883a 	mov	r17,r3
   83ab0:	0089ad00 	call	89ad0 <__nedf2>
   83ab4:	10004526 	beq	r2,zero,83bcc <_dtoa_r+0x728>
   83ab8:	900d883a 	mov	r6,r18
   83abc:	980f883a 	mov	r7,r19
   83ac0:	8009883a 	mov	r4,r16
   83ac4:	880b883a 	mov	r5,r17
   83ac8:	00897f00 	call	897f0 <__divdf3>
   83acc:	180b883a 	mov	r5,r3
   83ad0:	1009883a 	mov	r4,r2
   83ad4:	0089de80 	call	89de8 <__fixdfsi>
   83ad8:	1009883a 	mov	r4,r2
   83adc:	1029883a 	mov	r20,r2
   83ae0:	0089cf00 	call	89cf0 <__floatsidf>
   83ae4:	180f883a 	mov	r7,r3
   83ae8:	9009883a 	mov	r4,r18
   83aec:	980b883a 	mov	r5,r19
   83af0:	100d883a 	mov	r6,r2
   83af4:	008942c0 	call	8942c <__muldf3>
   83af8:	180f883a 	mov	r7,r3
   83afc:	880b883a 	mov	r5,r17
   83b00:	8009883a 	mov	r4,r16
   83b04:	100d883a 	mov	r6,r2
   83b08:	00893380 	call	89338 <__subdf3>
   83b0c:	1015883a 	mov	r10,r2
   83b10:	a0800c04 	addi	r2,r20,48
   83b14:	e0800005 	stb	r2,0(fp)
   83b18:	e7000044 	addi	fp,fp,1
   83b1c:	1817883a 	mov	r11,r3
   83b20:	e57fd61e 	bne	fp,r21,83a7c <_dtoa_r+0x5d8>
   83b24:	500d883a 	mov	r6,r10
   83b28:	180f883a 	mov	r7,r3
   83b2c:	5009883a 	mov	r4,r10
   83b30:	180b883a 	mov	r5,r3
   83b34:	00893b80 	call	893b8 <__adddf3>
   83b38:	100d883a 	mov	r6,r2
   83b3c:	9009883a 	mov	r4,r18
   83b40:	980b883a 	mov	r5,r19
   83b44:	180f883a 	mov	r7,r3
   83b48:	1021883a 	mov	r16,r2
   83b4c:	1823883a 	mov	r17,r3
   83b50:	0089c680 	call	89c68 <__ltdf2>
   83b54:	10000816 	blt	r2,zero,83b78 <_dtoa_r+0x6d4>
   83b58:	980b883a 	mov	r5,r19
   83b5c:	800d883a 	mov	r6,r16
   83b60:	880f883a 	mov	r7,r17
   83b64:	9009883a 	mov	r4,r18
   83b68:	0089a480 	call	89a48 <__eqdf2>
   83b6c:	1000171e 	bne	r2,zero,83bcc <_dtoa_r+0x728>
   83b70:	a080004c 	andi	r2,r20,1
   83b74:	10001526 	beq	r2,zero,83bcc <_dtoa_r+0x728>
   83b78:	d8800d17 	ldw	r2,52(sp)
   83b7c:	d8800415 	stw	r2,16(sp)
   83b80:	e009883a 	mov	r4,fp
   83b84:	213fffc4 	addi	r4,r4,-1
   83b88:	20c00007 	ldb	r3,0(r4)
   83b8c:	00800e44 	movi	r2,57
   83b90:	1880081e 	bne	r3,r2,83bb4 <_dtoa_r+0x710>
   83b94:	d8800517 	ldw	r2,20(sp)
   83b98:	113ffa1e 	bne	r2,r4,83b84 <_dtoa_r+0x6e0>
   83b9c:	d8c00417 	ldw	r3,16(sp)
   83ba0:	d9800517 	ldw	r6,20(sp)
   83ba4:	00800c04 	movi	r2,48
   83ba8:	18c00044 	addi	r3,r3,1
   83bac:	d8c00415 	stw	r3,16(sp)
   83bb0:	30800005 	stb	r2,0(r6)
   83bb4:	20800003 	ldbu	r2,0(r4)
   83bb8:	d8c00417 	ldw	r3,16(sp)
   83bbc:	27000044 	addi	fp,r4,1
   83bc0:	10800044 	addi	r2,r2,1
   83bc4:	d8c00d15 	stw	r3,52(sp)
   83bc8:	20800005 	stb	r2,0(r4)
   83bcc:	d9001617 	ldw	r4,88(sp)
   83bd0:	d9400717 	ldw	r5,28(sp)
   83bd4:	00866380 	call	86638 <_Bfree>
   83bd8:	e0000005 	stb	zero,0(fp)
   83bdc:	d9800d17 	ldw	r6,52(sp)
   83be0:	d8c02717 	ldw	r3,156(sp)
   83be4:	d9002917 	ldw	r4,164(sp)
   83be8:	30800044 	addi	r2,r6,1
   83bec:	18800015 	stw	r2,0(r3)
   83bf0:	20029c26 	beq	r4,zero,84664 <_dtoa_r+0x11c0>
   83bf4:	d8c00517 	ldw	r3,20(sp)
   83bf8:	27000015 	stw	fp,0(r4)
   83bfc:	003e5d06 	br	83574 <_dtoa_r+0xd0>
   83c00:	d9800d17 	ldw	r6,52(sp)
   83c04:	00c00274 	movhi	r3,9
   83c08:	18f59b04 	addi	r3,r3,-10644
   83c0c:	d9001217 	ldw	r4,72(sp)
   83c10:	300490fa 	slli	r2,r6,3
   83c14:	d9401317 	ldw	r5,76(sp)
   83c18:	10c5883a 	add	r2,r2,r3
   83c1c:	12000017 	ldw	r8,0(r2)
   83c20:	12400117 	ldw	r9,4(r2)
   83c24:	400d883a 	mov	r6,r8
   83c28:	480f883a 	mov	r7,r9
   83c2c:	0089c680 	call	89c68 <__ltdf2>
   83c30:	1000030e 	bge	r2,zero,83c40 <_dtoa_r+0x79c>
   83c34:	d8800d17 	ldw	r2,52(sp)
   83c38:	10bfffc4 	addi	r2,r2,-1
   83c3c:	d8800d15 	stw	r2,52(sp)
   83c40:	d8000c15 	stw	zero,48(sp)
   83c44:	003ea806 	br	836e8 <_dtoa_r+0x244>
   83c48:	d9000b17 	ldw	r4,44(sp)
   83c4c:	202cc03a 	cmpne	r22,r4,zero
   83c50:	b000c71e 	bne	r22,zero,83f70 <_dtoa_r+0xacc>
   83c54:	dc001117 	ldw	r16,68(sp)
   83c58:	dc801017 	ldw	r18,64(sp)
   83c5c:	0027883a 	mov	r19,zero
   83c60:	04000b0e 	bge	zero,r16,83c90 <_dtoa_r+0x7ec>
   83c64:	d8c00a17 	ldw	r3,40(sp)
   83c68:	00c0090e 	bge	zero,r3,83c90 <_dtoa_r+0x7ec>
   83c6c:	8005883a 	mov	r2,r16
   83c70:	1c011316 	blt	r3,r16,840c0 <_dtoa_r+0xc1c>
   83c74:	d9000a17 	ldw	r4,40(sp)
   83c78:	d9801117 	ldw	r6,68(sp)
   83c7c:	80a1c83a 	sub	r16,r16,r2
   83c80:	2089c83a 	sub	r4,r4,r2
   83c84:	308dc83a 	sub	r6,r6,r2
   83c88:	d9000a15 	stw	r4,40(sp)
   83c8c:	d9801115 	stw	r6,68(sp)
   83c90:	d8801017 	ldw	r2,64(sp)
   83c94:	0080150e 	bge	zero,r2,83cec <_dtoa_r+0x848>
   83c98:	d8c00b17 	ldw	r3,44(sp)
   83c9c:	1805003a 	cmpeq	r2,r3,zero
   83ca0:	1001c91e 	bne	r2,zero,843c8 <_dtoa_r+0xf24>
   83ca4:	04800e0e 	bge	zero,r18,83ce0 <_dtoa_r+0x83c>
   83ca8:	d9001617 	ldw	r4,88(sp)
   83cac:	980b883a 	mov	r5,r19
   83cb0:	900d883a 	mov	r6,r18
   83cb4:	00873ec0 	call	873ec <__pow5mult>
   83cb8:	d9001617 	ldw	r4,88(sp)
   83cbc:	d9800717 	ldw	r6,28(sp)
   83cc0:	100b883a 	mov	r5,r2
   83cc4:	1027883a 	mov	r19,r2
   83cc8:	00870c80 	call	870c8 <__multiply>
   83ccc:	d9001617 	ldw	r4,88(sp)
   83cd0:	d9400717 	ldw	r5,28(sp)
   83cd4:	1023883a 	mov	r17,r2
   83cd8:	00866380 	call	86638 <_Bfree>
   83cdc:	dc400715 	stw	r17,28(sp)
   83ce0:	d9001017 	ldw	r4,64(sp)
   83ce4:	248dc83a 	sub	r6,r4,r18
   83ce8:	30010e1e 	bne	r6,zero,84124 <_dtoa_r+0xc80>
   83cec:	d9001617 	ldw	r4,88(sp)
   83cf0:	04400044 	movi	r17,1
   83cf4:	880b883a 	mov	r5,r17
   83cf8:	00872b00 	call	872b0 <__i2b>
   83cfc:	d9800917 	ldw	r6,36(sp)
   83d00:	1025883a 	mov	r18,r2
   83d04:	0180040e 	bge	zero,r6,83d18 <_dtoa_r+0x874>
   83d08:	d9001617 	ldw	r4,88(sp)
   83d0c:	100b883a 	mov	r5,r2
   83d10:	00873ec0 	call	873ec <__pow5mult>
   83d14:	1025883a 	mov	r18,r2
   83d18:	d8801717 	ldw	r2,92(sp)
   83d1c:	8880f30e 	bge	r17,r2,840ec <_dtoa_r+0xc48>
   83d20:	0023883a 	mov	r17,zero
   83d24:	d9800917 	ldw	r6,36(sp)
   83d28:	30019e1e 	bne	r6,zero,843a4 <_dtoa_r+0xf00>
   83d2c:	00c00044 	movi	r3,1
   83d30:	d9000a17 	ldw	r4,40(sp)
   83d34:	20c5883a 	add	r2,r4,r3
   83d38:	10c007cc 	andi	r3,r2,31
   83d3c:	1800841e 	bne	r3,zero,83f50 <_dtoa_r+0xaac>
   83d40:	00800704 	movi	r2,28
   83d44:	d9000a17 	ldw	r4,40(sp)
   83d48:	d9801117 	ldw	r6,68(sp)
   83d4c:	80a1883a 	add	r16,r16,r2
   83d50:	2089883a 	add	r4,r4,r2
   83d54:	308d883a 	add	r6,r6,r2
   83d58:	d9000a15 	stw	r4,40(sp)
   83d5c:	d9801115 	stw	r6,68(sp)
   83d60:	d8801117 	ldw	r2,68(sp)
   83d64:	0080050e 	bge	zero,r2,83d7c <_dtoa_r+0x8d8>
   83d68:	d9400717 	ldw	r5,28(sp)
   83d6c:	d9001617 	ldw	r4,88(sp)
   83d70:	100d883a 	mov	r6,r2
   83d74:	0086f7c0 	call	86f7c <__lshift>
   83d78:	d8800715 	stw	r2,28(sp)
   83d7c:	d8c00a17 	ldw	r3,40(sp)
   83d80:	00c0050e 	bge	zero,r3,83d98 <_dtoa_r+0x8f4>
   83d84:	d9001617 	ldw	r4,88(sp)
   83d88:	900b883a 	mov	r5,r18
   83d8c:	180d883a 	mov	r6,r3
   83d90:	0086f7c0 	call	86f7c <__lshift>
   83d94:	1025883a 	mov	r18,r2
   83d98:	d9000c17 	ldw	r4,48(sp)
   83d9c:	2005003a 	cmpeq	r2,r4,zero
   83da0:	10016f26 	beq	r2,zero,84360 <_dtoa_r+0xebc>
   83da4:	d9000f17 	ldw	r4,60(sp)
   83da8:	0102170e 	bge	zero,r4,84608 <_dtoa_r+0x1164>
   83dac:	d9800b17 	ldw	r6,44(sp)
   83db0:	3005003a 	cmpeq	r2,r6,zero
   83db4:	1000881e 	bne	r2,zero,83fd8 <_dtoa_r+0xb34>
   83db8:	0400050e 	bge	zero,r16,83dd0 <_dtoa_r+0x92c>
   83dbc:	d9001617 	ldw	r4,88(sp)
   83dc0:	980b883a 	mov	r5,r19
   83dc4:	800d883a 	mov	r6,r16
   83dc8:	0086f7c0 	call	86f7c <__lshift>
   83dcc:	1027883a 	mov	r19,r2
   83dd0:	8804c03a 	cmpne	r2,r17,zero
   83dd4:	1002541e 	bne	r2,zero,84728 <_dtoa_r+0x1284>
   83dd8:	980b883a 	mov	r5,r19
   83ddc:	dd800517 	ldw	r22,20(sp)
   83de0:	dcc00615 	stw	r19,24(sp)
   83de4:	a700004c 	andi	fp,r20,1
   83de8:	2827883a 	mov	r19,r5
   83dec:	d9000717 	ldw	r4,28(sp)
   83df0:	900b883a 	mov	r5,r18
   83df4:	008328c0 	call	8328c <quorem>
   83df8:	d9000717 	ldw	r4,28(sp)
   83dfc:	d9400617 	ldw	r5,24(sp)
   83e00:	1023883a 	mov	r17,r2
   83e04:	8dc00c04 	addi	r23,r17,48
   83e08:	00867940 	call	86794 <__mcmp>
   83e0c:	d9001617 	ldw	r4,88(sp)
   83e10:	900b883a 	mov	r5,r18
   83e14:	980d883a 	mov	r6,r19
   83e18:	1029883a 	mov	r20,r2
   83e1c:	0086df00 	call	86df0 <__mdiff>
   83e20:	102b883a 	mov	r21,r2
   83e24:	10800317 	ldw	r2,12(r2)
   83e28:	1001281e 	bne	r2,zero,842cc <_dtoa_r+0xe28>
   83e2c:	d9000717 	ldw	r4,28(sp)
   83e30:	a80b883a 	mov	r5,r21
   83e34:	00867940 	call	86794 <__mcmp>
   83e38:	d9001617 	ldw	r4,88(sp)
   83e3c:	1021883a 	mov	r16,r2
   83e40:	a80b883a 	mov	r5,r21
   83e44:	00866380 	call	86638 <_Bfree>
   83e48:	8000041e 	bne	r16,zero,83e5c <_dtoa_r+0x9b8>
   83e4c:	d8801717 	ldw	r2,92(sp)
   83e50:	1000021e 	bne	r2,zero,83e5c <_dtoa_r+0x9b8>
   83e54:	e004c03a 	cmpne	r2,fp,zero
   83e58:	10011726 	beq	r2,zero,842b8 <_dtoa_r+0xe14>
   83e5c:	a0010616 	blt	r20,zero,84278 <_dtoa_r+0xdd4>
   83e60:	a000041e 	bne	r20,zero,83e74 <_dtoa_r+0x9d0>
   83e64:	d8c01717 	ldw	r3,92(sp)
   83e68:	1800021e 	bne	r3,zero,83e74 <_dtoa_r+0x9d0>
   83e6c:	e004c03a 	cmpne	r2,fp,zero
   83e70:	10010126 	beq	r2,zero,84278 <_dtoa_r+0xdd4>
   83e74:	04023d16 	blt	zero,r16,8476c <_dtoa_r+0x12c8>
   83e78:	b5c00005 	stb	r23,0(r22)
   83e7c:	d9800517 	ldw	r6,20(sp)
   83e80:	d9000f17 	ldw	r4,60(sp)
   83e84:	b5800044 	addi	r22,r22,1
   83e88:	3105883a 	add	r2,r6,r4
   83e8c:	b0806526 	beq	r22,r2,84024 <_dtoa_r+0xb80>
   83e90:	d9400717 	ldw	r5,28(sp)
   83e94:	d9001617 	ldw	r4,88(sp)
   83e98:	01800284 	movi	r6,10
   83e9c:	000f883a 	mov	r7,zero
   83ea0:	00872ec0 	call	872ec <__multadd>
   83ea4:	d8800715 	stw	r2,28(sp)
   83ea8:	d8800617 	ldw	r2,24(sp)
   83eac:	14c10c26 	beq	r2,r19,842e0 <_dtoa_r+0xe3c>
   83eb0:	d9400617 	ldw	r5,24(sp)
   83eb4:	d9001617 	ldw	r4,88(sp)
   83eb8:	01800284 	movi	r6,10
   83ebc:	000f883a 	mov	r7,zero
   83ec0:	00872ec0 	call	872ec <__multadd>
   83ec4:	d9001617 	ldw	r4,88(sp)
   83ec8:	980b883a 	mov	r5,r19
   83ecc:	01800284 	movi	r6,10
   83ed0:	000f883a 	mov	r7,zero
   83ed4:	d8800615 	stw	r2,24(sp)
   83ed8:	00872ec0 	call	872ec <__multadd>
   83edc:	1027883a 	mov	r19,r2
   83ee0:	003fc206 	br	83dec <_dtoa_r+0x948>
   83ee4:	2445c83a 	sub	r2,r4,r17
   83ee8:	a088983a 	sll	r4,r20,r2
   83eec:	003e4b06 	br	8381c <_dtoa_r+0x378>
   83ef0:	01bfffc4 	movi	r6,-1
   83ef4:	00800044 	movi	r2,1
   83ef8:	d9800e15 	stw	r6,56(sp)
   83efc:	d9800f15 	stw	r6,60(sp)
   83f00:	d8800b15 	stw	r2,44(sp)
   83f04:	d8c01617 	ldw	r3,88(sp)
   83f08:	008005c4 	movi	r2,23
   83f0c:	18001115 	stw	zero,68(r3)
   83f10:	1580082e 	bgeu	r2,r22,83f34 <_dtoa_r+0xa90>
   83f14:	00c00104 	movi	r3,4
   83f18:	0009883a 	mov	r4,zero
   83f1c:	18c7883a 	add	r3,r3,r3
   83f20:	18800504 	addi	r2,r3,20
   83f24:	21000044 	addi	r4,r4,1
   83f28:	b0bffc2e 	bgeu	r22,r2,83f1c <_dtoa_r+0xa78>
   83f2c:	d9801617 	ldw	r6,88(sp)
   83f30:	31001115 	stw	r4,68(r6)
   83f34:	dc000f17 	ldw	r16,60(sp)
   83f38:	003e4b06 	br	83868 <_dtoa_r+0x3c4>
   83f3c:	d9801717 	ldw	r6,92(sp)
   83f40:	0023883a 	mov	r17,zero
   83f44:	31bfff04 	addi	r6,r6,-4
   83f48:	d9801715 	stw	r6,92(sp)
   83f4c:	003df806 	br	83730 <_dtoa_r+0x28c>
   83f50:	00800804 	movi	r2,32
   83f54:	10c9c83a 	sub	r4,r2,r3
   83f58:	00c00104 	movi	r3,4
   83f5c:	19005a16 	blt	r3,r4,840c8 <_dtoa_r+0xc24>
   83f60:	008000c4 	movi	r2,3
   83f64:	113f7e16 	blt	r2,r4,83d60 <_dtoa_r+0x8bc>
   83f68:	20800704 	addi	r2,r4,28
   83f6c:	003f7506 	br	83d44 <_dtoa_r+0x8a0>
   83f70:	d9801717 	ldw	r6,92(sp)
   83f74:	00800044 	movi	r2,1
   83f78:	1180a10e 	bge	r2,r6,84200 <_dtoa_r+0xd5c>
   83f7c:	d9800f17 	ldw	r6,60(sp)
   83f80:	d8c01017 	ldw	r3,64(sp)
   83f84:	30bfffc4 	addi	r2,r6,-1
   83f88:	1881c616 	blt	r3,r2,846a4 <_dtoa_r+0x1200>
   83f8c:	18a5c83a 	sub	r18,r3,r2
   83f90:	d8800f17 	ldw	r2,60(sp)
   83f94:	10026216 	blt	r2,zero,84920 <_dtoa_r+0x147c>
   83f98:	dc001117 	ldw	r16,68(sp)
   83f9c:	1007883a 	mov	r3,r2
   83fa0:	d9800a17 	ldw	r6,40(sp)
   83fa4:	d8801117 	ldw	r2,68(sp)
   83fa8:	d9001617 	ldw	r4,88(sp)
   83fac:	30cd883a 	add	r6,r6,r3
   83fb0:	10c5883a 	add	r2,r2,r3
   83fb4:	01400044 	movi	r5,1
   83fb8:	d9800a15 	stw	r6,40(sp)
   83fbc:	d8801115 	stw	r2,68(sp)
   83fc0:	00872b00 	call	872b0 <__i2b>
   83fc4:	1027883a 	mov	r19,r2
   83fc8:	003f2506 	br	83c60 <_dtoa_r+0x7bc>
   83fcc:	00c00274 	movhi	r3,9
   83fd0:	18f57d04 	addi	r3,r3,-10764
   83fd4:	003d6706 	br	83574 <_dtoa_r+0xd0>
   83fd8:	dd800517 	ldw	r22,20(sp)
   83fdc:	04000044 	movi	r16,1
   83fe0:	00000706 	br	84000 <_dtoa_r+0xb5c>
   83fe4:	d9400717 	ldw	r5,28(sp)
   83fe8:	d9001617 	ldw	r4,88(sp)
   83fec:	01800284 	movi	r6,10
   83ff0:	000f883a 	mov	r7,zero
   83ff4:	00872ec0 	call	872ec <__multadd>
   83ff8:	d8800715 	stw	r2,28(sp)
   83ffc:	84000044 	addi	r16,r16,1
   84000:	d9000717 	ldw	r4,28(sp)
   84004:	900b883a 	mov	r5,r18
   84008:	008328c0 	call	8328c <quorem>
   8400c:	15c00c04 	addi	r23,r2,48
   84010:	b5c00005 	stb	r23,0(r22)
   84014:	d8c00f17 	ldw	r3,60(sp)
   84018:	b5800044 	addi	r22,r22,1
   8401c:	80fff116 	blt	r16,r3,83fe4 <_dtoa_r+0xb40>
   84020:	d8000615 	stw	zero,24(sp)
   84024:	d9400717 	ldw	r5,28(sp)
   84028:	d9001617 	ldw	r4,88(sp)
   8402c:	01800044 	movi	r6,1
   84030:	0086f7c0 	call	86f7c <__lshift>
   84034:	1009883a 	mov	r4,r2
   84038:	900b883a 	mov	r5,r18
   8403c:	d8800715 	stw	r2,28(sp)
   84040:	00867940 	call	86794 <__mcmp>
   84044:	00803c0e 	bge	zero,r2,84138 <_dtoa_r+0xc94>
   84048:	b009883a 	mov	r4,r22
   8404c:	213fffc4 	addi	r4,r4,-1
   84050:	21400003 	ldbu	r5,0(r4)
   84054:	00800e44 	movi	r2,57
   84058:	28c03fcc 	andi	r3,r5,255
   8405c:	18c0201c 	xori	r3,r3,128
   84060:	18ffe004 	addi	r3,r3,-128
   84064:	1881981e 	bne	r3,r2,846c8 <_dtoa_r+0x1224>
   84068:	d9800517 	ldw	r6,20(sp)
   8406c:	21bff71e 	bne	r4,r6,8404c <_dtoa_r+0xba8>
   84070:	d8800d17 	ldw	r2,52(sp)
   84074:	37000044 	addi	fp,r6,1
   84078:	10800044 	addi	r2,r2,1
   8407c:	d8800d15 	stw	r2,52(sp)
   84080:	00800c44 	movi	r2,49
   84084:	30800005 	stb	r2,0(r6)
   84088:	d9001617 	ldw	r4,88(sp)
   8408c:	900b883a 	mov	r5,r18
   84090:	00866380 	call	86638 <_Bfree>
   84094:	983ecd26 	beq	r19,zero,83bcc <_dtoa_r+0x728>
   84098:	d8c00617 	ldw	r3,24(sp)
   8409c:	18000426 	beq	r3,zero,840b0 <_dtoa_r+0xc0c>
   840a0:	1cc00326 	beq	r3,r19,840b0 <_dtoa_r+0xc0c>
   840a4:	d9001617 	ldw	r4,88(sp)
   840a8:	180b883a 	mov	r5,r3
   840ac:	00866380 	call	86638 <_Bfree>
   840b0:	d9001617 	ldw	r4,88(sp)
   840b4:	980b883a 	mov	r5,r19
   840b8:	00866380 	call	86638 <_Bfree>
   840bc:	003ec306 	br	83bcc <_dtoa_r+0x728>
   840c0:	1805883a 	mov	r2,r3
   840c4:	003eeb06 	br	83c74 <_dtoa_r+0x7d0>
   840c8:	d9800a17 	ldw	r6,40(sp)
   840cc:	d8c01117 	ldw	r3,68(sp)
   840d0:	20bfff04 	addi	r2,r4,-4
   840d4:	308d883a 	add	r6,r6,r2
   840d8:	1887883a 	add	r3,r3,r2
   840dc:	80a1883a 	add	r16,r16,r2
   840e0:	d9800a15 	stw	r6,40(sp)
   840e4:	d8c01115 	stw	r3,68(sp)
   840e8:	003f1d06 	br	83d60 <_dtoa_r+0x8bc>
   840ec:	a03f0c1e 	bne	r20,zero,83d20 <_dtoa_r+0x87c>
   840f0:	00800434 	movhi	r2,16
   840f4:	10bfffc4 	addi	r2,r2,-1
   840f8:	a884703a 	and	r2,r21,r2
   840fc:	103f081e 	bne	r2,zero,83d20 <_dtoa_r+0x87c>
   84100:	a89ffc2c 	andhi	r2,r21,32752
   84104:	103f0626 	beq	r2,zero,83d20 <_dtoa_r+0x87c>
   84108:	d8c01117 	ldw	r3,68(sp)
   8410c:	d9000a17 	ldw	r4,40(sp)
   84110:	18c00044 	addi	r3,r3,1
   84114:	21000044 	addi	r4,r4,1
   84118:	d8c01115 	stw	r3,68(sp)
   8411c:	d9000a15 	stw	r4,40(sp)
   84120:	003f0006 	br	83d24 <_dtoa_r+0x880>
   84124:	d9400717 	ldw	r5,28(sp)
   84128:	d9001617 	ldw	r4,88(sp)
   8412c:	00873ec0 	call	873ec <__pow5mult>
   84130:	d8800715 	stw	r2,28(sp)
   84134:	003eed06 	br	83cec <_dtoa_r+0x848>
   84138:	1000021e 	bne	r2,zero,84144 <_dtoa_r+0xca0>
   8413c:	b880004c 	andi	r2,r23,1
   84140:	103fc11e 	bne	r2,zero,84048 <_dtoa_r+0xba4>
   84144:	b5bfffc4 	addi	r22,r22,-1
   84148:	b0c00007 	ldb	r3,0(r22)
   8414c:	00800c04 	movi	r2,48
   84150:	18bffc26 	beq	r3,r2,84144 <_dtoa_r+0xca0>
   84154:	b7000044 	addi	fp,r22,1
   84158:	003fcb06 	br	84088 <_dtoa_r+0xbe4>
   8415c:	d9800d17 	ldw	r6,52(sp)
   84160:	018fc83a 	sub	r7,zero,r6
   84164:	3801f726 	beq	r7,zero,84944 <_dtoa_r+0x14a0>
   84168:	398003cc 	andi	r6,r7,15
   8416c:	300c90fa 	slli	r6,r6,3
   84170:	01400274 	movhi	r5,9
   84174:	29759b04 	addi	r5,r5,-10644
   84178:	d9001217 	ldw	r4,72(sp)
   8417c:	314d883a 	add	r6,r6,r5
   84180:	30c00117 	ldw	r3,4(r6)
   84184:	30800017 	ldw	r2,0(r6)
   84188:	d9401317 	ldw	r5,76(sp)
   8418c:	3821d13a 	srai	r16,r7,4
   84190:	100d883a 	mov	r6,r2
   84194:	180f883a 	mov	r7,r3
   84198:	008942c0 	call	8942c <__muldf3>
   8419c:	1011883a 	mov	r8,r2
   841a0:	1813883a 	mov	r9,r3
   841a4:	1029883a 	mov	r20,r2
   841a8:	182b883a 	mov	r21,r3
   841ac:	8001e526 	beq	r16,zero,84944 <_dtoa_r+0x14a0>
   841b0:	05800084 	movi	r22,2
   841b4:	04400274 	movhi	r17,9
   841b8:	8c75cd04 	addi	r17,r17,-10444
   841bc:	8080004c 	andi	r2,r16,1
   841c0:	1005003a 	cmpeq	r2,r2,zero
   841c4:	1000081e 	bne	r2,zero,841e8 <_dtoa_r+0xd44>
   841c8:	89800017 	ldw	r6,0(r17)
   841cc:	89c00117 	ldw	r7,4(r17)
   841d0:	480b883a 	mov	r5,r9
   841d4:	4009883a 	mov	r4,r8
   841d8:	008942c0 	call	8942c <__muldf3>
   841dc:	1011883a 	mov	r8,r2
   841e0:	b5800044 	addi	r22,r22,1
   841e4:	1813883a 	mov	r9,r3
   841e8:	8021d07a 	srai	r16,r16,1
   841ec:	8c400204 	addi	r17,r17,8
   841f0:	803ff21e 	bne	r16,zero,841bc <_dtoa_r+0xd18>
   841f4:	4029883a 	mov	r20,r8
   841f8:	482b883a 	mov	r21,r9
   841fc:	003dca06 	br	83928 <_dtoa_r+0x484>
   84200:	d9000817 	ldw	r4,32(sp)
   84204:	2005003a 	cmpeq	r2,r4,zero
   84208:	1001f61e 	bne	r2,zero,849e4 <_dtoa_r+0x1540>
   8420c:	dc001117 	ldw	r16,68(sp)
   84210:	dc801017 	ldw	r18,64(sp)
   84214:	18c10cc4 	addi	r3,r3,1075
   84218:	003f6106 	br	83fa0 <_dtoa_r+0xafc>
   8421c:	d8000b15 	stw	zero,44(sp)
   84220:	d9802617 	ldw	r6,152(sp)
   84224:	d8c00d17 	ldw	r3,52(sp)
   84228:	30800044 	addi	r2,r6,1
   8422c:	18ad883a 	add	r22,r3,r2
   84230:	b13fffc4 	addi	r4,r22,-1
   84234:	d9000e15 	stw	r4,56(sp)
   84238:	0581f60e 	bge	zero,r22,84a14 <_dtoa_r+0x1570>
   8423c:	dd800f15 	stw	r22,60(sp)
   84240:	003f3006 	br	83f04 <_dtoa_r+0xa60>
   84244:	d8000b15 	stw	zero,44(sp)
   84248:	d9002617 	ldw	r4,152(sp)
   8424c:	0101eb0e 	bge	zero,r4,849fc <_dtoa_r+0x1558>
   84250:	202d883a 	mov	r22,r4
   84254:	d9000e15 	stw	r4,56(sp)
   84258:	d9000f15 	stw	r4,60(sp)
   8425c:	003f2906 	br	83f04 <_dtoa_r+0xa60>
   84260:	01800044 	movi	r6,1
   84264:	d9800b15 	stw	r6,44(sp)
   84268:	003ff706 	br	84248 <_dtoa_r+0xda4>
   8426c:	01000044 	movi	r4,1
   84270:	d9000b15 	stw	r4,44(sp)
   84274:	003fea06 	br	84220 <_dtoa_r+0xd7c>
   84278:	04000c0e 	bge	zero,r16,842ac <_dtoa_r+0xe08>
   8427c:	d9400717 	ldw	r5,28(sp)
   84280:	d9001617 	ldw	r4,88(sp)
   84284:	01800044 	movi	r6,1
   84288:	0086f7c0 	call	86f7c <__lshift>
   8428c:	1009883a 	mov	r4,r2
   84290:	900b883a 	mov	r5,r18
   84294:	d8800715 	stw	r2,28(sp)
   84298:	00867940 	call	86794 <__mcmp>
   8429c:	0081e00e 	bge	zero,r2,84a20 <_dtoa_r+0x157c>
   842a0:	bdc00044 	addi	r23,r23,1
   842a4:	00800e84 	movi	r2,58
   842a8:	b881a226 	beq	r23,r2,84934 <_dtoa_r+0x1490>
   842ac:	b7000044 	addi	fp,r22,1
   842b0:	b5c00005 	stb	r23,0(r22)
   842b4:	003f7406 	br	84088 <_dtoa_r+0xbe4>
   842b8:	00800e44 	movi	r2,57
   842bc:	b8819d26 	beq	r23,r2,84934 <_dtoa_r+0x1490>
   842c0:	053ffa0e 	bge	zero,r20,842ac <_dtoa_r+0xe08>
   842c4:	8dc00c44 	addi	r23,r17,49
   842c8:	003ff806 	br	842ac <_dtoa_r+0xe08>
   842cc:	d9001617 	ldw	r4,88(sp)
   842d0:	a80b883a 	mov	r5,r21
   842d4:	04000044 	movi	r16,1
   842d8:	00866380 	call	86638 <_Bfree>
   842dc:	003edf06 	br	83e5c <_dtoa_r+0x9b8>
   842e0:	d9001617 	ldw	r4,88(sp)
   842e4:	980b883a 	mov	r5,r19
   842e8:	01800284 	movi	r6,10
   842ec:	000f883a 	mov	r7,zero
   842f0:	00872ec0 	call	872ec <__multadd>
   842f4:	1027883a 	mov	r19,r2
   842f8:	d8800615 	stw	r2,24(sp)
   842fc:	003ebb06 	br	83dec <_dtoa_r+0x948>
   84300:	d9801117 	ldw	r6,68(sp)
   84304:	d8800d17 	ldw	r2,52(sp)
   84308:	d8000915 	stw	zero,36(sp)
   8430c:	308dc83a 	sub	r6,r6,r2
   84310:	0087c83a 	sub	r3,zero,r2
   84314:	d9801115 	stw	r6,68(sp)
   84318:	d8c01015 	stw	r3,64(sp)
   8431c:	003cfe06 	br	83718 <_dtoa_r+0x274>
   84320:	018dc83a 	sub	r6,zero,r6
   84324:	d9801115 	stw	r6,68(sp)
   84328:	d8000a15 	stw	zero,40(sp)
   8432c:	003cf306 	br	836fc <_dtoa_r+0x258>
   84330:	d9000d17 	ldw	r4,52(sp)
   84334:	0089cf00 	call	89cf0 <__floatsidf>
   84338:	880b883a 	mov	r5,r17
   8433c:	8009883a 	mov	r4,r16
   84340:	180f883a 	mov	r7,r3
   84344:	100d883a 	mov	r6,r2
   84348:	0089ad00 	call	89ad0 <__nedf2>
   8434c:	103ce126 	beq	r2,zero,836d4 <_dtoa_r+0x230>
   84350:	d9800d17 	ldw	r6,52(sp)
   84354:	31bfffc4 	addi	r6,r6,-1
   84358:	d9800d15 	stw	r6,52(sp)
   8435c:	003cdd06 	br	836d4 <_dtoa_r+0x230>
   84360:	d9000717 	ldw	r4,28(sp)
   84364:	900b883a 	mov	r5,r18
   84368:	00867940 	call	86794 <__mcmp>
   8436c:	103e8d0e 	bge	r2,zero,83da4 <_dtoa_r+0x900>
   84370:	d9400717 	ldw	r5,28(sp)
   84374:	d9001617 	ldw	r4,88(sp)
   84378:	01800284 	movi	r6,10
   8437c:	000f883a 	mov	r7,zero
   84380:	00872ec0 	call	872ec <__multadd>
   84384:	d9800d17 	ldw	r6,52(sp)
   84388:	d8800715 	stw	r2,28(sp)
   8438c:	31bfffc4 	addi	r6,r6,-1
   84390:	d9800d15 	stw	r6,52(sp)
   84394:	b001a71e 	bne	r22,zero,84a34 <_dtoa_r+0x1590>
   84398:	d8800e17 	ldw	r2,56(sp)
   8439c:	d8800f15 	stw	r2,60(sp)
   843a0:	003e8006 	br	83da4 <_dtoa_r+0x900>
   843a4:	90800417 	ldw	r2,16(r18)
   843a8:	1085883a 	add	r2,r2,r2
   843ac:	1085883a 	add	r2,r2,r2
   843b0:	1485883a 	add	r2,r2,r18
   843b4:	11000417 	ldw	r4,16(r2)
   843b8:	00866600 	call	86660 <__hi0bits>
   843bc:	00c00804 	movi	r3,32
   843c0:	1887c83a 	sub	r3,r3,r2
   843c4:	003e5a06 	br	83d30 <_dtoa_r+0x88c>
   843c8:	d9400717 	ldw	r5,28(sp)
   843cc:	d9801017 	ldw	r6,64(sp)
   843d0:	d9001617 	ldw	r4,88(sp)
   843d4:	00873ec0 	call	873ec <__pow5mult>
   843d8:	d8800715 	stw	r2,28(sp)
   843dc:	003e4306 	br	83cec <_dtoa_r+0x848>
   843e0:	d9800f17 	ldw	r6,60(sp)
   843e4:	d8800d17 	ldw	r2,52(sp)
   843e8:	d9800315 	stw	r6,12(sp)
   843ec:	d8800415 	stw	r2,16(sp)
   843f0:	d8c00b17 	ldw	r3,44(sp)
   843f4:	1805003a 	cmpeq	r2,r3,zero
   843f8:	1000e21e 	bne	r2,zero,84784 <_dtoa_r+0x12e0>
   843fc:	d9000317 	ldw	r4,12(sp)
   84400:	0005883a 	mov	r2,zero
   84404:	00cff834 	movhi	r3,16352
   84408:	200c90fa 	slli	r6,r4,3
   8440c:	01000274 	movhi	r4,9
   84410:	21359b04 	addi	r4,r4,-10644
   84414:	180b883a 	mov	r5,r3
   84418:	310d883a 	add	r6,r6,r4
   8441c:	327fff17 	ldw	r9,-4(r6)
   84420:	323ffe17 	ldw	r8,-8(r6)
   84424:	1009883a 	mov	r4,r2
   84428:	480f883a 	mov	r7,r9
   8442c:	400d883a 	mov	r6,r8
   84430:	00897f00 	call	897f0 <__divdf3>
   84434:	180b883a 	mov	r5,r3
   84438:	b00d883a 	mov	r6,r22
   8443c:	b80f883a 	mov	r7,r23
   84440:	1009883a 	mov	r4,r2
   84444:	00893380 	call	89338 <__subdf3>
   84448:	a80b883a 	mov	r5,r21
   8444c:	a009883a 	mov	r4,r20
   84450:	d8c01915 	stw	r3,100(sp)
   84454:	d8801815 	stw	r2,96(sp)
   84458:	0089de80 	call	89de8 <__fixdfsi>
   8445c:	1009883a 	mov	r4,r2
   84460:	1027883a 	mov	r19,r2
   84464:	0089cf00 	call	89cf0 <__floatsidf>
   84468:	a80b883a 	mov	r5,r21
   8446c:	a009883a 	mov	r4,r20
   84470:	180f883a 	mov	r7,r3
   84474:	100d883a 	mov	r6,r2
   84478:	00893380 	call	89338 <__subdf3>
   8447c:	d9801817 	ldw	r6,96(sp)
   84480:	1823883a 	mov	r17,r3
   84484:	d8801415 	stw	r2,80(sp)
   84488:	302d883a 	mov	r22,r6
   8448c:	d9800517 	ldw	r6,20(sp)
   84490:	9cc00c04 	addi	r19,r19,48
   84494:	dc401515 	stw	r17,84(sp)
   84498:	d8c01917 	ldw	r3,100(sp)
   8449c:	34c00005 	stb	r19,0(r6)
   844a0:	d8800517 	ldw	r2,20(sp)
   844a4:	d9401917 	ldw	r5,100(sp)
   844a8:	d9801417 	ldw	r6,80(sp)
   844ac:	b009883a 	mov	r4,r22
   844b0:	880f883a 	mov	r7,r17
   844b4:	182f883a 	mov	r23,r3
   844b8:	17000044 	addi	fp,r2,1
   844bc:	0089b580 	call	89b58 <__gtdf2>
   844c0:	00804e16 	blt	zero,r2,845fc <_dtoa_r+0x1158>
   844c4:	d9801417 	ldw	r6,80(sp)
   844c8:	0005883a 	mov	r2,zero
   844cc:	00cffc34 	movhi	r3,16368
   844d0:	180b883a 	mov	r5,r3
   844d4:	880f883a 	mov	r7,r17
   844d8:	1009883a 	mov	r4,r2
   844dc:	00893380 	call	89338 <__subdf3>
   844e0:	d9401917 	ldw	r5,100(sp)
   844e4:	180f883a 	mov	r7,r3
   844e8:	b009883a 	mov	r4,r22
   844ec:	100d883a 	mov	r6,r2
   844f0:	0089b580 	call	89b58 <__gtdf2>
   844f4:	00bda216 	blt	zero,r2,83b80 <_dtoa_r+0x6dc>
   844f8:	d8c00317 	ldw	r3,12(sp)
   844fc:	00800044 	movi	r2,1
   84500:	10c01216 	blt	r2,r3,8454c <_dtoa_r+0x10a8>
   84504:	003d4506 	br	83a1c <_dtoa_r+0x578>
   84508:	d9801417 	ldw	r6,80(sp)
   8450c:	0005883a 	mov	r2,zero
   84510:	00cffc34 	movhi	r3,16368
   84514:	180b883a 	mov	r5,r3
   84518:	880f883a 	mov	r7,r17
   8451c:	1009883a 	mov	r4,r2
   84520:	00893380 	call	89338 <__subdf3>
   84524:	d9c01b17 	ldw	r7,108(sp)
   84528:	180b883a 	mov	r5,r3
   8452c:	1009883a 	mov	r4,r2
   84530:	b00d883a 	mov	r6,r22
   84534:	0089c680 	call	89c68 <__ltdf2>
   84538:	103d9116 	blt	r2,zero,83b80 <_dtoa_r+0x6dc>
   8453c:	d9800517 	ldw	r6,20(sp)
   84540:	d9000317 	ldw	r4,12(sp)
   84544:	3105883a 	add	r2,r6,r4
   84548:	e0bd3426 	beq	fp,r2,83a1c <_dtoa_r+0x578>
   8454c:	04500934 	movhi	r17,16420
   84550:	0021883a 	mov	r16,zero
   84554:	b80b883a 	mov	r5,r23
   84558:	b009883a 	mov	r4,r22
   8455c:	800d883a 	mov	r6,r16
   84560:	880f883a 	mov	r7,r17
   84564:	008942c0 	call	8942c <__muldf3>
   84568:	d9401517 	ldw	r5,84(sp)
   8456c:	d9001417 	ldw	r4,80(sp)
   84570:	880f883a 	mov	r7,r17
   84574:	000d883a 	mov	r6,zero
   84578:	d8801a15 	stw	r2,104(sp)
   8457c:	d8c01b15 	stw	r3,108(sp)
   84580:	008942c0 	call	8942c <__muldf3>
   84584:	180b883a 	mov	r5,r3
   84588:	1009883a 	mov	r4,r2
   8458c:	1823883a 	mov	r17,r3
   84590:	1021883a 	mov	r16,r2
   84594:	0089de80 	call	89de8 <__fixdfsi>
   84598:	1009883a 	mov	r4,r2
   8459c:	102b883a 	mov	r21,r2
   845a0:	0089cf00 	call	89cf0 <__floatsidf>
   845a4:	880b883a 	mov	r5,r17
   845a8:	8009883a 	mov	r4,r16
   845ac:	180f883a 	mov	r7,r3
   845b0:	100d883a 	mov	r6,r2
   845b4:	00893380 	call	89338 <__subdf3>
   845b8:	1021883a 	mov	r16,r2
   845bc:	d9001b17 	ldw	r4,108(sp)
   845c0:	1823883a 	mov	r17,r3
   845c4:	dc001415 	stw	r16,80(sp)
   845c8:	ad400c04 	addi	r21,r21,48
   845cc:	dc401515 	stw	r17,84(sp)
   845d0:	d8801a17 	ldw	r2,104(sp)
   845d4:	e5400005 	stb	r21,0(fp)
   845d8:	202f883a 	mov	r23,r4
   845dc:	d9c01b17 	ldw	r7,108(sp)
   845e0:	d9001417 	ldw	r4,80(sp)
   845e4:	880b883a 	mov	r5,r17
   845e8:	100d883a 	mov	r6,r2
   845ec:	102d883a 	mov	r22,r2
   845f0:	e7000044 	addi	fp,fp,1
   845f4:	0089c680 	call	89c68 <__ltdf2>
   845f8:	103fc30e 	bge	r2,zero,84508 <_dtoa_r+0x1064>
   845fc:	d9000417 	ldw	r4,16(sp)
   84600:	d9000d15 	stw	r4,52(sp)
   84604:	003d7106 	br	83bcc <_dtoa_r+0x728>
   84608:	d9801717 	ldw	r6,92(sp)
   8460c:	00800084 	movi	r2,2
   84610:	11bde60e 	bge	r2,r6,83dac <_dtoa_r+0x908>
   84614:	203cfb1e 	bne	r4,zero,83a04 <_dtoa_r+0x560>
   84618:	d9001617 	ldw	r4,88(sp)
   8461c:	900b883a 	mov	r5,r18
   84620:	01800144 	movi	r6,5
   84624:	000f883a 	mov	r7,zero
   84628:	00872ec0 	call	872ec <__multadd>
   8462c:	d9000717 	ldw	r4,28(sp)
   84630:	100b883a 	mov	r5,r2
   84634:	1025883a 	mov	r18,r2
   84638:	00867940 	call	86794 <__mcmp>
   8463c:	00bcf10e 	bge	zero,r2,83a04 <_dtoa_r+0x560>
   84640:	d8c00d17 	ldw	r3,52(sp)
   84644:	d9000517 	ldw	r4,20(sp)
   84648:	d8000615 	stw	zero,24(sp)
   8464c:	18c00044 	addi	r3,r3,1
   84650:	d8c00d15 	stw	r3,52(sp)
   84654:	00800c44 	movi	r2,49
   84658:	27000044 	addi	fp,r4,1
   8465c:	20800005 	stb	r2,0(r4)
   84660:	003e8906 	br	84088 <_dtoa_r+0xbe4>
   84664:	d8c00517 	ldw	r3,20(sp)
   84668:	003bc206 	br	83574 <_dtoa_r+0xd0>
   8466c:	01800274 	movhi	r6,9
   84670:	31b5cd04 	addi	r6,r6,-10444
   84674:	30c00917 	ldw	r3,36(r6)
   84678:	30800817 	ldw	r2,32(r6)
   8467c:	d9001217 	ldw	r4,72(sp)
   84680:	d9401317 	ldw	r5,76(sp)
   84684:	180f883a 	mov	r7,r3
   84688:	100d883a 	mov	r6,r2
   8468c:	00897f00 	call	897f0 <__divdf3>
   84690:	948003cc 	andi	r18,r18,15
   84694:	058000c4 	movi	r22,3
   84698:	1029883a 	mov	r20,r2
   8469c:	182b883a 	mov	r21,r3
   846a0:	003c8906 	br	838c8 <_dtoa_r+0x424>
   846a4:	d9001017 	ldw	r4,64(sp)
   846a8:	d9800917 	ldw	r6,36(sp)
   846ac:	0025883a 	mov	r18,zero
   846b0:	1105c83a 	sub	r2,r2,r4
   846b4:	2089883a 	add	r4,r4,r2
   846b8:	308d883a 	add	r6,r6,r2
   846bc:	d9001015 	stw	r4,64(sp)
   846c0:	d9800915 	stw	r6,36(sp)
   846c4:	003e3206 	br	83f90 <_dtoa_r+0xaec>
   846c8:	28800044 	addi	r2,r5,1
   846cc:	27000044 	addi	fp,r4,1
   846d0:	20800005 	stb	r2,0(r4)
   846d4:	003e6c06 	br	84088 <_dtoa_r+0xbe4>
   846d8:	d8800f17 	ldw	r2,60(sp)
   846dc:	00bce016 	blt	zero,r2,83a60 <_dtoa_r+0x5bc>
   846e0:	d9800f17 	ldw	r6,60(sp)
   846e4:	303cc51e 	bne	r6,zero,839fc <_dtoa_r+0x558>
   846e8:	0005883a 	mov	r2,zero
   846ec:	00d00534 	movhi	r3,16404
   846f0:	980b883a 	mov	r5,r19
   846f4:	180f883a 	mov	r7,r3
   846f8:	9009883a 	mov	r4,r18
   846fc:	100d883a 	mov	r6,r2
   84700:	008942c0 	call	8942c <__muldf3>
   84704:	180b883a 	mov	r5,r3
   84708:	a80f883a 	mov	r7,r21
   8470c:	1009883a 	mov	r4,r2
   84710:	a00d883a 	mov	r6,r20
   84714:	0089be00 	call	89be0 <__gedf2>
   84718:	103cb80e 	bge	r2,zero,839fc <_dtoa_r+0x558>
   8471c:	0027883a 	mov	r19,zero
   84720:	0025883a 	mov	r18,zero
   84724:	003fc606 	br	84640 <_dtoa_r+0x119c>
   84728:	99400117 	ldw	r5,4(r19)
   8472c:	d9001617 	ldw	r4,88(sp)
   84730:	0086bb80 	call	86bb8 <_Balloc>
   84734:	99800417 	ldw	r6,16(r19)
   84738:	11000304 	addi	r4,r2,12
   8473c:	99400304 	addi	r5,r19,12
   84740:	318d883a 	add	r6,r6,r6
   84744:	318d883a 	add	r6,r6,r6
   84748:	31800204 	addi	r6,r6,8
   8474c:	1023883a 	mov	r17,r2
   84750:	00864200 	call	86420 <memcpy>
   84754:	d9001617 	ldw	r4,88(sp)
   84758:	880b883a 	mov	r5,r17
   8475c:	01800044 	movi	r6,1
   84760:	0086f7c0 	call	86f7c <__lshift>
   84764:	100b883a 	mov	r5,r2
   84768:	003d9c06 	br	83ddc <_dtoa_r+0x938>
   8476c:	00800e44 	movi	r2,57
   84770:	b8807026 	beq	r23,r2,84934 <_dtoa_r+0x1490>
   84774:	b8800044 	addi	r2,r23,1
   84778:	b7000044 	addi	fp,r22,1
   8477c:	b0800005 	stb	r2,0(r22)
   84780:	003e4106 	br	84088 <_dtoa_r+0xbe4>
   84784:	d8800317 	ldw	r2,12(sp)
   84788:	01800274 	movhi	r6,9
   8478c:	31b59b04 	addi	r6,r6,-10644
   84790:	b009883a 	mov	r4,r22
   84794:	100e90fa 	slli	r7,r2,3
   84798:	b80b883a 	mov	r5,r23
   8479c:	398f883a 	add	r7,r7,r6
   847a0:	38bffe17 	ldw	r2,-8(r7)
   847a4:	d9800517 	ldw	r6,20(sp)
   847a8:	38ffff17 	ldw	r3,-4(r7)
   847ac:	37000044 	addi	fp,r6,1
   847b0:	180f883a 	mov	r7,r3
   847b4:	100d883a 	mov	r6,r2
   847b8:	008942c0 	call	8942c <__muldf3>
   847bc:	a80b883a 	mov	r5,r21
   847c0:	a009883a 	mov	r4,r20
   847c4:	182f883a 	mov	r23,r3
   847c8:	102d883a 	mov	r22,r2
   847cc:	0089de80 	call	89de8 <__fixdfsi>
   847d0:	1009883a 	mov	r4,r2
   847d4:	1027883a 	mov	r19,r2
   847d8:	0089cf00 	call	89cf0 <__floatsidf>
   847dc:	a80b883a 	mov	r5,r21
   847e0:	a009883a 	mov	r4,r20
   847e4:	180f883a 	mov	r7,r3
   847e8:	100d883a 	mov	r6,r2
   847ec:	00893380 	call	89338 <__subdf3>
   847f0:	180b883a 	mov	r5,r3
   847f4:	d8c00517 	ldw	r3,20(sp)
   847f8:	9cc00c04 	addi	r19,r19,48
   847fc:	1009883a 	mov	r4,r2
   84800:	1cc00005 	stb	r19,0(r3)
   84804:	2021883a 	mov	r16,r4
   84808:	d9000317 	ldw	r4,12(sp)
   8480c:	00800044 	movi	r2,1
   84810:	2823883a 	mov	r17,r5
   84814:	20802226 	beq	r4,r2,848a0 <_dtoa_r+0x13fc>
   84818:	1029883a 	mov	r20,r2
   8481c:	0005883a 	mov	r2,zero
   84820:	00d00934 	movhi	r3,16420
   84824:	180f883a 	mov	r7,r3
   84828:	100d883a 	mov	r6,r2
   8482c:	880b883a 	mov	r5,r17
   84830:	8009883a 	mov	r4,r16
   84834:	008942c0 	call	8942c <__muldf3>
   84838:	180b883a 	mov	r5,r3
   8483c:	1009883a 	mov	r4,r2
   84840:	1823883a 	mov	r17,r3
   84844:	1021883a 	mov	r16,r2
   84848:	0089de80 	call	89de8 <__fixdfsi>
   8484c:	1009883a 	mov	r4,r2
   84850:	102b883a 	mov	r21,r2
   84854:	0089cf00 	call	89cf0 <__floatsidf>
   84858:	880b883a 	mov	r5,r17
   8485c:	8009883a 	mov	r4,r16
   84860:	180f883a 	mov	r7,r3
   84864:	100d883a 	mov	r6,r2
   84868:	00893380 	call	89338 <__subdf3>
   8486c:	180b883a 	mov	r5,r3
   84870:	d8c00517 	ldw	r3,20(sp)
   84874:	1009883a 	mov	r4,r2
   84878:	ad400c04 	addi	r21,r21,48
   8487c:	1d05883a 	add	r2,r3,r20
   84880:	15400005 	stb	r21,0(r2)
   84884:	2021883a 	mov	r16,r4
   84888:	d9000317 	ldw	r4,12(sp)
   8488c:	a5000044 	addi	r20,r20,1
   84890:	2823883a 	mov	r17,r5
   84894:	a13fe11e 	bne	r20,r4,8481c <_dtoa_r+0x1378>
   84898:	e505883a 	add	r2,fp,r20
   8489c:	173fffc4 	addi	fp,r2,-1
   848a0:	0025883a 	mov	r18,zero
   848a4:	04cff834 	movhi	r19,16352
   848a8:	b009883a 	mov	r4,r22
   848ac:	b80b883a 	mov	r5,r23
   848b0:	900d883a 	mov	r6,r18
   848b4:	980f883a 	mov	r7,r19
   848b8:	00893b80 	call	893b8 <__adddf3>
   848bc:	180b883a 	mov	r5,r3
   848c0:	1009883a 	mov	r4,r2
   848c4:	800d883a 	mov	r6,r16
   848c8:	880f883a 	mov	r7,r17
   848cc:	0089c680 	call	89c68 <__ltdf2>
   848d0:	103cab16 	blt	r2,zero,83b80 <_dtoa_r+0x6dc>
   848d4:	0009883a 	mov	r4,zero
   848d8:	980b883a 	mov	r5,r19
   848dc:	b80f883a 	mov	r7,r23
   848e0:	b00d883a 	mov	r6,r22
   848e4:	00893380 	call	89338 <__subdf3>
   848e8:	180b883a 	mov	r5,r3
   848ec:	880f883a 	mov	r7,r17
   848f0:	1009883a 	mov	r4,r2
   848f4:	800d883a 	mov	r6,r16
   848f8:	0089b580 	call	89b58 <__gtdf2>
   848fc:	00bc470e 	bge	zero,r2,83a1c <_dtoa_r+0x578>
   84900:	00c00c04 	movi	r3,48
   84904:	e73fffc4 	addi	fp,fp,-1
   84908:	e0800007 	ldb	r2,0(fp)
   8490c:	10fffd26 	beq	r2,r3,84904 <_dtoa_r+0x1460>
   84910:	d9800417 	ldw	r6,16(sp)
   84914:	e7000044 	addi	fp,fp,1
   84918:	d9800d15 	stw	r6,52(sp)
   8491c:	003cab06 	br	83bcc <_dtoa_r+0x728>
   84920:	d8c00f17 	ldw	r3,60(sp)
   84924:	d9001117 	ldw	r4,68(sp)
   84928:	20e1c83a 	sub	r16,r4,r3
   8492c:	0007883a 	mov	r3,zero
   84930:	003d9b06 	br	83fa0 <_dtoa_r+0xafc>
   84934:	00800e44 	movi	r2,57
   84938:	b0800005 	stb	r2,0(r22)
   8493c:	b5800044 	addi	r22,r22,1
   84940:	003dc106 	br	84048 <_dtoa_r+0xba4>
   84944:	05800084 	movi	r22,2
   84948:	003bf706 	br	83928 <_dtoa_r+0x484>
   8494c:	d9000f17 	ldw	r4,60(sp)
   84950:	013c000e 	bge	zero,r4,83954 <_dtoa_r+0x4b0>
   84954:	d9800e17 	ldw	r6,56(sp)
   84958:	01bc300e 	bge	zero,r6,83a1c <_dtoa_r+0x578>
   8495c:	0005883a 	mov	r2,zero
   84960:	00d00934 	movhi	r3,16420
   84964:	a80b883a 	mov	r5,r21
   84968:	180f883a 	mov	r7,r3
   8496c:	a009883a 	mov	r4,r20
   84970:	100d883a 	mov	r6,r2
   84974:	008942c0 	call	8942c <__muldf3>
   84978:	b1000044 	addi	r4,r22,1
   8497c:	1021883a 	mov	r16,r2
   84980:	1823883a 	mov	r17,r3
   84984:	0089cf00 	call	89cf0 <__floatsidf>
   84988:	880b883a 	mov	r5,r17
   8498c:	8009883a 	mov	r4,r16
   84990:	180f883a 	mov	r7,r3
   84994:	100d883a 	mov	r6,r2
   84998:	008942c0 	call	8942c <__muldf3>
   8499c:	0011883a 	mov	r8,zero
   849a0:	02500734 	movhi	r9,16412
   849a4:	180b883a 	mov	r5,r3
   849a8:	480f883a 	mov	r7,r9
   849ac:	1009883a 	mov	r4,r2
   849b0:	400d883a 	mov	r6,r8
   849b4:	00893b80 	call	893b8 <__adddf3>
   849b8:	102d883a 	mov	r22,r2
   849bc:	00bf3034 	movhi	r2,64704
   849c0:	10ef883a 	add	r23,r2,r3
   849c4:	d8800d17 	ldw	r2,52(sp)
   849c8:	d8c00e17 	ldw	r3,56(sp)
   849cc:	8029883a 	mov	r20,r16
   849d0:	10bfffc4 	addi	r2,r2,-1
   849d4:	882b883a 	mov	r21,r17
   849d8:	d8800415 	stw	r2,16(sp)
   849dc:	d8c00315 	stw	r3,12(sp)
   849e0:	003e8306 	br	843f0 <_dtoa_r+0xf4c>
   849e4:	d8800117 	ldw	r2,4(sp)
   849e8:	dc001117 	ldw	r16,68(sp)
   849ec:	dc801017 	ldw	r18,64(sp)
   849f0:	00c00d84 	movi	r3,54
   849f4:	1887c83a 	sub	r3,r3,r2
   849f8:	003d6906 	br	83fa0 <_dtoa_r+0xafc>
   849fc:	01800044 	movi	r6,1
   84a00:	3021883a 	mov	r16,r6
   84a04:	d9800f15 	stw	r6,60(sp)
   84a08:	d9802615 	stw	r6,152(sp)
   84a0c:	d9800e15 	stw	r6,56(sp)
   84a10:	003b9306 	br	83860 <_dtoa_r+0x3bc>
   84a14:	b021883a 	mov	r16,r22
   84a18:	dd800f15 	stw	r22,60(sp)
   84a1c:	003b9006 	br	83860 <_dtoa_r+0x3bc>
   84a20:	103e221e 	bne	r2,zero,842ac <_dtoa_r+0xe08>
   84a24:	b880004c 	andi	r2,r23,1
   84a28:	1005003a 	cmpeq	r2,r2,zero
   84a2c:	103e1f1e 	bne	r2,zero,842ac <_dtoa_r+0xe08>
   84a30:	003e1b06 	br	842a0 <_dtoa_r+0xdfc>
   84a34:	d9001617 	ldw	r4,88(sp)
   84a38:	980b883a 	mov	r5,r19
   84a3c:	01800284 	movi	r6,10
   84a40:	000f883a 	mov	r7,zero
   84a44:	00872ec0 	call	872ec <__multadd>
   84a48:	d8c00e17 	ldw	r3,56(sp)
   84a4c:	1027883a 	mov	r19,r2
   84a50:	d8c00f15 	stw	r3,60(sp)
   84a54:	003cd306 	br	83da4 <_dtoa_r+0x900>

00084a58 <_fflush_r>:
   84a58:	defffb04 	addi	sp,sp,-20
   84a5c:	dcc00315 	stw	r19,12(sp)
   84a60:	dc800215 	stw	r18,8(sp)
   84a64:	dfc00415 	stw	ra,16(sp)
   84a68:	dc400115 	stw	r17,4(sp)
   84a6c:	dc000015 	stw	r16,0(sp)
   84a70:	2027883a 	mov	r19,r4
   84a74:	2825883a 	mov	r18,r5
   84a78:	20000226 	beq	r4,zero,84a84 <_fflush_r+0x2c>
   84a7c:	20800e17 	ldw	r2,56(r4)
   84a80:	10005626 	beq	r2,zero,84bdc <_fflush_r+0x184>
   84a84:	9100030b 	ldhu	r4,12(r18)
   84a88:	20ffffcc 	andi	r3,r4,65535
   84a8c:	18e0001c 	xori	r3,r3,32768
   84a90:	18e00004 	addi	r3,r3,-32768
   84a94:	1880020c 	andi	r2,r3,8
   84a98:	1000261e 	bne	r2,zero,84b34 <_fflush_r+0xdc>
   84a9c:	90c00117 	ldw	r3,4(r18)
   84aa0:	20820014 	ori	r2,r4,2048
   84aa4:	9080030d 	sth	r2,12(r18)
   84aa8:	1009883a 	mov	r4,r2
   84aac:	00c0400e 	bge	zero,r3,84bb0 <_fflush_r+0x158>
   84ab0:	92000a17 	ldw	r8,40(r18)
   84ab4:	40004026 	beq	r8,zero,84bb8 <_fflush_r+0x160>
   84ab8:	2084000c 	andi	r2,r4,4096
   84abc:	10005326 	beq	r2,zero,84c0c <_fflush_r+0x1b4>
   84ac0:	94001417 	ldw	r16,80(r18)
   84ac4:	9080030b 	ldhu	r2,12(r18)
   84ac8:	1080010c 	andi	r2,r2,4
   84acc:	1000481e 	bne	r2,zero,84bf0 <_fflush_r+0x198>
   84ad0:	91400717 	ldw	r5,28(r18)
   84ad4:	9809883a 	mov	r4,r19
   84ad8:	800d883a 	mov	r6,r16
   84adc:	000f883a 	mov	r7,zero
   84ae0:	403ee83a 	callr	r8
   84ae4:	8080261e 	bne	r16,r2,84b80 <_fflush_r+0x128>
   84ae8:	9080030b 	ldhu	r2,12(r18)
   84aec:	91000417 	ldw	r4,16(r18)
   84af0:	90000115 	stw	zero,4(r18)
   84af4:	10bdffcc 	andi	r2,r2,63487
   84af8:	10ffffcc 	andi	r3,r2,65535
   84afc:	18c4000c 	andi	r3,r3,4096
   84b00:	9080030d 	sth	r2,12(r18)
   84b04:	91000015 	stw	r4,0(r18)
   84b08:	18002b26 	beq	r3,zero,84bb8 <_fflush_r+0x160>
   84b0c:	0007883a 	mov	r3,zero
   84b10:	1805883a 	mov	r2,r3
   84b14:	94001415 	stw	r16,80(r18)
   84b18:	dfc00417 	ldw	ra,16(sp)
   84b1c:	dcc00317 	ldw	r19,12(sp)
   84b20:	dc800217 	ldw	r18,8(sp)
   84b24:	dc400117 	ldw	r17,4(sp)
   84b28:	dc000017 	ldw	r16,0(sp)
   84b2c:	dec00504 	addi	sp,sp,20
   84b30:	f800283a 	ret
   84b34:	94400417 	ldw	r17,16(r18)
   84b38:	88001f26 	beq	r17,zero,84bb8 <_fflush_r+0x160>
   84b3c:	90800017 	ldw	r2,0(r18)
   84b40:	18c000cc 	andi	r3,r3,3
   84b44:	94400015 	stw	r17,0(r18)
   84b48:	1461c83a 	sub	r16,r2,r17
   84b4c:	18002526 	beq	r3,zero,84be4 <_fflush_r+0x18c>
   84b50:	0005883a 	mov	r2,zero
   84b54:	90800215 	stw	r2,8(r18)
   84b58:	0400170e 	bge	zero,r16,84bb8 <_fflush_r+0x160>
   84b5c:	90c00917 	ldw	r3,36(r18)
   84b60:	91400717 	ldw	r5,28(r18)
   84b64:	880d883a 	mov	r6,r17
   84b68:	800f883a 	mov	r7,r16
   84b6c:	9809883a 	mov	r4,r19
   84b70:	183ee83a 	callr	r3
   84b74:	88a3883a 	add	r17,r17,r2
   84b78:	80a1c83a 	sub	r16,r16,r2
   84b7c:	00bff616 	blt	zero,r2,84b58 <_fflush_r+0x100>
   84b80:	9080030b 	ldhu	r2,12(r18)
   84b84:	00ffffc4 	movi	r3,-1
   84b88:	10801014 	ori	r2,r2,64
   84b8c:	9080030d 	sth	r2,12(r18)
   84b90:	1805883a 	mov	r2,r3
   84b94:	dfc00417 	ldw	ra,16(sp)
   84b98:	dcc00317 	ldw	r19,12(sp)
   84b9c:	dc800217 	ldw	r18,8(sp)
   84ba0:	dc400117 	ldw	r17,4(sp)
   84ba4:	dc000017 	ldw	r16,0(sp)
   84ba8:	dec00504 	addi	sp,sp,20
   84bac:	f800283a 	ret
   84bb0:	90800f17 	ldw	r2,60(r18)
   84bb4:	00bfbe16 	blt	zero,r2,84ab0 <_fflush_r+0x58>
   84bb8:	0007883a 	mov	r3,zero
   84bbc:	1805883a 	mov	r2,r3
   84bc0:	dfc00417 	ldw	ra,16(sp)
   84bc4:	dcc00317 	ldw	r19,12(sp)
   84bc8:	dc800217 	ldw	r18,8(sp)
   84bcc:	dc400117 	ldw	r17,4(sp)
   84bd0:	dc000017 	ldw	r16,0(sp)
   84bd4:	dec00504 	addi	sp,sp,20
   84bd8:	f800283a 	ret
   84bdc:	0084cf00 	call	84cf0 <__sinit>
   84be0:	003fa806 	br	84a84 <_fflush_r+0x2c>
   84be4:	90800517 	ldw	r2,20(r18)
   84be8:	90800215 	stw	r2,8(r18)
   84bec:	003fda06 	br	84b58 <_fflush_r+0x100>
   84bf0:	90800117 	ldw	r2,4(r18)
   84bf4:	90c00c17 	ldw	r3,48(r18)
   84bf8:	80a1c83a 	sub	r16,r16,r2
   84bfc:	183fb426 	beq	r3,zero,84ad0 <_fflush_r+0x78>
   84c00:	90800f17 	ldw	r2,60(r18)
   84c04:	80a1c83a 	sub	r16,r16,r2
   84c08:	003fb106 	br	84ad0 <_fflush_r+0x78>
   84c0c:	91400717 	ldw	r5,28(r18)
   84c10:	9809883a 	mov	r4,r19
   84c14:	000d883a 	mov	r6,zero
   84c18:	01c00044 	movi	r7,1
   84c1c:	403ee83a 	callr	r8
   84c20:	1021883a 	mov	r16,r2
   84c24:	00bfffc4 	movi	r2,-1
   84c28:	80800226 	beq	r16,r2,84c34 <_fflush_r+0x1dc>
   84c2c:	92000a17 	ldw	r8,40(r18)
   84c30:	003fa406 	br	84ac4 <_fflush_r+0x6c>
   84c34:	98c00017 	ldw	r3,0(r19)
   84c38:	00800744 	movi	r2,29
   84c3c:	18bfde26 	beq	r3,r2,84bb8 <_fflush_r+0x160>
   84c40:	9080030b 	ldhu	r2,12(r18)
   84c44:	8007883a 	mov	r3,r16
   84c48:	10801014 	ori	r2,r2,64
   84c4c:	9080030d 	sth	r2,12(r18)
   84c50:	003fcf06 	br	84b90 <_fflush_r+0x138>

00084c54 <fflush>:
   84c54:	01400234 	movhi	r5,8
   84c58:	29529604 	addi	r5,r5,19032
   84c5c:	2007883a 	mov	r3,r4
   84c60:	20000526 	beq	r4,zero,84c78 <fflush+0x24>
   84c64:	00800274 	movhi	r2,9
   84c68:	10bcbd04 	addi	r2,r2,-3340
   84c6c:	11000017 	ldw	r4,0(r2)
   84c70:	180b883a 	mov	r5,r3
   84c74:	0084a581 	jmpi	84a58 <_fflush_r>
   84c78:	00800274 	movhi	r2,9
   84c7c:	10bcbe04 	addi	r2,r2,-3336
   84c80:	11000017 	ldw	r4,0(r2)
   84c84:	00858241 	jmpi	85824 <_fwalk_reent>

00084c88 <std>:
   84c88:	00800234 	movhi	r2,8
   84c8c:	109f4004 	addi	r2,r2,32000
   84c90:	20800b15 	stw	r2,44(r4)
   84c94:	00800234 	movhi	r2,8
   84c98:	109f7b04 	addi	r2,r2,32236
   84c9c:	20800815 	stw	r2,32(r4)
   84ca0:	00c00234 	movhi	r3,8
   84ca4:	18df5c04 	addi	r3,r3,32112
   84ca8:	00800234 	movhi	r2,8
   84cac:	109f4204 	addi	r2,r2,32008
   84cb0:	2140030d 	sth	r5,12(r4)
   84cb4:	2180038d 	sth	r6,14(r4)
   84cb8:	20c00915 	stw	r3,36(r4)
   84cbc:	20800a15 	stw	r2,40(r4)
   84cc0:	20000015 	stw	zero,0(r4)
   84cc4:	20000115 	stw	zero,4(r4)
   84cc8:	20000215 	stw	zero,8(r4)
   84ccc:	20000415 	stw	zero,16(r4)
   84cd0:	20000515 	stw	zero,20(r4)
   84cd4:	20000615 	stw	zero,24(r4)
   84cd8:	21000715 	stw	r4,28(r4)
   84cdc:	f800283a 	ret

00084ce0 <__sfp_lock_acquire>:
   84ce0:	f800283a 	ret

00084ce4 <__sfp_lock_release>:
   84ce4:	f800283a 	ret

00084ce8 <__sinit_lock_acquire>:
   84ce8:	f800283a 	ret

00084cec <__sinit_lock_release>:
   84cec:	f800283a 	ret

00084cf0 <__sinit>:
   84cf0:	20800e17 	ldw	r2,56(r4)
   84cf4:	defffd04 	addi	sp,sp,-12
   84cf8:	dc400115 	stw	r17,4(sp)
   84cfc:	dc000015 	stw	r16,0(sp)
   84d00:	dfc00215 	stw	ra,8(sp)
   84d04:	04400044 	movi	r17,1
   84d08:	01400104 	movi	r5,4
   84d0c:	000d883a 	mov	r6,zero
   84d10:	2021883a 	mov	r16,r4
   84d14:	2200bb04 	addi	r8,r4,748
   84d18:	200f883a 	mov	r7,r4
   84d1c:	10000526 	beq	r2,zero,84d34 <__sinit+0x44>
   84d20:	dfc00217 	ldw	ra,8(sp)
   84d24:	dc400117 	ldw	r17,4(sp)
   84d28:	dc000017 	ldw	r16,0(sp)
   84d2c:	dec00304 	addi	sp,sp,12
   84d30:	f800283a 	ret
   84d34:	21000117 	ldw	r4,4(r4)
   84d38:	00800234 	movhi	r2,8
   84d3c:	10937504 	addi	r2,r2,19924
   84d40:	00c000c4 	movi	r3,3
   84d44:	80800f15 	stw	r2,60(r16)
   84d48:	80c0b915 	stw	r3,740(r16)
   84d4c:	8200ba15 	stw	r8,744(r16)
   84d50:	84400e15 	stw	r17,56(r16)
   84d54:	8000b815 	stw	zero,736(r16)
   84d58:	0084c880 	call	84c88 <std>
   84d5c:	81000217 	ldw	r4,8(r16)
   84d60:	880d883a 	mov	r6,r17
   84d64:	800f883a 	mov	r7,r16
   84d68:	01400284 	movi	r5,10
   84d6c:	0084c880 	call	84c88 <std>
   84d70:	81000317 	ldw	r4,12(r16)
   84d74:	800f883a 	mov	r7,r16
   84d78:	01400484 	movi	r5,18
   84d7c:	01800084 	movi	r6,2
   84d80:	dfc00217 	ldw	ra,8(sp)
   84d84:	dc400117 	ldw	r17,4(sp)
   84d88:	dc000017 	ldw	r16,0(sp)
   84d8c:	dec00304 	addi	sp,sp,12
   84d90:	0084c881 	jmpi	84c88 <std>

00084d94 <__fp_lock>:
   84d94:	0005883a 	mov	r2,zero
   84d98:	f800283a 	ret

00084d9c <__fp_unlock>:
   84d9c:	0005883a 	mov	r2,zero
   84da0:	f800283a 	ret

00084da4 <__fp_unlock_all>:
   84da4:	00800274 	movhi	r2,9
   84da8:	10bcbd04 	addi	r2,r2,-3340
   84dac:	11000017 	ldw	r4,0(r2)
   84db0:	01400234 	movhi	r5,8
   84db4:	29536704 	addi	r5,r5,19868
   84db8:	00858ec1 	jmpi	858ec <_fwalk>

00084dbc <__fp_lock_all>:
   84dbc:	00800274 	movhi	r2,9
   84dc0:	10bcbd04 	addi	r2,r2,-3340
   84dc4:	11000017 	ldw	r4,0(r2)
   84dc8:	01400234 	movhi	r5,8
   84dcc:	29536504 	addi	r5,r5,19860
   84dd0:	00858ec1 	jmpi	858ec <_fwalk>

00084dd4 <_cleanup_r>:
   84dd4:	01400274 	movhi	r5,9
   84dd8:	29606d04 	addi	r5,r5,-32332
   84ddc:	00858ec1 	jmpi	858ec <_fwalk>

00084de0 <_cleanup>:
   84de0:	00800274 	movhi	r2,9
   84de4:	10bcbe04 	addi	r2,r2,-3336
   84de8:	11000017 	ldw	r4,0(r2)
   84dec:	0084dd41 	jmpi	84dd4 <_cleanup_r>

00084df0 <__sfmoreglue>:
   84df0:	defffc04 	addi	sp,sp,-16
   84df4:	dc400115 	stw	r17,4(sp)
   84df8:	2c401724 	muli	r17,r5,92
   84dfc:	dc800215 	stw	r18,8(sp)
   84e00:	2825883a 	mov	r18,r5
   84e04:	89400304 	addi	r5,r17,12
   84e08:	dc000015 	stw	r16,0(sp)
   84e0c:	dfc00315 	stw	ra,12(sp)
   84e10:	0085bfc0 	call	85bfc <_malloc_r>
   84e14:	0021883a 	mov	r16,zero
   84e18:	880d883a 	mov	r6,r17
   84e1c:	000b883a 	mov	r5,zero
   84e20:	10000626 	beq	r2,zero,84e3c <__sfmoreglue+0x4c>
   84e24:	11000304 	addi	r4,r2,12
   84e28:	14800115 	stw	r18,4(r2)
   84e2c:	10000015 	stw	zero,0(r2)
   84e30:	11000215 	stw	r4,8(r2)
   84e34:	1021883a 	mov	r16,r2
   84e38:	00865a00 	call	865a0 <memset>
   84e3c:	8005883a 	mov	r2,r16
   84e40:	dfc00317 	ldw	ra,12(sp)
   84e44:	dc800217 	ldw	r18,8(sp)
   84e48:	dc400117 	ldw	r17,4(sp)
   84e4c:	dc000017 	ldw	r16,0(sp)
   84e50:	dec00404 	addi	sp,sp,16
   84e54:	f800283a 	ret

00084e58 <__sfp>:
   84e58:	defffd04 	addi	sp,sp,-12
   84e5c:	00800274 	movhi	r2,9
   84e60:	10bcbe04 	addi	r2,r2,-3336
   84e64:	dc000015 	stw	r16,0(sp)
   84e68:	14000017 	ldw	r16,0(r2)
   84e6c:	dc400115 	stw	r17,4(sp)
   84e70:	dfc00215 	stw	ra,8(sp)
   84e74:	80800e17 	ldw	r2,56(r16)
   84e78:	2023883a 	mov	r17,r4
   84e7c:	10002626 	beq	r2,zero,84f18 <__sfp+0xc0>
   84e80:	8400b804 	addi	r16,r16,736
   84e84:	80800117 	ldw	r2,4(r16)
   84e88:	81000217 	ldw	r4,8(r16)
   84e8c:	10ffffc4 	addi	r3,r2,-1
   84e90:	18000916 	blt	r3,zero,84eb8 <__sfp+0x60>
   84e94:	2080030f 	ldh	r2,12(r4)
   84e98:	10000b26 	beq	r2,zero,84ec8 <__sfp+0x70>
   84e9c:	017fffc4 	movi	r5,-1
   84ea0:	00000206 	br	84eac <__sfp+0x54>
   84ea4:	2080030f 	ldh	r2,12(r4)
   84ea8:	10000726 	beq	r2,zero,84ec8 <__sfp+0x70>
   84eac:	18ffffc4 	addi	r3,r3,-1
   84eb0:	21001704 	addi	r4,r4,92
   84eb4:	197ffb1e 	bne	r3,r5,84ea4 <__sfp+0x4c>
   84eb8:	80800017 	ldw	r2,0(r16)
   84ebc:	10001926 	beq	r2,zero,84f24 <__sfp+0xcc>
   84ec0:	1021883a 	mov	r16,r2
   84ec4:	003fef06 	br	84e84 <__sfp+0x2c>
   84ec8:	00bfffc4 	movi	r2,-1
   84ecc:	00c00044 	movi	r3,1
   84ed0:	2080038d 	sth	r2,14(r4)
   84ed4:	20c0030d 	sth	r3,12(r4)
   84ed8:	20000015 	stw	zero,0(r4)
   84edc:	20000215 	stw	zero,8(r4)
   84ee0:	20000115 	stw	zero,4(r4)
   84ee4:	20000415 	stw	zero,16(r4)
   84ee8:	20000515 	stw	zero,20(r4)
   84eec:	20000615 	stw	zero,24(r4)
   84ef0:	20000c15 	stw	zero,48(r4)
   84ef4:	20000d15 	stw	zero,52(r4)
   84ef8:	20001115 	stw	zero,68(r4)
   84efc:	20001215 	stw	zero,72(r4)
   84f00:	2005883a 	mov	r2,r4
   84f04:	dfc00217 	ldw	ra,8(sp)
   84f08:	dc400117 	ldw	r17,4(sp)
   84f0c:	dc000017 	ldw	r16,0(sp)
   84f10:	dec00304 	addi	sp,sp,12
   84f14:	f800283a 	ret
   84f18:	8009883a 	mov	r4,r16
   84f1c:	0084cf00 	call	84cf0 <__sinit>
   84f20:	003fd706 	br	84e80 <__sfp+0x28>
   84f24:	8809883a 	mov	r4,r17
   84f28:	01400104 	movi	r5,4
   84f2c:	0084df00 	call	84df0 <__sfmoreglue>
   84f30:	80800015 	stw	r2,0(r16)
   84f34:	103fe21e 	bne	r2,zero,84ec0 <__sfp+0x68>
   84f38:	00800304 	movi	r2,12
   84f3c:	0009883a 	mov	r4,zero
   84f40:	88800015 	stw	r2,0(r17)
   84f44:	003fee06 	br	84f00 <__sfp+0xa8>

00084f48 <_malloc_trim_r>:
   84f48:	defffb04 	addi	sp,sp,-20
   84f4c:	dcc00315 	stw	r19,12(sp)
   84f50:	04c00274 	movhi	r19,9
   84f54:	9cf73904 	addi	r19,r19,-8988
   84f58:	dc800215 	stw	r18,8(sp)
   84f5c:	dc400115 	stw	r17,4(sp)
   84f60:	dc000015 	stw	r16,0(sp)
   84f64:	2823883a 	mov	r17,r5
   84f68:	2025883a 	mov	r18,r4
   84f6c:	dfc00415 	stw	ra,16(sp)
   84f70:	008b0100 	call	8b010 <__malloc_lock>
   84f74:	98800217 	ldw	r2,8(r19)
   84f78:	9009883a 	mov	r4,r18
   84f7c:	000b883a 	mov	r5,zero
   84f80:	10c00117 	ldw	r3,4(r2)
   84f84:	00bfff04 	movi	r2,-4
   84f88:	18a0703a 	and	r16,r3,r2
   84f8c:	8463c83a 	sub	r17,r16,r17
   84f90:	8c43fbc4 	addi	r17,r17,4079
   84f94:	8822d33a 	srli	r17,r17,12
   84f98:	0083ffc4 	movi	r2,4095
   84f9c:	8c7fffc4 	addi	r17,r17,-1
   84fa0:	8822933a 	slli	r17,r17,12
   84fa4:	1440060e 	bge	r2,r17,84fc0 <_malloc_trim_r+0x78>
   84fa8:	0087c900 	call	87c90 <_sbrk_r>
   84fac:	98c00217 	ldw	r3,8(r19)
   84fb0:	9009883a 	mov	r4,r18
   84fb4:	044bc83a 	sub	r5,zero,r17
   84fb8:	80c7883a 	add	r3,r16,r3
   84fbc:	10c00926 	beq	r2,r3,84fe4 <_malloc_trim_r+0x9c>
   84fc0:	008b0300 	call	8b030 <__malloc_unlock>
   84fc4:	0005883a 	mov	r2,zero
   84fc8:	dfc00417 	ldw	ra,16(sp)
   84fcc:	dcc00317 	ldw	r19,12(sp)
   84fd0:	dc800217 	ldw	r18,8(sp)
   84fd4:	dc400117 	ldw	r17,4(sp)
   84fd8:	dc000017 	ldw	r16,0(sp)
   84fdc:	dec00504 	addi	sp,sp,20
   84fe0:	f800283a 	ret
   84fe4:	9009883a 	mov	r4,r18
   84fe8:	0087c900 	call	87c90 <_sbrk_r>
   84fec:	844dc83a 	sub	r6,r16,r17
   84ff0:	00ffffc4 	movi	r3,-1
   84ff4:	9009883a 	mov	r4,r18
   84ff8:	000b883a 	mov	r5,zero
   84ffc:	01c00274 	movhi	r7,9
   85000:	39c37104 	addi	r7,r7,3524
   85004:	31800054 	ori	r6,r6,1
   85008:	10c00926 	beq	r2,r3,85030 <_malloc_trim_r+0xe8>
   8500c:	38800017 	ldw	r2,0(r7)
   85010:	98c00217 	ldw	r3,8(r19)
   85014:	9009883a 	mov	r4,r18
   85018:	1445c83a 	sub	r2,r2,r17
   8501c:	38800015 	stw	r2,0(r7)
   85020:	19800115 	stw	r6,4(r3)
   85024:	008b0300 	call	8b030 <__malloc_unlock>
   85028:	00800044 	movi	r2,1
   8502c:	003fe606 	br	84fc8 <_malloc_trim_r+0x80>
   85030:	0087c900 	call	87c90 <_sbrk_r>
   85034:	99800217 	ldw	r6,8(r19)
   85038:	100f883a 	mov	r7,r2
   8503c:	9009883a 	mov	r4,r18
   85040:	1187c83a 	sub	r3,r2,r6
   85044:	008003c4 	movi	r2,15
   85048:	19400054 	ori	r5,r3,1
   8504c:	10ffdc0e 	bge	r2,r3,84fc0 <_malloc_trim_r+0x78>
   85050:	00800274 	movhi	r2,9
   85054:	10bcc204 	addi	r2,r2,-3320
   85058:	10c00017 	ldw	r3,0(r2)
   8505c:	00800274 	movhi	r2,9
   85060:	10837104 	addi	r2,r2,3524
   85064:	31400115 	stw	r5,4(r6)
   85068:	38c7c83a 	sub	r3,r7,r3
   8506c:	10c00015 	stw	r3,0(r2)
   85070:	003fd306 	br	84fc0 <_malloc_trim_r+0x78>

00085074 <_free_r>:
   85074:	defffd04 	addi	sp,sp,-12
   85078:	dc400115 	stw	r17,4(sp)
   8507c:	dc000015 	stw	r16,0(sp)
   85080:	dfc00215 	stw	ra,8(sp)
   85084:	2821883a 	mov	r16,r5
   85088:	2023883a 	mov	r17,r4
   8508c:	28005a26 	beq	r5,zero,851f8 <_free_r+0x184>
   85090:	008b0100 	call	8b010 <__malloc_lock>
   85094:	823ffe04 	addi	r8,r16,-8
   85098:	41400117 	ldw	r5,4(r8)
   8509c:	00bfff84 	movi	r2,-2
   850a0:	02800274 	movhi	r10,9
   850a4:	52b73904 	addi	r10,r10,-8988
   850a8:	288e703a 	and	r7,r5,r2
   850ac:	41cd883a 	add	r6,r8,r7
   850b0:	30c00117 	ldw	r3,4(r6)
   850b4:	51000217 	ldw	r4,8(r10)
   850b8:	00bfff04 	movi	r2,-4
   850bc:	1892703a 	and	r9,r3,r2
   850c0:	5017883a 	mov	r11,r10
   850c4:	31006726 	beq	r6,r4,85264 <_free_r+0x1f0>
   850c8:	2880004c 	andi	r2,r5,1
   850cc:	1005003a 	cmpeq	r2,r2,zero
   850d0:	32400115 	stw	r9,4(r6)
   850d4:	10001a1e 	bne	r2,zero,85140 <_free_r+0xcc>
   850d8:	000b883a 	mov	r5,zero
   850dc:	3247883a 	add	r3,r6,r9
   850e0:	18800117 	ldw	r2,4(r3)
   850e4:	1080004c 	andi	r2,r2,1
   850e8:	1000231e 	bne	r2,zero,85178 <_free_r+0x104>
   850ec:	280ac03a 	cmpne	r5,r5,zero
   850f0:	3a4f883a 	add	r7,r7,r9
   850f4:	2800451e 	bne	r5,zero,8520c <_free_r+0x198>
   850f8:	31000217 	ldw	r4,8(r6)
   850fc:	00800274 	movhi	r2,9
   85100:	10b73b04 	addi	r2,r2,-8980
   85104:	20807b26 	beq	r4,r2,852f4 <_free_r+0x280>
   85108:	30800317 	ldw	r2,12(r6)
   8510c:	3a07883a 	add	r3,r7,r8
   85110:	19c00015 	stw	r7,0(r3)
   85114:	11000215 	stw	r4,8(r2)
   85118:	20800315 	stw	r2,12(r4)
   8511c:	38800054 	ori	r2,r7,1
   85120:	40800115 	stw	r2,4(r8)
   85124:	28001a26 	beq	r5,zero,85190 <_free_r+0x11c>
   85128:	8809883a 	mov	r4,r17
   8512c:	dfc00217 	ldw	ra,8(sp)
   85130:	dc400117 	ldw	r17,4(sp)
   85134:	dc000017 	ldw	r16,0(sp)
   85138:	dec00304 	addi	sp,sp,12
   8513c:	008b0301 	jmpi	8b030 <__malloc_unlock>
   85140:	80bffe17 	ldw	r2,-8(r16)
   85144:	50c00204 	addi	r3,r10,8
   85148:	4091c83a 	sub	r8,r8,r2
   8514c:	41000217 	ldw	r4,8(r8)
   85150:	388f883a 	add	r7,r7,r2
   85154:	20c06126 	beq	r4,r3,852dc <_free_r+0x268>
   85158:	40800317 	ldw	r2,12(r8)
   8515c:	3247883a 	add	r3,r6,r9
   85160:	000b883a 	mov	r5,zero
   85164:	11000215 	stw	r4,8(r2)
   85168:	20800315 	stw	r2,12(r4)
   8516c:	18800117 	ldw	r2,4(r3)
   85170:	1080004c 	andi	r2,r2,1
   85174:	103fdd26 	beq	r2,zero,850ec <_free_r+0x78>
   85178:	38800054 	ori	r2,r7,1
   8517c:	3a07883a 	add	r3,r7,r8
   85180:	280ac03a 	cmpne	r5,r5,zero
   85184:	40800115 	stw	r2,4(r8)
   85188:	19c00015 	stw	r7,0(r3)
   8518c:	283fe61e 	bne	r5,zero,85128 <_free_r+0xb4>
   85190:	00807fc4 	movi	r2,511
   85194:	11c01f2e 	bgeu	r2,r7,85214 <_free_r+0x1a0>
   85198:	3806d27a 	srli	r3,r7,9
   8519c:	1800481e 	bne	r3,zero,852c0 <_free_r+0x24c>
   851a0:	3804d0fa 	srli	r2,r7,3
   851a4:	100690fa 	slli	r3,r2,3
   851a8:	1acd883a 	add	r6,r3,r11
   851ac:	31400217 	ldw	r5,8(r6)
   851b0:	31405926 	beq	r6,r5,85318 <_free_r+0x2a4>
   851b4:	28800117 	ldw	r2,4(r5)
   851b8:	00ffff04 	movi	r3,-4
   851bc:	10c4703a 	and	r2,r2,r3
   851c0:	3880022e 	bgeu	r7,r2,851cc <_free_r+0x158>
   851c4:	29400217 	ldw	r5,8(r5)
   851c8:	317ffa1e 	bne	r6,r5,851b4 <_free_r+0x140>
   851cc:	29800317 	ldw	r6,12(r5)
   851d0:	41800315 	stw	r6,12(r8)
   851d4:	41400215 	stw	r5,8(r8)
   851d8:	8809883a 	mov	r4,r17
   851dc:	2a000315 	stw	r8,12(r5)
   851e0:	32000215 	stw	r8,8(r6)
   851e4:	dfc00217 	ldw	ra,8(sp)
   851e8:	dc400117 	ldw	r17,4(sp)
   851ec:	dc000017 	ldw	r16,0(sp)
   851f0:	dec00304 	addi	sp,sp,12
   851f4:	008b0301 	jmpi	8b030 <__malloc_unlock>
   851f8:	dfc00217 	ldw	ra,8(sp)
   851fc:	dc400117 	ldw	r17,4(sp)
   85200:	dc000017 	ldw	r16,0(sp)
   85204:	dec00304 	addi	sp,sp,12
   85208:	f800283a 	ret
   8520c:	31000217 	ldw	r4,8(r6)
   85210:	003fbd06 	br	85108 <_free_r+0x94>
   85214:	3806d0fa 	srli	r3,r7,3
   85218:	00800044 	movi	r2,1
   8521c:	51400117 	ldw	r5,4(r10)
   85220:	180890fa 	slli	r4,r3,3
   85224:	1807d0ba 	srai	r3,r3,2
   85228:	22c9883a 	add	r4,r4,r11
   8522c:	21800217 	ldw	r6,8(r4)
   85230:	10c4983a 	sll	r2,r2,r3
   85234:	41000315 	stw	r4,12(r8)
   85238:	41800215 	stw	r6,8(r8)
   8523c:	288ab03a 	or	r5,r5,r2
   85240:	22000215 	stw	r8,8(r4)
   85244:	8809883a 	mov	r4,r17
   85248:	51400115 	stw	r5,4(r10)
   8524c:	32000315 	stw	r8,12(r6)
   85250:	dfc00217 	ldw	ra,8(sp)
   85254:	dc400117 	ldw	r17,4(sp)
   85258:	dc000017 	ldw	r16,0(sp)
   8525c:	dec00304 	addi	sp,sp,12
   85260:	008b0301 	jmpi	8b030 <__malloc_unlock>
   85264:	2880004c 	andi	r2,r5,1
   85268:	3a4d883a 	add	r6,r7,r9
   8526c:	1000071e 	bne	r2,zero,8528c <_free_r+0x218>
   85270:	80bffe17 	ldw	r2,-8(r16)
   85274:	4091c83a 	sub	r8,r8,r2
   85278:	41000317 	ldw	r4,12(r8)
   8527c:	40c00217 	ldw	r3,8(r8)
   85280:	308d883a 	add	r6,r6,r2
   85284:	20c00215 	stw	r3,8(r4)
   85288:	19000315 	stw	r4,12(r3)
   8528c:	00800274 	movhi	r2,9
   85290:	10bcc104 	addi	r2,r2,-3324
   85294:	11000017 	ldw	r4,0(r2)
   85298:	30c00054 	ori	r3,r6,1
   8529c:	52000215 	stw	r8,8(r10)
   852a0:	40c00115 	stw	r3,4(r8)
   852a4:	313fa036 	bltu	r6,r4,85128 <_free_r+0xb4>
   852a8:	00800274 	movhi	r2,9
   852ac:	10836704 	addi	r2,r2,3484
   852b0:	11400017 	ldw	r5,0(r2)
   852b4:	8809883a 	mov	r4,r17
   852b8:	0084f480 	call	84f48 <_malloc_trim_r>
   852bc:	003f9a06 	br	85128 <_free_r+0xb4>
   852c0:	00800104 	movi	r2,4
   852c4:	10c0072e 	bgeu	r2,r3,852e4 <_free_r+0x270>
   852c8:	00800504 	movi	r2,20
   852cc:	10c01936 	bltu	r2,r3,85334 <_free_r+0x2c0>
   852d0:	188016c4 	addi	r2,r3,91
   852d4:	100690fa 	slli	r3,r2,3
   852d8:	003fb306 	br	851a8 <_free_r+0x134>
   852dc:	01400044 	movi	r5,1
   852e0:	003f7e06 	br	850dc <_free_r+0x68>
   852e4:	3804d1ba 	srli	r2,r7,6
   852e8:	10800e04 	addi	r2,r2,56
   852ec:	100690fa 	slli	r3,r2,3
   852f0:	003fad06 	br	851a8 <_free_r+0x134>
   852f4:	22000315 	stw	r8,12(r4)
   852f8:	22000215 	stw	r8,8(r4)
   852fc:	3a05883a 	add	r2,r7,r8
   85300:	38c00054 	ori	r3,r7,1
   85304:	11c00015 	stw	r7,0(r2)
   85308:	41000215 	stw	r4,8(r8)
   8530c:	40c00115 	stw	r3,4(r8)
   85310:	41000315 	stw	r4,12(r8)
   85314:	003f8406 	br	85128 <_free_r+0xb4>
   85318:	1005d0ba 	srai	r2,r2,2
   8531c:	00c00044 	movi	r3,1
   85320:	51000117 	ldw	r4,4(r10)
   85324:	1886983a 	sll	r3,r3,r2
   85328:	20c8b03a 	or	r4,r4,r3
   8532c:	51000115 	stw	r4,4(r10)
   85330:	003fa706 	br	851d0 <_free_r+0x15c>
   85334:	00801504 	movi	r2,84
   85338:	10c00436 	bltu	r2,r3,8534c <_free_r+0x2d8>
   8533c:	3804d33a 	srli	r2,r7,12
   85340:	10801b84 	addi	r2,r2,110
   85344:	100690fa 	slli	r3,r2,3
   85348:	003f9706 	br	851a8 <_free_r+0x134>
   8534c:	00805504 	movi	r2,340
   85350:	10c00436 	bltu	r2,r3,85364 <_free_r+0x2f0>
   85354:	3804d3fa 	srli	r2,r7,15
   85358:	10801dc4 	addi	r2,r2,119
   8535c:	100690fa 	slli	r3,r2,3
   85360:	003f9106 	br	851a8 <_free_r+0x134>
   85364:	00815504 	movi	r2,1364
   85368:	10c0032e 	bgeu	r2,r3,85378 <_free_r+0x304>
   8536c:	00801f84 	movi	r2,126
   85370:	00c0fc04 	movi	r3,1008
   85374:	003f8c06 	br	851a8 <_free_r+0x134>
   85378:	3804d4ba 	srli	r2,r7,18
   8537c:	10801f04 	addi	r2,r2,124
   85380:	100690fa 	slli	r3,r2,3
   85384:	003f8806 	br	851a8 <_free_r+0x134>

00085388 <__sfvwrite_r>:
   85388:	30800217 	ldw	r2,8(r6)
   8538c:	defff504 	addi	sp,sp,-44
   85390:	df000915 	stw	fp,36(sp)
   85394:	dd800715 	stw	r22,28(sp)
   85398:	dc800315 	stw	r18,12(sp)
   8539c:	dfc00a15 	stw	ra,40(sp)
   853a0:	ddc00815 	stw	r23,32(sp)
   853a4:	dd400615 	stw	r21,24(sp)
   853a8:	dd000515 	stw	r20,20(sp)
   853ac:	dcc00415 	stw	r19,16(sp)
   853b0:	dc400215 	stw	r17,8(sp)
   853b4:	dc000115 	stw	r16,4(sp)
   853b8:	302d883a 	mov	r22,r6
   853bc:	2039883a 	mov	fp,r4
   853c0:	2825883a 	mov	r18,r5
   853c4:	10001c26 	beq	r2,zero,85438 <__sfvwrite_r+0xb0>
   853c8:	29c0030b 	ldhu	r7,12(r5)
   853cc:	3880020c 	andi	r2,r7,8
   853d0:	10002726 	beq	r2,zero,85470 <__sfvwrite_r+0xe8>
   853d4:	28800417 	ldw	r2,16(r5)
   853d8:	10002526 	beq	r2,zero,85470 <__sfvwrite_r+0xe8>
   853dc:	3880008c 	andi	r2,r7,2
   853e0:	b5400017 	ldw	r21,0(r22)
   853e4:	10002826 	beq	r2,zero,85488 <__sfvwrite_r+0x100>
   853e8:	0021883a 	mov	r16,zero
   853ec:	0023883a 	mov	r17,zero
   853f0:	880d883a 	mov	r6,r17
   853f4:	e009883a 	mov	r4,fp
   853f8:	00810004 	movi	r2,1024
   853fc:	80006e26 	beq	r16,zero,855b8 <__sfvwrite_r+0x230>
   85400:	800f883a 	mov	r7,r16
   85404:	91400717 	ldw	r5,28(r18)
   85408:	1400012e 	bgeu	r2,r16,85410 <__sfvwrite_r+0x88>
   8540c:	100f883a 	mov	r7,r2
   85410:	90c00917 	ldw	r3,36(r18)
   85414:	183ee83a 	callr	r3
   85418:	1007883a 	mov	r3,r2
   8541c:	80a1c83a 	sub	r16,r16,r2
   85420:	88a3883a 	add	r17,r17,r2
   85424:	00806d0e 	bge	zero,r2,855dc <__sfvwrite_r+0x254>
   85428:	b0800217 	ldw	r2,8(r22)
   8542c:	10c5c83a 	sub	r2,r2,r3
   85430:	b0800215 	stw	r2,8(r22)
   85434:	103fee1e 	bne	r2,zero,853f0 <__sfvwrite_r+0x68>
   85438:	0009883a 	mov	r4,zero
   8543c:	2005883a 	mov	r2,r4
   85440:	dfc00a17 	ldw	ra,40(sp)
   85444:	df000917 	ldw	fp,36(sp)
   85448:	ddc00817 	ldw	r23,32(sp)
   8544c:	dd800717 	ldw	r22,28(sp)
   85450:	dd400617 	ldw	r21,24(sp)
   85454:	dd000517 	ldw	r20,20(sp)
   85458:	dcc00417 	ldw	r19,16(sp)
   8545c:	dc800317 	ldw	r18,12(sp)
   85460:	dc400217 	ldw	r17,8(sp)
   85464:	dc000117 	ldw	r16,4(sp)
   85468:	dec00b04 	addi	sp,sp,44
   8546c:	f800283a 	ret
   85470:	00831500 	call	83150 <__swsetup_r>
   85474:	1000e41e 	bne	r2,zero,85808 <__sfvwrite_r+0x480>
   85478:	91c0030b 	ldhu	r7,12(r18)
   8547c:	b5400017 	ldw	r21,0(r22)
   85480:	3880008c 	andi	r2,r7,2
   85484:	103fd81e 	bne	r2,zero,853e8 <__sfvwrite_r+0x60>
   85488:	3880004c 	andi	r2,r7,1
   8548c:	1005003a 	cmpeq	r2,r2,zero
   85490:	10005726 	beq	r2,zero,855f0 <__sfvwrite_r+0x268>
   85494:	0029883a 	mov	r20,zero
   85498:	002f883a 	mov	r23,zero
   8549c:	a0004226 	beq	r20,zero,855a8 <__sfvwrite_r+0x220>
   854a0:	3880800c 	andi	r2,r7,512
   854a4:	94000217 	ldw	r16,8(r18)
   854a8:	10008b26 	beq	r2,zero,856d8 <__sfvwrite_r+0x350>
   854ac:	800d883a 	mov	r6,r16
   854b0:	a400a536 	bltu	r20,r16,85748 <__sfvwrite_r+0x3c0>
   854b4:	3881200c 	andi	r2,r7,1152
   854b8:	10002726 	beq	r2,zero,85558 <__sfvwrite_r+0x1d0>
   854bc:	90800517 	ldw	r2,20(r18)
   854c0:	92000417 	ldw	r8,16(r18)
   854c4:	91400017 	ldw	r5,0(r18)
   854c8:	1087883a 	add	r3,r2,r2
   854cc:	1887883a 	add	r3,r3,r2
   854d0:	1808d7fa 	srli	r4,r3,31
   854d4:	2a21c83a 	sub	r16,r5,r8
   854d8:	80800044 	addi	r2,r16,1
   854dc:	20c9883a 	add	r4,r4,r3
   854e0:	2027d07a 	srai	r19,r4,1
   854e4:	a085883a 	add	r2,r20,r2
   854e8:	980d883a 	mov	r6,r19
   854ec:	9880022e 	bgeu	r19,r2,854f8 <__sfvwrite_r+0x170>
   854f0:	1027883a 	mov	r19,r2
   854f4:	100d883a 	mov	r6,r2
   854f8:	3881000c 	andi	r2,r7,1024
   854fc:	1000b826 	beq	r2,zero,857e0 <__sfvwrite_r+0x458>
   85500:	300b883a 	mov	r5,r6
   85504:	e009883a 	mov	r4,fp
   85508:	0085bfc0 	call	85bfc <_malloc_r>
   8550c:	10003126 	beq	r2,zero,855d4 <__sfvwrite_r+0x24c>
   85510:	91400417 	ldw	r5,16(r18)
   85514:	1009883a 	mov	r4,r2
   85518:	800d883a 	mov	r6,r16
   8551c:	1023883a 	mov	r17,r2
   85520:	00864200 	call	86420 <memcpy>
   85524:	90c0030b 	ldhu	r3,12(r18)
   85528:	00beffc4 	movi	r2,-1025
   8552c:	1886703a 	and	r3,r3,r2
   85530:	18c02014 	ori	r3,r3,128
   85534:	90c0030d 	sth	r3,12(r18)
   85538:	9c07c83a 	sub	r3,r19,r16
   8553c:	8c05883a 	add	r2,r17,r16
   85540:	a00d883a 	mov	r6,r20
   85544:	a021883a 	mov	r16,r20
   85548:	90800015 	stw	r2,0(r18)
   8554c:	90c00215 	stw	r3,8(r18)
   85550:	94400415 	stw	r17,16(r18)
   85554:	94c00515 	stw	r19,20(r18)
   85558:	91000017 	ldw	r4,0(r18)
   8555c:	b80b883a 	mov	r5,r23
   85560:	a023883a 	mov	r17,r20
   85564:	00864c00 	call	864c0 <memmove>
   85568:	90c00217 	ldw	r3,8(r18)
   8556c:	90800017 	ldw	r2,0(r18)
   85570:	a027883a 	mov	r19,r20
   85574:	1c07c83a 	sub	r3,r3,r16
   85578:	1405883a 	add	r2,r2,r16
   8557c:	90c00215 	stw	r3,8(r18)
   85580:	a021883a 	mov	r16,r20
   85584:	90800015 	stw	r2,0(r18)
   85588:	b0800217 	ldw	r2,8(r22)
   8558c:	1405c83a 	sub	r2,r2,r16
   85590:	b0800215 	stw	r2,8(r22)
   85594:	103fa826 	beq	r2,zero,85438 <__sfvwrite_r+0xb0>
   85598:	a469c83a 	sub	r20,r20,r17
   8559c:	91c0030b 	ldhu	r7,12(r18)
   855a0:	bcef883a 	add	r23,r23,r19
   855a4:	a03fbe1e 	bne	r20,zero,854a0 <__sfvwrite_r+0x118>
   855a8:	adc00017 	ldw	r23,0(r21)
   855ac:	ad000117 	ldw	r20,4(r21)
   855b0:	ad400204 	addi	r21,r21,8
   855b4:	003fb906 	br	8549c <__sfvwrite_r+0x114>
   855b8:	ac400017 	ldw	r17,0(r21)
   855bc:	ac000117 	ldw	r16,4(r21)
   855c0:	ad400204 	addi	r21,r21,8
   855c4:	003f8a06 	br	853f0 <__sfvwrite_r+0x68>
   855c8:	91400417 	ldw	r5,16(r18)
   855cc:	e009883a 	mov	r4,fp
   855d0:	00850740 	call	85074 <_free_r>
   855d4:	00800304 	movi	r2,12
   855d8:	e0800015 	stw	r2,0(fp)
   855dc:	9080030b 	ldhu	r2,12(r18)
   855e0:	013fffc4 	movi	r4,-1
   855e4:	10801014 	ori	r2,r2,64
   855e8:	9080030d 	sth	r2,12(r18)
   855ec:	003f9306 	br	8543c <__sfvwrite_r+0xb4>
   855f0:	0027883a 	mov	r19,zero
   855f4:	002f883a 	mov	r23,zero
   855f8:	d8000015 	stw	zero,0(sp)
   855fc:	0029883a 	mov	r20,zero
   85600:	98001e26 	beq	r19,zero,8567c <__sfvwrite_r+0x2f4>
   85604:	d8c00017 	ldw	r3,0(sp)
   85608:	1804c03a 	cmpne	r2,r3,zero
   8560c:	10005e26 	beq	r2,zero,85788 <__sfvwrite_r+0x400>
   85610:	9821883a 	mov	r16,r19
   85614:	a4c0012e 	bgeu	r20,r19,8561c <__sfvwrite_r+0x294>
   85618:	a021883a 	mov	r16,r20
   8561c:	91000017 	ldw	r4,0(r18)
   85620:	90800417 	ldw	r2,16(r18)
   85624:	91800217 	ldw	r6,8(r18)
   85628:	91c00517 	ldw	r7,20(r18)
   8562c:	1100022e 	bgeu	r2,r4,85638 <__sfvwrite_r+0x2b0>
   85630:	31e3883a 	add	r17,r6,r7
   85634:	8c001616 	blt	r17,r16,85690 <__sfvwrite_r+0x308>
   85638:	81c03816 	blt	r16,r7,8571c <__sfvwrite_r+0x394>
   8563c:	90c00917 	ldw	r3,36(r18)
   85640:	91400717 	ldw	r5,28(r18)
   85644:	e009883a 	mov	r4,fp
   85648:	b80d883a 	mov	r6,r23
   8564c:	183ee83a 	callr	r3
   85650:	1023883a 	mov	r17,r2
   85654:	00bfe10e 	bge	zero,r2,855dc <__sfvwrite_r+0x254>
   85658:	a469c83a 	sub	r20,r20,r17
   8565c:	a0001826 	beq	r20,zero,856c0 <__sfvwrite_r+0x338>
   85660:	b0800217 	ldw	r2,8(r22)
   85664:	1445c83a 	sub	r2,r2,r17
   85668:	b0800215 	stw	r2,8(r22)
   8566c:	103f7226 	beq	r2,zero,85438 <__sfvwrite_r+0xb0>
   85670:	9c67c83a 	sub	r19,r19,r17
   85674:	bc6f883a 	add	r23,r23,r17
   85678:	983fe21e 	bne	r19,zero,85604 <__sfvwrite_r+0x27c>
   8567c:	adc00017 	ldw	r23,0(r21)
   85680:	acc00117 	ldw	r19,4(r21)
   85684:	ad400204 	addi	r21,r21,8
   85688:	d8000015 	stw	zero,0(sp)
   8568c:	003fdc06 	br	85600 <__sfvwrite_r+0x278>
   85690:	b80b883a 	mov	r5,r23
   85694:	880d883a 	mov	r6,r17
   85698:	00864c00 	call	864c0 <memmove>
   8569c:	90c00017 	ldw	r3,0(r18)
   856a0:	e009883a 	mov	r4,fp
   856a4:	900b883a 	mov	r5,r18
   856a8:	1c47883a 	add	r3,r3,r17
   856ac:	90c00015 	stw	r3,0(r18)
   856b0:	0084a580 	call	84a58 <_fflush_r>
   856b4:	103fc91e 	bne	r2,zero,855dc <__sfvwrite_r+0x254>
   856b8:	a469c83a 	sub	r20,r20,r17
   856bc:	a03fe81e 	bne	r20,zero,85660 <__sfvwrite_r+0x2d8>
   856c0:	e009883a 	mov	r4,fp
   856c4:	900b883a 	mov	r5,r18
   856c8:	0084a580 	call	84a58 <_fflush_r>
   856cc:	103fc31e 	bne	r2,zero,855dc <__sfvwrite_r+0x254>
   856d0:	d8000015 	stw	zero,0(sp)
   856d4:	003fe206 	br	85660 <__sfvwrite_r+0x2d8>
   856d8:	91000017 	ldw	r4,0(r18)
   856dc:	90800417 	ldw	r2,16(r18)
   856e0:	1100022e 	bgeu	r2,r4,856ec <__sfvwrite_r+0x364>
   856e4:	8023883a 	mov	r17,r16
   856e8:	85003136 	bltu	r16,r20,857b0 <__sfvwrite_r+0x428>
   856ec:	91c00517 	ldw	r7,20(r18)
   856f0:	a1c01836 	bltu	r20,r7,85754 <__sfvwrite_r+0x3cc>
   856f4:	90c00917 	ldw	r3,36(r18)
   856f8:	91400717 	ldw	r5,28(r18)
   856fc:	e009883a 	mov	r4,fp
   85700:	b80d883a 	mov	r6,r23
   85704:	183ee83a 	callr	r3
   85708:	1021883a 	mov	r16,r2
   8570c:	00bfb30e 	bge	zero,r2,855dc <__sfvwrite_r+0x254>
   85710:	1023883a 	mov	r17,r2
   85714:	1027883a 	mov	r19,r2
   85718:	003f9b06 	br	85588 <__sfvwrite_r+0x200>
   8571c:	b80b883a 	mov	r5,r23
   85720:	800d883a 	mov	r6,r16
   85724:	00864c00 	call	864c0 <memmove>
   85728:	90c00217 	ldw	r3,8(r18)
   8572c:	90800017 	ldw	r2,0(r18)
   85730:	8023883a 	mov	r17,r16
   85734:	1c07c83a 	sub	r3,r3,r16
   85738:	1405883a 	add	r2,r2,r16
   8573c:	90c00215 	stw	r3,8(r18)
   85740:	90800015 	stw	r2,0(r18)
   85744:	003fc406 	br	85658 <__sfvwrite_r+0x2d0>
   85748:	a00d883a 	mov	r6,r20
   8574c:	a021883a 	mov	r16,r20
   85750:	003f8106 	br	85558 <__sfvwrite_r+0x1d0>
   85754:	b80b883a 	mov	r5,r23
   85758:	a00d883a 	mov	r6,r20
   8575c:	00864c00 	call	864c0 <memmove>
   85760:	90c00217 	ldw	r3,8(r18)
   85764:	90800017 	ldw	r2,0(r18)
   85768:	a021883a 	mov	r16,r20
   8576c:	1d07c83a 	sub	r3,r3,r20
   85770:	1505883a 	add	r2,r2,r20
   85774:	a023883a 	mov	r17,r20
   85778:	a027883a 	mov	r19,r20
   8577c:	90c00215 	stw	r3,8(r18)
   85780:	90800015 	stw	r2,0(r18)
   85784:	003f8006 	br	85588 <__sfvwrite_r+0x200>
   85788:	b809883a 	mov	r4,r23
   8578c:	01400284 	movi	r5,10
   85790:	980d883a 	mov	r6,r19
   85794:	008633c0 	call	8633c <memchr>
   85798:	10001726 	beq	r2,zero,857f8 <__sfvwrite_r+0x470>
   8579c:	15c5c83a 	sub	r2,r2,r23
   857a0:	15000044 	addi	r20,r2,1
   857a4:	00800044 	movi	r2,1
   857a8:	d8800015 	stw	r2,0(sp)
   857ac:	003f9806 	br	85610 <__sfvwrite_r+0x288>
   857b0:	b80b883a 	mov	r5,r23
   857b4:	800d883a 	mov	r6,r16
   857b8:	00864c00 	call	864c0 <memmove>
   857bc:	90c00017 	ldw	r3,0(r18)
   857c0:	e009883a 	mov	r4,fp
   857c4:	900b883a 	mov	r5,r18
   857c8:	1c07883a 	add	r3,r3,r16
   857cc:	90c00015 	stw	r3,0(r18)
   857d0:	8027883a 	mov	r19,r16
   857d4:	0084a580 	call	84a58 <_fflush_r>
   857d8:	103f6b26 	beq	r2,zero,85588 <__sfvwrite_r+0x200>
   857dc:	003f7f06 	br	855dc <__sfvwrite_r+0x254>
   857e0:	400b883a 	mov	r5,r8
   857e4:	e009883a 	mov	r4,fp
   857e8:	008762c0 	call	8762c <_realloc_r>
   857ec:	103f7626 	beq	r2,zero,855c8 <__sfvwrite_r+0x240>
   857f0:	1023883a 	mov	r17,r2
   857f4:	003f5006 	br	85538 <__sfvwrite_r+0x1b0>
   857f8:	00c00044 	movi	r3,1
   857fc:	9d000044 	addi	r20,r19,1
   85800:	d8c00015 	stw	r3,0(sp)
   85804:	003f8206 	br	85610 <__sfvwrite_r+0x288>
   85808:	9080030b 	ldhu	r2,12(r18)
   8580c:	00c00244 	movi	r3,9
   85810:	013fffc4 	movi	r4,-1
   85814:	10801014 	ori	r2,r2,64
   85818:	9080030d 	sth	r2,12(r18)
   8581c:	e0c00015 	stw	r3,0(fp)
   85820:	003f0606 	br	8543c <__sfvwrite_r+0xb4>

00085824 <_fwalk_reent>:
   85824:	defff704 	addi	sp,sp,-36
   85828:	dcc00315 	stw	r19,12(sp)
   8582c:	24c0b804 	addi	r19,r4,736
   85830:	dd800615 	stw	r22,24(sp)
   85834:	dd400515 	stw	r21,20(sp)
   85838:	dfc00815 	stw	ra,32(sp)
   8583c:	ddc00715 	stw	r23,28(sp)
   85840:	dd000415 	stw	r20,16(sp)
   85844:	dc800215 	stw	r18,8(sp)
   85848:	dc400115 	stw	r17,4(sp)
   8584c:	dc000015 	stw	r16,0(sp)
   85850:	202b883a 	mov	r21,r4
   85854:	282d883a 	mov	r22,r5
   85858:	0084ce00 	call	84ce0 <__sfp_lock_acquire>
   8585c:	98002126 	beq	r19,zero,858e4 <_fwalk_reent+0xc0>
   85860:	002f883a 	mov	r23,zero
   85864:	9c800117 	ldw	r18,4(r19)
   85868:	9c000217 	ldw	r16,8(r19)
   8586c:	90bfffc4 	addi	r2,r18,-1
   85870:	10000d16 	blt	r2,zero,858a8 <_fwalk_reent+0x84>
   85874:	0023883a 	mov	r17,zero
   85878:	053fffc4 	movi	r20,-1
   8587c:	8080030f 	ldh	r2,12(r16)
   85880:	8c400044 	addi	r17,r17,1
   85884:	10000626 	beq	r2,zero,858a0 <_fwalk_reent+0x7c>
   85888:	8080038f 	ldh	r2,14(r16)
   8588c:	800b883a 	mov	r5,r16
   85890:	a809883a 	mov	r4,r21
   85894:	15000226 	beq	r2,r20,858a0 <_fwalk_reent+0x7c>
   85898:	b03ee83a 	callr	r22
   8589c:	b8aeb03a 	or	r23,r23,r2
   858a0:	84001704 	addi	r16,r16,92
   858a4:	947ff51e 	bne	r18,r17,8587c <_fwalk_reent+0x58>
   858a8:	9cc00017 	ldw	r19,0(r19)
   858ac:	983fed1e 	bne	r19,zero,85864 <_fwalk_reent+0x40>
   858b0:	0084ce40 	call	84ce4 <__sfp_lock_release>
   858b4:	b805883a 	mov	r2,r23
   858b8:	dfc00817 	ldw	ra,32(sp)
   858bc:	ddc00717 	ldw	r23,28(sp)
   858c0:	dd800617 	ldw	r22,24(sp)
   858c4:	dd400517 	ldw	r21,20(sp)
   858c8:	dd000417 	ldw	r20,16(sp)
   858cc:	dcc00317 	ldw	r19,12(sp)
   858d0:	dc800217 	ldw	r18,8(sp)
   858d4:	dc400117 	ldw	r17,4(sp)
   858d8:	dc000017 	ldw	r16,0(sp)
   858dc:	dec00904 	addi	sp,sp,36
   858e0:	f800283a 	ret
   858e4:	002f883a 	mov	r23,zero
   858e8:	003ff106 	br	858b0 <_fwalk_reent+0x8c>

000858ec <_fwalk>:
   858ec:	defff804 	addi	sp,sp,-32
   858f0:	dcc00315 	stw	r19,12(sp)
   858f4:	24c0b804 	addi	r19,r4,736
   858f8:	dd400515 	stw	r21,20(sp)
   858fc:	dfc00715 	stw	ra,28(sp)
   85900:	dd800615 	stw	r22,24(sp)
   85904:	dd000415 	stw	r20,16(sp)
   85908:	dc800215 	stw	r18,8(sp)
   8590c:	dc400115 	stw	r17,4(sp)
   85910:	dc000015 	stw	r16,0(sp)
   85914:	282b883a 	mov	r21,r5
   85918:	0084ce00 	call	84ce0 <__sfp_lock_acquire>
   8591c:	98001f26 	beq	r19,zero,8599c <_fwalk+0xb0>
   85920:	002d883a 	mov	r22,zero
   85924:	9c800117 	ldw	r18,4(r19)
   85928:	9c000217 	ldw	r16,8(r19)
   8592c:	90bfffc4 	addi	r2,r18,-1
   85930:	10000c16 	blt	r2,zero,85964 <_fwalk+0x78>
   85934:	0023883a 	mov	r17,zero
   85938:	053fffc4 	movi	r20,-1
   8593c:	8080030f 	ldh	r2,12(r16)
   85940:	8c400044 	addi	r17,r17,1
   85944:	10000526 	beq	r2,zero,8595c <_fwalk+0x70>
   85948:	8080038f 	ldh	r2,14(r16)
   8594c:	8009883a 	mov	r4,r16
   85950:	15000226 	beq	r2,r20,8595c <_fwalk+0x70>
   85954:	a83ee83a 	callr	r21
   85958:	b0acb03a 	or	r22,r22,r2
   8595c:	84001704 	addi	r16,r16,92
   85960:	947ff61e 	bne	r18,r17,8593c <_fwalk+0x50>
   85964:	9cc00017 	ldw	r19,0(r19)
   85968:	983fee1e 	bne	r19,zero,85924 <_fwalk+0x38>
   8596c:	0084ce40 	call	84ce4 <__sfp_lock_release>
   85970:	b005883a 	mov	r2,r22
   85974:	dfc00717 	ldw	ra,28(sp)
   85978:	dd800617 	ldw	r22,24(sp)
   8597c:	dd400517 	ldw	r21,20(sp)
   85980:	dd000417 	ldw	r20,16(sp)
   85984:	dcc00317 	ldw	r19,12(sp)
   85988:	dc800217 	ldw	r18,8(sp)
   8598c:	dc400117 	ldw	r17,4(sp)
   85990:	dc000017 	ldw	r16,0(sp)
   85994:	dec00804 	addi	sp,sp,32
   85998:	f800283a 	ret
   8599c:	002d883a 	mov	r22,zero
   859a0:	003ff206 	br	8596c <_fwalk+0x80>

000859a4 <__locale_charset>:
   859a4:	d0a00317 	ldw	r2,-32756(gp)
   859a8:	f800283a 	ret

000859ac <_localeconv_r>:
   859ac:	00800274 	movhi	r2,9
   859b0:	10b58f04 	addi	r2,r2,-10692
   859b4:	f800283a 	ret

000859b8 <localeconv>:
   859b8:	00800274 	movhi	r2,9
   859bc:	10bcbd04 	addi	r2,r2,-3340
   859c0:	11000017 	ldw	r4,0(r2)
   859c4:	00859ac1 	jmpi	859ac <_localeconv_r>

000859c8 <_setlocale_r>:
   859c8:	defffc04 	addi	sp,sp,-16
   859cc:	00c00274 	movhi	r3,9
   859d0:	18f58a04 	addi	r3,r3,-10712
   859d4:	dc800215 	stw	r18,8(sp)
   859d8:	dc400115 	stw	r17,4(sp)
   859dc:	dc000015 	stw	r16,0(sp)
   859e0:	2023883a 	mov	r17,r4
   859e4:	2825883a 	mov	r18,r5
   859e8:	dfc00315 	stw	ra,12(sp)
   859ec:	3021883a 	mov	r16,r6
   859f0:	3009883a 	mov	r4,r6
   859f4:	180b883a 	mov	r5,r3
   859f8:	30000926 	beq	r6,zero,85a20 <_setlocale_r+0x58>
   859fc:	0087e4c0 	call	87e4c <strcmp>
   85a00:	8009883a 	mov	r4,r16
   85a04:	01400274 	movhi	r5,9
   85a08:	29757504 	addi	r5,r5,-10796
   85a0c:	10000b1e 	bne	r2,zero,85a3c <_setlocale_r+0x74>
   85a10:	8c000d15 	stw	r16,52(r17)
   85a14:	8c800c15 	stw	r18,48(r17)
   85a18:	00c00274 	movhi	r3,9
   85a1c:	18f58a04 	addi	r3,r3,-10712
   85a20:	1805883a 	mov	r2,r3
   85a24:	dfc00317 	ldw	ra,12(sp)
   85a28:	dc800217 	ldw	r18,8(sp)
   85a2c:	dc400117 	ldw	r17,4(sp)
   85a30:	dc000017 	ldw	r16,0(sp)
   85a34:	dec00404 	addi	sp,sp,16
   85a38:	f800283a 	ret
   85a3c:	0087e4c0 	call	87e4c <strcmp>
   85a40:	0007883a 	mov	r3,zero
   85a44:	103ff226 	beq	r2,zero,85a10 <_setlocale_r+0x48>
   85a48:	003ff506 	br	85a20 <_setlocale_r+0x58>

00085a4c <setlocale>:
   85a4c:	01800274 	movhi	r6,9
   85a50:	31bcbd04 	addi	r6,r6,-3340
   85a54:	2007883a 	mov	r3,r4
   85a58:	31000017 	ldw	r4,0(r6)
   85a5c:	280d883a 	mov	r6,r5
   85a60:	180b883a 	mov	r5,r3
   85a64:	00859c81 	jmpi	859c8 <_setlocale_r>

00085a68 <__smakebuf_r>:
   85a68:	2880030b 	ldhu	r2,12(r5)
   85a6c:	deffed04 	addi	sp,sp,-76
   85a70:	dc401015 	stw	r17,64(sp)
   85a74:	1080008c 	andi	r2,r2,2
   85a78:	dc000f15 	stw	r16,60(sp)
   85a7c:	dfc01215 	stw	ra,72(sp)
   85a80:	dc801115 	stw	r18,68(sp)
   85a84:	2821883a 	mov	r16,r5
   85a88:	2023883a 	mov	r17,r4
   85a8c:	10000b26 	beq	r2,zero,85abc <__smakebuf_r+0x54>
   85a90:	28c010c4 	addi	r3,r5,67
   85a94:	00800044 	movi	r2,1
   85a98:	28800515 	stw	r2,20(r5)
   85a9c:	28c00415 	stw	r3,16(r5)
   85aa0:	28c00015 	stw	r3,0(r5)
   85aa4:	dfc01217 	ldw	ra,72(sp)
   85aa8:	dc801117 	ldw	r18,68(sp)
   85aac:	dc401017 	ldw	r17,64(sp)
   85ab0:	dc000f17 	ldw	r16,60(sp)
   85ab4:	dec01304 	addi	sp,sp,76
   85ab8:	f800283a 	ret
   85abc:	2940038f 	ldh	r5,14(r5)
   85ac0:	28002116 	blt	r5,zero,85b48 <__smakebuf_r+0xe0>
   85ac4:	d80d883a 	mov	r6,sp
   85ac8:	00881c80 	call	881c8 <_fstat_r>
   85acc:	10001e16 	blt	r2,zero,85b48 <__smakebuf_r+0xe0>
   85ad0:	d8800117 	ldw	r2,4(sp)
   85ad4:	00e00014 	movui	r3,32768
   85ad8:	113c000c 	andi	r4,r2,61440
   85adc:	20c03126 	beq	r4,r3,85ba4 <__smakebuf_r+0x13c>
   85ae0:	8080030b 	ldhu	r2,12(r16)
   85ae4:	00c80004 	movi	r3,8192
   85ae8:	10820014 	ori	r2,r2,2048
   85aec:	8080030d 	sth	r2,12(r16)
   85af0:	20c01e26 	beq	r4,r3,85b6c <__smakebuf_r+0x104>
   85af4:	04810004 	movi	r18,1024
   85af8:	8809883a 	mov	r4,r17
   85afc:	900b883a 	mov	r5,r18
   85b00:	0085bfc0 	call	85bfc <_malloc_r>
   85b04:	1009883a 	mov	r4,r2
   85b08:	10003126 	beq	r2,zero,85bd0 <__smakebuf_r+0x168>
   85b0c:	80c0030b 	ldhu	r3,12(r16)
   85b10:	00800234 	movhi	r2,8
   85b14:	10937504 	addi	r2,r2,19924
   85b18:	88800f15 	stw	r2,60(r17)
   85b1c:	18c02014 	ori	r3,r3,128
   85b20:	84800515 	stw	r18,20(r16)
   85b24:	80c0030d 	sth	r3,12(r16)
   85b28:	81000415 	stw	r4,16(r16)
   85b2c:	81000015 	stw	r4,0(r16)
   85b30:	dfc01217 	ldw	ra,72(sp)
   85b34:	dc801117 	ldw	r18,68(sp)
   85b38:	dc401017 	ldw	r17,64(sp)
   85b3c:	dc000f17 	ldw	r16,60(sp)
   85b40:	dec01304 	addi	sp,sp,76
   85b44:	f800283a 	ret
   85b48:	80c0030b 	ldhu	r3,12(r16)
   85b4c:	1880200c 	andi	r2,r3,128
   85b50:	10000426 	beq	r2,zero,85b64 <__smakebuf_r+0xfc>
   85b54:	04801004 	movi	r18,64
   85b58:	18820014 	ori	r2,r3,2048
   85b5c:	8080030d 	sth	r2,12(r16)
   85b60:	003fe506 	br	85af8 <__smakebuf_r+0x90>
   85b64:	04810004 	movi	r18,1024
   85b68:	003ffb06 	br	85b58 <__smakebuf_r+0xf0>
   85b6c:	8140038f 	ldh	r5,14(r16)
   85b70:	8809883a 	mov	r4,r17
   85b74:	008823c0 	call	8823c <_isatty_r>
   85b78:	103fde26 	beq	r2,zero,85af4 <__smakebuf_r+0x8c>
   85b7c:	8080030b 	ldhu	r2,12(r16)
   85b80:	80c010c4 	addi	r3,r16,67
   85b84:	04810004 	movi	r18,1024
   85b88:	10800054 	ori	r2,r2,1
   85b8c:	8080030d 	sth	r2,12(r16)
   85b90:	00800044 	movi	r2,1
   85b94:	80c00415 	stw	r3,16(r16)
   85b98:	80800515 	stw	r2,20(r16)
   85b9c:	80c00015 	stw	r3,0(r16)
   85ba0:	003fd506 	br	85af8 <__smakebuf_r+0x90>
   85ba4:	80c00a17 	ldw	r3,40(r16)
   85ba8:	00800234 	movhi	r2,8
   85bac:	109f4204 	addi	r2,r2,32008
   85bb0:	18bfcb1e 	bne	r3,r2,85ae0 <__smakebuf_r+0x78>
   85bb4:	8080030b 	ldhu	r2,12(r16)
   85bb8:	00c10004 	movi	r3,1024
   85bbc:	1825883a 	mov	r18,r3
   85bc0:	10c4b03a 	or	r2,r2,r3
   85bc4:	8080030d 	sth	r2,12(r16)
   85bc8:	80c01315 	stw	r3,76(r16)
   85bcc:	003fca06 	br	85af8 <__smakebuf_r+0x90>
   85bd0:	8100030b 	ldhu	r4,12(r16)
   85bd4:	2080800c 	andi	r2,r4,512
   85bd8:	103fb21e 	bne	r2,zero,85aa4 <__smakebuf_r+0x3c>
   85bdc:	80c010c4 	addi	r3,r16,67
   85be0:	21000094 	ori	r4,r4,2
   85be4:	00800044 	movi	r2,1
   85be8:	80800515 	stw	r2,20(r16)
   85bec:	8100030d 	sth	r4,12(r16)
   85bf0:	80c00415 	stw	r3,16(r16)
   85bf4:	80c00015 	stw	r3,0(r16)
   85bf8:	003faa06 	br	85aa4 <__smakebuf_r+0x3c>

00085bfc <_malloc_r>:
   85bfc:	defff604 	addi	sp,sp,-40
   85c00:	28c002c4 	addi	r3,r5,11
   85c04:	00800584 	movi	r2,22
   85c08:	dc800215 	stw	r18,8(sp)
   85c0c:	dfc00915 	stw	ra,36(sp)
   85c10:	df000815 	stw	fp,32(sp)
   85c14:	ddc00715 	stw	r23,28(sp)
   85c18:	dd800615 	stw	r22,24(sp)
   85c1c:	dd400515 	stw	r21,20(sp)
   85c20:	dd000415 	stw	r20,16(sp)
   85c24:	dcc00315 	stw	r19,12(sp)
   85c28:	dc400115 	stw	r17,4(sp)
   85c2c:	dc000015 	stw	r16,0(sp)
   85c30:	2025883a 	mov	r18,r4
   85c34:	10c01236 	bltu	r2,r3,85c80 <_malloc_r+0x84>
   85c38:	04400404 	movi	r17,16
   85c3c:	8940142e 	bgeu	r17,r5,85c90 <_malloc_r+0x94>
   85c40:	00800304 	movi	r2,12
   85c44:	0007883a 	mov	r3,zero
   85c48:	90800015 	stw	r2,0(r18)
   85c4c:	1805883a 	mov	r2,r3
   85c50:	dfc00917 	ldw	ra,36(sp)
   85c54:	df000817 	ldw	fp,32(sp)
   85c58:	ddc00717 	ldw	r23,28(sp)
   85c5c:	dd800617 	ldw	r22,24(sp)
   85c60:	dd400517 	ldw	r21,20(sp)
   85c64:	dd000417 	ldw	r20,16(sp)
   85c68:	dcc00317 	ldw	r19,12(sp)
   85c6c:	dc800217 	ldw	r18,8(sp)
   85c70:	dc400117 	ldw	r17,4(sp)
   85c74:	dc000017 	ldw	r16,0(sp)
   85c78:	dec00a04 	addi	sp,sp,40
   85c7c:	f800283a 	ret
   85c80:	00bffe04 	movi	r2,-8
   85c84:	18a2703a 	and	r17,r3,r2
   85c88:	883fed16 	blt	r17,zero,85c40 <_malloc_r+0x44>
   85c8c:	897fec36 	bltu	r17,r5,85c40 <_malloc_r+0x44>
   85c90:	9009883a 	mov	r4,r18
   85c94:	008b0100 	call	8b010 <__malloc_lock>
   85c98:	00807dc4 	movi	r2,503
   85c9c:	14402b2e 	bgeu	r2,r17,85d4c <_malloc_r+0x150>
   85ca0:	8806d27a 	srli	r3,r17,9
   85ca4:	18003f1e 	bne	r3,zero,85da4 <_malloc_r+0x1a8>
   85ca8:	880cd0fa 	srli	r6,r17,3
   85cac:	300490fa 	slli	r2,r6,3
   85cb0:	02c00274 	movhi	r11,9
   85cb4:	5af73904 	addi	r11,r11,-8988
   85cb8:	12cb883a 	add	r5,r2,r11
   85cbc:	2c000317 	ldw	r16,12(r5)
   85cc0:	580f883a 	mov	r7,r11
   85cc4:	2c00041e 	bne	r5,r16,85cd8 <_malloc_r+0xdc>
   85cc8:	00000a06 	br	85cf4 <_malloc_r+0xf8>
   85ccc:	1800860e 	bge	r3,zero,85ee8 <_malloc_r+0x2ec>
   85cd0:	84000317 	ldw	r16,12(r16)
   85cd4:	2c000726 	beq	r5,r16,85cf4 <_malloc_r+0xf8>
   85cd8:	80800117 	ldw	r2,4(r16)
   85cdc:	00ffff04 	movi	r3,-4
   85ce0:	10c8703a 	and	r4,r2,r3
   85ce4:	2447c83a 	sub	r3,r4,r17
   85ce8:	008003c4 	movi	r2,15
   85cec:	10fff70e 	bge	r2,r3,85ccc <_malloc_r+0xd0>
   85cf0:	31bfffc4 	addi	r6,r6,-1
   85cf4:	32400044 	addi	r9,r6,1
   85cf8:	02800274 	movhi	r10,9
   85cfc:	52b73b04 	addi	r10,r10,-8980
   85d00:	54000217 	ldw	r16,8(r10)
   85d04:	8280a026 	beq	r16,r10,85f88 <_malloc_r+0x38c>
   85d08:	80800117 	ldw	r2,4(r16)
   85d0c:	00ffff04 	movi	r3,-4
   85d10:	10ca703a 	and	r5,r2,r3
   85d14:	2c4dc83a 	sub	r6,r5,r17
   85d18:	008003c4 	movi	r2,15
   85d1c:	11808316 	blt	r2,r6,85f2c <_malloc_r+0x330>
   85d20:	52800315 	stw	r10,12(r10)
   85d24:	52800215 	stw	r10,8(r10)
   85d28:	30002916 	blt	r6,zero,85dd0 <_malloc_r+0x1d4>
   85d2c:	8147883a 	add	r3,r16,r5
   85d30:	18800117 	ldw	r2,4(r3)
   85d34:	9009883a 	mov	r4,r18
   85d38:	10800054 	ori	r2,r2,1
   85d3c:	18800115 	stw	r2,4(r3)
   85d40:	008b0300 	call	8b030 <__malloc_unlock>
   85d44:	80c00204 	addi	r3,r16,8
   85d48:	003fc006 	br	85c4c <_malloc_r+0x50>
   85d4c:	02c00274 	movhi	r11,9
   85d50:	5af73904 	addi	r11,r11,-8988
   85d54:	8ac5883a 	add	r2,r17,r11
   85d58:	14000317 	ldw	r16,12(r2)
   85d5c:	580f883a 	mov	r7,r11
   85d60:	8806d0fa 	srli	r3,r17,3
   85d64:	14006c26 	beq	r2,r16,85f18 <_malloc_r+0x31c>
   85d68:	80c00117 	ldw	r3,4(r16)
   85d6c:	00bfff04 	movi	r2,-4
   85d70:	81800317 	ldw	r6,12(r16)
   85d74:	1886703a 	and	r3,r3,r2
   85d78:	80c7883a 	add	r3,r16,r3
   85d7c:	18800117 	ldw	r2,4(r3)
   85d80:	81400217 	ldw	r5,8(r16)
   85d84:	9009883a 	mov	r4,r18
   85d88:	10800054 	ori	r2,r2,1
   85d8c:	18800115 	stw	r2,4(r3)
   85d90:	31400215 	stw	r5,8(r6)
   85d94:	29800315 	stw	r6,12(r5)
   85d98:	008b0300 	call	8b030 <__malloc_unlock>
   85d9c:	80c00204 	addi	r3,r16,8
   85da0:	003faa06 	br	85c4c <_malloc_r+0x50>
   85da4:	00800104 	movi	r2,4
   85da8:	10c0052e 	bgeu	r2,r3,85dc0 <_malloc_r+0x1c4>
   85dac:	00800504 	movi	r2,20
   85db0:	10c07836 	bltu	r2,r3,85f94 <_malloc_r+0x398>
   85db4:	198016c4 	addi	r6,r3,91
   85db8:	300490fa 	slli	r2,r6,3
   85dbc:	003fbc06 	br	85cb0 <_malloc_r+0xb4>
   85dc0:	8804d1ba 	srli	r2,r17,6
   85dc4:	11800e04 	addi	r6,r2,56
   85dc8:	300490fa 	slli	r2,r6,3
   85dcc:	003fb806 	br	85cb0 <_malloc_r+0xb4>
   85dd0:	00807fc4 	movi	r2,511
   85dd4:	1140bb36 	bltu	r2,r5,860c4 <_malloc_r+0x4c8>
   85dd8:	2806d0fa 	srli	r3,r5,3
   85ddc:	573ffe04 	addi	fp,r10,-8
   85de0:	00800044 	movi	r2,1
   85de4:	180890fa 	slli	r4,r3,3
   85de8:	1807d0ba 	srai	r3,r3,2
   85dec:	e1c00117 	ldw	r7,4(fp)
   85df0:	5909883a 	add	r4,r11,r4
   85df4:	21400217 	ldw	r5,8(r4)
   85df8:	10c4983a 	sll	r2,r2,r3
   85dfc:	81000315 	stw	r4,12(r16)
   85e00:	81400215 	stw	r5,8(r16)
   85e04:	388eb03a 	or	r7,r7,r2
   85e08:	2c000315 	stw	r16,12(r5)
   85e0c:	24000215 	stw	r16,8(r4)
   85e10:	e1c00115 	stw	r7,4(fp)
   85e14:	4807883a 	mov	r3,r9
   85e18:	4800cd16 	blt	r9,zero,86150 <_malloc_r+0x554>
   85e1c:	1807d0ba 	srai	r3,r3,2
   85e20:	00800044 	movi	r2,1
   85e24:	10c8983a 	sll	r4,r2,r3
   85e28:	39004436 	bltu	r7,r4,85f3c <_malloc_r+0x340>
   85e2c:	21c4703a 	and	r2,r4,r7
   85e30:	10000a1e 	bne	r2,zero,85e5c <_malloc_r+0x260>
   85e34:	2109883a 	add	r4,r4,r4
   85e38:	00bfff04 	movi	r2,-4
   85e3c:	4884703a 	and	r2,r9,r2
   85e40:	3906703a 	and	r3,r7,r4
   85e44:	12400104 	addi	r9,r2,4
   85e48:	1800041e 	bne	r3,zero,85e5c <_malloc_r+0x260>
   85e4c:	2109883a 	add	r4,r4,r4
   85e50:	3904703a 	and	r2,r7,r4
   85e54:	4a400104 	addi	r9,r9,4
   85e58:	103ffc26 	beq	r2,zero,85e4c <_malloc_r+0x250>
   85e5c:	480490fa 	slli	r2,r9,3
   85e60:	4819883a 	mov	r12,r9
   85e64:	023fff04 	movi	r8,-4
   85e68:	589b883a 	add	r13,r11,r2
   85e6c:	6807883a 	mov	r3,r13
   85e70:	014003c4 	movi	r5,15
   85e74:	1c000317 	ldw	r16,12(r3)
   85e78:	1c00041e 	bne	r3,r16,85e8c <_malloc_r+0x290>
   85e7c:	0000a706 	br	8611c <_malloc_r+0x520>
   85e80:	3000ab0e 	bge	r6,zero,86130 <_malloc_r+0x534>
   85e84:	84000317 	ldw	r16,12(r16)
   85e88:	1c00a426 	beq	r3,r16,8611c <_malloc_r+0x520>
   85e8c:	80800117 	ldw	r2,4(r16)
   85e90:	1204703a 	and	r2,r2,r8
   85e94:	144dc83a 	sub	r6,r2,r17
   85e98:	29bff90e 	bge	r5,r6,85e80 <_malloc_r+0x284>
   85e9c:	81000317 	ldw	r4,12(r16)
   85ea0:	80c00217 	ldw	r3,8(r16)
   85ea4:	89400054 	ori	r5,r17,1
   85ea8:	8445883a 	add	r2,r16,r17
   85eac:	20c00215 	stw	r3,8(r4)
   85eb0:	19000315 	stw	r4,12(r3)
   85eb4:	81400115 	stw	r5,4(r16)
   85eb8:	1187883a 	add	r3,r2,r6
   85ebc:	31000054 	ori	r4,r6,1
   85ec0:	50800315 	stw	r2,12(r10)
   85ec4:	50800215 	stw	r2,8(r10)
   85ec8:	19800015 	stw	r6,0(r3)
   85ecc:	11000115 	stw	r4,4(r2)
   85ed0:	12800215 	stw	r10,8(r2)
   85ed4:	12800315 	stw	r10,12(r2)
   85ed8:	9009883a 	mov	r4,r18
   85edc:	008b0300 	call	8b030 <__malloc_unlock>
   85ee0:	80c00204 	addi	r3,r16,8
   85ee4:	003f5906 	br	85c4c <_malloc_r+0x50>
   85ee8:	8109883a 	add	r4,r16,r4
   85eec:	20800117 	ldw	r2,4(r4)
   85ef0:	80c00217 	ldw	r3,8(r16)
   85ef4:	81400317 	ldw	r5,12(r16)
   85ef8:	10800054 	ori	r2,r2,1
   85efc:	20800115 	stw	r2,4(r4)
   85f00:	28c00215 	stw	r3,8(r5)
   85f04:	19400315 	stw	r5,12(r3)
   85f08:	9009883a 	mov	r4,r18
   85f0c:	008b0300 	call	8b030 <__malloc_unlock>
   85f10:	80c00204 	addi	r3,r16,8
   85f14:	003f4d06 	br	85c4c <_malloc_r+0x50>
   85f18:	80800204 	addi	r2,r16,8
   85f1c:	14000317 	ldw	r16,12(r2)
   85f20:	143f911e 	bne	r2,r16,85d68 <_malloc_r+0x16c>
   85f24:	1a400084 	addi	r9,r3,2
   85f28:	003f7306 	br	85cf8 <_malloc_r+0xfc>
   85f2c:	88c00054 	ori	r3,r17,1
   85f30:	8445883a 	add	r2,r16,r17
   85f34:	80c00115 	stw	r3,4(r16)
   85f38:	003fdf06 	br	85eb8 <_malloc_r+0x2bc>
   85f3c:	e4000217 	ldw	r16,8(fp)
   85f40:	00bfff04 	movi	r2,-4
   85f44:	80c00117 	ldw	r3,4(r16)
   85f48:	802d883a 	mov	r22,r16
   85f4c:	18aa703a 	and	r21,r3,r2
   85f50:	ac401636 	bltu	r21,r17,85fac <_malloc_r+0x3b0>
   85f54:	ac49c83a 	sub	r4,r21,r17
   85f58:	008003c4 	movi	r2,15
   85f5c:	1100130e 	bge	r2,r4,85fac <_malloc_r+0x3b0>
   85f60:	88800054 	ori	r2,r17,1
   85f64:	8447883a 	add	r3,r16,r17
   85f68:	80800115 	stw	r2,4(r16)
   85f6c:	20800054 	ori	r2,r4,1
   85f70:	18800115 	stw	r2,4(r3)
   85f74:	e0c00215 	stw	r3,8(fp)
   85f78:	9009883a 	mov	r4,r18
   85f7c:	008b0300 	call	8b030 <__malloc_unlock>
   85f80:	80c00204 	addi	r3,r16,8
   85f84:	003f3106 	br	85c4c <_malloc_r+0x50>
   85f88:	39c00117 	ldw	r7,4(r7)
   85f8c:	573ffe04 	addi	fp,r10,-8
   85f90:	003fa006 	br	85e14 <_malloc_r+0x218>
   85f94:	00801504 	movi	r2,84
   85f98:	10c06736 	bltu	r2,r3,86138 <_malloc_r+0x53c>
   85f9c:	8804d33a 	srli	r2,r17,12
   85fa0:	11801b84 	addi	r6,r2,110
   85fa4:	300490fa 	slli	r2,r6,3
   85fa8:	003f4106 	br	85cb0 <_malloc_r+0xb4>
   85fac:	d0a6aa17 	ldw	r2,-25944(gp)
   85fb0:	d0e00517 	ldw	r3,-32748(gp)
   85fb4:	053fffc4 	movi	r20,-1
   85fb8:	10800404 	addi	r2,r2,16
   85fbc:	88a7883a 	add	r19,r17,r2
   85fc0:	1d000326 	beq	r3,r20,85fd0 <_malloc_r+0x3d4>
   85fc4:	98c3ffc4 	addi	r3,r19,4095
   85fc8:	00bc0004 	movi	r2,-4096
   85fcc:	18a6703a 	and	r19,r3,r2
   85fd0:	9009883a 	mov	r4,r18
   85fd4:	980b883a 	mov	r5,r19
   85fd8:	0087c900 	call	87c90 <_sbrk_r>
   85fdc:	1009883a 	mov	r4,r2
   85fe0:	15000426 	beq	r2,r20,85ff4 <_malloc_r+0x3f8>
   85fe4:	854b883a 	add	r5,r16,r21
   85fe8:	1029883a 	mov	r20,r2
   85fec:	11405a2e 	bgeu	r2,r5,86158 <_malloc_r+0x55c>
   85ff0:	87000c26 	beq	r16,fp,86024 <_malloc_r+0x428>
   85ff4:	e4000217 	ldw	r16,8(fp)
   85ff8:	80c00117 	ldw	r3,4(r16)
   85ffc:	00bfff04 	movi	r2,-4
   86000:	1884703a 	and	r2,r3,r2
   86004:	14400336 	bltu	r2,r17,86014 <_malloc_r+0x418>
   86008:	1449c83a 	sub	r4,r2,r17
   8600c:	008003c4 	movi	r2,15
   86010:	113fd316 	blt	r2,r4,85f60 <_malloc_r+0x364>
   86014:	9009883a 	mov	r4,r18
   86018:	008b0300 	call	8b030 <__malloc_unlock>
   8601c:	0007883a 	mov	r3,zero
   86020:	003f0a06 	br	85c4c <_malloc_r+0x50>
   86024:	05c00274 	movhi	r23,9
   86028:	bdc37104 	addi	r23,r23,3524
   8602c:	b8800017 	ldw	r2,0(r23)
   86030:	988d883a 	add	r6,r19,r2
   86034:	b9800015 	stw	r6,0(r23)
   86038:	d0e00517 	ldw	r3,-32748(gp)
   8603c:	00bfffc4 	movi	r2,-1
   86040:	18808e26 	beq	r3,r2,8627c <_malloc_r+0x680>
   86044:	2145c83a 	sub	r2,r4,r5
   86048:	3085883a 	add	r2,r6,r2
   8604c:	b8800015 	stw	r2,0(r23)
   86050:	20c001cc 	andi	r3,r4,7
   86054:	18005f1e 	bne	r3,zero,861d4 <_malloc_r+0x5d8>
   86058:	000b883a 	mov	r5,zero
   8605c:	a4c5883a 	add	r2,r20,r19
   86060:	1083ffcc 	andi	r2,r2,4095
   86064:	00c40004 	movi	r3,4096
   86068:	1887c83a 	sub	r3,r3,r2
   8606c:	28e7883a 	add	r19,r5,r3
   86070:	9009883a 	mov	r4,r18
   86074:	980b883a 	mov	r5,r19
   86078:	0087c900 	call	87c90 <_sbrk_r>
   8607c:	1007883a 	mov	r3,r2
   86080:	00bfffc4 	movi	r2,-1
   86084:	18807a26 	beq	r3,r2,86270 <_malloc_r+0x674>
   86088:	1d05c83a 	sub	r2,r3,r20
   8608c:	9885883a 	add	r2,r19,r2
   86090:	10c00054 	ori	r3,r2,1
   86094:	b8800017 	ldw	r2,0(r23)
   86098:	a021883a 	mov	r16,r20
   8609c:	a0c00115 	stw	r3,4(r20)
   860a0:	9885883a 	add	r2,r19,r2
   860a4:	b8800015 	stw	r2,0(r23)
   860a8:	e5000215 	stw	r20,8(fp)
   860ac:	b7003626 	beq	r22,fp,86188 <_malloc_r+0x58c>
   860b0:	018003c4 	movi	r6,15
   860b4:	35404b36 	bltu	r6,r21,861e4 <_malloc_r+0x5e8>
   860b8:	00800044 	movi	r2,1
   860bc:	a0800115 	stw	r2,4(r20)
   860c0:	003fcd06 	br	85ff8 <_malloc_r+0x3fc>
   860c4:	2808d27a 	srli	r4,r5,9
   860c8:	2000371e 	bne	r4,zero,861a8 <_malloc_r+0x5ac>
   860cc:	2808d0fa 	srli	r4,r5,3
   860d0:	200690fa 	slli	r3,r4,3
   860d4:	1ad1883a 	add	r8,r3,r11
   860d8:	41800217 	ldw	r6,8(r8)
   860dc:	41805b26 	beq	r8,r6,8624c <_malloc_r+0x650>
   860e0:	30800117 	ldw	r2,4(r6)
   860e4:	00ffff04 	movi	r3,-4
   860e8:	10c4703a 	and	r2,r2,r3
   860ec:	2880022e 	bgeu	r5,r2,860f8 <_malloc_r+0x4fc>
   860f0:	31800217 	ldw	r6,8(r6)
   860f4:	41bffa1e 	bne	r8,r6,860e0 <_malloc_r+0x4e4>
   860f8:	32000317 	ldw	r8,12(r6)
   860fc:	39c00117 	ldw	r7,4(r7)
   86100:	82000315 	stw	r8,12(r16)
   86104:	81800215 	stw	r6,8(r16)
   86108:	07000274 	movhi	fp,9
   8610c:	e7373904 	addi	fp,fp,-8988
   86110:	34000315 	stw	r16,12(r6)
   86114:	44000215 	stw	r16,8(r8)
   86118:	003f3e06 	br	85e14 <_malloc_r+0x218>
   8611c:	63000044 	addi	r12,r12,1
   86120:	608000cc 	andi	r2,r12,3
   86124:	10005d26 	beq	r2,zero,8629c <_malloc_r+0x6a0>
   86128:	18c00204 	addi	r3,r3,8
   8612c:	003f5106 	br	85e74 <_malloc_r+0x278>
   86130:	8089883a 	add	r4,r16,r2
   86134:	003f6d06 	br	85eec <_malloc_r+0x2f0>
   86138:	00805504 	movi	r2,340
   8613c:	10c02036 	bltu	r2,r3,861c0 <_malloc_r+0x5c4>
   86140:	8804d3fa 	srli	r2,r17,15
   86144:	11801dc4 	addi	r6,r2,119
   86148:	300490fa 	slli	r2,r6,3
   8614c:	003ed806 	br	85cb0 <_malloc_r+0xb4>
   86150:	48c000c4 	addi	r3,r9,3
   86154:	003f3106 	br	85e1c <_malloc_r+0x220>
   86158:	05c00274 	movhi	r23,9
   8615c:	bdc37104 	addi	r23,r23,3524
   86160:	b8800017 	ldw	r2,0(r23)
   86164:	988d883a 	add	r6,r19,r2
   86168:	b9800015 	stw	r6,0(r23)
   8616c:	293fb21e 	bne	r5,r4,86038 <_malloc_r+0x43c>
   86170:	2083ffcc 	andi	r2,r4,4095
   86174:	103fb01e 	bne	r2,zero,86038 <_malloc_r+0x43c>
   86178:	e4000217 	ldw	r16,8(fp)
   8617c:	9d45883a 	add	r2,r19,r21
   86180:	10800054 	ori	r2,r2,1
   86184:	80800115 	stw	r2,4(r16)
   86188:	b8c00017 	ldw	r3,0(r23)
   8618c:	d0a6ab17 	ldw	r2,-25940(gp)
   86190:	10c0012e 	bgeu	r2,r3,86198 <_malloc_r+0x59c>
   86194:	d0e6ab15 	stw	r3,-25940(gp)
   86198:	d0a6ac17 	ldw	r2,-25936(gp)
   8619c:	10ff962e 	bgeu	r2,r3,85ff8 <_malloc_r+0x3fc>
   861a0:	d0e6ac15 	stw	r3,-25936(gp)
   861a4:	003f9406 	br	85ff8 <_malloc_r+0x3fc>
   861a8:	00800104 	movi	r2,4
   861ac:	11001e36 	bltu	r2,r4,86228 <_malloc_r+0x62c>
   861b0:	2804d1ba 	srli	r2,r5,6
   861b4:	11000e04 	addi	r4,r2,56
   861b8:	200690fa 	slli	r3,r4,3
   861bc:	003fc506 	br	860d4 <_malloc_r+0x4d8>
   861c0:	00815504 	movi	r2,1364
   861c4:	10c01d2e 	bgeu	r2,r3,8623c <_malloc_r+0x640>
   861c8:	01801f84 	movi	r6,126
   861cc:	0080fc04 	movi	r2,1008
   861d0:	003eb706 	br	85cb0 <_malloc_r+0xb4>
   861d4:	00800204 	movi	r2,8
   861d8:	10cbc83a 	sub	r5,r2,r3
   861dc:	2169883a 	add	r20,r4,r5
   861e0:	003f9e06 	br	8605c <_malloc_r+0x460>
   861e4:	00bffe04 	movi	r2,-8
   861e8:	a93ffd04 	addi	r4,r21,-12
   861ec:	2088703a 	and	r4,r4,r2
   861f0:	b10b883a 	add	r5,r22,r4
   861f4:	00c00144 	movi	r3,5
   861f8:	28c00215 	stw	r3,8(r5)
   861fc:	28c00115 	stw	r3,4(r5)
   86200:	b0800117 	ldw	r2,4(r22)
   86204:	1080004c 	andi	r2,r2,1
   86208:	2084b03a 	or	r2,r4,r2
   8620c:	b0800115 	stw	r2,4(r22)
   86210:	313fdd2e 	bgeu	r6,r4,86188 <_malloc_r+0x58c>
   86214:	b1400204 	addi	r5,r22,8
   86218:	9009883a 	mov	r4,r18
   8621c:	00850740 	call	85074 <_free_r>
   86220:	e4000217 	ldw	r16,8(fp)
   86224:	003fd806 	br	86188 <_malloc_r+0x58c>
   86228:	00800504 	movi	r2,20
   8622c:	11001536 	bltu	r2,r4,86284 <_malloc_r+0x688>
   86230:	210016c4 	addi	r4,r4,91
   86234:	200690fa 	slli	r3,r4,3
   86238:	003fa606 	br	860d4 <_malloc_r+0x4d8>
   8623c:	8804d4ba 	srli	r2,r17,18
   86240:	11801f04 	addi	r6,r2,124
   86244:	300490fa 	slli	r2,r6,3
   86248:	003e9906 	br	85cb0 <_malloc_r+0xb4>
   8624c:	2009d0ba 	srai	r4,r4,2
   86250:	01400274 	movhi	r5,9
   86254:	29773904 	addi	r5,r5,-8988
   86258:	00c00044 	movi	r3,1
   8625c:	28800117 	ldw	r2,4(r5)
   86260:	1906983a 	sll	r3,r3,r4
   86264:	10c4b03a 	or	r2,r2,r3
   86268:	28800115 	stw	r2,4(r5)
   8626c:	003fa306 	br	860fc <_malloc_r+0x500>
   86270:	0027883a 	mov	r19,zero
   86274:	00c00044 	movi	r3,1
   86278:	003f8606 	br	86094 <_malloc_r+0x498>
   8627c:	d1200515 	stw	r4,-32748(gp)
   86280:	003f7306 	br	86050 <_malloc_r+0x454>
   86284:	00801504 	movi	r2,84
   86288:	11001936 	bltu	r2,r4,862f0 <_malloc_r+0x6f4>
   8628c:	2804d33a 	srli	r2,r5,12
   86290:	11001b84 	addi	r4,r2,110
   86294:	200690fa 	slli	r3,r4,3
   86298:	003f8e06 	br	860d4 <_malloc_r+0x4d8>
   8629c:	480b883a 	mov	r5,r9
   862a0:	6807883a 	mov	r3,r13
   862a4:	288000cc 	andi	r2,r5,3
   862a8:	18fffe04 	addi	r3,r3,-8
   862ac:	297fffc4 	addi	r5,r5,-1
   862b0:	10001526 	beq	r2,zero,86308 <_malloc_r+0x70c>
   862b4:	18800217 	ldw	r2,8(r3)
   862b8:	10fffa26 	beq	r2,r3,862a4 <_malloc_r+0x6a8>
   862bc:	2109883a 	add	r4,r4,r4
   862c0:	393f1e36 	bltu	r7,r4,85f3c <_malloc_r+0x340>
   862c4:	203f1d26 	beq	r4,zero,85f3c <_malloc_r+0x340>
   862c8:	21c4703a 	and	r2,r4,r7
   862cc:	10000226 	beq	r2,zero,862d8 <_malloc_r+0x6dc>
   862d0:	6013883a 	mov	r9,r12
   862d4:	003ee106 	br	85e5c <_malloc_r+0x260>
   862d8:	2109883a 	add	r4,r4,r4
   862dc:	3904703a 	and	r2,r7,r4
   862e0:	63000104 	addi	r12,r12,4
   862e4:	103ffc26 	beq	r2,zero,862d8 <_malloc_r+0x6dc>
   862e8:	6013883a 	mov	r9,r12
   862ec:	003edb06 	br	85e5c <_malloc_r+0x260>
   862f0:	00805504 	movi	r2,340
   862f4:	11000836 	bltu	r2,r4,86318 <_malloc_r+0x71c>
   862f8:	2804d3fa 	srli	r2,r5,15
   862fc:	11001dc4 	addi	r4,r2,119
   86300:	200690fa 	slli	r3,r4,3
   86304:	003f7306 	br	860d4 <_malloc_r+0x4d8>
   86308:	0104303a 	nor	r2,zero,r4
   8630c:	388e703a 	and	r7,r7,r2
   86310:	e1c00115 	stw	r7,4(fp)
   86314:	003fe906 	br	862bc <_malloc_r+0x6c0>
   86318:	00815504 	movi	r2,1364
   8631c:	1100032e 	bgeu	r2,r4,8632c <_malloc_r+0x730>
   86320:	01001f84 	movi	r4,126
   86324:	00c0fc04 	movi	r3,1008
   86328:	003f6a06 	br	860d4 <_malloc_r+0x4d8>
   8632c:	2804d4ba 	srli	r2,r5,18
   86330:	11001f04 	addi	r4,r2,124
   86334:	200690fa 	slli	r3,r4,3
   86338:	003f6606 	br	860d4 <_malloc_r+0x4d8>

0008633c <memchr>:
   8633c:	008000c4 	movi	r2,3
   86340:	29403fcc 	andi	r5,r5,255
   86344:	2007883a 	mov	r3,r4
   86348:	1180022e 	bgeu	r2,r6,86354 <memchr+0x18>
   8634c:	2084703a 	and	r2,r4,r2
   86350:	10000b26 	beq	r2,zero,86380 <memchr+0x44>
   86354:	313fffc4 	addi	r4,r6,-1
   86358:	3000051e 	bne	r6,zero,86370 <memchr+0x34>
   8635c:	00002c06 	br	86410 <memchr+0xd4>
   86360:	213fffc4 	addi	r4,r4,-1
   86364:	00bfffc4 	movi	r2,-1
   86368:	18c00044 	addi	r3,r3,1
   8636c:	20802826 	beq	r4,r2,86410 <memchr+0xd4>
   86370:	18800003 	ldbu	r2,0(r3)
   86374:	28bffa1e 	bne	r5,r2,86360 <memchr+0x24>
   86378:	1805883a 	mov	r2,r3
   8637c:	f800283a 	ret
   86380:	0011883a 	mov	r8,zero
   86384:	0007883a 	mov	r3,zero
   86388:	01c00104 	movi	r7,4
   8638c:	4004923a 	slli	r2,r8,8
   86390:	18c00044 	addi	r3,r3,1
   86394:	1151883a 	add	r8,r2,r5
   86398:	19fffc1e 	bne	r3,r7,8638c <memchr+0x50>
   8639c:	02bfbff4 	movhi	r10,65279
   863a0:	52bfbfc4 	addi	r10,r10,-257
   863a4:	02602074 	movhi	r9,32897
   863a8:	4a602004 	addi	r9,r9,-32640
   863ac:	02c000c4 	movi	r11,3
   863b0:	20800017 	ldw	r2,0(r4)
   863b4:	31bfff04 	addi	r6,r6,-4
   863b8:	200f883a 	mov	r7,r4
   863bc:	1204f03a 	xor	r2,r2,r8
   863c0:	1287883a 	add	r3,r2,r10
   863c4:	1a46703a 	and	r3,r3,r9
   863c8:	0084303a 	nor	r2,zero,r2
   863cc:	10c4703a 	and	r2,r2,r3
   863d0:	10000b26 	beq	r2,zero,86400 <memchr+0xc4>
   863d4:	20800003 	ldbu	r2,0(r4)
   863d8:	28800f26 	beq	r5,r2,86418 <memchr+0xdc>
   863dc:	20800043 	ldbu	r2,1(r4)
   863e0:	21c00044 	addi	r7,r4,1
   863e4:	28800c26 	beq	r5,r2,86418 <memchr+0xdc>
   863e8:	20800083 	ldbu	r2,2(r4)
   863ec:	21c00084 	addi	r7,r4,2
   863f0:	28800926 	beq	r5,r2,86418 <memchr+0xdc>
   863f4:	208000c3 	ldbu	r2,3(r4)
   863f8:	21c000c4 	addi	r7,r4,3
   863fc:	28800626 	beq	r5,r2,86418 <memchr+0xdc>
   86400:	21000104 	addi	r4,r4,4
   86404:	59bfea36 	bltu	r11,r6,863b0 <memchr+0x74>
   86408:	2007883a 	mov	r3,r4
   8640c:	003fd106 	br	86354 <memchr+0x18>
   86410:	0005883a 	mov	r2,zero
   86414:	f800283a 	ret
   86418:	3805883a 	mov	r2,r7
   8641c:	f800283a 	ret

00086420 <memcpy>:
   86420:	01c003c4 	movi	r7,15
   86424:	2007883a 	mov	r3,r4
   86428:	3980032e 	bgeu	r7,r6,86438 <memcpy+0x18>
   8642c:	2904b03a 	or	r2,r5,r4
   86430:	108000cc 	andi	r2,r2,3
   86434:	10000926 	beq	r2,zero,8645c <memcpy+0x3c>
   86438:	30000626 	beq	r6,zero,86454 <memcpy+0x34>
   8643c:	30cd883a 	add	r6,r6,r3
   86440:	28800003 	ldbu	r2,0(r5)
   86444:	29400044 	addi	r5,r5,1
   86448:	18800005 	stb	r2,0(r3)
   8644c:	18c00044 	addi	r3,r3,1
   86450:	30fffb1e 	bne	r6,r3,86440 <memcpy+0x20>
   86454:	2005883a 	mov	r2,r4
   86458:	f800283a 	ret
   8645c:	3811883a 	mov	r8,r7
   86460:	200f883a 	mov	r7,r4
   86464:	28c00017 	ldw	r3,0(r5)
   86468:	31bffc04 	addi	r6,r6,-16
   8646c:	38c00015 	stw	r3,0(r7)
   86470:	28800117 	ldw	r2,4(r5)
   86474:	38800115 	stw	r2,4(r7)
   86478:	28c00217 	ldw	r3,8(r5)
   8647c:	38c00215 	stw	r3,8(r7)
   86480:	28800317 	ldw	r2,12(r5)
   86484:	29400404 	addi	r5,r5,16
   86488:	38800315 	stw	r2,12(r7)
   8648c:	39c00404 	addi	r7,r7,16
   86490:	41bff436 	bltu	r8,r6,86464 <memcpy+0x44>
   86494:	008000c4 	movi	r2,3
   86498:	1180072e 	bgeu	r2,r6,864b8 <memcpy+0x98>
   8649c:	1007883a 	mov	r3,r2
   864a0:	28800017 	ldw	r2,0(r5)
   864a4:	31bfff04 	addi	r6,r6,-4
   864a8:	29400104 	addi	r5,r5,4
   864ac:	38800015 	stw	r2,0(r7)
   864b0:	39c00104 	addi	r7,r7,4
   864b4:	19bffa36 	bltu	r3,r6,864a0 <memcpy+0x80>
   864b8:	3807883a 	mov	r3,r7
   864bc:	003fde06 	br	86438 <memcpy+0x18>

000864c0 <memmove>:
   864c0:	2807883a 	mov	r3,r5
   864c4:	2011883a 	mov	r8,r4
   864c8:	29000c2e 	bgeu	r5,r4,864fc <memmove+0x3c>
   864cc:	298f883a 	add	r7,r5,r6
   864d0:	21c00a2e 	bgeu	r4,r7,864fc <memmove+0x3c>
   864d4:	30000726 	beq	r6,zero,864f4 <memmove+0x34>
   864d8:	2187883a 	add	r3,r4,r6
   864dc:	198dc83a 	sub	r6,r3,r6
   864e0:	39ffffc4 	addi	r7,r7,-1
   864e4:	38800003 	ldbu	r2,0(r7)
   864e8:	18ffffc4 	addi	r3,r3,-1
   864ec:	18800005 	stb	r2,0(r3)
   864f0:	19bffb1e 	bne	r3,r6,864e0 <memmove+0x20>
   864f4:	2005883a 	mov	r2,r4
   864f8:	f800283a 	ret
   864fc:	01c003c4 	movi	r7,15
   86500:	39800a36 	bltu	r7,r6,8652c <memmove+0x6c>
   86504:	303ffb26 	beq	r6,zero,864f4 <memmove+0x34>
   86508:	400f883a 	mov	r7,r8
   8650c:	320d883a 	add	r6,r6,r8
   86510:	28800003 	ldbu	r2,0(r5)
   86514:	29400044 	addi	r5,r5,1
   86518:	38800005 	stb	r2,0(r7)
   8651c:	39c00044 	addi	r7,r7,1
   86520:	39bffb1e 	bne	r7,r6,86510 <memmove+0x50>
   86524:	2005883a 	mov	r2,r4
   86528:	f800283a 	ret
   8652c:	1904b03a 	or	r2,r3,r4
   86530:	108000cc 	andi	r2,r2,3
   86534:	103ff31e 	bne	r2,zero,86504 <memmove+0x44>
   86538:	3811883a 	mov	r8,r7
   8653c:	180b883a 	mov	r5,r3
   86540:	200f883a 	mov	r7,r4
   86544:	28c00017 	ldw	r3,0(r5)
   86548:	31bffc04 	addi	r6,r6,-16
   8654c:	38c00015 	stw	r3,0(r7)
   86550:	28800117 	ldw	r2,4(r5)
   86554:	38800115 	stw	r2,4(r7)
   86558:	28c00217 	ldw	r3,8(r5)
   8655c:	38c00215 	stw	r3,8(r7)
   86560:	28800317 	ldw	r2,12(r5)
   86564:	29400404 	addi	r5,r5,16
   86568:	38800315 	stw	r2,12(r7)
   8656c:	39c00404 	addi	r7,r7,16
   86570:	41bff436 	bltu	r8,r6,86544 <memmove+0x84>
   86574:	008000c4 	movi	r2,3
   86578:	1180072e 	bgeu	r2,r6,86598 <memmove+0xd8>
   8657c:	1007883a 	mov	r3,r2
   86580:	28800017 	ldw	r2,0(r5)
   86584:	31bfff04 	addi	r6,r6,-4
   86588:	29400104 	addi	r5,r5,4
   8658c:	38800015 	stw	r2,0(r7)
   86590:	39c00104 	addi	r7,r7,4
   86594:	19bffa36 	bltu	r3,r6,86580 <memmove+0xc0>
   86598:	3811883a 	mov	r8,r7
   8659c:	003fd906 	br	86504 <memmove+0x44>

000865a0 <memset>:
   865a0:	008000c4 	movi	r2,3
   865a4:	29403fcc 	andi	r5,r5,255
   865a8:	2007883a 	mov	r3,r4
   865ac:	1180022e 	bgeu	r2,r6,865b8 <memset+0x18>
   865b0:	2084703a 	and	r2,r4,r2
   865b4:	10000826 	beq	r2,zero,865d8 <memset+0x38>
   865b8:	30000526 	beq	r6,zero,865d0 <memset+0x30>
   865bc:	2805883a 	mov	r2,r5
   865c0:	30cd883a 	add	r6,r6,r3
   865c4:	18800005 	stb	r2,0(r3)
   865c8:	18c00044 	addi	r3,r3,1
   865cc:	19bffd1e 	bne	r3,r6,865c4 <memset+0x24>
   865d0:	2005883a 	mov	r2,r4
   865d4:	f800283a 	ret
   865d8:	2804923a 	slli	r2,r5,8
   865dc:	020003c4 	movi	r8,15
   865e0:	200f883a 	mov	r7,r4
   865e4:	2884b03a 	or	r2,r5,r2
   865e8:	1006943a 	slli	r3,r2,16
   865ec:	10c6b03a 	or	r3,r2,r3
   865f0:	41800a2e 	bgeu	r8,r6,8661c <memset+0x7c>
   865f4:	4005883a 	mov	r2,r8
   865f8:	31bffc04 	addi	r6,r6,-16
   865fc:	38c00015 	stw	r3,0(r7)
   86600:	38c00115 	stw	r3,4(r7)
   86604:	38c00215 	stw	r3,8(r7)
   86608:	38c00315 	stw	r3,12(r7)
   8660c:	39c00404 	addi	r7,r7,16
   86610:	11bff936 	bltu	r2,r6,865f8 <memset+0x58>
   86614:	008000c4 	movi	r2,3
   86618:	1180052e 	bgeu	r2,r6,86630 <memset+0x90>
   8661c:	31bfff04 	addi	r6,r6,-4
   86620:	008000c4 	movi	r2,3
   86624:	38c00015 	stw	r3,0(r7)
   86628:	39c00104 	addi	r7,r7,4
   8662c:	11bffb36 	bltu	r2,r6,8661c <memset+0x7c>
   86630:	3807883a 	mov	r3,r7
   86634:	003fe006 	br	865b8 <memset+0x18>

00086638 <_Bfree>:
   86638:	28000826 	beq	r5,zero,8665c <_Bfree+0x24>
   8663c:	28800117 	ldw	r2,4(r5)
   86640:	21001317 	ldw	r4,76(r4)
   86644:	1085883a 	add	r2,r2,r2
   86648:	1085883a 	add	r2,r2,r2
   8664c:	1105883a 	add	r2,r2,r4
   86650:	10c00017 	ldw	r3,0(r2)
   86654:	28c00015 	stw	r3,0(r5)
   86658:	11400015 	stw	r5,0(r2)
   8665c:	f800283a 	ret

00086660 <__hi0bits>:
   86660:	20bfffec 	andhi	r2,r4,65535
   86664:	10001426 	beq	r2,zero,866b8 <__hi0bits+0x58>
   86668:	0007883a 	mov	r3,zero
   8666c:	20bfc02c 	andhi	r2,r4,65280
   86670:	1000021e 	bne	r2,zero,8667c <__hi0bits+0x1c>
   86674:	2008923a 	slli	r4,r4,8
   86678:	18c00204 	addi	r3,r3,8
   8667c:	20bc002c 	andhi	r2,r4,61440
   86680:	1000021e 	bne	r2,zero,8668c <__hi0bits+0x2c>
   86684:	2008913a 	slli	r4,r4,4
   86688:	18c00104 	addi	r3,r3,4
   8668c:	20b0002c 	andhi	r2,r4,49152
   86690:	1000031e 	bne	r2,zero,866a0 <__hi0bits+0x40>
   86694:	2105883a 	add	r2,r4,r4
   86698:	18c00084 	addi	r3,r3,2
   8669c:	1089883a 	add	r4,r2,r2
   866a0:	20000316 	blt	r4,zero,866b0 <__hi0bits+0x50>
   866a4:	2090002c 	andhi	r2,r4,16384
   866a8:	10000626 	beq	r2,zero,866c4 <__hi0bits+0x64>
   866ac:	18c00044 	addi	r3,r3,1
   866b0:	1805883a 	mov	r2,r3
   866b4:	f800283a 	ret
   866b8:	2008943a 	slli	r4,r4,16
   866bc:	00c00404 	movi	r3,16
   866c0:	003fea06 	br	8666c <__hi0bits+0xc>
   866c4:	00c00804 	movi	r3,32
   866c8:	1805883a 	mov	r2,r3
   866cc:	f800283a 	ret

000866d0 <__lo0bits>:
   866d0:	20c00017 	ldw	r3,0(r4)
   866d4:	188001cc 	andi	r2,r3,7
   866d8:	10000a26 	beq	r2,zero,86704 <__lo0bits+0x34>
   866dc:	1880004c 	andi	r2,r3,1
   866e0:	1005003a 	cmpeq	r2,r2,zero
   866e4:	10002126 	beq	r2,zero,8676c <__lo0bits+0x9c>
   866e8:	1880008c 	andi	r2,r3,2
   866ec:	1000251e 	bne	r2,zero,86784 <__lo0bits+0xb4>
   866f0:	1804d0ba 	srli	r2,r3,2
   866f4:	01400084 	movi	r5,2
   866f8:	20800015 	stw	r2,0(r4)
   866fc:	2805883a 	mov	r2,r5
   86700:	f800283a 	ret
   86704:	18bfffcc 	andi	r2,r3,65535
   86708:	10001526 	beq	r2,zero,86760 <__lo0bits+0x90>
   8670c:	000b883a 	mov	r5,zero
   86710:	18803fcc 	andi	r2,r3,255
   86714:	1000021e 	bne	r2,zero,86720 <__lo0bits+0x50>
   86718:	1806d23a 	srli	r3,r3,8
   8671c:	29400204 	addi	r5,r5,8
   86720:	188003cc 	andi	r2,r3,15
   86724:	1000021e 	bne	r2,zero,86730 <__lo0bits+0x60>
   86728:	1806d13a 	srli	r3,r3,4
   8672c:	29400104 	addi	r5,r5,4
   86730:	188000cc 	andi	r2,r3,3
   86734:	1000021e 	bne	r2,zero,86740 <__lo0bits+0x70>
   86738:	1806d0ba 	srli	r3,r3,2
   8673c:	29400084 	addi	r5,r5,2
   86740:	1880004c 	andi	r2,r3,1
   86744:	1000031e 	bne	r2,zero,86754 <__lo0bits+0x84>
   86748:	1806d07a 	srli	r3,r3,1
   8674c:	18000a26 	beq	r3,zero,86778 <__lo0bits+0xa8>
   86750:	29400044 	addi	r5,r5,1
   86754:	2805883a 	mov	r2,r5
   86758:	20c00015 	stw	r3,0(r4)
   8675c:	f800283a 	ret
   86760:	1806d43a 	srli	r3,r3,16
   86764:	01400404 	movi	r5,16
   86768:	003fe906 	br	86710 <__lo0bits+0x40>
   8676c:	000b883a 	mov	r5,zero
   86770:	2805883a 	mov	r2,r5
   86774:	f800283a 	ret
   86778:	01400804 	movi	r5,32
   8677c:	2805883a 	mov	r2,r5
   86780:	f800283a 	ret
   86784:	1804d07a 	srli	r2,r3,1
   86788:	01400044 	movi	r5,1
   8678c:	20800015 	stw	r2,0(r4)
   86790:	003fda06 	br	866fc <__lo0bits+0x2c>

00086794 <__mcmp>:
   86794:	20800417 	ldw	r2,16(r4)
   86798:	28c00417 	ldw	r3,16(r5)
   8679c:	10cfc83a 	sub	r7,r2,r3
   867a0:	38000c1e 	bne	r7,zero,867d4 <__mcmp+0x40>
   867a4:	18c5883a 	add	r2,r3,r3
   867a8:	1085883a 	add	r2,r2,r2
   867ac:	10c00504 	addi	r3,r2,20
   867b0:	21000504 	addi	r4,r4,20
   867b4:	28cb883a 	add	r5,r5,r3
   867b8:	2085883a 	add	r2,r4,r2
   867bc:	10bfff04 	addi	r2,r2,-4
   867c0:	297fff04 	addi	r5,r5,-4
   867c4:	11800017 	ldw	r6,0(r2)
   867c8:	28c00017 	ldw	r3,0(r5)
   867cc:	30c0031e 	bne	r6,r3,867dc <__mcmp+0x48>
   867d0:	20bffa36 	bltu	r4,r2,867bc <__mcmp+0x28>
   867d4:	3805883a 	mov	r2,r7
   867d8:	f800283a 	ret
   867dc:	30c00336 	bltu	r6,r3,867ec <__mcmp+0x58>
   867e0:	01c00044 	movi	r7,1
   867e4:	3805883a 	mov	r2,r7
   867e8:	f800283a 	ret
   867ec:	01ffffc4 	movi	r7,-1
   867f0:	003ff806 	br	867d4 <__mcmp+0x40>

000867f4 <__ulp>:
   867f4:	295ffc2c 	andhi	r5,r5,32752
   867f8:	013f3034 	movhi	r4,64704
   867fc:	290b883a 	add	r5,r5,r4
   86800:	0145c83a 	sub	r2,zero,r5
   86804:	1007d53a 	srai	r3,r2,20
   86808:	000d883a 	mov	r6,zero
   8680c:	0140040e 	bge	zero,r5,86820 <__ulp+0x2c>
   86810:	280f883a 	mov	r7,r5
   86814:	3807883a 	mov	r3,r7
   86818:	3005883a 	mov	r2,r6
   8681c:	f800283a 	ret
   86820:	008004c4 	movi	r2,19
   86824:	193ffb04 	addi	r4,r3,-20
   86828:	10c00c0e 	bge	r2,r3,8685c <__ulp+0x68>
   8682c:	008007c4 	movi	r2,31
   86830:	1107c83a 	sub	r3,r2,r4
   86834:	00800784 	movi	r2,30
   86838:	01400044 	movi	r5,1
   8683c:	11000216 	blt	r2,r4,86848 <__ulp+0x54>
   86840:	00800044 	movi	r2,1
   86844:	10ca983a 	sll	r5,r2,r3
   86848:	000f883a 	mov	r7,zero
   8684c:	280d883a 	mov	r6,r5
   86850:	3807883a 	mov	r3,r7
   86854:	3005883a 	mov	r2,r6
   86858:	f800283a 	ret
   8685c:	00800234 	movhi	r2,8
   86860:	10cfd83a 	sra	r7,r2,r3
   86864:	000d883a 	mov	r6,zero
   86868:	3005883a 	mov	r2,r6
   8686c:	3807883a 	mov	r3,r7
   86870:	f800283a 	ret

00086874 <__b2d>:
   86874:	20800417 	ldw	r2,16(r4)
   86878:	defff904 	addi	sp,sp,-28
   8687c:	dd000415 	stw	r20,16(sp)
   86880:	1085883a 	add	r2,r2,r2
   86884:	25000504 	addi	r20,r4,20
   86888:	1085883a 	add	r2,r2,r2
   8688c:	dc000015 	stw	r16,0(sp)
   86890:	a0a1883a 	add	r16,r20,r2
   86894:	dd400515 	stw	r21,20(sp)
   86898:	857fff17 	ldw	r21,-4(r16)
   8689c:	dc400115 	stw	r17,4(sp)
   868a0:	dfc00615 	stw	ra,24(sp)
   868a4:	a809883a 	mov	r4,r21
   868a8:	2823883a 	mov	r17,r5
   868ac:	dcc00315 	stw	r19,12(sp)
   868b0:	dc800215 	stw	r18,8(sp)
   868b4:	00866600 	call	86660 <__hi0bits>
   868b8:	100b883a 	mov	r5,r2
   868bc:	00800804 	movi	r2,32
   868c0:	1145c83a 	sub	r2,r2,r5
   868c4:	88800015 	stw	r2,0(r17)
   868c8:	00800284 	movi	r2,10
   868cc:	80ffff04 	addi	r3,r16,-4
   868d0:	11401416 	blt	r2,r5,86924 <__b2d+0xb0>
   868d4:	008002c4 	movi	r2,11
   868d8:	1149c83a 	sub	r4,r2,r5
   868dc:	a0c02736 	bltu	r20,r3,8697c <__b2d+0x108>
   868e0:	000d883a 	mov	r6,zero
   868e4:	28800544 	addi	r2,r5,21
   868e8:	a906d83a 	srl	r3,r21,r4
   868ec:	a884983a 	sll	r2,r21,r2
   868f0:	1ccffc34 	orhi	r19,r3,16368
   868f4:	11a4b03a 	or	r18,r2,r6
   868f8:	9005883a 	mov	r2,r18
   868fc:	9807883a 	mov	r3,r19
   86900:	dfc00617 	ldw	ra,24(sp)
   86904:	dd400517 	ldw	r21,20(sp)
   86908:	dd000417 	ldw	r20,16(sp)
   8690c:	dcc00317 	ldw	r19,12(sp)
   86910:	dc800217 	ldw	r18,8(sp)
   86914:	dc400117 	ldw	r17,4(sp)
   86918:	dc000017 	ldw	r16,0(sp)
   8691c:	dec00704 	addi	sp,sp,28
   86920:	f800283a 	ret
   86924:	a0c00e36 	bltu	r20,r3,86960 <__b2d+0xec>
   86928:	293ffd44 	addi	r4,r5,-11
   8692c:	000d883a 	mov	r6,zero
   86930:	20000f26 	beq	r4,zero,86970 <__b2d+0xfc>
   86934:	00800804 	movi	r2,32
   86938:	110bc83a 	sub	r5,r2,r4
   8693c:	a0c01236 	bltu	r20,r3,86988 <__b2d+0x114>
   86940:	000f883a 	mov	r7,zero
   86944:	a904983a 	sll	r2,r21,r4
   86948:	3146d83a 	srl	r3,r6,r5
   8694c:	3108983a 	sll	r4,r6,r4
   86950:	108ffc34 	orhi	r2,r2,16368
   86954:	18a6b03a 	or	r19,r3,r2
   86958:	3924b03a 	or	r18,r7,r4
   8695c:	003fe606 	br	868f8 <__b2d+0x84>
   86960:	293ffd44 	addi	r4,r5,-11
   86964:	81bffe17 	ldw	r6,-8(r16)
   86968:	80fffe04 	addi	r3,r16,-8
   8696c:	203ff11e 	bne	r4,zero,86934 <__b2d+0xc0>
   86970:	accffc34 	orhi	r19,r21,16368
   86974:	3025883a 	mov	r18,r6
   86978:	003fdf06 	br	868f8 <__b2d+0x84>
   8697c:	18bfff17 	ldw	r2,-4(r3)
   86980:	110cd83a 	srl	r6,r2,r4
   86984:	003fd706 	br	868e4 <__b2d+0x70>
   86988:	18bfff17 	ldw	r2,-4(r3)
   8698c:	114ed83a 	srl	r7,r2,r5
   86990:	003fec06 	br	86944 <__b2d+0xd0>

00086994 <__ratio>:
   86994:	defff904 	addi	sp,sp,-28
   86998:	dc400215 	stw	r17,8(sp)
   8699c:	2823883a 	mov	r17,r5
   869a0:	d80b883a 	mov	r5,sp
   869a4:	dfc00615 	stw	ra,24(sp)
   869a8:	dd000515 	stw	r20,20(sp)
   869ac:	dcc00415 	stw	r19,16(sp)
   869b0:	dc800315 	stw	r18,12(sp)
   869b4:	2025883a 	mov	r18,r4
   869b8:	00868740 	call	86874 <__b2d>
   869bc:	8809883a 	mov	r4,r17
   869c0:	d9400104 	addi	r5,sp,4
   869c4:	1027883a 	mov	r19,r2
   869c8:	1829883a 	mov	r20,r3
   869cc:	00868740 	call	86874 <__b2d>
   869d0:	89000417 	ldw	r4,16(r17)
   869d4:	91c00417 	ldw	r7,16(r18)
   869d8:	d9800117 	ldw	r6,4(sp)
   869dc:	180b883a 	mov	r5,r3
   869e0:	390fc83a 	sub	r7,r7,r4
   869e4:	1009883a 	mov	r4,r2
   869e8:	d8800017 	ldw	r2,0(sp)
   869ec:	380e917a 	slli	r7,r7,5
   869f0:	2011883a 	mov	r8,r4
   869f4:	1185c83a 	sub	r2,r2,r6
   869f8:	11c5883a 	add	r2,r2,r7
   869fc:	1006953a 	slli	r3,r2,20
   86a00:	2813883a 	mov	r9,r5
   86a04:	00800d0e 	bge	zero,r2,86a3c <__ratio+0xa8>
   86a08:	1d29883a 	add	r20,r3,r20
   86a0c:	a00b883a 	mov	r5,r20
   86a10:	480f883a 	mov	r7,r9
   86a14:	9809883a 	mov	r4,r19
   86a18:	400d883a 	mov	r6,r8
   86a1c:	00897f00 	call	897f0 <__divdf3>
   86a20:	dfc00617 	ldw	ra,24(sp)
   86a24:	dd000517 	ldw	r20,20(sp)
   86a28:	dcc00417 	ldw	r19,16(sp)
   86a2c:	dc800317 	ldw	r18,12(sp)
   86a30:	dc400217 	ldw	r17,8(sp)
   86a34:	dec00704 	addi	sp,sp,28
   86a38:	f800283a 	ret
   86a3c:	28d3c83a 	sub	r9,r5,r3
   86a40:	003ff206 	br	86a0c <__ratio+0x78>

00086a44 <_mprec_log10>:
   86a44:	defffe04 	addi	sp,sp,-8
   86a48:	008005c4 	movi	r2,23
   86a4c:	dc000015 	stw	r16,0(sp)
   86a50:	dfc00115 	stw	ra,4(sp)
   86a54:	2021883a 	mov	r16,r4
   86a58:	11000c16 	blt	r2,r4,86a8c <_mprec_log10+0x48>
   86a5c:	200490fa 	slli	r2,r4,3
   86a60:	00c00274 	movhi	r3,9
   86a64:	18f59b04 	addi	r3,r3,-10644
   86a68:	10c5883a 	add	r2,r2,r3
   86a6c:	12400117 	ldw	r9,4(r2)
   86a70:	12000017 	ldw	r8,0(r2)
   86a74:	4807883a 	mov	r3,r9
   86a78:	4005883a 	mov	r2,r8
   86a7c:	dfc00117 	ldw	ra,4(sp)
   86a80:	dc000017 	ldw	r16,0(sp)
   86a84:	dec00204 	addi	sp,sp,8
   86a88:	f800283a 	ret
   86a8c:	0011883a 	mov	r8,zero
   86a90:	024ffc34 	movhi	r9,16368
   86a94:	0005883a 	mov	r2,zero
   86a98:	00d00934 	movhi	r3,16420
   86a9c:	480b883a 	mov	r5,r9
   86aa0:	4009883a 	mov	r4,r8
   86aa4:	180f883a 	mov	r7,r3
   86aa8:	100d883a 	mov	r6,r2
   86aac:	008942c0 	call	8942c <__muldf3>
   86ab0:	843fffc4 	addi	r16,r16,-1
   86ab4:	1011883a 	mov	r8,r2
   86ab8:	1813883a 	mov	r9,r3
   86abc:	803ff51e 	bne	r16,zero,86a94 <_mprec_log10+0x50>
   86ac0:	4005883a 	mov	r2,r8
   86ac4:	4807883a 	mov	r3,r9
   86ac8:	dfc00117 	ldw	ra,4(sp)
   86acc:	dc000017 	ldw	r16,0(sp)
   86ad0:	dec00204 	addi	sp,sp,8
   86ad4:	f800283a 	ret

00086ad8 <__copybits>:
   86ad8:	297fffc4 	addi	r5,r5,-1
   86adc:	30800417 	ldw	r2,16(r6)
   86ae0:	280bd17a 	srai	r5,r5,5
   86ae4:	31800504 	addi	r6,r6,20
   86ae8:	1085883a 	add	r2,r2,r2
   86aec:	294b883a 	add	r5,r5,r5
   86af0:	294b883a 	add	r5,r5,r5
   86af4:	1085883a 	add	r2,r2,r2
   86af8:	290b883a 	add	r5,r5,r4
   86afc:	3087883a 	add	r3,r6,r2
   86b00:	29400104 	addi	r5,r5,4
   86b04:	30c0052e 	bgeu	r6,r3,86b1c <__copybits+0x44>
   86b08:	30800017 	ldw	r2,0(r6)
   86b0c:	31800104 	addi	r6,r6,4
   86b10:	20800015 	stw	r2,0(r4)
   86b14:	21000104 	addi	r4,r4,4
   86b18:	30fffb36 	bltu	r6,r3,86b08 <__copybits+0x30>
   86b1c:	2140032e 	bgeu	r4,r5,86b2c <__copybits+0x54>
   86b20:	20000015 	stw	zero,0(r4)
   86b24:	21000104 	addi	r4,r4,4
   86b28:	217ffd36 	bltu	r4,r5,86b20 <__copybits+0x48>
   86b2c:	f800283a 	ret

00086b30 <__any_on>:
   86b30:	20800417 	ldw	r2,16(r4)
   86b34:	2807d17a 	srai	r3,r5,5
   86b38:	21000504 	addi	r4,r4,20
   86b3c:	10c00d0e 	bge	r2,r3,86b74 <__any_on+0x44>
   86b40:	1085883a 	add	r2,r2,r2
   86b44:	1085883a 	add	r2,r2,r2
   86b48:	208d883a 	add	r6,r4,r2
   86b4c:	2180182e 	bgeu	r4,r6,86bb0 <__any_on+0x80>
   86b50:	30bfff17 	ldw	r2,-4(r6)
   86b54:	30ffff04 	addi	r3,r6,-4
   86b58:	1000041e 	bne	r2,zero,86b6c <__any_on+0x3c>
   86b5c:	20c0142e 	bgeu	r4,r3,86bb0 <__any_on+0x80>
   86b60:	18ffff04 	addi	r3,r3,-4
   86b64:	18800017 	ldw	r2,0(r3)
   86b68:	103ffc26 	beq	r2,zero,86b5c <__any_on+0x2c>
   86b6c:	00800044 	movi	r2,1
   86b70:	f800283a 	ret
   86b74:	18800a0e 	bge	r3,r2,86ba0 <__any_on+0x70>
   86b78:	294007cc 	andi	r5,r5,31
   86b7c:	28000826 	beq	r5,zero,86ba0 <__any_on+0x70>
   86b80:	18c5883a 	add	r2,r3,r3
   86b84:	1085883a 	add	r2,r2,r2
   86b88:	208d883a 	add	r6,r4,r2
   86b8c:	30c00017 	ldw	r3,0(r6)
   86b90:	1944d83a 	srl	r2,r3,r5
   86b94:	1144983a 	sll	r2,r2,r5
   86b98:	18bff41e 	bne	r3,r2,86b6c <__any_on+0x3c>
   86b9c:	003feb06 	br	86b4c <__any_on+0x1c>
   86ba0:	18c5883a 	add	r2,r3,r3
   86ba4:	1085883a 	add	r2,r2,r2
   86ba8:	208d883a 	add	r6,r4,r2
   86bac:	003fe706 	br	86b4c <__any_on+0x1c>
   86bb0:	0005883a 	mov	r2,zero
   86bb4:	f800283a 	ret

00086bb8 <_Balloc>:
   86bb8:	20c01317 	ldw	r3,76(r4)
   86bbc:	defffb04 	addi	sp,sp,-20
   86bc0:	dcc00315 	stw	r19,12(sp)
   86bc4:	dc800215 	stw	r18,8(sp)
   86bc8:	dfc00415 	stw	ra,16(sp)
   86bcc:	2825883a 	mov	r18,r5
   86bd0:	dc400115 	stw	r17,4(sp)
   86bd4:	dc000015 	stw	r16,0(sp)
   86bd8:	2027883a 	mov	r19,r4
   86bdc:	01800404 	movi	r6,16
   86be0:	01400104 	movi	r5,4
   86be4:	18001726 	beq	r3,zero,86c44 <_Balloc+0x8c>
   86be8:	01400044 	movi	r5,1
   86bec:	9485883a 	add	r2,r18,r18
   86bf0:	2ca2983a 	sll	r17,r5,r18
   86bf4:	1085883a 	add	r2,r2,r2
   86bf8:	10c7883a 	add	r3,r2,r3
   86bfc:	1c000017 	ldw	r16,0(r3)
   86c00:	8c4d883a 	add	r6,r17,r17
   86c04:	318d883a 	add	r6,r6,r6
   86c08:	9809883a 	mov	r4,r19
   86c0c:	31800504 	addi	r6,r6,20
   86c10:	80001226 	beq	r16,zero,86c5c <_Balloc+0xa4>
   86c14:	80800017 	ldw	r2,0(r16)
   86c18:	18800015 	stw	r2,0(r3)
   86c1c:	80000415 	stw	zero,16(r16)
   86c20:	80000315 	stw	zero,12(r16)
   86c24:	8005883a 	mov	r2,r16
   86c28:	dfc00417 	ldw	ra,16(sp)
   86c2c:	dcc00317 	ldw	r19,12(sp)
   86c30:	dc800217 	ldw	r18,8(sp)
   86c34:	dc400117 	ldw	r17,4(sp)
   86c38:	dc000017 	ldw	r16,0(sp)
   86c3c:	dec00504 	addi	sp,sp,20
   86c40:	f800283a 	ret
   86c44:	0087f800 	call	87f80 <_calloc_r>
   86c48:	1007883a 	mov	r3,r2
   86c4c:	0021883a 	mov	r16,zero
   86c50:	98801315 	stw	r2,76(r19)
   86c54:	103fe41e 	bne	r2,zero,86be8 <_Balloc+0x30>
   86c58:	003ff206 	br	86c24 <_Balloc+0x6c>
   86c5c:	0087f800 	call	87f80 <_calloc_r>
   86c60:	103ff026 	beq	r2,zero,86c24 <_Balloc+0x6c>
   86c64:	1021883a 	mov	r16,r2
   86c68:	14800115 	stw	r18,4(r2)
   86c6c:	14400215 	stw	r17,8(r2)
   86c70:	003fea06 	br	86c1c <_Balloc+0x64>

00086c74 <__d2b>:
   86c74:	defff504 	addi	sp,sp,-44
   86c78:	dcc00515 	stw	r19,20(sp)
   86c7c:	04c00044 	movi	r19,1
   86c80:	dc000215 	stw	r16,8(sp)
   86c84:	2821883a 	mov	r16,r5
   86c88:	980b883a 	mov	r5,r19
   86c8c:	ddc00915 	stw	r23,36(sp)
   86c90:	dd800815 	stw	r22,32(sp)
   86c94:	dd400715 	stw	r21,28(sp)
   86c98:	dd000615 	stw	r20,24(sp)
   86c9c:	dc800415 	stw	r18,16(sp)
   86ca0:	dc400315 	stw	r17,12(sp)
   86ca4:	dfc00a15 	stw	ra,40(sp)
   86ca8:	3023883a 	mov	r17,r6
   86cac:	382d883a 	mov	r22,r7
   86cb0:	ddc00b17 	ldw	r23,44(sp)
   86cb4:	0086bb80 	call	86bb8 <_Balloc>
   86cb8:	1025883a 	mov	r18,r2
   86cbc:	00a00034 	movhi	r2,32768
   86cc0:	10bfffc4 	addi	r2,r2,-1
   86cc4:	8888703a 	and	r4,r17,r2
   86cc8:	202ad53a 	srli	r21,r4,20
   86ccc:	00800434 	movhi	r2,16
   86cd0:	10bfffc4 	addi	r2,r2,-1
   86cd4:	8886703a 	and	r3,r17,r2
   86cd8:	a829003a 	cmpeq	r20,r21,zero
   86cdc:	800b883a 	mov	r5,r16
   86ce0:	d8c00115 	stw	r3,4(sp)
   86ce4:	94000504 	addi	r16,r18,20
   86ce8:	a000021e 	bne	r20,zero,86cf4 <__d2b+0x80>
   86cec:	18c00434 	orhi	r3,r3,16
   86cf0:	d8c00115 	stw	r3,4(sp)
   86cf4:	28002726 	beq	r5,zero,86d94 <__d2b+0x120>
   86cf8:	d809883a 	mov	r4,sp
   86cfc:	d9400015 	stw	r5,0(sp)
   86d00:	00866d00 	call	866d0 <__lo0bits>
   86d04:	100d883a 	mov	r6,r2
   86d08:	10003526 	beq	r2,zero,86de0 <__d2b+0x16c>
   86d0c:	d8c00117 	ldw	r3,4(sp)
   86d10:	00800804 	movi	r2,32
   86d14:	1185c83a 	sub	r2,r2,r6
   86d18:	d9000017 	ldw	r4,0(sp)
   86d1c:	1886983a 	sll	r3,r3,r2
   86d20:	1906b03a 	or	r3,r3,r4
   86d24:	90c00515 	stw	r3,20(r18)
   86d28:	d8c00117 	ldw	r3,4(sp)
   86d2c:	1986d83a 	srl	r3,r3,r6
   86d30:	d8c00115 	stw	r3,4(sp)
   86d34:	180b003a 	cmpeq	r5,r3,zero
   86d38:	00800084 	movi	r2,2
   86d3c:	114bc83a 	sub	r5,r2,r5
   86d40:	80c00115 	stw	r3,4(r16)
   86d44:	91400415 	stw	r5,16(r18)
   86d48:	a0001a1e 	bne	r20,zero,86db4 <__d2b+0x140>
   86d4c:	3545883a 	add	r2,r6,r21
   86d50:	10bef344 	addi	r2,r2,-1075
   86d54:	00c00d44 	movi	r3,53
   86d58:	b0800015 	stw	r2,0(r22)
   86d5c:	1987c83a 	sub	r3,r3,r6
   86d60:	b8c00015 	stw	r3,0(r23)
   86d64:	9005883a 	mov	r2,r18
   86d68:	dfc00a17 	ldw	ra,40(sp)
   86d6c:	ddc00917 	ldw	r23,36(sp)
   86d70:	dd800817 	ldw	r22,32(sp)
   86d74:	dd400717 	ldw	r21,28(sp)
   86d78:	dd000617 	ldw	r20,24(sp)
   86d7c:	dcc00517 	ldw	r19,20(sp)
   86d80:	dc800417 	ldw	r18,16(sp)
   86d84:	dc400317 	ldw	r17,12(sp)
   86d88:	dc000217 	ldw	r16,8(sp)
   86d8c:	dec00b04 	addi	sp,sp,44
   86d90:	f800283a 	ret
   86d94:	d9000104 	addi	r4,sp,4
   86d98:	00866d00 	call	866d0 <__lo0bits>
   86d9c:	11800804 	addi	r6,r2,32
   86da0:	d8800117 	ldw	r2,4(sp)
   86da4:	94c00415 	stw	r19,16(r18)
   86da8:	980b883a 	mov	r5,r19
   86dac:	90800515 	stw	r2,20(r18)
   86db0:	a03fe626 	beq	r20,zero,86d4c <__d2b+0xd8>
   86db4:	2945883a 	add	r2,r5,r5
   86db8:	1085883a 	add	r2,r2,r2
   86dbc:	1405883a 	add	r2,r2,r16
   86dc0:	113fff17 	ldw	r4,-4(r2)
   86dc4:	30fef384 	addi	r3,r6,-1074
   86dc8:	2820917a 	slli	r16,r5,5
   86dcc:	b0c00015 	stw	r3,0(r22)
   86dd0:	00866600 	call	86660 <__hi0bits>
   86dd4:	80a1c83a 	sub	r16,r16,r2
   86dd8:	bc000015 	stw	r16,0(r23)
   86ddc:	003fe106 	br	86d64 <__d2b+0xf0>
   86de0:	d8800017 	ldw	r2,0(sp)
   86de4:	90800515 	stw	r2,20(r18)
   86de8:	d8c00117 	ldw	r3,4(sp)
   86dec:	003fd106 	br	86d34 <__d2b+0xc0>

00086df0 <__mdiff>:
   86df0:	defffb04 	addi	sp,sp,-20
   86df4:	dc000015 	stw	r16,0(sp)
   86df8:	2821883a 	mov	r16,r5
   86dfc:	dc800215 	stw	r18,8(sp)
   86e00:	300b883a 	mov	r5,r6
   86e04:	2025883a 	mov	r18,r4
   86e08:	8009883a 	mov	r4,r16
   86e0c:	dc400115 	stw	r17,4(sp)
   86e10:	dfc00415 	stw	ra,16(sp)
   86e14:	dcc00315 	stw	r19,12(sp)
   86e18:	3023883a 	mov	r17,r6
   86e1c:	00867940 	call	86794 <__mcmp>
   86e20:	10004226 	beq	r2,zero,86f2c <__mdiff+0x13c>
   86e24:	10005016 	blt	r2,zero,86f68 <__mdiff+0x178>
   86e28:	0027883a 	mov	r19,zero
   86e2c:	81400117 	ldw	r5,4(r16)
   86e30:	9009883a 	mov	r4,r18
   86e34:	0086bb80 	call	86bb8 <_Balloc>
   86e38:	1019883a 	mov	r12,r2
   86e3c:	82800417 	ldw	r10,16(r16)
   86e40:	88800417 	ldw	r2,16(r17)
   86e44:	81800504 	addi	r6,r16,20
   86e48:	5287883a 	add	r3,r10,r10
   86e4c:	1085883a 	add	r2,r2,r2
   86e50:	18c7883a 	add	r3,r3,r3
   86e54:	1085883a 	add	r2,r2,r2
   86e58:	8a000504 	addi	r8,r17,20
   86e5c:	64c00315 	stw	r19,12(r12)
   86e60:	30db883a 	add	r13,r6,r3
   86e64:	4097883a 	add	r11,r8,r2
   86e68:	61c00504 	addi	r7,r12,20
   86e6c:	0013883a 	mov	r9,zero
   86e70:	31000017 	ldw	r4,0(r6)
   86e74:	41400017 	ldw	r5,0(r8)
   86e78:	42000104 	addi	r8,r8,4
   86e7c:	20bfffcc 	andi	r2,r4,65535
   86e80:	28ffffcc 	andi	r3,r5,65535
   86e84:	10c5c83a 	sub	r2,r2,r3
   86e88:	1245883a 	add	r2,r2,r9
   86e8c:	2008d43a 	srli	r4,r4,16
   86e90:	280ad43a 	srli	r5,r5,16
   86e94:	1007d43a 	srai	r3,r2,16
   86e98:	3880000d 	sth	r2,0(r7)
   86e9c:	2149c83a 	sub	r4,r4,r5
   86ea0:	20c9883a 	add	r4,r4,r3
   86ea4:	3900008d 	sth	r4,2(r7)
   86ea8:	31800104 	addi	r6,r6,4
   86eac:	39c00104 	addi	r7,r7,4
   86eb0:	2013d43a 	srai	r9,r4,16
   86eb4:	42ffee36 	bltu	r8,r11,86e70 <__mdiff+0x80>
   86eb8:	33400c2e 	bgeu	r6,r13,86eec <__mdiff+0xfc>
   86ebc:	30800017 	ldw	r2,0(r6)
   86ec0:	31800104 	addi	r6,r6,4
   86ec4:	10ffffcc 	andi	r3,r2,65535
   86ec8:	1a47883a 	add	r3,r3,r9
   86ecc:	1004d43a 	srli	r2,r2,16
   86ed0:	1809d43a 	srai	r4,r3,16
   86ed4:	38c0000d 	sth	r3,0(r7)
   86ed8:	1105883a 	add	r2,r2,r4
   86edc:	3880008d 	sth	r2,2(r7)
   86ee0:	1013d43a 	srai	r9,r2,16
   86ee4:	39c00104 	addi	r7,r7,4
   86ee8:	337ff436 	bltu	r6,r13,86ebc <__mdiff+0xcc>
   86eec:	38bfff17 	ldw	r2,-4(r7)
   86ef0:	38ffff04 	addi	r3,r7,-4
   86ef4:	1000041e 	bne	r2,zero,86f08 <__mdiff+0x118>
   86ef8:	18ffff04 	addi	r3,r3,-4
   86efc:	18800017 	ldw	r2,0(r3)
   86f00:	52bfffc4 	addi	r10,r10,-1
   86f04:	103ffc26 	beq	r2,zero,86ef8 <__mdiff+0x108>
   86f08:	6005883a 	mov	r2,r12
   86f0c:	62800415 	stw	r10,16(r12)
   86f10:	dfc00417 	ldw	ra,16(sp)
   86f14:	dcc00317 	ldw	r19,12(sp)
   86f18:	dc800217 	ldw	r18,8(sp)
   86f1c:	dc400117 	ldw	r17,4(sp)
   86f20:	dc000017 	ldw	r16,0(sp)
   86f24:	dec00504 	addi	sp,sp,20
   86f28:	f800283a 	ret
   86f2c:	9009883a 	mov	r4,r18
   86f30:	000b883a 	mov	r5,zero
   86f34:	0086bb80 	call	86bb8 <_Balloc>
   86f38:	1019883a 	mov	r12,r2
   86f3c:	00800044 	movi	r2,1
   86f40:	60800415 	stw	r2,16(r12)
   86f44:	6005883a 	mov	r2,r12
   86f48:	60000515 	stw	zero,20(r12)
   86f4c:	dfc00417 	ldw	ra,16(sp)
   86f50:	dcc00317 	ldw	r19,12(sp)
   86f54:	dc800217 	ldw	r18,8(sp)
   86f58:	dc400117 	ldw	r17,4(sp)
   86f5c:	dc000017 	ldw	r16,0(sp)
   86f60:	dec00504 	addi	sp,sp,20
   86f64:	f800283a 	ret
   86f68:	880d883a 	mov	r6,r17
   86f6c:	04c00044 	movi	r19,1
   86f70:	8023883a 	mov	r17,r16
   86f74:	3021883a 	mov	r16,r6
   86f78:	003fac06 	br	86e2c <__mdiff+0x3c>

00086f7c <__lshift>:
   86f7c:	defff904 	addi	sp,sp,-28
   86f80:	28800417 	ldw	r2,16(r5)
   86f84:	dc000015 	stw	r16,0(sp)
   86f88:	3021d17a 	srai	r16,r6,5
   86f8c:	28c00217 	ldw	r3,8(r5)
   86f90:	10800044 	addi	r2,r2,1
   86f94:	dc400115 	stw	r17,4(sp)
   86f98:	80a3883a 	add	r17,r16,r2
   86f9c:	dd400515 	stw	r21,20(sp)
   86fa0:	dd000415 	stw	r20,16(sp)
   86fa4:	dc800215 	stw	r18,8(sp)
   86fa8:	dfc00615 	stw	ra,24(sp)
   86fac:	2825883a 	mov	r18,r5
   86fb0:	dcc00315 	stw	r19,12(sp)
   86fb4:	3029883a 	mov	r20,r6
   86fb8:	202b883a 	mov	r21,r4
   86fbc:	29400117 	ldw	r5,4(r5)
   86fc0:	1c40030e 	bge	r3,r17,86fd0 <__lshift+0x54>
   86fc4:	18c7883a 	add	r3,r3,r3
   86fc8:	29400044 	addi	r5,r5,1
   86fcc:	1c7ffd16 	blt	r3,r17,86fc4 <__lshift+0x48>
   86fd0:	a809883a 	mov	r4,r21
   86fd4:	0086bb80 	call	86bb8 <_Balloc>
   86fd8:	1027883a 	mov	r19,r2
   86fdc:	11400504 	addi	r5,r2,20
   86fe0:	0400090e 	bge	zero,r16,87008 <__lshift+0x8c>
   86fe4:	2805883a 	mov	r2,r5
   86fe8:	0007883a 	mov	r3,zero
   86fec:	18c00044 	addi	r3,r3,1
   86ff0:	10000015 	stw	zero,0(r2)
   86ff4:	10800104 	addi	r2,r2,4
   86ff8:	80fffc1e 	bne	r16,r3,86fec <__lshift+0x70>
   86ffc:	8405883a 	add	r2,r16,r16
   87000:	1085883a 	add	r2,r2,r2
   87004:	288b883a 	add	r5,r5,r2
   87008:	90800417 	ldw	r2,16(r18)
   8700c:	91000504 	addi	r4,r18,20
   87010:	a18007cc 	andi	r6,r20,31
   87014:	1085883a 	add	r2,r2,r2
   87018:	1085883a 	add	r2,r2,r2
   8701c:	208f883a 	add	r7,r4,r2
   87020:	30001e26 	beq	r6,zero,8709c <__lshift+0x120>
   87024:	00800804 	movi	r2,32
   87028:	1191c83a 	sub	r8,r2,r6
   8702c:	0007883a 	mov	r3,zero
   87030:	20800017 	ldw	r2,0(r4)
   87034:	1184983a 	sll	r2,r2,r6
   87038:	1884b03a 	or	r2,r3,r2
   8703c:	28800015 	stw	r2,0(r5)
   87040:	20c00017 	ldw	r3,0(r4)
   87044:	21000104 	addi	r4,r4,4
   87048:	29400104 	addi	r5,r5,4
   8704c:	1a06d83a 	srl	r3,r3,r8
   87050:	21fff736 	bltu	r4,r7,87030 <__lshift+0xb4>
   87054:	28c00015 	stw	r3,0(r5)
   87058:	18000126 	beq	r3,zero,87060 <__lshift+0xe4>
   8705c:	8c400044 	addi	r17,r17,1
   87060:	88bfffc4 	addi	r2,r17,-1
   87064:	98800415 	stw	r2,16(r19)
   87068:	a809883a 	mov	r4,r21
   8706c:	900b883a 	mov	r5,r18
   87070:	00866380 	call	86638 <_Bfree>
   87074:	9805883a 	mov	r2,r19
   87078:	dfc00617 	ldw	ra,24(sp)
   8707c:	dd400517 	ldw	r21,20(sp)
   87080:	dd000417 	ldw	r20,16(sp)
   87084:	dcc00317 	ldw	r19,12(sp)
   87088:	dc800217 	ldw	r18,8(sp)
   8708c:	dc400117 	ldw	r17,4(sp)
   87090:	dc000017 	ldw	r16,0(sp)
   87094:	dec00704 	addi	sp,sp,28
   87098:	f800283a 	ret
   8709c:	20800017 	ldw	r2,0(r4)
   870a0:	21000104 	addi	r4,r4,4
   870a4:	28800015 	stw	r2,0(r5)
   870a8:	29400104 	addi	r5,r5,4
   870ac:	21ffec2e 	bgeu	r4,r7,87060 <__lshift+0xe4>
   870b0:	20800017 	ldw	r2,0(r4)
   870b4:	21000104 	addi	r4,r4,4
   870b8:	28800015 	stw	r2,0(r5)
   870bc:	29400104 	addi	r5,r5,4
   870c0:	21fff636 	bltu	r4,r7,8709c <__lshift+0x120>
   870c4:	003fe606 	br	87060 <__lshift+0xe4>

000870c8 <__multiply>:
   870c8:	defff904 	addi	sp,sp,-28
   870cc:	dcc00315 	stw	r19,12(sp)
   870d0:	dc800215 	stw	r18,8(sp)
   870d4:	2cc00417 	ldw	r19,16(r5)
   870d8:	34800417 	ldw	r18,16(r6)
   870dc:	dd000415 	stw	r20,16(sp)
   870e0:	dc400115 	stw	r17,4(sp)
   870e4:	dfc00615 	stw	ra,24(sp)
   870e8:	dd400515 	stw	r21,20(sp)
   870ec:	dc000015 	stw	r16,0(sp)
   870f0:	2823883a 	mov	r17,r5
   870f4:	3029883a 	mov	r20,r6
   870f8:	9c80040e 	bge	r19,r18,8710c <__multiply+0x44>
   870fc:	9027883a 	mov	r19,r18
   87100:	2c800417 	ldw	r18,16(r5)
   87104:	2829883a 	mov	r20,r5
   87108:	3023883a 	mov	r17,r6
   8710c:	88800217 	ldw	r2,8(r17)
   87110:	9ca1883a 	add	r16,r19,r18
   87114:	89400117 	ldw	r5,4(r17)
   87118:	1400010e 	bge	r2,r16,87120 <__multiply+0x58>
   8711c:	29400044 	addi	r5,r5,1
   87120:	0086bb80 	call	86bb8 <_Balloc>
   87124:	102b883a 	mov	r21,r2
   87128:	8405883a 	add	r2,r16,r16
   8712c:	1085883a 	add	r2,r2,r2
   87130:	a9000504 	addi	r4,r21,20
   87134:	209d883a 	add	r14,r4,r2
   87138:	2380042e 	bgeu	r4,r14,8714c <__multiply+0x84>
   8713c:	2005883a 	mov	r2,r4
   87140:	10000015 	stw	zero,0(r2)
   87144:	10800104 	addi	r2,r2,4
   87148:	13bffd36 	bltu	r2,r14,87140 <__multiply+0x78>
   8714c:	9485883a 	add	r2,r18,r18
   87150:	9cc7883a 	add	r3,r19,r19
   87154:	a1800504 	addi	r6,r20,20
   87158:	1085883a 	add	r2,r2,r2
   8715c:	8b400504 	addi	r13,r17,20
   87160:	18c7883a 	add	r3,r3,r3
   87164:	309f883a 	add	r15,r6,r2
   87168:	68d7883a 	add	r11,r13,r3
   8716c:	33c03b2e 	bgeu	r6,r15,8725c <__multiply+0x194>
   87170:	2019883a 	mov	r12,r4
   87174:	30800017 	ldw	r2,0(r6)
   87178:	127fffcc 	andi	r9,r2,65535
   8717c:	48001826 	beq	r9,zero,871e0 <__multiply+0x118>
   87180:	6811883a 	mov	r8,r13
   87184:	600f883a 	mov	r7,r12
   87188:	0015883a 	mov	r10,zero
   8718c:	40c00017 	ldw	r3,0(r8)
   87190:	39400017 	ldw	r5,0(r7)
   87194:	42000104 	addi	r8,r8,4
   87198:	193fffcc 	andi	r4,r3,65535
   8719c:	4909383a 	mul	r4,r9,r4
   871a0:	1806d43a 	srli	r3,r3,16
   871a4:	28bfffcc 	andi	r2,r5,65535
   871a8:	5085883a 	add	r2,r10,r2
   871ac:	2089883a 	add	r4,r4,r2
   871b0:	48c7383a 	mul	r3,r9,r3
   871b4:	280ad43a 	srli	r5,r5,16
   871b8:	2004d43a 	srli	r2,r4,16
   871bc:	3900000d 	sth	r4,0(r7)
   871c0:	1947883a 	add	r3,r3,r5
   871c4:	10c5883a 	add	r2,r2,r3
   871c8:	3880008d 	sth	r2,2(r7)
   871cc:	1014d43a 	srli	r10,r2,16
   871d0:	39c00104 	addi	r7,r7,4
   871d4:	42ffed36 	bltu	r8,r11,8718c <__multiply+0xc4>
   871d8:	3a800015 	stw	r10,0(r7)
   871dc:	30800017 	ldw	r2,0(r6)
   871e0:	1012d43a 	srli	r9,r2,16
   871e4:	48001926 	beq	r9,zero,8724c <__multiply+0x184>
   871e8:	60800017 	ldw	r2,0(r12)
   871ec:	6811883a 	mov	r8,r13
   871f0:	600f883a 	mov	r7,r12
   871f4:	0015883a 	mov	r10,zero
   871f8:	100b883a 	mov	r5,r2
   871fc:	41000017 	ldw	r4,0(r8)
   87200:	2806d43a 	srli	r3,r5,16
   87204:	3880000d 	sth	r2,0(r7)
   87208:	20bfffcc 	andi	r2,r4,65535
   8720c:	4885383a 	mul	r2,r9,r2
   87210:	50c7883a 	add	r3,r10,r3
   87214:	2008d43a 	srli	r4,r4,16
   87218:	10c5883a 	add	r2,r2,r3
   8721c:	3880008d 	sth	r2,2(r7)
   87220:	39c00104 	addi	r7,r7,4
   87224:	39400017 	ldw	r5,0(r7)
   87228:	4909383a 	mul	r4,r9,r4
   8722c:	1004d43a 	srli	r2,r2,16
   87230:	28ffffcc 	andi	r3,r5,65535
   87234:	20c9883a 	add	r4,r4,r3
   87238:	1105883a 	add	r2,r2,r4
   8723c:	42000104 	addi	r8,r8,4
   87240:	1014d43a 	srli	r10,r2,16
   87244:	42ffed36 	bltu	r8,r11,871fc <__multiply+0x134>
   87248:	38800015 	stw	r2,0(r7)
   8724c:	31800104 	addi	r6,r6,4
   87250:	33c0022e 	bgeu	r6,r15,8725c <__multiply+0x194>
   87254:	63000104 	addi	r12,r12,4
   87258:	003fc606 	br	87174 <__multiply+0xac>
   8725c:	0400090e 	bge	zero,r16,87284 <__multiply+0x1bc>
   87260:	70bfff17 	ldw	r2,-4(r14)
   87264:	70ffff04 	addi	r3,r14,-4
   87268:	10000326 	beq	r2,zero,87278 <__multiply+0x1b0>
   8726c:	00000506 	br	87284 <__multiply+0x1bc>
   87270:	18800017 	ldw	r2,0(r3)
   87274:	1000031e 	bne	r2,zero,87284 <__multiply+0x1bc>
   87278:	843fffc4 	addi	r16,r16,-1
   8727c:	18ffff04 	addi	r3,r3,-4
   87280:	803ffb1e 	bne	r16,zero,87270 <__multiply+0x1a8>
   87284:	a805883a 	mov	r2,r21
   87288:	ac000415 	stw	r16,16(r21)
   8728c:	dfc00617 	ldw	ra,24(sp)
   87290:	dd400517 	ldw	r21,20(sp)
   87294:	dd000417 	ldw	r20,16(sp)
   87298:	dcc00317 	ldw	r19,12(sp)
   8729c:	dc800217 	ldw	r18,8(sp)
   872a0:	dc400117 	ldw	r17,4(sp)
   872a4:	dc000017 	ldw	r16,0(sp)
   872a8:	dec00704 	addi	sp,sp,28
   872ac:	f800283a 	ret

000872b0 <__i2b>:
   872b0:	defffd04 	addi	sp,sp,-12
   872b4:	dc000015 	stw	r16,0(sp)
   872b8:	04000044 	movi	r16,1
   872bc:	dc800115 	stw	r18,4(sp)
   872c0:	2825883a 	mov	r18,r5
   872c4:	800b883a 	mov	r5,r16
   872c8:	dfc00215 	stw	ra,8(sp)
   872cc:	0086bb80 	call	86bb8 <_Balloc>
   872d0:	14000415 	stw	r16,16(r2)
   872d4:	14800515 	stw	r18,20(r2)
   872d8:	dfc00217 	ldw	ra,8(sp)
   872dc:	dc800117 	ldw	r18,4(sp)
   872e0:	dc000017 	ldw	r16,0(sp)
   872e4:	dec00304 	addi	sp,sp,12
   872e8:	f800283a 	ret

000872ec <__multadd>:
   872ec:	defffa04 	addi	sp,sp,-24
   872f0:	dc800215 	stw	r18,8(sp)
   872f4:	2c800417 	ldw	r18,16(r5)
   872f8:	dd000415 	stw	r20,16(sp)
   872fc:	dcc00315 	stw	r19,12(sp)
   87300:	dc000015 	stw	r16,0(sp)
   87304:	dfc00515 	stw	ra,20(sp)
   87308:	3821883a 	mov	r16,r7
   8730c:	dc400115 	stw	r17,4(sp)
   87310:	2827883a 	mov	r19,r5
   87314:	2029883a 	mov	r20,r4
   87318:	2a000504 	addi	r8,r5,20
   8731c:	000f883a 	mov	r7,zero
   87320:	40800017 	ldw	r2,0(r8)
   87324:	39c00044 	addi	r7,r7,1
   87328:	10ffffcc 	andi	r3,r2,65535
   8732c:	1987383a 	mul	r3,r3,r6
   87330:	1004d43a 	srli	r2,r2,16
   87334:	1c07883a 	add	r3,r3,r16
   87338:	180ad43a 	srli	r5,r3,16
   8733c:	1185383a 	mul	r2,r2,r6
   87340:	18ffffcc 	andi	r3,r3,65535
   87344:	1145883a 	add	r2,r2,r5
   87348:	1008943a 	slli	r4,r2,16
   8734c:	1020d43a 	srli	r16,r2,16
   87350:	20c9883a 	add	r4,r4,r3
   87354:	41000015 	stw	r4,0(r8)
   87358:	42000104 	addi	r8,r8,4
   8735c:	3cbff016 	blt	r7,r18,87320 <__multadd+0x34>
   87360:	80000826 	beq	r16,zero,87384 <__multadd+0x98>
   87364:	98800217 	ldw	r2,8(r19)
   87368:	90800f0e 	bge	r18,r2,873a8 <__multadd+0xbc>
   8736c:	9485883a 	add	r2,r18,r18
   87370:	1085883a 	add	r2,r2,r2
   87374:	14c5883a 	add	r2,r2,r19
   87378:	90c00044 	addi	r3,r18,1
   8737c:	14000515 	stw	r16,20(r2)
   87380:	98c00415 	stw	r3,16(r19)
   87384:	9805883a 	mov	r2,r19
   87388:	dfc00517 	ldw	ra,20(sp)
   8738c:	dd000417 	ldw	r20,16(sp)
   87390:	dcc00317 	ldw	r19,12(sp)
   87394:	dc800217 	ldw	r18,8(sp)
   87398:	dc400117 	ldw	r17,4(sp)
   8739c:	dc000017 	ldw	r16,0(sp)
   873a0:	dec00604 	addi	sp,sp,24
   873a4:	f800283a 	ret
   873a8:	99400117 	ldw	r5,4(r19)
   873ac:	a009883a 	mov	r4,r20
   873b0:	29400044 	addi	r5,r5,1
   873b4:	0086bb80 	call	86bb8 <_Balloc>
   873b8:	99800417 	ldw	r6,16(r19)
   873bc:	99400304 	addi	r5,r19,12
   873c0:	11000304 	addi	r4,r2,12
   873c4:	318d883a 	add	r6,r6,r6
   873c8:	318d883a 	add	r6,r6,r6
   873cc:	31800204 	addi	r6,r6,8
   873d0:	1023883a 	mov	r17,r2
   873d4:	00864200 	call	86420 <memcpy>
   873d8:	980b883a 	mov	r5,r19
   873dc:	a009883a 	mov	r4,r20
   873e0:	00866380 	call	86638 <_Bfree>
   873e4:	8827883a 	mov	r19,r17
   873e8:	003fe006 	br	8736c <__multadd+0x80>

000873ec <__pow5mult>:
   873ec:	defffa04 	addi	sp,sp,-24
   873f0:	308000cc 	andi	r2,r6,3
   873f4:	dd000415 	stw	r20,16(sp)
   873f8:	dcc00315 	stw	r19,12(sp)
   873fc:	dc000015 	stw	r16,0(sp)
   87400:	dfc00515 	stw	ra,20(sp)
   87404:	dc800215 	stw	r18,8(sp)
   87408:	dc400115 	stw	r17,4(sp)
   8740c:	3021883a 	mov	r16,r6
   87410:	2027883a 	mov	r19,r4
   87414:	2829883a 	mov	r20,r5
   87418:	10002b1e 	bne	r2,zero,874c8 <__pow5mult+0xdc>
   8741c:	8025d0ba 	srai	r18,r16,2
   87420:	90001b26 	beq	r18,zero,87490 <__pow5mult+0xa4>
   87424:	9c001217 	ldw	r16,72(r19)
   87428:	8000081e 	bne	r16,zero,8744c <__pow5mult+0x60>
   8742c:	00003006 	br	874f0 <__pow5mult+0x104>
   87430:	800b883a 	mov	r5,r16
   87434:	800d883a 	mov	r6,r16
   87438:	9809883a 	mov	r4,r19
   8743c:	90001426 	beq	r18,zero,87490 <__pow5mult+0xa4>
   87440:	80800017 	ldw	r2,0(r16)
   87444:	10001b26 	beq	r2,zero,874b4 <__pow5mult+0xc8>
   87448:	1021883a 	mov	r16,r2
   8744c:	9080004c 	andi	r2,r18,1
   87450:	1005003a 	cmpeq	r2,r2,zero
   87454:	9025d07a 	srai	r18,r18,1
   87458:	800d883a 	mov	r6,r16
   8745c:	9809883a 	mov	r4,r19
   87460:	a00b883a 	mov	r5,r20
   87464:	103ff21e 	bne	r2,zero,87430 <__pow5mult+0x44>
   87468:	00870c80 	call	870c8 <__multiply>
   8746c:	a00b883a 	mov	r5,r20
   87470:	9809883a 	mov	r4,r19
   87474:	1023883a 	mov	r17,r2
   87478:	00866380 	call	86638 <_Bfree>
   8747c:	8829883a 	mov	r20,r17
   87480:	800b883a 	mov	r5,r16
   87484:	800d883a 	mov	r6,r16
   87488:	9809883a 	mov	r4,r19
   8748c:	903fec1e 	bne	r18,zero,87440 <__pow5mult+0x54>
   87490:	a005883a 	mov	r2,r20
   87494:	dfc00517 	ldw	ra,20(sp)
   87498:	dd000417 	ldw	r20,16(sp)
   8749c:	dcc00317 	ldw	r19,12(sp)
   874a0:	dc800217 	ldw	r18,8(sp)
   874a4:	dc400117 	ldw	r17,4(sp)
   874a8:	dc000017 	ldw	r16,0(sp)
   874ac:	dec00604 	addi	sp,sp,24
   874b0:	f800283a 	ret
   874b4:	00870c80 	call	870c8 <__multiply>
   874b8:	80800015 	stw	r2,0(r16)
   874bc:	1021883a 	mov	r16,r2
   874c0:	10000015 	stw	zero,0(r2)
   874c4:	003fe106 	br	8744c <__pow5mult+0x60>
   874c8:	1085883a 	add	r2,r2,r2
   874cc:	00c00274 	movhi	r3,9
   874d0:	18f5e104 	addi	r3,r3,-10364
   874d4:	1085883a 	add	r2,r2,r2
   874d8:	10c5883a 	add	r2,r2,r3
   874dc:	11bfff17 	ldw	r6,-4(r2)
   874e0:	000f883a 	mov	r7,zero
   874e4:	00872ec0 	call	872ec <__multadd>
   874e8:	1029883a 	mov	r20,r2
   874ec:	003fcb06 	br	8741c <__pow5mult+0x30>
   874f0:	9809883a 	mov	r4,r19
   874f4:	01409c44 	movi	r5,625
   874f8:	00872b00 	call	872b0 <__i2b>
   874fc:	98801215 	stw	r2,72(r19)
   87500:	1021883a 	mov	r16,r2
   87504:	10000015 	stw	zero,0(r2)
   87508:	003fd006 	br	8744c <__pow5mult+0x60>

0008750c <__s2b>:
   8750c:	defff904 	addi	sp,sp,-28
   87510:	dcc00315 	stw	r19,12(sp)
   87514:	dc800215 	stw	r18,8(sp)
   87518:	2827883a 	mov	r19,r5
   8751c:	2025883a 	mov	r18,r4
   87520:	01400244 	movi	r5,9
   87524:	39000204 	addi	r4,r7,8
   87528:	dd000415 	stw	r20,16(sp)
   8752c:	dc400115 	stw	r17,4(sp)
   87530:	dfc00615 	stw	ra,24(sp)
   87534:	dd400515 	stw	r21,20(sp)
   87538:	dc000015 	stw	r16,0(sp)
   8753c:	3829883a 	mov	r20,r7
   87540:	3023883a 	mov	r17,r6
   87544:	008a0d00 	call	8a0d0 <__divsi3>
   87548:	00c00044 	movi	r3,1
   8754c:	1880350e 	bge	r3,r2,87624 <__s2b+0x118>
   87550:	000b883a 	mov	r5,zero
   87554:	18c7883a 	add	r3,r3,r3
   87558:	29400044 	addi	r5,r5,1
   8755c:	18bffd16 	blt	r3,r2,87554 <__s2b+0x48>
   87560:	9009883a 	mov	r4,r18
   87564:	0086bb80 	call	86bb8 <_Balloc>
   87568:	1011883a 	mov	r8,r2
   8756c:	d8800717 	ldw	r2,28(sp)
   87570:	00c00044 	movi	r3,1
   87574:	01800244 	movi	r6,9
   87578:	40800515 	stw	r2,20(r8)
   8757c:	40c00415 	stw	r3,16(r8)
   87580:	3440260e 	bge	r6,r17,8761c <__s2b+0x110>
   87584:	3021883a 	mov	r16,r6
   87588:	99ab883a 	add	r21,r19,r6
   8758c:	9c05883a 	add	r2,r19,r16
   87590:	11c00007 	ldb	r7,0(r2)
   87594:	400b883a 	mov	r5,r8
   87598:	9009883a 	mov	r4,r18
   8759c:	39fff404 	addi	r7,r7,-48
   875a0:	01800284 	movi	r6,10
   875a4:	00872ec0 	call	872ec <__multadd>
   875a8:	84000044 	addi	r16,r16,1
   875ac:	1011883a 	mov	r8,r2
   875b0:	8c3ff61e 	bne	r17,r16,8758c <__s2b+0x80>
   875b4:	ac45883a 	add	r2,r21,r17
   875b8:	117ffe04 	addi	r5,r2,-8
   875bc:	880d883a 	mov	r6,r17
   875c0:	35000c0e 	bge	r6,r20,875f4 <__s2b+0xe8>
   875c4:	a185c83a 	sub	r2,r20,r6
   875c8:	2821883a 	mov	r16,r5
   875cc:	28a3883a 	add	r17,r5,r2
   875d0:	81c00007 	ldb	r7,0(r16)
   875d4:	400b883a 	mov	r5,r8
   875d8:	9009883a 	mov	r4,r18
   875dc:	39fff404 	addi	r7,r7,-48
   875e0:	01800284 	movi	r6,10
   875e4:	00872ec0 	call	872ec <__multadd>
   875e8:	84000044 	addi	r16,r16,1
   875ec:	1011883a 	mov	r8,r2
   875f0:	847ff71e 	bne	r16,r17,875d0 <__s2b+0xc4>
   875f4:	4005883a 	mov	r2,r8
   875f8:	dfc00617 	ldw	ra,24(sp)
   875fc:	dd400517 	ldw	r21,20(sp)
   87600:	dd000417 	ldw	r20,16(sp)
   87604:	dcc00317 	ldw	r19,12(sp)
   87608:	dc800217 	ldw	r18,8(sp)
   8760c:	dc400117 	ldw	r17,4(sp)
   87610:	dc000017 	ldw	r16,0(sp)
   87614:	dec00704 	addi	sp,sp,28
   87618:	f800283a 	ret
   8761c:	99400284 	addi	r5,r19,10
   87620:	003fe706 	br	875c0 <__s2b+0xb4>
   87624:	000b883a 	mov	r5,zero
   87628:	003fcd06 	br	87560 <__s2b+0x54>

0008762c <_realloc_r>:
   8762c:	defff404 	addi	sp,sp,-48
   87630:	dd800815 	stw	r22,32(sp)
   87634:	dc800415 	stw	r18,16(sp)
   87638:	dc400315 	stw	r17,12(sp)
   8763c:	dfc00b15 	stw	ra,44(sp)
   87640:	df000a15 	stw	fp,40(sp)
   87644:	ddc00915 	stw	r23,36(sp)
   87648:	dd400715 	stw	r21,28(sp)
   8764c:	dd000615 	stw	r20,24(sp)
   87650:	dcc00515 	stw	r19,20(sp)
   87654:	dc000215 	stw	r16,8(sp)
   87658:	2825883a 	mov	r18,r5
   8765c:	3023883a 	mov	r17,r6
   87660:	202d883a 	mov	r22,r4
   87664:	2800c926 	beq	r5,zero,8798c <_realloc_r+0x360>
   87668:	008b0100 	call	8b010 <__malloc_lock>
   8766c:	943ffe04 	addi	r16,r18,-8
   87670:	88c002c4 	addi	r3,r17,11
   87674:	00800584 	movi	r2,22
   87678:	82000117 	ldw	r8,4(r16)
   8767c:	10c01b2e 	bgeu	r2,r3,876ec <_realloc_r+0xc0>
   87680:	00bffe04 	movi	r2,-8
   87684:	188e703a 	and	r7,r3,r2
   87688:	3839883a 	mov	fp,r7
   8768c:	38001a16 	blt	r7,zero,876f8 <_realloc_r+0xcc>
   87690:	e4401936 	bltu	fp,r17,876f8 <_realloc_r+0xcc>
   87694:	013fff04 	movi	r4,-4
   87698:	4126703a 	and	r19,r8,r4
   8769c:	99c02616 	blt	r19,r7,87738 <_realloc_r+0x10c>
   876a0:	802b883a 	mov	r21,r16
   876a4:	9829883a 	mov	r20,r19
   876a8:	84000204 	addi	r16,r16,8
   876ac:	a80f883a 	mov	r7,r21
   876b0:	a70dc83a 	sub	r6,r20,fp
   876b4:	008003c4 	movi	r2,15
   876b8:	1180c136 	bltu	r2,r6,879c0 <_realloc_r+0x394>
   876bc:	38800117 	ldw	r2,4(r7)
   876c0:	a549883a 	add	r4,r20,r21
   876c4:	1080004c 	andi	r2,r2,1
   876c8:	a084b03a 	or	r2,r20,r2
   876cc:	38800115 	stw	r2,4(r7)
   876d0:	20c00117 	ldw	r3,4(r4)
   876d4:	18c00054 	ori	r3,r3,1
   876d8:	20c00115 	stw	r3,4(r4)
   876dc:	b009883a 	mov	r4,r22
   876e0:	008b0300 	call	8b030 <__malloc_unlock>
   876e4:	8023883a 	mov	r17,r16
   876e8:	00000606 	br	87704 <_realloc_r+0xd8>
   876ec:	01c00404 	movi	r7,16
   876f0:	3839883a 	mov	fp,r7
   876f4:	e47fe72e 	bgeu	fp,r17,87694 <_realloc_r+0x68>
   876f8:	00800304 	movi	r2,12
   876fc:	0023883a 	mov	r17,zero
   87700:	b0800015 	stw	r2,0(r22)
   87704:	8805883a 	mov	r2,r17
   87708:	dfc00b17 	ldw	ra,44(sp)
   8770c:	df000a17 	ldw	fp,40(sp)
   87710:	ddc00917 	ldw	r23,36(sp)
   87714:	dd800817 	ldw	r22,32(sp)
   87718:	dd400717 	ldw	r21,28(sp)
   8771c:	dd000617 	ldw	r20,24(sp)
   87720:	dcc00517 	ldw	r19,20(sp)
   87724:	dc800417 	ldw	r18,16(sp)
   87728:	dc400317 	ldw	r17,12(sp)
   8772c:	dc000217 	ldw	r16,8(sp)
   87730:	dec00c04 	addi	sp,sp,48
   87734:	f800283a 	ret
   87738:	00800274 	movhi	r2,9
   8773c:	10b73904 	addi	r2,r2,-8988
   87740:	12400217 	ldw	r9,8(r2)
   87744:	84cd883a 	add	r6,r16,r19
   87748:	802b883a 	mov	r21,r16
   8774c:	3240b926 	beq	r6,r9,87a34 <_realloc_r+0x408>
   87750:	31400117 	ldw	r5,4(r6)
   87754:	00bfff84 	movi	r2,-2
   87758:	2884703a 	and	r2,r5,r2
   8775c:	1185883a 	add	r2,r2,r6
   87760:	10c00117 	ldw	r3,4(r2)
   87764:	18c0004c 	andi	r3,r3,1
   87768:	1807003a 	cmpeq	r3,r3,zero
   8776c:	1800a326 	beq	r3,zero,879fc <_realloc_r+0x3d0>
   87770:	2908703a 	and	r4,r5,r4
   87774:	9929883a 	add	r20,r19,r4
   87778:	a1c0a30e 	bge	r20,r7,87a08 <_realloc_r+0x3dc>
   8777c:	4080004c 	andi	r2,r8,1
   87780:	1000551e 	bne	r2,zero,878d8 <_realloc_r+0x2ac>
   87784:	80800017 	ldw	r2,0(r16)
   87788:	80afc83a 	sub	r23,r16,r2
   8778c:	b8c00117 	ldw	r3,4(r23)
   87790:	00bfff04 	movi	r2,-4
   87794:	1884703a 	and	r2,r3,r2
   87798:	30002e26 	beq	r6,zero,87854 <_realloc_r+0x228>
   8779c:	3240b926 	beq	r6,r9,87a84 <_realloc_r+0x458>
   877a0:	98a9883a 	add	r20,r19,r2
   877a4:	2509883a 	add	r4,r4,r20
   877a8:	d9000015 	stw	r4,0(sp)
   877ac:	21c02a16 	blt	r4,r7,87858 <_realloc_r+0x22c>
   877b0:	30800317 	ldw	r2,12(r6)
   877b4:	30c00217 	ldw	r3,8(r6)
   877b8:	01400904 	movi	r5,36
   877bc:	99bfff04 	addi	r6,r19,-4
   877c0:	18800315 	stw	r2,12(r3)
   877c4:	10c00215 	stw	r3,8(r2)
   877c8:	b9000317 	ldw	r4,12(r23)
   877cc:	b8800217 	ldw	r2,8(r23)
   877d0:	b82b883a 	mov	r21,r23
   877d4:	bc000204 	addi	r16,r23,8
   877d8:	20800215 	stw	r2,8(r4)
   877dc:	11000315 	stw	r4,12(r2)
   877e0:	2980e436 	bltu	r5,r6,87b74 <_realloc_r+0x548>
   877e4:	008004c4 	movi	r2,19
   877e8:	9009883a 	mov	r4,r18
   877ec:	8011883a 	mov	r8,r16
   877f0:	11800f2e 	bgeu	r2,r6,87830 <_realloc_r+0x204>
   877f4:	90800017 	ldw	r2,0(r18)
   877f8:	ba000404 	addi	r8,r23,16
   877fc:	91000204 	addi	r4,r18,8
   87800:	b8800215 	stw	r2,8(r23)
   87804:	90c00117 	ldw	r3,4(r18)
   87808:	008006c4 	movi	r2,27
   8780c:	b8c00315 	stw	r3,12(r23)
   87810:	1180072e 	bgeu	r2,r6,87830 <_realloc_r+0x204>
   87814:	90c00217 	ldw	r3,8(r18)
   87818:	ba000604 	addi	r8,r23,24
   8781c:	91000404 	addi	r4,r18,16
   87820:	b8c00415 	stw	r3,16(r23)
   87824:	90800317 	ldw	r2,12(r18)
   87828:	b8800515 	stw	r2,20(r23)
   8782c:	3140e726 	beq	r6,r5,87bcc <_realloc_r+0x5a0>
   87830:	20800017 	ldw	r2,0(r4)
   87834:	dd000017 	ldw	r20,0(sp)
   87838:	b80f883a 	mov	r7,r23
   8783c:	40800015 	stw	r2,0(r8)
   87840:	20c00117 	ldw	r3,4(r4)
   87844:	40c00115 	stw	r3,4(r8)
   87848:	20800217 	ldw	r2,8(r4)
   8784c:	40800215 	stw	r2,8(r8)
   87850:	003f9706 	br	876b0 <_realloc_r+0x84>
   87854:	98a9883a 	add	r20,r19,r2
   87858:	a1c01f16 	blt	r20,r7,878d8 <_realloc_r+0x2ac>
   8785c:	b8c00317 	ldw	r3,12(r23)
   87860:	b8800217 	ldw	r2,8(r23)
   87864:	99bfff04 	addi	r6,r19,-4
   87868:	01400904 	movi	r5,36
   8786c:	b82b883a 	mov	r21,r23
   87870:	18800215 	stw	r2,8(r3)
   87874:	10c00315 	stw	r3,12(r2)
   87878:	bc000204 	addi	r16,r23,8
   8787c:	2980c336 	bltu	r5,r6,87b8c <_realloc_r+0x560>
   87880:	008004c4 	movi	r2,19
   87884:	9009883a 	mov	r4,r18
   87888:	8011883a 	mov	r8,r16
   8788c:	11800f2e 	bgeu	r2,r6,878cc <_realloc_r+0x2a0>
   87890:	90800017 	ldw	r2,0(r18)
   87894:	ba000404 	addi	r8,r23,16
   87898:	91000204 	addi	r4,r18,8
   8789c:	b8800215 	stw	r2,8(r23)
   878a0:	90c00117 	ldw	r3,4(r18)
   878a4:	008006c4 	movi	r2,27
   878a8:	b8c00315 	stw	r3,12(r23)
   878ac:	1180072e 	bgeu	r2,r6,878cc <_realloc_r+0x2a0>
   878b0:	90c00217 	ldw	r3,8(r18)
   878b4:	ba000604 	addi	r8,r23,24
   878b8:	91000404 	addi	r4,r18,16
   878bc:	b8c00415 	stw	r3,16(r23)
   878c0:	90800317 	ldw	r2,12(r18)
   878c4:	b8800515 	stw	r2,20(r23)
   878c8:	3140c726 	beq	r6,r5,87be8 <_realloc_r+0x5bc>
   878cc:	20800017 	ldw	r2,0(r4)
   878d0:	b80f883a 	mov	r7,r23
   878d4:	003fd906 	br	8783c <_realloc_r+0x210>
   878d8:	880b883a 	mov	r5,r17
   878dc:	b009883a 	mov	r4,r22
   878e0:	0085bfc0 	call	85bfc <_malloc_r>
   878e4:	1023883a 	mov	r17,r2
   878e8:	10002526 	beq	r2,zero,87980 <_realloc_r+0x354>
   878ec:	80800117 	ldw	r2,4(r16)
   878f0:	00ffff84 	movi	r3,-2
   878f4:	893ffe04 	addi	r4,r17,-8
   878f8:	10c4703a 	and	r2,r2,r3
   878fc:	8085883a 	add	r2,r16,r2
   87900:	20809526 	beq	r4,r2,87b58 <_realloc_r+0x52c>
   87904:	99bfff04 	addi	r6,r19,-4
   87908:	01c00904 	movi	r7,36
   8790c:	39804536 	bltu	r7,r6,87a24 <_realloc_r+0x3f8>
   87910:	008004c4 	movi	r2,19
   87914:	9009883a 	mov	r4,r18
   87918:	880b883a 	mov	r5,r17
   8791c:	11800f2e 	bgeu	r2,r6,8795c <_realloc_r+0x330>
   87920:	90800017 	ldw	r2,0(r18)
   87924:	89400204 	addi	r5,r17,8
   87928:	91000204 	addi	r4,r18,8
   8792c:	88800015 	stw	r2,0(r17)
   87930:	90c00117 	ldw	r3,4(r18)
   87934:	008006c4 	movi	r2,27
   87938:	88c00115 	stw	r3,4(r17)
   8793c:	1180072e 	bgeu	r2,r6,8795c <_realloc_r+0x330>
   87940:	90c00217 	ldw	r3,8(r18)
   87944:	89400404 	addi	r5,r17,16
   87948:	91000404 	addi	r4,r18,16
   8794c:	88c00215 	stw	r3,8(r17)
   87950:	90800317 	ldw	r2,12(r18)
   87954:	88800315 	stw	r2,12(r17)
   87958:	31c09126 	beq	r6,r7,87ba0 <_realloc_r+0x574>
   8795c:	20800017 	ldw	r2,0(r4)
   87960:	28800015 	stw	r2,0(r5)
   87964:	20c00117 	ldw	r3,4(r4)
   87968:	28c00115 	stw	r3,4(r5)
   8796c:	20800217 	ldw	r2,8(r4)
   87970:	28800215 	stw	r2,8(r5)
   87974:	900b883a 	mov	r5,r18
   87978:	b009883a 	mov	r4,r22
   8797c:	00850740 	call	85074 <_free_r>
   87980:	b009883a 	mov	r4,r22
   87984:	008b0300 	call	8b030 <__malloc_unlock>
   87988:	003f5e06 	br	87704 <_realloc_r+0xd8>
   8798c:	300b883a 	mov	r5,r6
   87990:	dfc00b17 	ldw	ra,44(sp)
   87994:	df000a17 	ldw	fp,40(sp)
   87998:	ddc00917 	ldw	r23,36(sp)
   8799c:	dd800817 	ldw	r22,32(sp)
   879a0:	dd400717 	ldw	r21,28(sp)
   879a4:	dd000617 	ldw	r20,24(sp)
   879a8:	dcc00517 	ldw	r19,20(sp)
   879ac:	dc800417 	ldw	r18,16(sp)
   879b0:	dc400317 	ldw	r17,12(sp)
   879b4:	dc000217 	ldw	r16,8(sp)
   879b8:	dec00c04 	addi	sp,sp,48
   879bc:	0085bfc1 	jmpi	85bfc <_malloc_r>
   879c0:	38800117 	ldw	r2,4(r7)
   879c4:	e54b883a 	add	r5,fp,r21
   879c8:	31000054 	ori	r4,r6,1
   879cc:	1080004c 	andi	r2,r2,1
   879d0:	1704b03a 	or	r2,r2,fp
   879d4:	38800115 	stw	r2,4(r7)
   879d8:	29000115 	stw	r4,4(r5)
   879dc:	2987883a 	add	r3,r5,r6
   879e0:	18800117 	ldw	r2,4(r3)
   879e4:	29400204 	addi	r5,r5,8
   879e8:	b009883a 	mov	r4,r22
   879ec:	10800054 	ori	r2,r2,1
   879f0:	18800115 	stw	r2,4(r3)
   879f4:	00850740 	call	85074 <_free_r>
   879f8:	003f3806 	br	876dc <_realloc_r+0xb0>
   879fc:	000d883a 	mov	r6,zero
   87a00:	0009883a 	mov	r4,zero
   87a04:	003f5d06 	br	8777c <_realloc_r+0x150>
   87a08:	30c00217 	ldw	r3,8(r6)
   87a0c:	30800317 	ldw	r2,12(r6)
   87a10:	800f883a 	mov	r7,r16
   87a14:	84000204 	addi	r16,r16,8
   87a18:	10c00215 	stw	r3,8(r2)
   87a1c:	18800315 	stw	r2,12(r3)
   87a20:	003f2306 	br	876b0 <_realloc_r+0x84>
   87a24:	8809883a 	mov	r4,r17
   87a28:	900b883a 	mov	r5,r18
   87a2c:	00864c00 	call	864c0 <memmove>
   87a30:	003fd006 	br	87974 <_realloc_r+0x348>
   87a34:	30800117 	ldw	r2,4(r6)
   87a38:	e0c00404 	addi	r3,fp,16
   87a3c:	1108703a 	and	r4,r2,r4
   87a40:	9905883a 	add	r2,r19,r4
   87a44:	10ff4d16 	blt	r2,r3,8777c <_realloc_r+0x150>
   87a48:	1705c83a 	sub	r2,r2,fp
   87a4c:	870b883a 	add	r5,r16,fp
   87a50:	10800054 	ori	r2,r2,1
   87a54:	28800115 	stw	r2,4(r5)
   87a58:	80c00117 	ldw	r3,4(r16)
   87a5c:	00800274 	movhi	r2,9
   87a60:	10b73904 	addi	r2,r2,-8988
   87a64:	b009883a 	mov	r4,r22
   87a68:	18c0004c 	andi	r3,r3,1
   87a6c:	e0c6b03a 	or	r3,fp,r3
   87a70:	11400215 	stw	r5,8(r2)
   87a74:	80c00115 	stw	r3,4(r16)
   87a78:	008b0300 	call	8b030 <__malloc_unlock>
   87a7c:	84400204 	addi	r17,r16,8
   87a80:	003f2006 	br	87704 <_realloc_r+0xd8>
   87a84:	98a9883a 	add	r20,r19,r2
   87a88:	2509883a 	add	r4,r4,r20
   87a8c:	e0800404 	addi	r2,fp,16
   87a90:	d9000115 	stw	r4,4(sp)
   87a94:	20bf7016 	blt	r4,r2,87858 <_realloc_r+0x22c>
   87a98:	b8c00317 	ldw	r3,12(r23)
   87a9c:	b8800217 	ldw	r2,8(r23)
   87aa0:	99bfff04 	addi	r6,r19,-4
   87aa4:	01400904 	movi	r5,36
   87aa8:	18800215 	stw	r2,8(r3)
   87aac:	10c00315 	stw	r3,12(r2)
   87ab0:	bc400204 	addi	r17,r23,8
   87ab4:	29804136 	bltu	r5,r6,87bbc <_realloc_r+0x590>
   87ab8:	008004c4 	movi	r2,19
   87abc:	9009883a 	mov	r4,r18
   87ac0:	880f883a 	mov	r7,r17
   87ac4:	11800f2e 	bgeu	r2,r6,87b04 <_realloc_r+0x4d8>
   87ac8:	90800017 	ldw	r2,0(r18)
   87acc:	b9c00404 	addi	r7,r23,16
   87ad0:	91000204 	addi	r4,r18,8
   87ad4:	b8800215 	stw	r2,8(r23)
   87ad8:	90c00117 	ldw	r3,4(r18)
   87adc:	008006c4 	movi	r2,27
   87ae0:	b8c00315 	stw	r3,12(r23)
   87ae4:	1180072e 	bgeu	r2,r6,87b04 <_realloc_r+0x4d8>
   87ae8:	90c00217 	ldw	r3,8(r18)
   87aec:	b9c00604 	addi	r7,r23,24
   87af0:	91000404 	addi	r4,r18,16
   87af4:	b8c00415 	stw	r3,16(r23)
   87af8:	90800317 	ldw	r2,12(r18)
   87afc:	b8800515 	stw	r2,20(r23)
   87b00:	31404026 	beq	r6,r5,87c04 <_realloc_r+0x5d8>
   87b04:	20800017 	ldw	r2,0(r4)
   87b08:	38800015 	stw	r2,0(r7)
   87b0c:	20c00117 	ldw	r3,4(r4)
   87b10:	38c00115 	stw	r3,4(r7)
   87b14:	20800217 	ldw	r2,8(r4)
   87b18:	38800215 	stw	r2,8(r7)
   87b1c:	d8c00117 	ldw	r3,4(sp)
   87b20:	bf0b883a 	add	r5,r23,fp
   87b24:	b009883a 	mov	r4,r22
   87b28:	1f05c83a 	sub	r2,r3,fp
   87b2c:	10800054 	ori	r2,r2,1
   87b30:	28800115 	stw	r2,4(r5)
   87b34:	b8c00117 	ldw	r3,4(r23)
   87b38:	00800274 	movhi	r2,9
   87b3c:	10b73904 	addi	r2,r2,-8988
   87b40:	11400215 	stw	r5,8(r2)
   87b44:	18c0004c 	andi	r3,r3,1
   87b48:	e0c6b03a 	or	r3,fp,r3
   87b4c:	b8c00115 	stw	r3,4(r23)
   87b50:	008b0300 	call	8b030 <__malloc_unlock>
   87b54:	003eeb06 	br	87704 <_realloc_r+0xd8>
   87b58:	20800117 	ldw	r2,4(r4)
   87b5c:	00ffff04 	movi	r3,-4
   87b60:	800f883a 	mov	r7,r16
   87b64:	10c4703a 	and	r2,r2,r3
   87b68:	98a9883a 	add	r20,r19,r2
   87b6c:	84000204 	addi	r16,r16,8
   87b70:	003ecf06 	br	876b0 <_realloc_r+0x84>
   87b74:	900b883a 	mov	r5,r18
   87b78:	8009883a 	mov	r4,r16
   87b7c:	00864c00 	call	864c0 <memmove>
   87b80:	dd000017 	ldw	r20,0(sp)
   87b84:	b80f883a 	mov	r7,r23
   87b88:	003ec906 	br	876b0 <_realloc_r+0x84>
   87b8c:	900b883a 	mov	r5,r18
   87b90:	8009883a 	mov	r4,r16
   87b94:	00864c00 	call	864c0 <memmove>
   87b98:	b80f883a 	mov	r7,r23
   87b9c:	003ec406 	br	876b0 <_realloc_r+0x84>
   87ba0:	90c00417 	ldw	r3,16(r18)
   87ba4:	89400604 	addi	r5,r17,24
   87ba8:	91000604 	addi	r4,r18,24
   87bac:	88c00415 	stw	r3,16(r17)
   87bb0:	90800517 	ldw	r2,20(r18)
   87bb4:	88800515 	stw	r2,20(r17)
   87bb8:	003f6806 	br	8795c <_realloc_r+0x330>
   87bbc:	900b883a 	mov	r5,r18
   87bc0:	8809883a 	mov	r4,r17
   87bc4:	00864c00 	call	864c0 <memmove>
   87bc8:	003fd406 	br	87b1c <_realloc_r+0x4f0>
   87bcc:	90c00417 	ldw	r3,16(r18)
   87bd0:	91000604 	addi	r4,r18,24
   87bd4:	ba000804 	addi	r8,r23,32
   87bd8:	b8c00615 	stw	r3,24(r23)
   87bdc:	90800517 	ldw	r2,20(r18)
   87be0:	b8800715 	stw	r2,28(r23)
   87be4:	003f1206 	br	87830 <_realloc_r+0x204>
   87be8:	90c00417 	ldw	r3,16(r18)
   87bec:	91000604 	addi	r4,r18,24
   87bf0:	ba000804 	addi	r8,r23,32
   87bf4:	b8c00615 	stw	r3,24(r23)
   87bf8:	90800517 	ldw	r2,20(r18)
   87bfc:	b8800715 	stw	r2,28(r23)
   87c00:	003f3206 	br	878cc <_realloc_r+0x2a0>
   87c04:	90c00417 	ldw	r3,16(r18)
   87c08:	91000604 	addi	r4,r18,24
   87c0c:	b9c00804 	addi	r7,r23,32
   87c10:	b8c00615 	stw	r3,24(r23)
   87c14:	90800517 	ldw	r2,20(r18)
   87c18:	b8800715 	stw	r2,28(r23)
   87c1c:	003fb906 	br	87b04 <_realloc_r+0x4d8>

00087c20 <__isinfd>:
   87c20:	200d883a 	mov	r6,r4
   87c24:	0109c83a 	sub	r4,zero,r4
   87c28:	2188b03a 	or	r4,r4,r6
   87c2c:	2008d7fa 	srli	r4,r4,31
   87c30:	00a00034 	movhi	r2,32768
   87c34:	10bfffc4 	addi	r2,r2,-1
   87c38:	1144703a 	and	r2,r2,r5
   87c3c:	2088b03a 	or	r4,r4,r2
   87c40:	009ffc34 	movhi	r2,32752
   87c44:	1105c83a 	sub	r2,r2,r4
   87c48:	0087c83a 	sub	r3,zero,r2
   87c4c:	10c4b03a 	or	r2,r2,r3
   87c50:	1004d7fa 	srli	r2,r2,31
   87c54:	00c00044 	movi	r3,1
   87c58:	1885c83a 	sub	r2,r3,r2
   87c5c:	f800283a 	ret

00087c60 <__isnand>:
   87c60:	200d883a 	mov	r6,r4
   87c64:	0109c83a 	sub	r4,zero,r4
   87c68:	2188b03a 	or	r4,r4,r6
   87c6c:	2008d7fa 	srli	r4,r4,31
   87c70:	00a00034 	movhi	r2,32768
   87c74:	10bfffc4 	addi	r2,r2,-1
   87c78:	1144703a 	and	r2,r2,r5
   87c7c:	2088b03a 	or	r4,r4,r2
   87c80:	009ffc34 	movhi	r2,32752
   87c84:	1105c83a 	sub	r2,r2,r4
   87c88:	1004d7fa 	srli	r2,r2,31
   87c8c:	f800283a 	ret

00087c90 <_sbrk_r>:
   87c90:	defffd04 	addi	sp,sp,-12
   87c94:	dc000015 	stw	r16,0(sp)
   87c98:	04000274 	movhi	r16,9
   87c9c:	84036a04 	addi	r16,r16,3496
   87ca0:	dc400115 	stw	r17,4(sp)
   87ca4:	80000015 	stw	zero,0(r16)
   87ca8:	2023883a 	mov	r17,r4
   87cac:	2809883a 	mov	r4,r5
   87cb0:	dfc00215 	stw	ra,8(sp)
   87cb4:	008b2300 	call	8b230 <sbrk>
   87cb8:	1007883a 	mov	r3,r2
   87cbc:	00bfffc4 	movi	r2,-1
   87cc0:	18800626 	beq	r3,r2,87cdc <_sbrk_r+0x4c>
   87cc4:	1805883a 	mov	r2,r3
   87cc8:	dfc00217 	ldw	ra,8(sp)
   87ccc:	dc400117 	ldw	r17,4(sp)
   87cd0:	dc000017 	ldw	r16,0(sp)
   87cd4:	dec00304 	addi	sp,sp,12
   87cd8:	f800283a 	ret
   87cdc:	80800017 	ldw	r2,0(r16)
   87ce0:	103ff826 	beq	r2,zero,87cc4 <_sbrk_r+0x34>
   87ce4:	88800015 	stw	r2,0(r17)
   87ce8:	1805883a 	mov	r2,r3
   87cec:	dfc00217 	ldw	ra,8(sp)
   87cf0:	dc400117 	ldw	r17,4(sp)
   87cf4:	dc000017 	ldw	r16,0(sp)
   87cf8:	dec00304 	addi	sp,sp,12
   87cfc:	f800283a 	ret

00087d00 <__sclose>:
   87d00:	2940038f 	ldh	r5,14(r5)
   87d04:	00880341 	jmpi	88034 <_close_r>

00087d08 <__sseek>:
   87d08:	defffe04 	addi	sp,sp,-8
   87d0c:	dc000015 	stw	r16,0(sp)
   87d10:	2821883a 	mov	r16,r5
   87d14:	2940038f 	ldh	r5,14(r5)
   87d18:	dfc00115 	stw	ra,4(sp)
   87d1c:	00882ac0 	call	882ac <_lseek_r>
   87d20:	1007883a 	mov	r3,r2
   87d24:	00bfffc4 	movi	r2,-1
   87d28:	18800926 	beq	r3,r2,87d50 <__sseek+0x48>
   87d2c:	8080030b 	ldhu	r2,12(r16)
   87d30:	80c01415 	stw	r3,80(r16)
   87d34:	10840014 	ori	r2,r2,4096
   87d38:	8080030d 	sth	r2,12(r16)
   87d3c:	1805883a 	mov	r2,r3
   87d40:	dfc00117 	ldw	ra,4(sp)
   87d44:	dc000017 	ldw	r16,0(sp)
   87d48:	dec00204 	addi	sp,sp,8
   87d4c:	f800283a 	ret
   87d50:	8080030b 	ldhu	r2,12(r16)
   87d54:	10bbffcc 	andi	r2,r2,61439
   87d58:	8080030d 	sth	r2,12(r16)
   87d5c:	1805883a 	mov	r2,r3
   87d60:	dfc00117 	ldw	ra,4(sp)
   87d64:	dc000017 	ldw	r16,0(sp)
   87d68:	dec00204 	addi	sp,sp,8
   87d6c:	f800283a 	ret

00087d70 <__swrite>:
   87d70:	2880030b 	ldhu	r2,12(r5)
   87d74:	defffb04 	addi	sp,sp,-20
   87d78:	dcc00315 	stw	r19,12(sp)
   87d7c:	1080400c 	andi	r2,r2,256
   87d80:	dc800215 	stw	r18,8(sp)
   87d84:	dc400115 	stw	r17,4(sp)
   87d88:	dc000015 	stw	r16,0(sp)
   87d8c:	3027883a 	mov	r19,r6
   87d90:	3825883a 	mov	r18,r7
   87d94:	dfc00415 	stw	ra,16(sp)
   87d98:	2821883a 	mov	r16,r5
   87d9c:	000d883a 	mov	r6,zero
   87da0:	01c00084 	movi	r7,2
   87da4:	2023883a 	mov	r17,r4
   87da8:	10000226 	beq	r2,zero,87db4 <__swrite+0x44>
   87dac:	2940038f 	ldh	r5,14(r5)
   87db0:	00882ac0 	call	882ac <_lseek_r>
   87db4:	8080030b 	ldhu	r2,12(r16)
   87db8:	8140038f 	ldh	r5,14(r16)
   87dbc:	8809883a 	mov	r4,r17
   87dc0:	10bbffcc 	andi	r2,r2,61439
   87dc4:	980d883a 	mov	r6,r19
   87dc8:	900f883a 	mov	r7,r18
   87dcc:	8080030d 	sth	r2,12(r16)
   87dd0:	dfc00417 	ldw	ra,16(sp)
   87dd4:	dcc00317 	ldw	r19,12(sp)
   87dd8:	dc800217 	ldw	r18,8(sp)
   87ddc:	dc400117 	ldw	r17,4(sp)
   87de0:	dc000017 	ldw	r16,0(sp)
   87de4:	dec00504 	addi	sp,sp,20
   87de8:	0087f081 	jmpi	87f08 <_write_r>

00087dec <__sread>:
   87dec:	defffe04 	addi	sp,sp,-8
   87df0:	dc000015 	stw	r16,0(sp)
   87df4:	2821883a 	mov	r16,r5
   87df8:	2940038f 	ldh	r5,14(r5)
   87dfc:	dfc00115 	stw	ra,4(sp)
   87e00:	00883240 	call	88324 <_read_r>
   87e04:	1007883a 	mov	r3,r2
   87e08:	10000816 	blt	r2,zero,87e2c <__sread+0x40>
   87e0c:	80801417 	ldw	r2,80(r16)
   87e10:	10c5883a 	add	r2,r2,r3
   87e14:	80801415 	stw	r2,80(r16)
   87e18:	1805883a 	mov	r2,r3
   87e1c:	dfc00117 	ldw	ra,4(sp)
   87e20:	dc000017 	ldw	r16,0(sp)
   87e24:	dec00204 	addi	sp,sp,8
   87e28:	f800283a 	ret
   87e2c:	8080030b 	ldhu	r2,12(r16)
   87e30:	10bbffcc 	andi	r2,r2,61439
   87e34:	8080030d 	sth	r2,12(r16)
   87e38:	1805883a 	mov	r2,r3
   87e3c:	dfc00117 	ldw	ra,4(sp)
   87e40:	dc000017 	ldw	r16,0(sp)
   87e44:	dec00204 	addi	sp,sp,8
   87e48:	f800283a 	ret

00087e4c <strcmp>:
   87e4c:	2144b03a 	or	r2,r4,r5
   87e50:	108000cc 	andi	r2,r2,3
   87e54:	10001d1e 	bne	r2,zero,87ecc <strcmp+0x80>
   87e58:	200f883a 	mov	r7,r4
   87e5c:	28800017 	ldw	r2,0(r5)
   87e60:	21000017 	ldw	r4,0(r4)
   87e64:	280d883a 	mov	r6,r5
   87e68:	2080161e 	bne	r4,r2,87ec4 <strcmp+0x78>
   87e6c:	023fbff4 	movhi	r8,65279
   87e70:	423fbfc4 	addi	r8,r8,-257
   87e74:	2207883a 	add	r3,r4,r8
   87e78:	01602074 	movhi	r5,32897
   87e7c:	29602004 	addi	r5,r5,-32640
   87e80:	1946703a 	and	r3,r3,r5
   87e84:	0104303a 	nor	r2,zero,r4
   87e88:	10c4703a 	and	r2,r2,r3
   87e8c:	10001c1e 	bne	r2,zero,87f00 <strcmp+0xb4>
   87e90:	4013883a 	mov	r9,r8
   87e94:	2811883a 	mov	r8,r5
   87e98:	00000106 	br	87ea0 <strcmp+0x54>
   87e9c:	1800181e 	bne	r3,zero,87f00 <strcmp+0xb4>
   87ea0:	39c00104 	addi	r7,r7,4
   87ea4:	39000017 	ldw	r4,0(r7)
   87ea8:	31800104 	addi	r6,r6,4
   87eac:	31400017 	ldw	r5,0(r6)
   87eb0:	2245883a 	add	r2,r4,r9
   87eb4:	1204703a 	and	r2,r2,r8
   87eb8:	0106303a 	nor	r3,zero,r4
   87ebc:	1886703a 	and	r3,r3,r2
   87ec0:	217ff626 	beq	r4,r5,87e9c <strcmp+0x50>
   87ec4:	3809883a 	mov	r4,r7
   87ec8:	300b883a 	mov	r5,r6
   87ecc:	20c00007 	ldb	r3,0(r4)
   87ed0:	1800051e 	bne	r3,zero,87ee8 <strcmp+0x9c>
   87ed4:	00000606 	br	87ef0 <strcmp+0xa4>
   87ed8:	21000044 	addi	r4,r4,1
   87edc:	20c00007 	ldb	r3,0(r4)
   87ee0:	29400044 	addi	r5,r5,1
   87ee4:	18000226 	beq	r3,zero,87ef0 <strcmp+0xa4>
   87ee8:	28800007 	ldb	r2,0(r5)
   87eec:	18bffa26 	beq	r3,r2,87ed8 <strcmp+0x8c>
   87ef0:	20c00003 	ldbu	r3,0(r4)
   87ef4:	28800003 	ldbu	r2,0(r5)
   87ef8:	1885c83a 	sub	r2,r3,r2
   87efc:	f800283a 	ret
   87f00:	0005883a 	mov	r2,zero
   87f04:	f800283a 	ret

00087f08 <_write_r>:
   87f08:	defffd04 	addi	sp,sp,-12
   87f0c:	dc000015 	stw	r16,0(sp)
   87f10:	04000274 	movhi	r16,9
   87f14:	84036a04 	addi	r16,r16,3496
   87f18:	dc400115 	stw	r17,4(sp)
   87f1c:	80000015 	stw	zero,0(r16)
   87f20:	2023883a 	mov	r17,r4
   87f24:	2809883a 	mov	r4,r5
   87f28:	300b883a 	mov	r5,r6
   87f2c:	380d883a 	mov	r6,r7
   87f30:	dfc00215 	stw	ra,8(sp)
   87f34:	008b2ec0 	call	8b2ec <write>
   87f38:	1007883a 	mov	r3,r2
   87f3c:	00bfffc4 	movi	r2,-1
   87f40:	18800626 	beq	r3,r2,87f5c <_write_r+0x54>
   87f44:	1805883a 	mov	r2,r3
   87f48:	dfc00217 	ldw	ra,8(sp)
   87f4c:	dc400117 	ldw	r17,4(sp)
   87f50:	dc000017 	ldw	r16,0(sp)
   87f54:	dec00304 	addi	sp,sp,12
   87f58:	f800283a 	ret
   87f5c:	80800017 	ldw	r2,0(r16)
   87f60:	103ff826 	beq	r2,zero,87f44 <_write_r+0x3c>
   87f64:	88800015 	stw	r2,0(r17)
   87f68:	1805883a 	mov	r2,r3
   87f6c:	dfc00217 	ldw	ra,8(sp)
   87f70:	dc400117 	ldw	r17,4(sp)
   87f74:	dc000017 	ldw	r16,0(sp)
   87f78:	dec00304 	addi	sp,sp,12
   87f7c:	f800283a 	ret

00087f80 <_calloc_r>:
   87f80:	298b383a 	mul	r5,r5,r6
   87f84:	defffe04 	addi	sp,sp,-8
   87f88:	dc000015 	stw	r16,0(sp)
   87f8c:	dfc00115 	stw	ra,4(sp)
   87f90:	0085bfc0 	call	85bfc <_malloc_r>
   87f94:	1021883a 	mov	r16,r2
   87f98:	01c00904 	movi	r7,36
   87f9c:	10000d26 	beq	r2,zero,87fd4 <_calloc_r+0x54>
   87fa0:	10ffff17 	ldw	r3,-4(r2)
   87fa4:	1009883a 	mov	r4,r2
   87fa8:	00bfff04 	movi	r2,-4
   87fac:	1886703a 	and	r3,r3,r2
   87fb0:	1887883a 	add	r3,r3,r2
   87fb4:	180d883a 	mov	r6,r3
   87fb8:	000b883a 	mov	r5,zero
   87fbc:	38c01736 	bltu	r7,r3,8801c <_calloc_r+0x9c>
   87fc0:	008004c4 	movi	r2,19
   87fc4:	10c00836 	bltu	r2,r3,87fe8 <_calloc_r+0x68>
   87fc8:	20000215 	stw	zero,8(r4)
   87fcc:	20000015 	stw	zero,0(r4)
   87fd0:	20000115 	stw	zero,4(r4)
   87fd4:	8005883a 	mov	r2,r16
   87fd8:	dfc00117 	ldw	ra,4(sp)
   87fdc:	dc000017 	ldw	r16,0(sp)
   87fe0:	dec00204 	addi	sp,sp,8
   87fe4:	f800283a 	ret
   87fe8:	008006c4 	movi	r2,27
   87fec:	80000015 	stw	zero,0(r16)
   87ff0:	80000115 	stw	zero,4(r16)
   87ff4:	81000204 	addi	r4,r16,8
   87ff8:	10fff32e 	bgeu	r2,r3,87fc8 <_calloc_r+0x48>
   87ffc:	80000215 	stw	zero,8(r16)
   88000:	80000315 	stw	zero,12(r16)
   88004:	81000404 	addi	r4,r16,16
   88008:	19ffef1e 	bne	r3,r7,87fc8 <_calloc_r+0x48>
   8800c:	81000604 	addi	r4,r16,24
   88010:	80000415 	stw	zero,16(r16)
   88014:	80000515 	stw	zero,20(r16)
   88018:	003feb06 	br	87fc8 <_calloc_r+0x48>
   8801c:	00865a00 	call	865a0 <memset>
   88020:	8005883a 	mov	r2,r16
   88024:	dfc00117 	ldw	ra,4(sp)
   88028:	dc000017 	ldw	r16,0(sp)
   8802c:	dec00204 	addi	sp,sp,8
   88030:	f800283a 	ret

00088034 <_close_r>:
   88034:	defffd04 	addi	sp,sp,-12
   88038:	dc000015 	stw	r16,0(sp)
   8803c:	04000274 	movhi	r16,9
   88040:	84036a04 	addi	r16,r16,3496
   88044:	dc400115 	stw	r17,4(sp)
   88048:	80000015 	stw	zero,0(r16)
   8804c:	2023883a 	mov	r17,r4
   88050:	2809883a 	mov	r4,r5
   88054:	dfc00215 	stw	ra,8(sp)
   88058:	008a7cc0 	call	8a7cc <close>
   8805c:	1007883a 	mov	r3,r2
   88060:	00bfffc4 	movi	r2,-1
   88064:	18800626 	beq	r3,r2,88080 <_close_r+0x4c>
   88068:	1805883a 	mov	r2,r3
   8806c:	dfc00217 	ldw	ra,8(sp)
   88070:	dc400117 	ldw	r17,4(sp)
   88074:	dc000017 	ldw	r16,0(sp)
   88078:	dec00304 	addi	sp,sp,12
   8807c:	f800283a 	ret
   88080:	80800017 	ldw	r2,0(r16)
   88084:	103ff826 	beq	r2,zero,88068 <_close_r+0x34>
   88088:	88800015 	stw	r2,0(r17)
   8808c:	1805883a 	mov	r2,r3
   88090:	dfc00217 	ldw	ra,8(sp)
   88094:	dc400117 	ldw	r17,4(sp)
   88098:	dc000017 	ldw	r16,0(sp)
   8809c:	dec00304 	addi	sp,sp,12
   880a0:	f800283a 	ret

000880a4 <_fclose_r>:
   880a4:	defffc04 	addi	sp,sp,-16
   880a8:	dc400115 	stw	r17,4(sp)
   880ac:	dc000015 	stw	r16,0(sp)
   880b0:	dfc00315 	stw	ra,12(sp)
   880b4:	dc800215 	stw	r18,8(sp)
   880b8:	2821883a 	mov	r16,r5
   880bc:	2023883a 	mov	r17,r4
   880c0:	28002926 	beq	r5,zero,88168 <_fclose_r+0xc4>
   880c4:	0084ce00 	call	84ce0 <__sfp_lock_acquire>
   880c8:	88000226 	beq	r17,zero,880d4 <_fclose_r+0x30>
   880cc:	88800e17 	ldw	r2,56(r17)
   880d0:	10002d26 	beq	r2,zero,88188 <_fclose_r+0xe4>
   880d4:	8080030f 	ldh	r2,12(r16)
   880d8:	10002226 	beq	r2,zero,88164 <_fclose_r+0xc0>
   880dc:	8809883a 	mov	r4,r17
   880e0:	800b883a 	mov	r5,r16
   880e4:	0084a580 	call	84a58 <_fflush_r>
   880e8:	1025883a 	mov	r18,r2
   880ec:	80800b17 	ldw	r2,44(r16)
   880f0:	10000426 	beq	r2,zero,88104 <_fclose_r+0x60>
   880f4:	81400717 	ldw	r5,28(r16)
   880f8:	8809883a 	mov	r4,r17
   880fc:	103ee83a 	callr	r2
   88100:	10002a16 	blt	r2,zero,881ac <_fclose_r+0x108>
   88104:	8080030b 	ldhu	r2,12(r16)
   88108:	1080200c 	andi	r2,r2,128
   8810c:	1000231e 	bne	r2,zero,8819c <_fclose_r+0xf8>
   88110:	81400c17 	ldw	r5,48(r16)
   88114:	28000526 	beq	r5,zero,8812c <_fclose_r+0x88>
   88118:	80801004 	addi	r2,r16,64
   8811c:	28800226 	beq	r5,r2,88128 <_fclose_r+0x84>
   88120:	8809883a 	mov	r4,r17
   88124:	00850740 	call	85074 <_free_r>
   88128:	80000c15 	stw	zero,48(r16)
   8812c:	81401117 	ldw	r5,68(r16)
   88130:	28000326 	beq	r5,zero,88140 <_fclose_r+0x9c>
   88134:	8809883a 	mov	r4,r17
   88138:	00850740 	call	85074 <_free_r>
   8813c:	80001115 	stw	zero,68(r16)
   88140:	8000030d 	sth	zero,12(r16)
   88144:	0084ce40 	call	84ce4 <__sfp_lock_release>
   88148:	9005883a 	mov	r2,r18
   8814c:	dfc00317 	ldw	ra,12(sp)
   88150:	dc800217 	ldw	r18,8(sp)
   88154:	dc400117 	ldw	r17,4(sp)
   88158:	dc000017 	ldw	r16,0(sp)
   8815c:	dec00404 	addi	sp,sp,16
   88160:	f800283a 	ret
   88164:	0084ce40 	call	84ce4 <__sfp_lock_release>
   88168:	0025883a 	mov	r18,zero
   8816c:	9005883a 	mov	r2,r18
   88170:	dfc00317 	ldw	ra,12(sp)
   88174:	dc800217 	ldw	r18,8(sp)
   88178:	dc400117 	ldw	r17,4(sp)
   8817c:	dc000017 	ldw	r16,0(sp)
   88180:	dec00404 	addi	sp,sp,16
   88184:	f800283a 	ret
   88188:	8809883a 	mov	r4,r17
   8818c:	0084cf00 	call	84cf0 <__sinit>
   88190:	8080030f 	ldh	r2,12(r16)
   88194:	103fd11e 	bne	r2,zero,880dc <_fclose_r+0x38>
   88198:	003ff206 	br	88164 <_fclose_r+0xc0>
   8819c:	81400417 	ldw	r5,16(r16)
   881a0:	8809883a 	mov	r4,r17
   881a4:	00850740 	call	85074 <_free_r>
   881a8:	003fd906 	br	88110 <_fclose_r+0x6c>
   881ac:	04bfffc4 	movi	r18,-1
   881b0:	003fd406 	br	88104 <_fclose_r+0x60>

000881b4 <fclose>:
   881b4:	00800274 	movhi	r2,9
   881b8:	10bcbd04 	addi	r2,r2,-3340
   881bc:	200b883a 	mov	r5,r4
   881c0:	11000017 	ldw	r4,0(r2)
   881c4:	00880a41 	jmpi	880a4 <_fclose_r>

000881c8 <_fstat_r>:
   881c8:	defffd04 	addi	sp,sp,-12
   881cc:	dc000015 	stw	r16,0(sp)
   881d0:	04000274 	movhi	r16,9
   881d4:	84036a04 	addi	r16,r16,3496
   881d8:	dc400115 	stw	r17,4(sp)
   881dc:	80000015 	stw	zero,0(r16)
   881e0:	2023883a 	mov	r17,r4
   881e4:	2809883a 	mov	r4,r5
   881e8:	300b883a 	mov	r5,r6
   881ec:	dfc00215 	stw	ra,8(sp)
   881f0:	008a9540 	call	8a954 <fstat>
   881f4:	1007883a 	mov	r3,r2
   881f8:	00bfffc4 	movi	r2,-1
   881fc:	18800626 	beq	r3,r2,88218 <_fstat_r+0x50>
   88200:	1805883a 	mov	r2,r3
   88204:	dfc00217 	ldw	ra,8(sp)
   88208:	dc400117 	ldw	r17,4(sp)
   8820c:	dc000017 	ldw	r16,0(sp)
   88210:	dec00304 	addi	sp,sp,12
   88214:	f800283a 	ret
   88218:	80800017 	ldw	r2,0(r16)
   8821c:	103ff826 	beq	r2,zero,88200 <_fstat_r+0x38>
   88220:	88800015 	stw	r2,0(r17)
   88224:	1805883a 	mov	r2,r3
   88228:	dfc00217 	ldw	ra,8(sp)
   8822c:	dc400117 	ldw	r17,4(sp)
   88230:	dc000017 	ldw	r16,0(sp)
   88234:	dec00304 	addi	sp,sp,12
   88238:	f800283a 	ret

0008823c <_isatty_r>:
   8823c:	defffd04 	addi	sp,sp,-12
   88240:	dc000015 	stw	r16,0(sp)
   88244:	04000274 	movhi	r16,9
   88248:	84036a04 	addi	r16,r16,3496
   8824c:	dc400115 	stw	r17,4(sp)
   88250:	80000015 	stw	zero,0(r16)
   88254:	2023883a 	mov	r17,r4
   88258:	2809883a 	mov	r4,r5
   8825c:	dfc00215 	stw	ra,8(sp)
   88260:	008ac480 	call	8ac48 <isatty>
   88264:	1007883a 	mov	r3,r2
   88268:	00bfffc4 	movi	r2,-1
   8826c:	18800626 	beq	r3,r2,88288 <_isatty_r+0x4c>
   88270:	1805883a 	mov	r2,r3
   88274:	dfc00217 	ldw	ra,8(sp)
   88278:	dc400117 	ldw	r17,4(sp)
   8827c:	dc000017 	ldw	r16,0(sp)
   88280:	dec00304 	addi	sp,sp,12
   88284:	f800283a 	ret
   88288:	80800017 	ldw	r2,0(r16)
   8828c:	103ff826 	beq	r2,zero,88270 <_isatty_r+0x34>
   88290:	88800015 	stw	r2,0(r17)
   88294:	1805883a 	mov	r2,r3
   88298:	dfc00217 	ldw	ra,8(sp)
   8829c:	dc400117 	ldw	r17,4(sp)
   882a0:	dc000017 	ldw	r16,0(sp)
   882a4:	dec00304 	addi	sp,sp,12
   882a8:	f800283a 	ret

000882ac <_lseek_r>:
   882ac:	defffd04 	addi	sp,sp,-12
   882b0:	dc000015 	stw	r16,0(sp)
   882b4:	04000274 	movhi	r16,9
   882b8:	84036a04 	addi	r16,r16,3496
   882bc:	dc400115 	stw	r17,4(sp)
   882c0:	80000015 	stw	zero,0(r16)
   882c4:	2023883a 	mov	r17,r4
   882c8:	2809883a 	mov	r4,r5
   882cc:	300b883a 	mov	r5,r6
   882d0:	380d883a 	mov	r6,r7
   882d4:	dfc00215 	stw	ra,8(sp)
   882d8:	008ae540 	call	8ae54 <lseek>
   882dc:	1007883a 	mov	r3,r2
   882e0:	00bfffc4 	movi	r2,-1
   882e4:	18800626 	beq	r3,r2,88300 <_lseek_r+0x54>
   882e8:	1805883a 	mov	r2,r3
   882ec:	dfc00217 	ldw	ra,8(sp)
   882f0:	dc400117 	ldw	r17,4(sp)
   882f4:	dc000017 	ldw	r16,0(sp)
   882f8:	dec00304 	addi	sp,sp,12
   882fc:	f800283a 	ret
   88300:	80800017 	ldw	r2,0(r16)
   88304:	103ff826 	beq	r2,zero,882e8 <_lseek_r+0x3c>
   88308:	88800015 	stw	r2,0(r17)
   8830c:	1805883a 	mov	r2,r3
   88310:	dfc00217 	ldw	ra,8(sp)
   88314:	dc400117 	ldw	r17,4(sp)
   88318:	dc000017 	ldw	r16,0(sp)
   8831c:	dec00304 	addi	sp,sp,12
   88320:	f800283a 	ret

00088324 <_read_r>:
   88324:	defffd04 	addi	sp,sp,-12
   88328:	dc000015 	stw	r16,0(sp)
   8832c:	04000274 	movhi	r16,9
   88330:	84036a04 	addi	r16,r16,3496
   88334:	dc400115 	stw	r17,4(sp)
   88338:	80000015 	stw	zero,0(r16)
   8833c:	2023883a 	mov	r17,r4
   88340:	2809883a 	mov	r4,r5
   88344:	300b883a 	mov	r5,r6
   88348:	380d883a 	mov	r6,r7
   8834c:	dfc00215 	stw	ra,8(sp)
   88350:	008b0500 	call	8b050 <read>
   88354:	1007883a 	mov	r3,r2
   88358:	00bfffc4 	movi	r2,-1
   8835c:	18800626 	beq	r3,r2,88378 <_read_r+0x54>
   88360:	1805883a 	mov	r2,r3
   88364:	dfc00217 	ldw	ra,8(sp)
   88368:	dc400117 	ldw	r17,4(sp)
   8836c:	dc000017 	ldw	r16,0(sp)
   88370:	dec00304 	addi	sp,sp,12
   88374:	f800283a 	ret
   88378:	80800017 	ldw	r2,0(r16)
   8837c:	103ff826 	beq	r2,zero,88360 <_read_r+0x3c>
   88380:	88800015 	stw	r2,0(r17)
   88384:	1805883a 	mov	r2,r3
   88388:	dfc00217 	ldw	ra,8(sp)
   8838c:	dc400117 	ldw	r17,4(sp)
   88390:	dc000017 	ldw	r16,0(sp)
   88394:	dec00304 	addi	sp,sp,12
   88398:	f800283a 	ret

0008839c <__udivdi3>:
   8839c:	defff004 	addi	sp,sp,-64
   883a0:	2005883a 	mov	r2,r4
   883a4:	3011883a 	mov	r8,r6
   883a8:	df000e15 	stw	fp,56(sp)
   883ac:	dd000a15 	stw	r20,40(sp)
   883b0:	dc000615 	stw	r16,24(sp)
   883b4:	dfc00f15 	stw	ra,60(sp)
   883b8:	ddc00d15 	stw	r23,52(sp)
   883bc:	dd800c15 	stw	r22,48(sp)
   883c0:	dd400b15 	stw	r21,44(sp)
   883c4:	dcc00915 	stw	r19,36(sp)
   883c8:	dc800815 	stw	r18,32(sp)
   883cc:	dc400715 	stw	r17,28(sp)
   883d0:	4021883a 	mov	r16,r8
   883d4:	1039883a 	mov	fp,r2
   883d8:	2829883a 	mov	r20,r5
   883dc:	38003b1e 	bne	r7,zero,884cc <__udivdi3+0x130>
   883e0:	2a005c36 	bltu	r5,r8,88554 <__udivdi3+0x1b8>
   883e4:	4000a626 	beq	r8,zero,88680 <__udivdi3+0x2e4>
   883e8:	00bfffd4 	movui	r2,65535
   883ec:	14009e36 	bltu	r2,r16,88668 <__udivdi3+0x2cc>
   883f0:	00803fc4 	movi	r2,255
   883f4:	14013d36 	bltu	r2,r16,888ec <__udivdi3+0x550>
   883f8:	000b883a 	mov	r5,zero
   883fc:	0005883a 	mov	r2,zero
   88400:	8084d83a 	srl	r2,r16,r2
   88404:	01000274 	movhi	r4,9
   88408:	2135e904 	addi	r4,r4,-10332
   8840c:	01800804 	movi	r6,32
   88410:	1105883a 	add	r2,r2,r4
   88414:	10c00003 	ldbu	r3,0(r2)
   88418:	28c7883a 	add	r3,r5,r3
   8841c:	30edc83a 	sub	r22,r6,r3
   88420:	b000ee1e 	bne	r22,zero,887dc <__udivdi3+0x440>
   88424:	802ad43a 	srli	r21,r16,16
   88428:	00800044 	movi	r2,1
   8842c:	a423c83a 	sub	r17,r20,r16
   88430:	85ffffcc 	andi	r23,r16,65535
   88434:	d8800315 	stw	r2,12(sp)
   88438:	8809883a 	mov	r4,r17
   8843c:	a80b883a 	mov	r5,r21
   88440:	008a1900 	call	8a190 <__udivsi3>
   88444:	8809883a 	mov	r4,r17
   88448:	a80b883a 	mov	r5,r21
   8844c:	102d883a 	mov	r22,r2
   88450:	008a1980 	call	8a198 <__umodsi3>
   88454:	1004943a 	slli	r2,r2,16
   88458:	e006d43a 	srli	r3,fp,16
   8845c:	bda3383a 	mul	r17,r23,r22
   88460:	10c4b03a 	or	r2,r2,r3
   88464:	1440042e 	bgeu	r2,r17,88478 <__udivdi3+0xdc>
   88468:	1405883a 	add	r2,r2,r16
   8846c:	b5bfffc4 	addi	r22,r22,-1
   88470:	14000136 	bltu	r2,r16,88478 <__udivdi3+0xdc>
   88474:	14413d36 	bltu	r2,r17,8896c <__udivdi3+0x5d0>
   88478:	1463c83a 	sub	r17,r2,r17
   8847c:	8809883a 	mov	r4,r17
   88480:	a80b883a 	mov	r5,r21
   88484:	008a1900 	call	8a190 <__udivsi3>
   88488:	8809883a 	mov	r4,r17
   8848c:	a80b883a 	mov	r5,r21
   88490:	1029883a 	mov	r20,r2
   88494:	008a1980 	call	8a198 <__umodsi3>
   88498:	1004943a 	slli	r2,r2,16
   8849c:	bd09383a 	mul	r4,r23,r20
   884a0:	e0ffffcc 	andi	r3,fp,65535
   884a4:	10c4b03a 	or	r2,r2,r3
   884a8:	1100042e 	bgeu	r2,r4,884bc <__udivdi3+0x120>
   884ac:	8085883a 	add	r2,r16,r2
   884b0:	a53fffc4 	addi	r20,r20,-1
   884b4:	14000136 	bltu	r2,r16,884bc <__udivdi3+0x120>
   884b8:	11012036 	bltu	r2,r4,8893c <__udivdi3+0x5a0>
   884bc:	b004943a 	slli	r2,r22,16
   884c0:	d9000317 	ldw	r4,12(sp)
   884c4:	a084b03a 	or	r2,r20,r2
   884c8:	00001506 	br	88520 <__udivdi3+0x184>
   884cc:	380d883a 	mov	r6,r7
   884d0:	29c06236 	bltu	r5,r7,8865c <__udivdi3+0x2c0>
   884d4:	00bfffd4 	movui	r2,65535
   884d8:	11c05a36 	bltu	r2,r7,88644 <__udivdi3+0x2a8>
   884dc:	00803fc4 	movi	r2,255
   884e0:	11c0fc36 	bltu	r2,r7,888d4 <__udivdi3+0x538>
   884e4:	000b883a 	mov	r5,zero
   884e8:	0005883a 	mov	r2,zero
   884ec:	3084d83a 	srl	r2,r6,r2
   884f0:	01000274 	movhi	r4,9
   884f4:	2135e904 	addi	r4,r4,-10332
   884f8:	01c00804 	movi	r7,32
   884fc:	1105883a 	add	r2,r2,r4
   88500:	10c00003 	ldbu	r3,0(r2)
   88504:	28c7883a 	add	r3,r5,r3
   88508:	38efc83a 	sub	r23,r7,r3
   8850c:	b800691e 	bne	r23,zero,886b4 <__udivdi3+0x318>
   88510:	35000136 	bltu	r6,r20,88518 <__udivdi3+0x17c>
   88514:	e4005136 	bltu	fp,r16,8865c <__udivdi3+0x2c0>
   88518:	00800044 	movi	r2,1
   8851c:	0009883a 	mov	r4,zero
   88520:	2007883a 	mov	r3,r4
   88524:	dfc00f17 	ldw	ra,60(sp)
   88528:	df000e17 	ldw	fp,56(sp)
   8852c:	ddc00d17 	ldw	r23,52(sp)
   88530:	dd800c17 	ldw	r22,48(sp)
   88534:	dd400b17 	ldw	r21,44(sp)
   88538:	dd000a17 	ldw	r20,40(sp)
   8853c:	dcc00917 	ldw	r19,36(sp)
   88540:	dc800817 	ldw	r18,32(sp)
   88544:	dc400717 	ldw	r17,28(sp)
   88548:	dc000617 	ldw	r16,24(sp)
   8854c:	dec01004 	addi	sp,sp,64
   88550:	f800283a 	ret
   88554:	00bfffd4 	movui	r2,65535
   88558:	12005036 	bltu	r2,r8,8869c <__udivdi3+0x300>
   8855c:	00803fc4 	movi	r2,255
   88560:	1200e836 	bltu	r2,r8,88904 <__udivdi3+0x568>
   88564:	000b883a 	mov	r5,zero
   88568:	0005883a 	mov	r2,zero
   8856c:	8084d83a 	srl	r2,r16,r2
   88570:	01000274 	movhi	r4,9
   88574:	2135e904 	addi	r4,r4,-10332
   88578:	01800804 	movi	r6,32
   8857c:	1105883a 	add	r2,r2,r4
   88580:	10c00003 	ldbu	r3,0(r2)
   88584:	28c7883a 	add	r3,r5,r3
   88588:	30cbc83a 	sub	r5,r6,r3
   8858c:	28000626 	beq	r5,zero,885a8 <__udivdi3+0x20c>
   88590:	3145c83a 	sub	r2,r6,r5
   88594:	e084d83a 	srl	r2,fp,r2
   88598:	a146983a 	sll	r3,r20,r5
   8859c:	e178983a 	sll	fp,fp,r5
   885a0:	8160983a 	sll	r16,r16,r5
   885a4:	18a8b03a 	or	r20,r3,r2
   885a8:	802ad43a 	srli	r21,r16,16
   885ac:	a009883a 	mov	r4,r20
   885b0:	85ffffcc 	andi	r23,r16,65535
   885b4:	a80b883a 	mov	r5,r21
   885b8:	008a1900 	call	8a190 <__udivsi3>
   885bc:	a009883a 	mov	r4,r20
   885c0:	a80b883a 	mov	r5,r21
   885c4:	102d883a 	mov	r22,r2
   885c8:	008a1980 	call	8a198 <__umodsi3>
   885cc:	1004943a 	slli	r2,r2,16
   885d0:	e006d43a 	srli	r3,fp,16
   885d4:	bda3383a 	mul	r17,r23,r22
   885d8:	10c4b03a 	or	r2,r2,r3
   885dc:	1440042e 	bgeu	r2,r17,885f0 <__udivdi3+0x254>
   885e0:	1405883a 	add	r2,r2,r16
   885e4:	b5bfffc4 	addi	r22,r22,-1
   885e8:	14000136 	bltu	r2,r16,885f0 <__udivdi3+0x254>
   885ec:	1440d536 	bltu	r2,r17,88944 <__udivdi3+0x5a8>
   885f0:	1463c83a 	sub	r17,r2,r17
   885f4:	8809883a 	mov	r4,r17
   885f8:	a80b883a 	mov	r5,r21
   885fc:	008a1900 	call	8a190 <__udivsi3>
   88600:	8809883a 	mov	r4,r17
   88604:	a80b883a 	mov	r5,r21
   88608:	1029883a 	mov	r20,r2
   8860c:	008a1980 	call	8a198 <__umodsi3>
   88610:	1004943a 	slli	r2,r2,16
   88614:	bd09383a 	mul	r4,r23,r20
   88618:	e0ffffcc 	andi	r3,fp,65535
   8861c:	10c4b03a 	or	r2,r2,r3
   88620:	1100042e 	bgeu	r2,r4,88634 <__udivdi3+0x298>
   88624:	8085883a 	add	r2,r16,r2
   88628:	a53fffc4 	addi	r20,r20,-1
   8862c:	14000136 	bltu	r2,r16,88634 <__udivdi3+0x298>
   88630:	1100c736 	bltu	r2,r4,88950 <__udivdi3+0x5b4>
   88634:	b004943a 	slli	r2,r22,16
   88638:	0009883a 	mov	r4,zero
   8863c:	a084b03a 	or	r2,r20,r2
   88640:	003fb706 	br	88520 <__udivdi3+0x184>
   88644:	00804034 	movhi	r2,256
   88648:	10bfffc4 	addi	r2,r2,-1
   8864c:	11c0a436 	bltu	r2,r7,888e0 <__udivdi3+0x544>
   88650:	01400404 	movi	r5,16
   88654:	2805883a 	mov	r2,r5
   88658:	003fa406 	br	884ec <__udivdi3+0x150>
   8865c:	0005883a 	mov	r2,zero
   88660:	0009883a 	mov	r4,zero
   88664:	003fae06 	br	88520 <__udivdi3+0x184>
   88668:	00804034 	movhi	r2,256
   8866c:	10bfffc4 	addi	r2,r2,-1
   88670:	1400a136 	bltu	r2,r16,888f8 <__udivdi3+0x55c>
   88674:	01400404 	movi	r5,16
   88678:	2805883a 	mov	r2,r5
   8867c:	003f6006 	br	88400 <__udivdi3+0x64>
   88680:	01000044 	movi	r4,1
   88684:	000b883a 	mov	r5,zero
   88688:	008a1900 	call	8a190 <__udivsi3>
   8868c:	1021883a 	mov	r16,r2
   88690:	00bfffd4 	movui	r2,65535
   88694:	143ff436 	bltu	r2,r16,88668 <__udivdi3+0x2cc>
   88698:	003f5506 	br	883f0 <__udivdi3+0x54>
   8869c:	00804034 	movhi	r2,256
   886a0:	10bfffc4 	addi	r2,r2,-1
   886a4:	12009a36 	bltu	r2,r8,88910 <__udivdi3+0x574>
   886a8:	01400404 	movi	r5,16
   886ac:	2805883a 	mov	r2,r5
   886b0:	003fae06 	br	8856c <__udivdi3+0x1d0>
   886b4:	3dc5c83a 	sub	r2,r7,r23
   886b8:	35c8983a 	sll	r4,r6,r23
   886bc:	8086d83a 	srl	r3,r16,r2
   886c0:	a0a2d83a 	srl	r17,r20,r2
   886c4:	e084d83a 	srl	r2,fp,r2
   886c8:	20eab03a 	or	r21,r4,r3
   886cc:	a82cd43a 	srli	r22,r21,16
   886d0:	a5c6983a 	sll	r3,r20,r23
   886d4:	8809883a 	mov	r4,r17
   886d8:	b00b883a 	mov	r5,r22
   886dc:	1886b03a 	or	r3,r3,r2
   886e0:	d8c00215 	stw	r3,8(sp)
   886e4:	008a1900 	call	8a190 <__udivsi3>
   886e8:	8809883a 	mov	r4,r17
   886ec:	b00b883a 	mov	r5,r22
   886f0:	1029883a 	mov	r20,r2
   886f4:	008a1980 	call	8a198 <__umodsi3>
   886f8:	a8ffffcc 	andi	r3,r21,65535
   886fc:	d8c00515 	stw	r3,20(sp)
   88700:	d9000217 	ldw	r4,8(sp)
   88704:	d9400517 	ldw	r5,20(sp)
   88708:	1004943a 	slli	r2,r2,16
   8870c:	2006d43a 	srli	r3,r4,16
   88710:	85e0983a 	sll	r16,r16,r23
   88714:	2d23383a 	mul	r17,r5,r20
   88718:	10c4b03a 	or	r2,r2,r3
   8871c:	dc000015 	stw	r16,0(sp)
   88720:	1440032e 	bgeu	r2,r17,88730 <__udivdi3+0x394>
   88724:	1545883a 	add	r2,r2,r21
   88728:	a53fffc4 	addi	r20,r20,-1
   8872c:	15407f2e 	bgeu	r2,r21,8892c <__udivdi3+0x590>
   88730:	1463c83a 	sub	r17,r2,r17
   88734:	8809883a 	mov	r4,r17
   88738:	b00b883a 	mov	r5,r22
   8873c:	008a1900 	call	8a190 <__udivsi3>
   88740:	8809883a 	mov	r4,r17
   88744:	b00b883a 	mov	r5,r22
   88748:	1021883a 	mov	r16,r2
   8874c:	008a1980 	call	8a198 <__umodsi3>
   88750:	d8c00517 	ldw	r3,20(sp)
   88754:	d9000217 	ldw	r4,8(sp)
   88758:	1004943a 	slli	r2,r2,16
   8875c:	1c0f383a 	mul	r7,r3,r16
   88760:	20ffffcc 	andi	r3,r4,65535
   88764:	10e2b03a 	or	r17,r2,r3
   88768:	89c0032e 	bgeu	r17,r7,88778 <__udivdi3+0x3dc>
   8876c:	8d63883a 	add	r17,r17,r21
   88770:	843fffc4 	addi	r16,r16,-1
   88774:	8d40692e 	bgeu	r17,r21,8891c <__udivdi3+0x580>
   88778:	a008943a 	slli	r4,r20,16
   8877c:	d9400017 	ldw	r5,0(sp)
   88780:	89e3c83a 	sub	r17,r17,r7
   88784:	8110b03a 	or	r8,r16,r4
   88788:	280cd43a 	srli	r6,r5,16
   8878c:	28ffffcc 	andi	r3,r5,65535
   88790:	40bfffcc 	andi	r2,r8,65535
   88794:	400ad43a 	srli	r5,r8,16
   88798:	10d3383a 	mul	r9,r2,r3
   8879c:	1185383a 	mul	r2,r2,r6
   887a0:	28c7383a 	mul	r3,r5,r3
   887a4:	4808d43a 	srli	r4,r9,16
   887a8:	298b383a 	mul	r5,r5,r6
   887ac:	10c5883a 	add	r2,r2,r3
   887b0:	2089883a 	add	r4,r4,r2
   887b4:	20c0022e 	bgeu	r4,r3,887c0 <__udivdi3+0x424>
   887b8:	00800074 	movhi	r2,1
   887bc:	288b883a 	add	r5,r5,r2
   887c0:	2004d43a 	srli	r2,r4,16
   887c4:	288b883a 	add	r5,r5,r2
   887c8:	89403f36 	bltu	r17,r5,888c8 <__udivdi3+0x52c>
   887cc:	89403926 	beq	r17,r5,888b4 <__udivdi3+0x518>
   887d0:	4005883a 	mov	r2,r8
   887d4:	0009883a 	mov	r4,zero
   887d8:	003f5106 	br	88520 <__udivdi3+0x184>
   887dc:	85a0983a 	sll	r16,r16,r22
   887e0:	3585c83a 	sub	r2,r6,r22
   887e4:	a0a2d83a 	srl	r17,r20,r2
   887e8:	802ad43a 	srli	r21,r16,16
   887ec:	e084d83a 	srl	r2,fp,r2
   887f0:	a586983a 	sll	r3,r20,r22
   887f4:	8809883a 	mov	r4,r17
   887f8:	a80b883a 	mov	r5,r21
   887fc:	1886b03a 	or	r3,r3,r2
   88800:	d8c00115 	stw	r3,4(sp)
   88804:	008a1900 	call	8a190 <__udivsi3>
   88808:	8809883a 	mov	r4,r17
   8880c:	a80b883a 	mov	r5,r21
   88810:	d8800415 	stw	r2,16(sp)
   88814:	008a1980 	call	8a198 <__umodsi3>
   88818:	d9000117 	ldw	r4,4(sp)
   8881c:	d9400417 	ldw	r5,16(sp)
   88820:	1004943a 	slli	r2,r2,16
   88824:	85ffffcc 	andi	r23,r16,65535
   88828:	2006d43a 	srli	r3,r4,16
   8882c:	b963383a 	mul	r17,r23,r5
   88830:	10c4b03a 	or	r2,r2,r3
   88834:	1440042e 	bgeu	r2,r17,88848 <__udivdi3+0x4ac>
   88838:	297fffc4 	addi	r5,r5,-1
   8883c:	1405883a 	add	r2,r2,r16
   88840:	d9400415 	stw	r5,16(sp)
   88844:	1400442e 	bgeu	r2,r16,88958 <__udivdi3+0x5bc>
   88848:	1463c83a 	sub	r17,r2,r17
   8884c:	8809883a 	mov	r4,r17
   88850:	a80b883a 	mov	r5,r21
   88854:	008a1900 	call	8a190 <__udivsi3>
   88858:	8809883a 	mov	r4,r17
   8885c:	a80b883a 	mov	r5,r21
   88860:	1029883a 	mov	r20,r2
   88864:	008a1980 	call	8a198 <__umodsi3>
   88868:	d9400117 	ldw	r5,4(sp)
   8886c:	1004943a 	slli	r2,r2,16
   88870:	bd09383a 	mul	r4,r23,r20
   88874:	28ffffcc 	andi	r3,r5,65535
   88878:	10c6b03a 	or	r3,r2,r3
   8887c:	1900062e 	bgeu	r3,r4,88898 <__udivdi3+0x4fc>
   88880:	1c07883a 	add	r3,r3,r16
   88884:	a53fffc4 	addi	r20,r20,-1
   88888:	1c000336 	bltu	r3,r16,88898 <__udivdi3+0x4fc>
   8888c:	1900022e 	bgeu	r3,r4,88898 <__udivdi3+0x4fc>
   88890:	a53fffc4 	addi	r20,r20,-1
   88894:	1c07883a 	add	r3,r3,r16
   88898:	d9400417 	ldw	r5,16(sp)
   8889c:	e5b8983a 	sll	fp,fp,r22
   888a0:	1923c83a 	sub	r17,r3,r4
   888a4:	2804943a 	slli	r2,r5,16
   888a8:	a0a8b03a 	or	r20,r20,r2
   888ac:	dd000315 	stw	r20,12(sp)
   888b0:	003ee106 	br	88438 <__udivdi3+0x9c>
   888b4:	2004943a 	slli	r2,r4,16
   888b8:	e5c8983a 	sll	r4,fp,r23
   888bc:	48ffffcc 	andi	r3,r9,65535
   888c0:	10c5883a 	add	r2,r2,r3
   888c4:	20bfc22e 	bgeu	r4,r2,887d0 <__udivdi3+0x434>
   888c8:	40bfffc4 	addi	r2,r8,-1
   888cc:	0009883a 	mov	r4,zero
   888d0:	003f1306 	br	88520 <__udivdi3+0x184>
   888d4:	01400204 	movi	r5,8
   888d8:	2805883a 	mov	r2,r5
   888dc:	003f0306 	br	884ec <__udivdi3+0x150>
   888e0:	01400604 	movi	r5,24
   888e4:	2805883a 	mov	r2,r5
   888e8:	003f0006 	br	884ec <__udivdi3+0x150>
   888ec:	01400204 	movi	r5,8
   888f0:	2805883a 	mov	r2,r5
   888f4:	003ec206 	br	88400 <__udivdi3+0x64>
   888f8:	01400604 	movi	r5,24
   888fc:	2805883a 	mov	r2,r5
   88900:	003ebf06 	br	88400 <__udivdi3+0x64>
   88904:	01400204 	movi	r5,8
   88908:	2805883a 	mov	r2,r5
   8890c:	003f1706 	br	8856c <__udivdi3+0x1d0>
   88910:	01400604 	movi	r5,24
   88914:	2805883a 	mov	r2,r5
   88918:	003f1406 	br	8856c <__udivdi3+0x1d0>
   8891c:	89ff962e 	bgeu	r17,r7,88778 <__udivdi3+0x3dc>
   88920:	8d63883a 	add	r17,r17,r21
   88924:	843fffc4 	addi	r16,r16,-1
   88928:	003f9306 	br	88778 <__udivdi3+0x3dc>
   8892c:	147f802e 	bgeu	r2,r17,88730 <__udivdi3+0x394>
   88930:	a53fffc4 	addi	r20,r20,-1
   88934:	1545883a 	add	r2,r2,r21
   88938:	003f7d06 	br	88730 <__udivdi3+0x394>
   8893c:	a53fffc4 	addi	r20,r20,-1
   88940:	003ede06 	br	884bc <__udivdi3+0x120>
   88944:	b5bfffc4 	addi	r22,r22,-1
   88948:	1405883a 	add	r2,r2,r16
   8894c:	003f2806 	br	885f0 <__udivdi3+0x254>
   88950:	a53fffc4 	addi	r20,r20,-1
   88954:	003f3706 	br	88634 <__udivdi3+0x298>
   88958:	147fbb2e 	bgeu	r2,r17,88848 <__udivdi3+0x4ac>
   8895c:	297fffc4 	addi	r5,r5,-1
   88960:	1405883a 	add	r2,r2,r16
   88964:	d9400415 	stw	r5,16(sp)
   88968:	003fb706 	br	88848 <__udivdi3+0x4ac>
   8896c:	b5bfffc4 	addi	r22,r22,-1
   88970:	1405883a 	add	r2,r2,r16
   88974:	003ec006 	br	88478 <__udivdi3+0xdc>

00088978 <__umoddi3>:
   88978:	defff104 	addi	sp,sp,-60
   8897c:	dd800b15 	stw	r22,44(sp)
   88980:	dd000915 	stw	r20,36(sp)
   88984:	dc000515 	stw	r16,20(sp)
   88988:	dfc00e15 	stw	ra,56(sp)
   8898c:	df000d15 	stw	fp,52(sp)
   88990:	ddc00c15 	stw	r23,48(sp)
   88994:	dd400a15 	stw	r21,40(sp)
   88998:	dcc00815 	stw	r19,32(sp)
   8899c:	dc800715 	stw	r18,28(sp)
   889a0:	dc400615 	stw	r17,24(sp)
   889a4:	3021883a 	mov	r16,r6
   889a8:	202d883a 	mov	r22,r4
   889ac:	2829883a 	mov	r20,r5
   889b0:	38002b1e 	bne	r7,zero,88a60 <__umoddi3+0xe8>
   889b4:	29805036 	bltu	r5,r6,88af8 <__umoddi3+0x180>
   889b8:	30008a26 	beq	r6,zero,88be4 <__umoddi3+0x26c>
   889bc:	00bfffd4 	movui	r2,65535
   889c0:	14008236 	bltu	r2,r16,88bcc <__umoddi3+0x254>
   889c4:	00803fc4 	movi	r2,255
   889c8:	14013636 	bltu	r2,r16,88ea4 <__umoddi3+0x52c>
   889cc:	000b883a 	mov	r5,zero
   889d0:	0005883a 	mov	r2,zero
   889d4:	8084d83a 	srl	r2,r16,r2
   889d8:	01000274 	movhi	r4,9
   889dc:	2135e904 	addi	r4,r4,-10332
   889e0:	01800804 	movi	r6,32
   889e4:	1105883a 	add	r2,r2,r4
   889e8:	10c00003 	ldbu	r3,0(r2)
   889ec:	28c7883a 	add	r3,r5,r3
   889f0:	30efc83a 	sub	r23,r6,r3
   889f4:	b800941e 	bne	r23,zero,88c48 <__umoddi3+0x2d0>
   889f8:	802ad43a 	srli	r21,r16,16
   889fc:	a423c83a 	sub	r17,r20,r16
   88a00:	0039883a 	mov	fp,zero
   88a04:	853fffcc 	andi	r20,r16,65535
   88a08:	8809883a 	mov	r4,r17
   88a0c:	a80b883a 	mov	r5,r21
   88a10:	008a1900 	call	8a190 <__udivsi3>
   88a14:	8809883a 	mov	r4,r17
   88a18:	a80b883a 	mov	r5,r21
   88a1c:	a0a3383a 	mul	r17,r20,r2
   88a20:	008a1980 	call	8a198 <__umodsi3>
   88a24:	1004943a 	slli	r2,r2,16
   88a28:	b006d43a 	srli	r3,r22,16
   88a2c:	10c4b03a 	or	r2,r2,r3
   88a30:	1440032e 	bgeu	r2,r17,88a40 <__umoddi3+0xc8>
   88a34:	1405883a 	add	r2,r2,r16
   88a38:	14000136 	bltu	r2,r16,88a40 <__umoddi3+0xc8>
   88a3c:	14413536 	bltu	r2,r17,88f14 <__umoddi3+0x59c>
   88a40:	1463c83a 	sub	r17,r2,r17
   88a44:	8809883a 	mov	r4,r17
   88a48:	a80b883a 	mov	r5,r21
   88a4c:	008a1900 	call	8a190 <__udivsi3>
   88a50:	8809883a 	mov	r4,r17
   88a54:	a0a3383a 	mul	r17,r20,r2
   88a58:	a80b883a 	mov	r5,r21
   88a5c:	00004d06 	br	88b94 <__umoddi3+0x21c>
   88a60:	380d883a 	mov	r6,r7
   88a64:	29c0102e 	bgeu	r5,r7,88aa8 <__umoddi3+0x130>
   88a68:	2011883a 	mov	r8,r4
   88a6c:	2813883a 	mov	r9,r5
   88a70:	4005883a 	mov	r2,r8
   88a74:	4807883a 	mov	r3,r9
   88a78:	dfc00e17 	ldw	ra,56(sp)
   88a7c:	df000d17 	ldw	fp,52(sp)
   88a80:	ddc00c17 	ldw	r23,48(sp)
   88a84:	dd800b17 	ldw	r22,44(sp)
   88a88:	dd400a17 	ldw	r21,40(sp)
   88a8c:	dd000917 	ldw	r20,36(sp)
   88a90:	dcc00817 	ldw	r19,32(sp)
   88a94:	dc800717 	ldw	r18,28(sp)
   88a98:	dc400617 	ldw	r17,24(sp)
   88a9c:	dc000517 	ldw	r16,20(sp)
   88aa0:	dec00f04 	addi	sp,sp,60
   88aa4:	f800283a 	ret
   88aa8:	00bfffd4 	movui	r2,65535
   88aac:	11c05a36 	bltu	r2,r7,88c18 <__umoddi3+0x2a0>
   88ab0:	00803fc4 	movi	r2,255
   88ab4:	11c0fe36 	bltu	r2,r7,88eb0 <__umoddi3+0x538>
   88ab8:	000b883a 	mov	r5,zero
   88abc:	0005883a 	mov	r2,zero
   88ac0:	3084d83a 	srl	r2,r6,r2
   88ac4:	01000274 	movhi	r4,9
   88ac8:	2135e904 	addi	r4,r4,-10332
   88acc:	01c00804 	movi	r7,32
   88ad0:	1105883a 	add	r2,r2,r4
   88ad4:	10c00003 	ldbu	r3,0(r2)
   88ad8:	28c7883a 	add	r3,r5,r3
   88adc:	38ebc83a 	sub	r21,r7,r3
   88ae0:	a800851e 	bne	r21,zero,88cf8 <__umoddi3+0x380>
   88ae4:	35005236 	bltu	r6,r20,88c30 <__umoddi3+0x2b8>
   88ae8:	b400512e 	bgeu	r22,r16,88c30 <__umoddi3+0x2b8>
   88aec:	b011883a 	mov	r8,r22
   88af0:	a013883a 	mov	r9,r20
   88af4:	003fde06 	br	88a70 <__umoddi3+0xf8>
   88af8:	00bfffd4 	movui	r2,65535
   88afc:	11804036 	bltu	r2,r6,88c00 <__umoddi3+0x288>
   88b00:	00803fc4 	movi	r2,255
   88b04:	1180ed36 	bltu	r2,r6,88ebc <__umoddi3+0x544>
   88b08:	000b883a 	mov	r5,zero
   88b0c:	0005883a 	mov	r2,zero
   88b10:	8084d83a 	srl	r2,r16,r2
   88b14:	01000274 	movhi	r4,9
   88b18:	2135e904 	addi	r4,r4,-10332
   88b1c:	01800804 	movi	r6,32
   88b20:	1105883a 	add	r2,r2,r4
   88b24:	10c00003 	ldbu	r3,0(r2)
   88b28:	28c7883a 	add	r3,r5,r3
   88b2c:	30c7c83a 	sub	r3,r6,r3
   88b30:	1800bf1e 	bne	r3,zero,88e30 <__umoddi3+0x4b8>
   88b34:	0039883a 	mov	fp,zero
   88b38:	802ad43a 	srli	r21,r16,16
   88b3c:	a009883a 	mov	r4,r20
   88b40:	85ffffcc 	andi	r23,r16,65535
   88b44:	a80b883a 	mov	r5,r21
   88b48:	008a1900 	call	8a190 <__udivsi3>
   88b4c:	a009883a 	mov	r4,r20
   88b50:	a80b883a 	mov	r5,r21
   88b54:	b8a3383a 	mul	r17,r23,r2
   88b58:	008a1980 	call	8a198 <__umodsi3>
   88b5c:	1004943a 	slli	r2,r2,16
   88b60:	b006d43a 	srli	r3,r22,16
   88b64:	10c4b03a 	or	r2,r2,r3
   88b68:	1440032e 	bgeu	r2,r17,88b78 <__umoddi3+0x200>
   88b6c:	1405883a 	add	r2,r2,r16
   88b70:	14000136 	bltu	r2,r16,88b78 <__umoddi3+0x200>
   88b74:	1440e536 	bltu	r2,r17,88f0c <__umoddi3+0x594>
   88b78:	1463c83a 	sub	r17,r2,r17
   88b7c:	8809883a 	mov	r4,r17
   88b80:	a80b883a 	mov	r5,r21
   88b84:	008a1900 	call	8a190 <__udivsi3>
   88b88:	8809883a 	mov	r4,r17
   88b8c:	b8a3383a 	mul	r17,r23,r2
   88b90:	a80b883a 	mov	r5,r21
   88b94:	008a1980 	call	8a198 <__umodsi3>
   88b98:	1004943a 	slli	r2,r2,16
   88b9c:	b0ffffcc 	andi	r3,r22,65535
   88ba0:	10c4b03a 	or	r2,r2,r3
   88ba4:	1440042e 	bgeu	r2,r17,88bb8 <__umoddi3+0x240>
   88ba8:	1405883a 	add	r2,r2,r16
   88bac:	14000236 	bltu	r2,r16,88bb8 <__umoddi3+0x240>
   88bb0:	1440012e 	bgeu	r2,r17,88bb8 <__umoddi3+0x240>
   88bb4:	1405883a 	add	r2,r2,r16
   88bb8:	1445c83a 	sub	r2,r2,r17
   88bbc:	1724d83a 	srl	r18,r2,fp
   88bc0:	0013883a 	mov	r9,zero
   88bc4:	9011883a 	mov	r8,r18
   88bc8:	003fa906 	br	88a70 <__umoddi3+0xf8>
   88bcc:	00804034 	movhi	r2,256
   88bd0:	10bfffc4 	addi	r2,r2,-1
   88bd4:	1400b036 	bltu	r2,r16,88e98 <__umoddi3+0x520>
   88bd8:	01400404 	movi	r5,16
   88bdc:	2805883a 	mov	r2,r5
   88be0:	003f7c06 	br	889d4 <__umoddi3+0x5c>
   88be4:	01000044 	movi	r4,1
   88be8:	000b883a 	mov	r5,zero
   88bec:	008a1900 	call	8a190 <__udivsi3>
   88bf0:	1021883a 	mov	r16,r2
   88bf4:	00bfffd4 	movui	r2,65535
   88bf8:	143ff436 	bltu	r2,r16,88bcc <__umoddi3+0x254>
   88bfc:	003f7106 	br	889c4 <__umoddi3+0x4c>
   88c00:	00804034 	movhi	r2,256
   88c04:	10bfffc4 	addi	r2,r2,-1
   88c08:	1180af36 	bltu	r2,r6,88ec8 <__umoddi3+0x550>
   88c0c:	01400404 	movi	r5,16
   88c10:	2805883a 	mov	r2,r5
   88c14:	003fbe06 	br	88b10 <__umoddi3+0x198>
   88c18:	00804034 	movhi	r2,256
   88c1c:	10bfffc4 	addi	r2,r2,-1
   88c20:	11c0ac36 	bltu	r2,r7,88ed4 <__umoddi3+0x55c>
   88c24:	01400404 	movi	r5,16
   88c28:	2805883a 	mov	r2,r5
   88c2c:	003fa406 	br	88ac0 <__umoddi3+0x148>
   88c30:	b409c83a 	sub	r4,r22,r16
   88c34:	b105803a 	cmpltu	r2,r22,r4
   88c38:	a187c83a 	sub	r3,r20,r6
   88c3c:	18a9c83a 	sub	r20,r3,r2
   88c40:	202d883a 	mov	r22,r4
   88c44:	003fa906 	br	88aec <__umoddi3+0x174>
   88c48:	85e0983a 	sll	r16,r16,r23
   88c4c:	35c5c83a 	sub	r2,r6,r23
   88c50:	a0a2d83a 	srl	r17,r20,r2
   88c54:	802ad43a 	srli	r21,r16,16
   88c58:	b084d83a 	srl	r2,r22,r2
   88c5c:	a5c6983a 	sll	r3,r20,r23
   88c60:	8809883a 	mov	r4,r17
   88c64:	a80b883a 	mov	r5,r21
   88c68:	1886b03a 	or	r3,r3,r2
   88c6c:	d8c00115 	stw	r3,4(sp)
   88c70:	853fffcc 	andi	r20,r16,65535
   88c74:	008a1900 	call	8a190 <__udivsi3>
   88c78:	8809883a 	mov	r4,r17
   88c7c:	a80b883a 	mov	r5,r21
   88c80:	a0a3383a 	mul	r17,r20,r2
   88c84:	008a1980 	call	8a198 <__umodsi3>
   88c88:	d9000117 	ldw	r4,4(sp)
   88c8c:	1004943a 	slli	r2,r2,16
   88c90:	b839883a 	mov	fp,r23
   88c94:	2006d43a 	srli	r3,r4,16
   88c98:	10c4b03a 	or	r2,r2,r3
   88c9c:	1440022e 	bgeu	r2,r17,88ca8 <__umoddi3+0x330>
   88ca0:	1405883a 	add	r2,r2,r16
   88ca4:	1400962e 	bgeu	r2,r16,88f00 <__umoddi3+0x588>
   88ca8:	1463c83a 	sub	r17,r2,r17
   88cac:	8809883a 	mov	r4,r17
   88cb0:	a80b883a 	mov	r5,r21
   88cb4:	008a1900 	call	8a190 <__udivsi3>
   88cb8:	8809883a 	mov	r4,r17
   88cbc:	a80b883a 	mov	r5,r21
   88cc0:	a0a3383a 	mul	r17,r20,r2
   88cc4:	008a1980 	call	8a198 <__umodsi3>
   88cc8:	d9400117 	ldw	r5,4(sp)
   88ccc:	1004943a 	slli	r2,r2,16
   88cd0:	28ffffcc 	andi	r3,r5,65535
   88cd4:	10c4b03a 	or	r2,r2,r3
   88cd8:	1440042e 	bgeu	r2,r17,88cec <__umoddi3+0x374>
   88cdc:	1405883a 	add	r2,r2,r16
   88ce0:	14000236 	bltu	r2,r16,88cec <__umoddi3+0x374>
   88ce4:	1440012e 	bgeu	r2,r17,88cec <__umoddi3+0x374>
   88ce8:	1405883a 	add	r2,r2,r16
   88cec:	b5ec983a 	sll	r22,r22,r23
   88cf0:	1463c83a 	sub	r17,r2,r17
   88cf4:	003f4406 	br	88a08 <__umoddi3+0x90>
   88cf8:	3d4fc83a 	sub	r7,r7,r21
   88cfc:	3546983a 	sll	r3,r6,r21
   88d00:	81c4d83a 	srl	r2,r16,r7
   88d04:	a1e2d83a 	srl	r17,r20,r7
   88d08:	a54c983a 	sll	r6,r20,r21
   88d0c:	18aeb03a 	or	r23,r3,r2
   88d10:	b828d43a 	srli	r20,r23,16
   88d14:	b1c4d83a 	srl	r2,r22,r7
   88d18:	8809883a 	mov	r4,r17
   88d1c:	a00b883a 	mov	r5,r20
   88d20:	308cb03a 	or	r6,r6,r2
   88d24:	d9c00315 	stw	r7,12(sp)
   88d28:	d9800215 	stw	r6,8(sp)
   88d2c:	008a1900 	call	8a190 <__udivsi3>
   88d30:	8809883a 	mov	r4,r17
   88d34:	a00b883a 	mov	r5,r20
   88d38:	1039883a 	mov	fp,r2
   88d3c:	008a1980 	call	8a198 <__umodsi3>
   88d40:	b8ffffcc 	andi	r3,r23,65535
   88d44:	d8c00415 	stw	r3,16(sp)
   88d48:	d9000217 	ldw	r4,8(sp)
   88d4c:	d9400417 	ldw	r5,16(sp)
   88d50:	1004943a 	slli	r2,r2,16
   88d54:	2006d43a 	srli	r3,r4,16
   88d58:	8560983a 	sll	r16,r16,r21
   88d5c:	2f23383a 	mul	r17,r5,fp
   88d60:	10c4b03a 	or	r2,r2,r3
   88d64:	dc000015 	stw	r16,0(sp)
   88d68:	b56c983a 	sll	r22,r22,r21
   88d6c:	1440032e 	bgeu	r2,r17,88d7c <__umoddi3+0x404>
   88d70:	15c5883a 	add	r2,r2,r23
   88d74:	e73fffc4 	addi	fp,fp,-1
   88d78:	15c05d2e 	bgeu	r2,r23,88ef0 <__umoddi3+0x578>
   88d7c:	1463c83a 	sub	r17,r2,r17
   88d80:	8809883a 	mov	r4,r17
   88d84:	a00b883a 	mov	r5,r20
   88d88:	008a1900 	call	8a190 <__udivsi3>
   88d8c:	8809883a 	mov	r4,r17
   88d90:	a00b883a 	mov	r5,r20
   88d94:	1021883a 	mov	r16,r2
   88d98:	008a1980 	call	8a198 <__umodsi3>
   88d9c:	d8c00417 	ldw	r3,16(sp)
   88da0:	d9000217 	ldw	r4,8(sp)
   88da4:	1004943a 	slli	r2,r2,16
   88da8:	1c23383a 	mul	r17,r3,r16
   88dac:	20ffffcc 	andi	r3,r4,65535
   88db0:	10ceb03a 	or	r7,r2,r3
   88db4:	3c40032e 	bgeu	r7,r17,88dc4 <__umoddi3+0x44c>
   88db8:	3dcf883a 	add	r7,r7,r23
   88dbc:	843fffc4 	addi	r16,r16,-1
   88dc0:	3dc0472e 	bgeu	r7,r23,88ee0 <__umoddi3+0x568>
   88dc4:	e004943a 	slli	r2,fp,16
   88dc8:	d9400017 	ldw	r5,0(sp)
   88dcc:	3c4fc83a 	sub	r7,r7,r17
   88dd0:	8084b03a 	or	r2,r16,r2
   88dd4:	28ffffcc 	andi	r3,r5,65535
   88dd8:	280cd43a 	srli	r6,r5,16
   88ddc:	100ad43a 	srli	r5,r2,16
   88de0:	10bfffcc 	andi	r2,r2,65535
   88de4:	10d1383a 	mul	r8,r2,r3
   88de8:	28c7383a 	mul	r3,r5,r3
   88dec:	1185383a 	mul	r2,r2,r6
   88df0:	4008d43a 	srli	r4,r8,16
   88df4:	298b383a 	mul	r5,r5,r6
   88df8:	10c5883a 	add	r2,r2,r3
   88dfc:	2089883a 	add	r4,r4,r2
   88e00:	20c0022e 	bgeu	r4,r3,88e0c <__umoddi3+0x494>
   88e04:	00800074 	movhi	r2,1
   88e08:	288b883a 	add	r5,r5,r2
   88e0c:	2004d43a 	srli	r2,r4,16
   88e10:	2008943a 	slli	r4,r4,16
   88e14:	40ffffcc 	andi	r3,r8,65535
   88e18:	288b883a 	add	r5,r5,r2
   88e1c:	20c9883a 	add	r4,r4,r3
   88e20:	39400b36 	bltu	r7,r5,88e50 <__umoddi3+0x4d8>
   88e24:	39403d26 	beq	r7,r5,88f1c <__umoddi3+0x5a4>
   88e28:	394bc83a 	sub	r5,r7,r5
   88e2c:	00000f06 	br	88e6c <__umoddi3+0x4f4>
   88e30:	30c5c83a 	sub	r2,r6,r3
   88e34:	1839883a 	mov	fp,r3
   88e38:	b084d83a 	srl	r2,r22,r2
   88e3c:	a0c6983a 	sll	r3,r20,r3
   88e40:	8720983a 	sll	r16,r16,fp
   88e44:	b72c983a 	sll	r22,r22,fp
   88e48:	18a8b03a 	or	r20,r3,r2
   88e4c:	003f3a06 	br	88b38 <__umoddi3+0x1c0>
   88e50:	d8c00017 	ldw	r3,0(sp)
   88e54:	20c5c83a 	sub	r2,r4,r3
   88e58:	2089803a 	cmpltu	r4,r4,r2
   88e5c:	2dc7c83a 	sub	r3,r5,r23
   88e60:	1907c83a 	sub	r3,r3,r4
   88e64:	38cbc83a 	sub	r5,r7,r3
   88e68:	1009883a 	mov	r4,r2
   88e6c:	b105c83a 	sub	r2,r22,r4
   88e70:	b087803a 	cmpltu	r3,r22,r2
   88e74:	28c7c83a 	sub	r3,r5,r3
   88e78:	d9400317 	ldw	r5,12(sp)
   88e7c:	1544d83a 	srl	r2,r2,r21
   88e80:	1948983a 	sll	r4,r3,r5
   88e84:	1d46d83a 	srl	r3,r3,r21
   88e88:	20a4b03a 	or	r18,r4,r2
   88e8c:	9011883a 	mov	r8,r18
   88e90:	1813883a 	mov	r9,r3
   88e94:	003ef606 	br	88a70 <__umoddi3+0xf8>
   88e98:	01400604 	movi	r5,24
   88e9c:	2805883a 	mov	r2,r5
   88ea0:	003ecc06 	br	889d4 <__umoddi3+0x5c>
   88ea4:	01400204 	movi	r5,8
   88ea8:	2805883a 	mov	r2,r5
   88eac:	003ec906 	br	889d4 <__umoddi3+0x5c>
   88eb0:	01400204 	movi	r5,8
   88eb4:	2805883a 	mov	r2,r5
   88eb8:	003f0106 	br	88ac0 <__umoddi3+0x148>
   88ebc:	01400204 	movi	r5,8
   88ec0:	2805883a 	mov	r2,r5
   88ec4:	003f1206 	br	88b10 <__umoddi3+0x198>
   88ec8:	01400604 	movi	r5,24
   88ecc:	2805883a 	mov	r2,r5
   88ed0:	003f0f06 	br	88b10 <__umoddi3+0x198>
   88ed4:	01400604 	movi	r5,24
   88ed8:	2805883a 	mov	r2,r5
   88edc:	003ef806 	br	88ac0 <__umoddi3+0x148>
   88ee0:	3c7fb82e 	bgeu	r7,r17,88dc4 <__umoddi3+0x44c>
   88ee4:	843fffc4 	addi	r16,r16,-1
   88ee8:	3dcf883a 	add	r7,r7,r23
   88eec:	003fb506 	br	88dc4 <__umoddi3+0x44c>
   88ef0:	147fa22e 	bgeu	r2,r17,88d7c <__umoddi3+0x404>
   88ef4:	e73fffc4 	addi	fp,fp,-1
   88ef8:	15c5883a 	add	r2,r2,r23
   88efc:	003f9f06 	br	88d7c <__umoddi3+0x404>
   88f00:	147f692e 	bgeu	r2,r17,88ca8 <__umoddi3+0x330>
   88f04:	1405883a 	add	r2,r2,r16
   88f08:	003f6706 	br	88ca8 <__umoddi3+0x330>
   88f0c:	1405883a 	add	r2,r2,r16
   88f10:	003f1906 	br	88b78 <__umoddi3+0x200>
   88f14:	1405883a 	add	r2,r2,r16
   88f18:	003ec906 	br	88a40 <__umoddi3+0xc8>
   88f1c:	b13fcc36 	bltu	r22,r4,88e50 <__umoddi3+0x4d8>
   88f20:	000b883a 	mov	r5,zero
   88f24:	003fd106 	br	88e6c <__umoddi3+0x4f4>

00088f28 <_fpadd_parts>:
   88f28:	defff804 	addi	sp,sp,-32
   88f2c:	dcc00315 	stw	r19,12(sp)
   88f30:	2027883a 	mov	r19,r4
   88f34:	21000017 	ldw	r4,0(r4)
   88f38:	00c00044 	movi	r3,1
   88f3c:	dd400515 	stw	r21,20(sp)
   88f40:	dd000415 	stw	r20,16(sp)
   88f44:	ddc00715 	stw	r23,28(sp)
   88f48:	dd800615 	stw	r22,24(sp)
   88f4c:	dc800215 	stw	r18,8(sp)
   88f50:	dc400115 	stw	r17,4(sp)
   88f54:	dc000015 	stw	r16,0(sp)
   88f58:	282b883a 	mov	r21,r5
   88f5c:	3029883a 	mov	r20,r6
   88f60:	1900632e 	bgeu	r3,r4,890f0 <_fpadd_parts+0x1c8>
   88f64:	28800017 	ldw	r2,0(r5)
   88f68:	1880812e 	bgeu	r3,r2,89170 <_fpadd_parts+0x248>
   88f6c:	00c00104 	movi	r3,4
   88f70:	20c0dc26 	beq	r4,r3,892e4 <_fpadd_parts+0x3bc>
   88f74:	10c07e26 	beq	r2,r3,89170 <_fpadd_parts+0x248>
   88f78:	00c00084 	movi	r3,2
   88f7c:	10c06726 	beq	r2,r3,8911c <_fpadd_parts+0x1f4>
   88f80:	20c07b26 	beq	r4,r3,89170 <_fpadd_parts+0x248>
   88f84:	9dc00217 	ldw	r23,8(r19)
   88f88:	28c00217 	ldw	r3,8(r5)
   88f8c:	9c400317 	ldw	r17,12(r19)
   88f90:	2bc00317 	ldw	r15,12(r5)
   88f94:	b8cdc83a 	sub	r6,r23,r3
   88f98:	9c800417 	ldw	r18,16(r19)
   88f9c:	2c000417 	ldw	r16,16(r5)
   88fa0:	3009883a 	mov	r4,r6
   88fa4:	30009716 	blt	r6,zero,89204 <_fpadd_parts+0x2dc>
   88fa8:	00800fc4 	movi	r2,63
   88fac:	11806b16 	blt	r2,r6,8915c <_fpadd_parts+0x234>
   88fb0:	0100a40e 	bge	zero,r4,89244 <_fpadd_parts+0x31c>
   88fb4:	35bff804 	addi	r22,r6,-32
   88fb8:	b000bc16 	blt	r22,zero,892ac <_fpadd_parts+0x384>
   88fbc:	8596d83a 	srl	r11,r16,r22
   88fc0:	0019883a 	mov	r12,zero
   88fc4:	0013883a 	mov	r9,zero
   88fc8:	01000044 	movi	r4,1
   88fcc:	0015883a 	mov	r10,zero
   88fd0:	b000be16 	blt	r22,zero,892cc <_fpadd_parts+0x3a4>
   88fd4:	2590983a 	sll	r8,r4,r22
   88fd8:	000f883a 	mov	r7,zero
   88fdc:	00bfffc4 	movi	r2,-1
   88fe0:	3889883a 	add	r4,r7,r2
   88fe4:	408b883a 	add	r5,r8,r2
   88fe8:	21cd803a 	cmpltu	r6,r4,r7
   88fec:	314b883a 	add	r5,r6,r5
   88ff0:	7904703a 	and	r2,r15,r4
   88ff4:	8146703a 	and	r3,r16,r5
   88ff8:	10c4b03a 	or	r2,r2,r3
   88ffc:	10000226 	beq	r2,zero,89008 <_fpadd_parts+0xe0>
   89000:	02400044 	movi	r9,1
   89004:	0015883a 	mov	r10,zero
   89008:	5a5eb03a 	or	r15,r11,r9
   8900c:	62a0b03a 	or	r16,r12,r10
   89010:	99400117 	ldw	r5,4(r19)
   89014:	a8800117 	ldw	r2,4(r21)
   89018:	28806e26 	beq	r5,r2,891d4 <_fpadd_parts+0x2ac>
   8901c:	28006626 	beq	r5,zero,891b8 <_fpadd_parts+0x290>
   89020:	7c45c83a 	sub	r2,r15,r17
   89024:	7889803a 	cmpltu	r4,r15,r2
   89028:	8487c83a 	sub	r3,r16,r18
   8902c:	1909c83a 	sub	r4,r3,r4
   89030:	100d883a 	mov	r6,r2
   89034:	200f883a 	mov	r7,r4
   89038:	38007716 	blt	r7,zero,89218 <_fpadd_parts+0x2f0>
   8903c:	a5c00215 	stw	r23,8(r20)
   89040:	a1c00415 	stw	r7,16(r20)
   89044:	a0000115 	stw	zero,4(r20)
   89048:	a1800315 	stw	r6,12(r20)
   8904c:	a2000317 	ldw	r8,12(r20)
   89050:	a2400417 	ldw	r9,16(r20)
   89054:	00bfffc4 	movi	r2,-1
   89058:	408b883a 	add	r5,r8,r2
   8905c:	2a09803a 	cmpltu	r4,r5,r8
   89060:	488d883a 	add	r6,r9,r2
   89064:	01c40034 	movhi	r7,4096
   89068:	39ffffc4 	addi	r7,r7,-1
   8906c:	218d883a 	add	r6,r4,r6
   89070:	39801736 	bltu	r7,r6,890d0 <_fpadd_parts+0x1a8>
   89074:	31c06526 	beq	r6,r7,8920c <_fpadd_parts+0x2e4>
   89078:	a3000217 	ldw	r12,8(r20)
   8907c:	4209883a 	add	r4,r8,r8
   89080:	00bfffc4 	movi	r2,-1
   89084:	220f803a 	cmpltu	r7,r4,r8
   89088:	4a4b883a 	add	r5,r9,r9
   8908c:	394f883a 	add	r7,r7,r5
   89090:	2095883a 	add	r10,r4,r2
   89094:	3897883a 	add	r11,r7,r2
   89098:	510d803a 	cmpltu	r6,r10,r4
   8909c:	6099883a 	add	r12,r12,r2
   890a0:	32d7883a 	add	r11,r6,r11
   890a4:	00840034 	movhi	r2,4096
   890a8:	10bfffc4 	addi	r2,r2,-1
   890ac:	2011883a 	mov	r8,r4
   890b0:	3813883a 	mov	r9,r7
   890b4:	a1000315 	stw	r4,12(r20)
   890b8:	a1c00415 	stw	r7,16(r20)
   890bc:	a3000215 	stw	r12,8(r20)
   890c0:	12c00336 	bltu	r2,r11,890d0 <_fpadd_parts+0x1a8>
   890c4:	58bfed1e 	bne	r11,r2,8907c <_fpadd_parts+0x154>
   890c8:	00bfff84 	movi	r2,-2
   890cc:	12bfeb2e 	bgeu	r2,r10,8907c <_fpadd_parts+0x154>
   890d0:	a2800417 	ldw	r10,16(r20)
   890d4:	008000c4 	movi	r2,3
   890d8:	00c80034 	movhi	r3,8192
   890dc:	18ffffc4 	addi	r3,r3,-1
   890e0:	a2400317 	ldw	r9,12(r20)
   890e4:	a0800015 	stw	r2,0(r20)
   890e8:	1a802336 	bltu	r3,r10,89178 <_fpadd_parts+0x250>
   890ec:	a027883a 	mov	r19,r20
   890f0:	9805883a 	mov	r2,r19
   890f4:	ddc00717 	ldw	r23,28(sp)
   890f8:	dd800617 	ldw	r22,24(sp)
   890fc:	dd400517 	ldw	r21,20(sp)
   89100:	dd000417 	ldw	r20,16(sp)
   89104:	dcc00317 	ldw	r19,12(sp)
   89108:	dc800217 	ldw	r18,8(sp)
   8910c:	dc400117 	ldw	r17,4(sp)
   89110:	dc000017 	ldw	r16,0(sp)
   89114:	dec00804 	addi	sp,sp,32
   89118:	f800283a 	ret
   8911c:	20fff41e 	bne	r4,r3,890f0 <_fpadd_parts+0x1c8>
   89120:	31000015 	stw	r4,0(r6)
   89124:	98800117 	ldw	r2,4(r19)
   89128:	30800115 	stw	r2,4(r6)
   8912c:	98c00217 	ldw	r3,8(r19)
   89130:	30c00215 	stw	r3,8(r6)
   89134:	98800317 	ldw	r2,12(r19)
   89138:	30800315 	stw	r2,12(r6)
   8913c:	98c00417 	ldw	r3,16(r19)
   89140:	30c00415 	stw	r3,16(r6)
   89144:	98800117 	ldw	r2,4(r19)
   89148:	28c00117 	ldw	r3,4(r5)
   8914c:	3027883a 	mov	r19,r6
   89150:	10c4703a 	and	r2,r2,r3
   89154:	30800115 	stw	r2,4(r6)
   89158:	003fe506 	br	890f0 <_fpadd_parts+0x1c8>
   8915c:	1dc02616 	blt	r3,r23,891f8 <_fpadd_parts+0x2d0>
   89160:	0023883a 	mov	r17,zero
   89164:	182f883a 	mov	r23,r3
   89168:	0025883a 	mov	r18,zero
   8916c:	003fa806 	br	89010 <_fpadd_parts+0xe8>
   89170:	a827883a 	mov	r19,r21
   89174:	003fde06 	br	890f0 <_fpadd_parts+0x1c8>
   89178:	01800044 	movi	r6,1
   8917c:	500497fa 	slli	r2,r10,31
   89180:	4808d07a 	srli	r4,r9,1
   89184:	518ad83a 	srl	r5,r10,r6
   89188:	a2000217 	ldw	r8,8(r20)
   8918c:	1108b03a 	or	r4,r2,r4
   89190:	0007883a 	mov	r3,zero
   89194:	4984703a 	and	r2,r9,r6
   89198:	208cb03a 	or	r6,r4,r2
   8919c:	28ceb03a 	or	r7,r5,r3
   891a0:	42000044 	addi	r8,r8,1
   891a4:	a027883a 	mov	r19,r20
   891a8:	a1c00415 	stw	r7,16(r20)
   891ac:	a2000215 	stw	r8,8(r20)
   891b0:	a1800315 	stw	r6,12(r20)
   891b4:	003fce06 	br	890f0 <_fpadd_parts+0x1c8>
   891b8:	8bc5c83a 	sub	r2,r17,r15
   891bc:	8889803a 	cmpltu	r4,r17,r2
   891c0:	9407c83a 	sub	r3,r18,r16
   891c4:	1909c83a 	sub	r4,r3,r4
   891c8:	100d883a 	mov	r6,r2
   891cc:	200f883a 	mov	r7,r4
   891d0:	003f9906 	br	89038 <_fpadd_parts+0x110>
   891d4:	7c45883a 	add	r2,r15,r17
   891d8:	13c9803a 	cmpltu	r4,r2,r15
   891dc:	8487883a 	add	r3,r16,r18
   891e0:	20c9883a 	add	r4,r4,r3
   891e4:	a1400115 	stw	r5,4(r20)
   891e8:	a5c00215 	stw	r23,8(r20)
   891ec:	a0800315 	stw	r2,12(r20)
   891f0:	a1000415 	stw	r4,16(r20)
   891f4:	003fb606 	br	890d0 <_fpadd_parts+0x1a8>
   891f8:	001f883a 	mov	r15,zero
   891fc:	0021883a 	mov	r16,zero
   89200:	003f8306 	br	89010 <_fpadd_parts+0xe8>
   89204:	018dc83a 	sub	r6,zero,r6
   89208:	003f6706 	br	88fa8 <_fpadd_parts+0x80>
   8920c:	00bfff84 	movi	r2,-2
   89210:	117faf36 	bltu	r2,r5,890d0 <_fpadd_parts+0x1a8>
   89214:	003f9806 	br	89078 <_fpadd_parts+0x150>
   89218:	0005883a 	mov	r2,zero
   8921c:	1189c83a 	sub	r4,r2,r6
   89220:	1105803a 	cmpltu	r2,r2,r4
   89224:	01cbc83a 	sub	r5,zero,r7
   89228:	2885c83a 	sub	r2,r5,r2
   8922c:	01800044 	movi	r6,1
   89230:	a1800115 	stw	r6,4(r20)
   89234:	a5c00215 	stw	r23,8(r20)
   89238:	a1000315 	stw	r4,12(r20)
   8923c:	a0800415 	stw	r2,16(r20)
   89240:	003f8206 	br	8904c <_fpadd_parts+0x124>
   89244:	203f7226 	beq	r4,zero,89010 <_fpadd_parts+0xe8>
   89248:	35bff804 	addi	r22,r6,-32
   8924c:	b9af883a 	add	r23,r23,r6
   89250:	b0003116 	blt	r22,zero,89318 <_fpadd_parts+0x3f0>
   89254:	959ad83a 	srl	r13,r18,r22
   89258:	001d883a 	mov	r14,zero
   8925c:	000f883a 	mov	r7,zero
   89260:	01000044 	movi	r4,1
   89264:	0011883a 	mov	r8,zero
   89268:	b0002516 	blt	r22,zero,89300 <_fpadd_parts+0x3d8>
   8926c:	2594983a 	sll	r10,r4,r22
   89270:	0013883a 	mov	r9,zero
   89274:	00bfffc4 	movi	r2,-1
   89278:	4889883a 	add	r4,r9,r2
   8927c:	508b883a 	add	r5,r10,r2
   89280:	224d803a 	cmpltu	r6,r4,r9
   89284:	314b883a 	add	r5,r6,r5
   89288:	8904703a 	and	r2,r17,r4
   8928c:	9146703a 	and	r3,r18,r5
   89290:	10c4b03a 	or	r2,r2,r3
   89294:	10000226 	beq	r2,zero,892a0 <_fpadd_parts+0x378>
   89298:	01c00044 	movi	r7,1
   8929c:	0011883a 	mov	r8,zero
   892a0:	69e2b03a 	or	r17,r13,r7
   892a4:	7224b03a 	or	r18,r14,r8
   892a8:	003f5906 	br	89010 <_fpadd_parts+0xe8>
   892ac:	8407883a 	add	r3,r16,r16
   892b0:	008007c4 	movi	r2,31
   892b4:	1185c83a 	sub	r2,r2,r6
   892b8:	1886983a 	sll	r3,r3,r2
   892bc:	7996d83a 	srl	r11,r15,r6
   892c0:	8198d83a 	srl	r12,r16,r6
   892c4:	1ad6b03a 	or	r11,r3,r11
   892c8:	003f3e06 	br	88fc4 <_fpadd_parts+0x9c>
   892cc:	2006d07a 	srli	r3,r4,1
   892d0:	008007c4 	movi	r2,31
   892d4:	1185c83a 	sub	r2,r2,r6
   892d8:	1890d83a 	srl	r8,r3,r2
   892dc:	218e983a 	sll	r7,r4,r6
   892e0:	003f3e06 	br	88fdc <_fpadd_parts+0xb4>
   892e4:	113f821e 	bne	r2,r4,890f0 <_fpadd_parts+0x1c8>
   892e8:	28c00117 	ldw	r3,4(r5)
   892ec:	98800117 	ldw	r2,4(r19)
   892f0:	10ff7f26 	beq	r2,r3,890f0 <_fpadd_parts+0x1c8>
   892f4:	04c00274 	movhi	r19,9
   892f8:	9cf5e404 	addi	r19,r19,-10352
   892fc:	003f7c06 	br	890f0 <_fpadd_parts+0x1c8>
   89300:	2006d07a 	srli	r3,r4,1
   89304:	008007c4 	movi	r2,31
   89308:	1185c83a 	sub	r2,r2,r6
   8930c:	1894d83a 	srl	r10,r3,r2
   89310:	2192983a 	sll	r9,r4,r6
   89314:	003fd706 	br	89274 <_fpadd_parts+0x34c>
   89318:	9487883a 	add	r3,r18,r18
   8931c:	008007c4 	movi	r2,31
   89320:	1185c83a 	sub	r2,r2,r6
   89324:	1886983a 	sll	r3,r3,r2
   89328:	899ad83a 	srl	r13,r17,r6
   8932c:	919cd83a 	srl	r14,r18,r6
   89330:	1b5ab03a 	or	r13,r3,r13
   89334:	003fc906 	br	8925c <_fpadd_parts+0x334>

00089338 <__subdf3>:
   89338:	deffea04 	addi	sp,sp,-88
   8933c:	dcc01415 	stw	r19,80(sp)
   89340:	dcc00404 	addi	r19,sp,16
   89344:	2011883a 	mov	r8,r4
   89348:	2813883a 	mov	r9,r5
   8934c:	dc401315 	stw	r17,76(sp)
   89350:	d809883a 	mov	r4,sp
   89354:	980b883a 	mov	r5,r19
   89358:	dc400904 	addi	r17,sp,36
   8935c:	dfc01515 	stw	ra,84(sp)
   89360:	da400115 	stw	r9,4(sp)
   89364:	d9c00315 	stw	r7,12(sp)
   89368:	da000015 	stw	r8,0(sp)
   8936c:	d9800215 	stw	r6,8(sp)
   89370:	008a5cc0 	call	8a5cc <__unpack_d>
   89374:	d9000204 	addi	r4,sp,8
   89378:	880b883a 	mov	r5,r17
   8937c:	008a5cc0 	call	8a5cc <__unpack_d>
   89380:	d8800a17 	ldw	r2,40(sp)
   89384:	880b883a 	mov	r5,r17
   89388:	9809883a 	mov	r4,r19
   8938c:	d9800e04 	addi	r6,sp,56
   89390:	1080005c 	xori	r2,r2,1
   89394:	d8800a15 	stw	r2,40(sp)
   89398:	0088f280 	call	88f28 <_fpadd_parts>
   8939c:	1009883a 	mov	r4,r2
   893a0:	008a2b80 	call	8a2b8 <__pack_d>
   893a4:	dfc01517 	ldw	ra,84(sp)
   893a8:	dcc01417 	ldw	r19,80(sp)
   893ac:	dc401317 	ldw	r17,76(sp)
   893b0:	dec01604 	addi	sp,sp,88
   893b4:	f800283a 	ret

000893b8 <__adddf3>:
   893b8:	deffea04 	addi	sp,sp,-88
   893bc:	dcc01415 	stw	r19,80(sp)
   893c0:	dcc00404 	addi	r19,sp,16
   893c4:	2011883a 	mov	r8,r4
   893c8:	2813883a 	mov	r9,r5
   893cc:	dc401315 	stw	r17,76(sp)
   893d0:	d809883a 	mov	r4,sp
   893d4:	980b883a 	mov	r5,r19
   893d8:	dc400904 	addi	r17,sp,36
   893dc:	dfc01515 	stw	ra,84(sp)
   893e0:	da400115 	stw	r9,4(sp)
   893e4:	d9c00315 	stw	r7,12(sp)
   893e8:	da000015 	stw	r8,0(sp)
   893ec:	d9800215 	stw	r6,8(sp)
   893f0:	008a5cc0 	call	8a5cc <__unpack_d>
   893f4:	d9000204 	addi	r4,sp,8
   893f8:	880b883a 	mov	r5,r17
   893fc:	008a5cc0 	call	8a5cc <__unpack_d>
   89400:	d9800e04 	addi	r6,sp,56
   89404:	9809883a 	mov	r4,r19
   89408:	880b883a 	mov	r5,r17
   8940c:	0088f280 	call	88f28 <_fpadd_parts>
   89410:	1009883a 	mov	r4,r2
   89414:	008a2b80 	call	8a2b8 <__pack_d>
   89418:	dfc01517 	ldw	ra,84(sp)
   8941c:	dcc01417 	ldw	r19,80(sp)
   89420:	dc401317 	ldw	r17,76(sp)
   89424:	dec01604 	addi	sp,sp,88
   89428:	f800283a 	ret

0008942c <__muldf3>:
   8942c:	deffe004 	addi	sp,sp,-128
   89430:	dc401815 	stw	r17,96(sp)
   89434:	dc400404 	addi	r17,sp,16
   89438:	2011883a 	mov	r8,r4
   8943c:	2813883a 	mov	r9,r5
   89440:	dc001715 	stw	r16,92(sp)
   89444:	d809883a 	mov	r4,sp
   89448:	880b883a 	mov	r5,r17
   8944c:	dc000904 	addi	r16,sp,36
   89450:	dfc01f15 	stw	ra,124(sp)
   89454:	da400115 	stw	r9,4(sp)
   89458:	d9c00315 	stw	r7,12(sp)
   8945c:	da000015 	stw	r8,0(sp)
   89460:	d9800215 	stw	r6,8(sp)
   89464:	ddc01e15 	stw	r23,120(sp)
   89468:	dd801d15 	stw	r22,116(sp)
   8946c:	dd401c15 	stw	r21,112(sp)
   89470:	dd001b15 	stw	r20,108(sp)
   89474:	dcc01a15 	stw	r19,104(sp)
   89478:	dc801915 	stw	r18,100(sp)
   8947c:	008a5cc0 	call	8a5cc <__unpack_d>
   89480:	d9000204 	addi	r4,sp,8
   89484:	800b883a 	mov	r5,r16
   89488:	008a5cc0 	call	8a5cc <__unpack_d>
   8948c:	d9000417 	ldw	r4,16(sp)
   89490:	00800044 	movi	r2,1
   89494:	1100102e 	bgeu	r2,r4,894d8 <__muldf3+0xac>
   89498:	d8c00917 	ldw	r3,36(sp)
   8949c:	10c0062e 	bgeu	r2,r3,894b8 <__muldf3+0x8c>
   894a0:	00800104 	movi	r2,4
   894a4:	20800a26 	beq	r4,r2,894d0 <__muldf3+0xa4>
   894a8:	1880cc26 	beq	r3,r2,897dc <__muldf3+0x3b0>
   894ac:	00800084 	movi	r2,2
   894b0:	20800926 	beq	r4,r2,894d8 <__muldf3+0xac>
   894b4:	1880191e 	bne	r3,r2,8951c <__muldf3+0xf0>
   894b8:	d8c00a17 	ldw	r3,40(sp)
   894bc:	d8800517 	ldw	r2,20(sp)
   894c0:	8009883a 	mov	r4,r16
   894c4:	10c4c03a 	cmpne	r2,r2,r3
   894c8:	d8800a15 	stw	r2,40(sp)
   894cc:	00000706 	br	894ec <__muldf3+0xc0>
   894d0:	00800084 	movi	r2,2
   894d4:	1880c326 	beq	r3,r2,897e4 <__muldf3+0x3b8>
   894d8:	d8800517 	ldw	r2,20(sp)
   894dc:	d8c00a17 	ldw	r3,40(sp)
   894e0:	8809883a 	mov	r4,r17
   894e4:	10c4c03a 	cmpne	r2,r2,r3
   894e8:	d8800515 	stw	r2,20(sp)
   894ec:	008a2b80 	call	8a2b8 <__pack_d>
   894f0:	dfc01f17 	ldw	ra,124(sp)
   894f4:	ddc01e17 	ldw	r23,120(sp)
   894f8:	dd801d17 	ldw	r22,116(sp)
   894fc:	dd401c17 	ldw	r21,112(sp)
   89500:	dd001b17 	ldw	r20,108(sp)
   89504:	dcc01a17 	ldw	r19,104(sp)
   89508:	dc801917 	ldw	r18,100(sp)
   8950c:	dc401817 	ldw	r17,96(sp)
   89510:	dc001717 	ldw	r16,92(sp)
   89514:	dec02004 	addi	sp,sp,128
   89518:	f800283a 	ret
   8951c:	dd800717 	ldw	r22,28(sp)
   89520:	dc800c17 	ldw	r18,48(sp)
   89524:	002b883a 	mov	r21,zero
   89528:	0023883a 	mov	r17,zero
   8952c:	a80b883a 	mov	r5,r21
   89530:	b00d883a 	mov	r6,r22
   89534:	880f883a 	mov	r7,r17
   89538:	ddc00817 	ldw	r23,32(sp)
   8953c:	dcc00d17 	ldw	r19,52(sp)
   89540:	9009883a 	mov	r4,r18
   89544:	008a1a00 	call	8a1a0 <__muldi3>
   89548:	001b883a 	mov	r13,zero
   8954c:	680f883a 	mov	r7,r13
   89550:	b009883a 	mov	r4,r22
   89554:	000b883a 	mov	r5,zero
   89558:	980d883a 	mov	r6,r19
   8955c:	b82d883a 	mov	r22,r23
   89560:	002f883a 	mov	r23,zero
   89564:	db401615 	stw	r13,88(sp)
   89568:	d8801315 	stw	r2,76(sp)
   8956c:	d8c01415 	stw	r3,80(sp)
   89570:	dcc01515 	stw	r19,84(sp)
   89574:	008a1a00 	call	8a1a0 <__muldi3>
   89578:	b00d883a 	mov	r6,r22
   8957c:	000b883a 	mov	r5,zero
   89580:	9009883a 	mov	r4,r18
   89584:	b80f883a 	mov	r7,r23
   89588:	1021883a 	mov	r16,r2
   8958c:	1823883a 	mov	r17,r3
   89590:	008a1a00 	call	8a1a0 <__muldi3>
   89594:	8085883a 	add	r2,r16,r2
   89598:	140d803a 	cmpltu	r6,r2,r16
   8959c:	88c7883a 	add	r3,r17,r3
   895a0:	30cd883a 	add	r6,r6,r3
   895a4:	1029883a 	mov	r20,r2
   895a8:	302b883a 	mov	r21,r6
   895ac:	da801317 	ldw	r10,76(sp)
   895b0:	dac01417 	ldw	r11,80(sp)
   895b4:	db001517 	ldw	r12,84(sp)
   895b8:	db401617 	ldw	r13,88(sp)
   895bc:	3440612e 	bgeu	r6,r17,89744 <__muldf3+0x318>
   895c0:	0009883a 	mov	r4,zero
   895c4:	5105883a 	add	r2,r10,r4
   895c8:	128d803a 	cmpltu	r6,r2,r10
   895cc:	5d07883a 	add	r3,r11,r20
   895d0:	30cd883a 	add	r6,r6,r3
   895d4:	0021883a 	mov	r16,zero
   895d8:	04400044 	movi	r17,1
   895dc:	1025883a 	mov	r18,r2
   895e0:	3027883a 	mov	r19,r6
   895e4:	32c06236 	bltu	r6,r11,89770 <__muldf3+0x344>
   895e8:	59807a26 	beq	r11,r6,897d4 <__muldf3+0x3a8>
   895ec:	680b883a 	mov	r5,r13
   895f0:	b80f883a 	mov	r7,r23
   895f4:	6009883a 	mov	r4,r12
   895f8:	b00d883a 	mov	r6,r22
   895fc:	008a1a00 	call	8a1a0 <__muldi3>
   89600:	1009883a 	mov	r4,r2
   89604:	000f883a 	mov	r7,zero
   89608:	1545883a 	add	r2,r2,r21
   8960c:	1111803a 	cmpltu	r8,r2,r4
   89610:	19c7883a 	add	r3,r3,r7
   89614:	40c7883a 	add	r3,r8,r3
   89618:	88cb883a 	add	r5,r17,r3
   8961c:	d8c00617 	ldw	r3,24(sp)
   89620:	8089883a 	add	r4,r16,r2
   89624:	d8800b17 	ldw	r2,44(sp)
   89628:	18c00104 	addi	r3,r3,4
   8962c:	240d803a 	cmpltu	r6,r4,r16
   89630:	10c7883a 	add	r3,r2,r3
   89634:	2013883a 	mov	r9,r4
   89638:	d8800a17 	ldw	r2,40(sp)
   8963c:	d9000517 	ldw	r4,20(sp)
   89640:	314d883a 	add	r6,r6,r5
   89644:	3015883a 	mov	r10,r6
   89648:	2088c03a 	cmpne	r4,r4,r2
   8964c:	00880034 	movhi	r2,8192
   89650:	10bfffc4 	addi	r2,r2,-1
   89654:	d9000f15 	stw	r4,60(sp)
   89658:	d8c01015 	stw	r3,64(sp)
   8965c:	1180162e 	bgeu	r2,r6,896b8 <__muldf3+0x28c>
   89660:	1811883a 	mov	r8,r3
   89664:	101f883a 	mov	r15,r2
   89668:	980497fa 	slli	r2,r19,31
   8966c:	9016d07a 	srli	r11,r18,1
   89670:	500697fa 	slli	r3,r10,31
   89674:	480cd07a 	srli	r6,r9,1
   89678:	500ed07a 	srli	r7,r10,1
   8967c:	12d6b03a 	or	r11,r2,r11
   89680:	00800044 	movi	r2,1
   89684:	198cb03a 	or	r6,r3,r6
   89688:	4888703a 	and	r4,r9,r2
   8968c:	9818d07a 	srli	r12,r19,1
   89690:	001b883a 	mov	r13,zero
   89694:	03a00034 	movhi	r14,32768
   89698:	3013883a 	mov	r9,r6
   8969c:	3815883a 	mov	r10,r7
   896a0:	4091883a 	add	r8,r8,r2
   896a4:	20000226 	beq	r4,zero,896b0 <__muldf3+0x284>
   896a8:	5b64b03a 	or	r18,r11,r13
   896ac:	63a6b03a 	or	r19,r12,r14
   896b0:	7abfed36 	bltu	r15,r10,89668 <__muldf3+0x23c>
   896b4:	da001015 	stw	r8,64(sp)
   896b8:	00840034 	movhi	r2,4096
   896bc:	10bfffc4 	addi	r2,r2,-1
   896c0:	12801436 	bltu	r2,r10,89714 <__muldf3+0x2e8>
   896c4:	da001017 	ldw	r8,64(sp)
   896c8:	101f883a 	mov	r15,r2
   896cc:	4a45883a 	add	r2,r9,r9
   896d0:	124d803a 	cmpltu	r6,r2,r9
   896d4:	5287883a 	add	r3,r10,r10
   896d8:	9497883a 	add	r11,r18,r18
   896dc:	5c8f803a 	cmpltu	r7,r11,r18
   896e0:	9cd9883a 	add	r12,r19,r19
   896e4:	01000044 	movi	r4,1
   896e8:	30cd883a 	add	r6,r6,r3
   896ec:	3b0f883a 	add	r7,r7,r12
   896f0:	423fffc4 	addi	r8,r8,-1
   896f4:	1013883a 	mov	r9,r2
   896f8:	3015883a 	mov	r10,r6
   896fc:	111ab03a 	or	r13,r2,r4
   89700:	98003016 	blt	r19,zero,897c4 <__muldf3+0x398>
   89704:	5825883a 	mov	r18,r11
   89708:	3827883a 	mov	r19,r7
   8970c:	7abfef2e 	bgeu	r15,r10,896cc <__muldf3+0x2a0>
   89710:	da001015 	stw	r8,64(sp)
   89714:	00803fc4 	movi	r2,255
   89718:	488e703a 	and	r7,r9,r2
   8971c:	00802004 	movi	r2,128
   89720:	0007883a 	mov	r3,zero
   89724:	0011883a 	mov	r8,zero
   89728:	38801826 	beq	r7,r2,8978c <__muldf3+0x360>
   8972c:	008000c4 	movi	r2,3
   89730:	d9000e04 	addi	r4,sp,56
   89734:	da801215 	stw	r10,72(sp)
   89738:	d8800e15 	stw	r2,56(sp)
   8973c:	da401115 	stw	r9,68(sp)
   89740:	003f6a06 	br	894ec <__muldf3+0xc0>
   89744:	89802126 	beq	r17,r6,897cc <__muldf3+0x3a0>
   89748:	0009883a 	mov	r4,zero
   8974c:	5105883a 	add	r2,r10,r4
   89750:	128d803a 	cmpltu	r6,r2,r10
   89754:	5d07883a 	add	r3,r11,r20
   89758:	30cd883a 	add	r6,r6,r3
   8975c:	0021883a 	mov	r16,zero
   89760:	0023883a 	mov	r17,zero
   89764:	1025883a 	mov	r18,r2
   89768:	3027883a 	mov	r19,r6
   8976c:	32ff9e2e 	bgeu	r6,r11,895e8 <__muldf3+0x1bc>
   89770:	00800044 	movi	r2,1
   89774:	8089883a 	add	r4,r16,r2
   89778:	240d803a 	cmpltu	r6,r4,r16
   8977c:	344d883a 	add	r6,r6,r17
   89780:	2021883a 	mov	r16,r4
   89784:	3023883a 	mov	r17,r6
   89788:	003f9806 	br	895ec <__muldf3+0x1c0>
   8978c:	403fe71e 	bne	r8,zero,8972c <__muldf3+0x300>
   89790:	01004004 	movi	r4,256
   89794:	4904703a 	and	r2,r9,r4
   89798:	10c4b03a 	or	r2,r2,r3
   8979c:	103fe31e 	bne	r2,zero,8972c <__muldf3+0x300>
   897a0:	94c4b03a 	or	r2,r18,r19
   897a4:	103fe126 	beq	r2,zero,8972c <__muldf3+0x300>
   897a8:	49c5883a 	add	r2,r9,r7
   897ac:	1251803a 	cmpltu	r8,r2,r9
   897b0:	4291883a 	add	r8,r8,r10
   897b4:	013fc004 	movi	r4,-256
   897b8:	1112703a 	and	r9,r2,r4
   897bc:	4015883a 	mov	r10,r8
   897c0:	003fda06 	br	8972c <__muldf3+0x300>
   897c4:	6813883a 	mov	r9,r13
   897c8:	003fce06 	br	89704 <__muldf3+0x2d8>
   897cc:	143f7c36 	bltu	r2,r16,895c0 <__muldf3+0x194>
   897d0:	003fdd06 	br	89748 <__muldf3+0x31c>
   897d4:	12bf852e 	bgeu	r2,r10,895ec <__muldf3+0x1c0>
   897d8:	003fe506 	br	89770 <__muldf3+0x344>
   897dc:	00800084 	movi	r2,2
   897e0:	20bf351e 	bne	r4,r2,894b8 <__muldf3+0x8c>
   897e4:	01000274 	movhi	r4,9
   897e8:	2135e404 	addi	r4,r4,-10352
   897ec:	003f3f06 	br	894ec <__muldf3+0xc0>

000897f0 <__divdf3>:
   897f0:	deffed04 	addi	sp,sp,-76
   897f4:	dcc01115 	stw	r19,68(sp)
   897f8:	dcc00404 	addi	r19,sp,16
   897fc:	2011883a 	mov	r8,r4
   89800:	2813883a 	mov	r9,r5
   89804:	dc000e15 	stw	r16,56(sp)
   89808:	d809883a 	mov	r4,sp
   8980c:	980b883a 	mov	r5,r19
   89810:	dc000904 	addi	r16,sp,36
   89814:	dfc01215 	stw	ra,72(sp)
   89818:	da400115 	stw	r9,4(sp)
   8981c:	d9c00315 	stw	r7,12(sp)
   89820:	da000015 	stw	r8,0(sp)
   89824:	d9800215 	stw	r6,8(sp)
   89828:	dc801015 	stw	r18,64(sp)
   8982c:	dc400f15 	stw	r17,60(sp)
   89830:	008a5cc0 	call	8a5cc <__unpack_d>
   89834:	d9000204 	addi	r4,sp,8
   89838:	800b883a 	mov	r5,r16
   8983c:	008a5cc0 	call	8a5cc <__unpack_d>
   89840:	d9000417 	ldw	r4,16(sp)
   89844:	00800044 	movi	r2,1
   89848:	11000b2e 	bgeu	r2,r4,89878 <__divdf3+0x88>
   8984c:	d9400917 	ldw	r5,36(sp)
   89850:	1140762e 	bgeu	r2,r5,89a2c <__divdf3+0x23c>
   89854:	d8800517 	ldw	r2,20(sp)
   89858:	d8c00a17 	ldw	r3,40(sp)
   8985c:	01800104 	movi	r6,4
   89860:	10c4f03a 	xor	r2,r2,r3
   89864:	d8800515 	stw	r2,20(sp)
   89868:	21800226 	beq	r4,r6,89874 <__divdf3+0x84>
   8986c:	00800084 	movi	r2,2
   89870:	2080141e 	bne	r4,r2,898c4 <__divdf3+0xd4>
   89874:	29000926 	beq	r5,r4,8989c <__divdf3+0xac>
   89878:	9809883a 	mov	r4,r19
   8987c:	008a2b80 	call	8a2b8 <__pack_d>
   89880:	dfc01217 	ldw	ra,72(sp)
   89884:	dcc01117 	ldw	r19,68(sp)
   89888:	dc801017 	ldw	r18,64(sp)
   8988c:	dc400f17 	ldw	r17,60(sp)
   89890:	dc000e17 	ldw	r16,56(sp)
   89894:	dec01304 	addi	sp,sp,76
   89898:	f800283a 	ret
   8989c:	01000274 	movhi	r4,9
   898a0:	2135e404 	addi	r4,r4,-10352
   898a4:	008a2b80 	call	8a2b8 <__pack_d>
   898a8:	dfc01217 	ldw	ra,72(sp)
   898ac:	dcc01117 	ldw	r19,68(sp)
   898b0:	dc801017 	ldw	r18,64(sp)
   898b4:	dc400f17 	ldw	r17,60(sp)
   898b8:	dc000e17 	ldw	r16,56(sp)
   898bc:	dec01304 	addi	sp,sp,76
   898c0:	f800283a 	ret
   898c4:	29805b26 	beq	r5,r6,89a34 <__divdf3+0x244>
   898c8:	28802d26 	beq	r5,r2,89980 <__divdf3+0x190>
   898cc:	d8c00617 	ldw	r3,24(sp)
   898d0:	d8800b17 	ldw	r2,44(sp)
   898d4:	d9c00817 	ldw	r7,32(sp)
   898d8:	dc400d17 	ldw	r17,52(sp)
   898dc:	188bc83a 	sub	r5,r3,r2
   898e0:	d9800717 	ldw	r6,28(sp)
   898e4:	dc000c17 	ldw	r16,48(sp)
   898e8:	d9400615 	stw	r5,24(sp)
   898ec:	3c403836 	bltu	r7,r17,899d0 <__divdf3+0x1e0>
   898f0:	89c03626 	beq	r17,r7,899cc <__divdf3+0x1dc>
   898f4:	0015883a 	mov	r10,zero
   898f8:	001d883a 	mov	r14,zero
   898fc:	02c40034 	movhi	r11,4096
   89900:	001f883a 	mov	r15,zero
   89904:	003f883a 	mov	ra,zero
   89908:	04800f44 	movi	r18,61
   8990c:	00000f06 	br	8994c <__divdf3+0x15c>
   89910:	601d883a 	mov	r14,r12
   89914:	681f883a 	mov	r15,r13
   89918:	400d883a 	mov	r6,r8
   8991c:	100f883a 	mov	r7,r2
   89920:	3191883a 	add	r8,r6,r6
   89924:	5808d07a 	srli	r4,r11,1
   89928:	4185803a 	cmpltu	r2,r8,r6
   8992c:	39d3883a 	add	r9,r7,r7
   89930:	28c6b03a 	or	r3,r5,r3
   89934:	1245883a 	add	r2,r2,r9
   89938:	1815883a 	mov	r10,r3
   8993c:	2017883a 	mov	r11,r4
   89940:	400d883a 	mov	r6,r8
   89944:	100f883a 	mov	r7,r2
   89948:	fc801726 	beq	ra,r18,899a8 <__divdf3+0x1b8>
   8994c:	580a97fa 	slli	r5,r11,31
   89950:	5006d07a 	srli	r3,r10,1
   89954:	ffc00044 	addi	ra,ra,1
   89958:	3c7ff136 	bltu	r7,r17,89920 <__divdf3+0x130>
   8995c:	3411c83a 	sub	r8,r6,r16
   89960:	3205803a 	cmpltu	r2,r6,r8
   89964:	3c53c83a 	sub	r9,r7,r17
   89968:	7298b03a 	or	r12,r14,r10
   8996c:	7adab03a 	or	r13,r15,r11
   89970:	4885c83a 	sub	r2,r9,r2
   89974:	89ffe61e 	bne	r17,r7,89910 <__divdf3+0x120>
   89978:	343fe936 	bltu	r6,r16,89920 <__divdf3+0x130>
   8997c:	003fe406 	br	89910 <__divdf3+0x120>
   89980:	9809883a 	mov	r4,r19
   89984:	d9800415 	stw	r6,16(sp)
   89988:	008a2b80 	call	8a2b8 <__pack_d>
   8998c:	dfc01217 	ldw	ra,72(sp)
   89990:	dcc01117 	ldw	r19,68(sp)
   89994:	dc801017 	ldw	r18,64(sp)
   89998:	dc400f17 	ldw	r17,60(sp)
   8999c:	dc000e17 	ldw	r16,56(sp)
   899a0:	dec01304 	addi	sp,sp,76
   899a4:	f800283a 	ret
   899a8:	00803fc4 	movi	r2,255
   899ac:	7090703a 	and	r8,r14,r2
   899b0:	00802004 	movi	r2,128
   899b4:	0007883a 	mov	r3,zero
   899b8:	0013883a 	mov	r9,zero
   899bc:	40800d26 	beq	r8,r2,899f4 <__divdf3+0x204>
   899c0:	dbc00815 	stw	r15,32(sp)
   899c4:	db800715 	stw	r14,28(sp)
   899c8:	003fab06 	br	89878 <__divdf3+0x88>
   899cc:	343fc92e 	bgeu	r6,r16,898f4 <__divdf3+0x104>
   899d0:	3185883a 	add	r2,r6,r6
   899d4:	1189803a 	cmpltu	r4,r2,r6
   899d8:	39c7883a 	add	r3,r7,r7
   899dc:	20c9883a 	add	r4,r4,r3
   899e0:	297fffc4 	addi	r5,r5,-1
   899e4:	100d883a 	mov	r6,r2
   899e8:	200f883a 	mov	r7,r4
   899ec:	d9400615 	stw	r5,24(sp)
   899f0:	003fc006 	br	898f4 <__divdf3+0x104>
   899f4:	483ff21e 	bne	r9,zero,899c0 <__divdf3+0x1d0>
   899f8:	01004004 	movi	r4,256
   899fc:	7104703a 	and	r2,r14,r4
   89a00:	10c4b03a 	or	r2,r2,r3
   89a04:	103fee1e 	bne	r2,zero,899c0 <__divdf3+0x1d0>
   89a08:	31c4b03a 	or	r2,r6,r7
   89a0c:	103fec26 	beq	r2,zero,899c0 <__divdf3+0x1d0>
   89a10:	7205883a 	add	r2,r14,r8
   89a14:	1391803a 	cmpltu	r8,r2,r14
   89a18:	43d1883a 	add	r8,r8,r15
   89a1c:	013fc004 	movi	r4,-256
   89a20:	111c703a 	and	r14,r2,r4
   89a24:	401f883a 	mov	r15,r8
   89a28:	003fe506 	br	899c0 <__divdf3+0x1d0>
   89a2c:	8009883a 	mov	r4,r16
   89a30:	003f9206 	br	8987c <__divdf3+0x8c>
   89a34:	9809883a 	mov	r4,r19
   89a38:	d8000715 	stw	zero,28(sp)
   89a3c:	d8000815 	stw	zero,32(sp)
   89a40:	d8000615 	stw	zero,24(sp)
   89a44:	003f8d06 	br	8987c <__divdf3+0x8c>

00089a48 <__eqdf2>:
   89a48:	deffef04 	addi	sp,sp,-68
   89a4c:	dc400f15 	stw	r17,60(sp)
   89a50:	dc400404 	addi	r17,sp,16
   89a54:	2005883a 	mov	r2,r4
   89a58:	2807883a 	mov	r3,r5
   89a5c:	dc000e15 	stw	r16,56(sp)
   89a60:	d809883a 	mov	r4,sp
   89a64:	880b883a 	mov	r5,r17
   89a68:	dc000904 	addi	r16,sp,36
   89a6c:	d8c00115 	stw	r3,4(sp)
   89a70:	d8800015 	stw	r2,0(sp)
   89a74:	d9800215 	stw	r6,8(sp)
   89a78:	dfc01015 	stw	ra,64(sp)
   89a7c:	d9c00315 	stw	r7,12(sp)
   89a80:	008a5cc0 	call	8a5cc <__unpack_d>
   89a84:	d9000204 	addi	r4,sp,8
   89a88:	800b883a 	mov	r5,r16
   89a8c:	008a5cc0 	call	8a5cc <__unpack_d>
   89a90:	d8800417 	ldw	r2,16(sp)
   89a94:	00c00044 	movi	r3,1
   89a98:	180d883a 	mov	r6,r3
   89a9c:	1880062e 	bgeu	r3,r2,89ab8 <__eqdf2+0x70>
   89aa0:	d8800917 	ldw	r2,36(sp)
   89aa4:	8809883a 	mov	r4,r17
   89aa8:	800b883a 	mov	r5,r16
   89aac:	1880022e 	bgeu	r3,r2,89ab8 <__eqdf2+0x70>
   89ab0:	008a7040 	call	8a704 <__fpcmp_parts_d>
   89ab4:	100d883a 	mov	r6,r2
   89ab8:	3005883a 	mov	r2,r6
   89abc:	dfc01017 	ldw	ra,64(sp)
   89ac0:	dc400f17 	ldw	r17,60(sp)
   89ac4:	dc000e17 	ldw	r16,56(sp)
   89ac8:	dec01104 	addi	sp,sp,68
   89acc:	f800283a 	ret

00089ad0 <__nedf2>:
   89ad0:	deffef04 	addi	sp,sp,-68
   89ad4:	dc400f15 	stw	r17,60(sp)
   89ad8:	dc400404 	addi	r17,sp,16
   89adc:	2005883a 	mov	r2,r4
   89ae0:	2807883a 	mov	r3,r5
   89ae4:	dc000e15 	stw	r16,56(sp)
   89ae8:	d809883a 	mov	r4,sp
   89aec:	880b883a 	mov	r5,r17
   89af0:	dc000904 	addi	r16,sp,36
   89af4:	d8c00115 	stw	r3,4(sp)
   89af8:	d8800015 	stw	r2,0(sp)
   89afc:	d9800215 	stw	r6,8(sp)
   89b00:	dfc01015 	stw	ra,64(sp)
   89b04:	d9c00315 	stw	r7,12(sp)
   89b08:	008a5cc0 	call	8a5cc <__unpack_d>
   89b0c:	d9000204 	addi	r4,sp,8
   89b10:	800b883a 	mov	r5,r16
   89b14:	008a5cc0 	call	8a5cc <__unpack_d>
   89b18:	d8800417 	ldw	r2,16(sp)
   89b1c:	00c00044 	movi	r3,1
   89b20:	180d883a 	mov	r6,r3
   89b24:	1880062e 	bgeu	r3,r2,89b40 <__nedf2+0x70>
   89b28:	d8800917 	ldw	r2,36(sp)
   89b2c:	8809883a 	mov	r4,r17
   89b30:	800b883a 	mov	r5,r16
   89b34:	1880022e 	bgeu	r3,r2,89b40 <__nedf2+0x70>
   89b38:	008a7040 	call	8a704 <__fpcmp_parts_d>
   89b3c:	100d883a 	mov	r6,r2
   89b40:	3005883a 	mov	r2,r6
   89b44:	dfc01017 	ldw	ra,64(sp)
   89b48:	dc400f17 	ldw	r17,60(sp)
   89b4c:	dc000e17 	ldw	r16,56(sp)
   89b50:	dec01104 	addi	sp,sp,68
   89b54:	f800283a 	ret

00089b58 <__gtdf2>:
   89b58:	deffef04 	addi	sp,sp,-68
   89b5c:	dc400f15 	stw	r17,60(sp)
   89b60:	dc400404 	addi	r17,sp,16
   89b64:	2005883a 	mov	r2,r4
   89b68:	2807883a 	mov	r3,r5
   89b6c:	dc000e15 	stw	r16,56(sp)
   89b70:	d809883a 	mov	r4,sp
   89b74:	880b883a 	mov	r5,r17
   89b78:	dc000904 	addi	r16,sp,36
   89b7c:	d8c00115 	stw	r3,4(sp)
   89b80:	d8800015 	stw	r2,0(sp)
   89b84:	d9800215 	stw	r6,8(sp)
   89b88:	dfc01015 	stw	ra,64(sp)
   89b8c:	d9c00315 	stw	r7,12(sp)
   89b90:	008a5cc0 	call	8a5cc <__unpack_d>
   89b94:	d9000204 	addi	r4,sp,8
   89b98:	800b883a 	mov	r5,r16
   89b9c:	008a5cc0 	call	8a5cc <__unpack_d>
   89ba0:	d8800417 	ldw	r2,16(sp)
   89ba4:	00c00044 	movi	r3,1
   89ba8:	01bfffc4 	movi	r6,-1
   89bac:	1880062e 	bgeu	r3,r2,89bc8 <__gtdf2+0x70>
   89bb0:	d8800917 	ldw	r2,36(sp)
   89bb4:	8809883a 	mov	r4,r17
   89bb8:	800b883a 	mov	r5,r16
   89bbc:	1880022e 	bgeu	r3,r2,89bc8 <__gtdf2+0x70>
   89bc0:	008a7040 	call	8a704 <__fpcmp_parts_d>
   89bc4:	100d883a 	mov	r6,r2
   89bc8:	3005883a 	mov	r2,r6
   89bcc:	dfc01017 	ldw	ra,64(sp)
   89bd0:	dc400f17 	ldw	r17,60(sp)
   89bd4:	dc000e17 	ldw	r16,56(sp)
   89bd8:	dec01104 	addi	sp,sp,68
   89bdc:	f800283a 	ret

00089be0 <__gedf2>:
   89be0:	deffef04 	addi	sp,sp,-68
   89be4:	dc400f15 	stw	r17,60(sp)
   89be8:	dc400404 	addi	r17,sp,16
   89bec:	2005883a 	mov	r2,r4
   89bf0:	2807883a 	mov	r3,r5
   89bf4:	dc000e15 	stw	r16,56(sp)
   89bf8:	d809883a 	mov	r4,sp
   89bfc:	880b883a 	mov	r5,r17
   89c00:	dc000904 	addi	r16,sp,36
   89c04:	d8c00115 	stw	r3,4(sp)
   89c08:	d8800015 	stw	r2,0(sp)
   89c0c:	d9800215 	stw	r6,8(sp)
   89c10:	dfc01015 	stw	ra,64(sp)
   89c14:	d9c00315 	stw	r7,12(sp)
   89c18:	008a5cc0 	call	8a5cc <__unpack_d>
   89c1c:	d9000204 	addi	r4,sp,8
   89c20:	800b883a 	mov	r5,r16
   89c24:	008a5cc0 	call	8a5cc <__unpack_d>
   89c28:	d8800417 	ldw	r2,16(sp)
   89c2c:	00c00044 	movi	r3,1
   89c30:	01bfffc4 	movi	r6,-1
   89c34:	1880062e 	bgeu	r3,r2,89c50 <__gedf2+0x70>
   89c38:	d8800917 	ldw	r2,36(sp)
   89c3c:	8809883a 	mov	r4,r17
   89c40:	800b883a 	mov	r5,r16
   89c44:	1880022e 	bgeu	r3,r2,89c50 <__gedf2+0x70>
   89c48:	008a7040 	call	8a704 <__fpcmp_parts_d>
   89c4c:	100d883a 	mov	r6,r2
   89c50:	3005883a 	mov	r2,r6
   89c54:	dfc01017 	ldw	ra,64(sp)
   89c58:	dc400f17 	ldw	r17,60(sp)
   89c5c:	dc000e17 	ldw	r16,56(sp)
   89c60:	dec01104 	addi	sp,sp,68
   89c64:	f800283a 	ret

00089c68 <__ltdf2>:
   89c68:	deffef04 	addi	sp,sp,-68
   89c6c:	dc400f15 	stw	r17,60(sp)
   89c70:	dc400404 	addi	r17,sp,16
   89c74:	2005883a 	mov	r2,r4
   89c78:	2807883a 	mov	r3,r5
   89c7c:	dc000e15 	stw	r16,56(sp)
   89c80:	d809883a 	mov	r4,sp
   89c84:	880b883a 	mov	r5,r17
   89c88:	dc000904 	addi	r16,sp,36
   89c8c:	d8c00115 	stw	r3,4(sp)
   89c90:	d8800015 	stw	r2,0(sp)
   89c94:	d9800215 	stw	r6,8(sp)
   89c98:	dfc01015 	stw	ra,64(sp)
   89c9c:	d9c00315 	stw	r7,12(sp)
   89ca0:	008a5cc0 	call	8a5cc <__unpack_d>
   89ca4:	d9000204 	addi	r4,sp,8
   89ca8:	800b883a 	mov	r5,r16
   89cac:	008a5cc0 	call	8a5cc <__unpack_d>
   89cb0:	d8800417 	ldw	r2,16(sp)
   89cb4:	00c00044 	movi	r3,1
   89cb8:	180d883a 	mov	r6,r3
   89cbc:	1880062e 	bgeu	r3,r2,89cd8 <__ltdf2+0x70>
   89cc0:	d8800917 	ldw	r2,36(sp)
   89cc4:	8809883a 	mov	r4,r17
   89cc8:	800b883a 	mov	r5,r16
   89ccc:	1880022e 	bgeu	r3,r2,89cd8 <__ltdf2+0x70>
   89cd0:	008a7040 	call	8a704 <__fpcmp_parts_d>
   89cd4:	100d883a 	mov	r6,r2
   89cd8:	3005883a 	mov	r2,r6
   89cdc:	dfc01017 	ldw	ra,64(sp)
   89ce0:	dc400f17 	ldw	r17,60(sp)
   89ce4:	dc000e17 	ldw	r16,56(sp)
   89ce8:	dec01104 	addi	sp,sp,68
   89cec:	f800283a 	ret

00089cf0 <__floatsidf>:
   89cf0:	2006d7fa 	srli	r3,r4,31
   89cf4:	defff604 	addi	sp,sp,-40
   89cf8:	008000c4 	movi	r2,3
   89cfc:	dfc00915 	stw	ra,36(sp)
   89d00:	dcc00815 	stw	r19,32(sp)
   89d04:	dc800715 	stw	r18,28(sp)
   89d08:	dc400615 	stw	r17,24(sp)
   89d0c:	dc000515 	stw	r16,20(sp)
   89d10:	d8800015 	stw	r2,0(sp)
   89d14:	d8c00115 	stw	r3,4(sp)
   89d18:	20000f1e 	bne	r4,zero,89d58 <__floatsidf+0x68>
   89d1c:	00800084 	movi	r2,2
   89d20:	d8800015 	stw	r2,0(sp)
   89d24:	d809883a 	mov	r4,sp
   89d28:	008a2b80 	call	8a2b8 <__pack_d>
   89d2c:	1009883a 	mov	r4,r2
   89d30:	180b883a 	mov	r5,r3
   89d34:	2005883a 	mov	r2,r4
   89d38:	2807883a 	mov	r3,r5
   89d3c:	dfc00917 	ldw	ra,36(sp)
   89d40:	dcc00817 	ldw	r19,32(sp)
   89d44:	dc800717 	ldw	r18,28(sp)
   89d48:	dc400617 	ldw	r17,24(sp)
   89d4c:	dc000517 	ldw	r16,20(sp)
   89d50:	dec00a04 	addi	sp,sp,40
   89d54:	f800283a 	ret
   89d58:	00800f04 	movi	r2,60
   89d5c:	1807003a 	cmpeq	r3,r3,zero
   89d60:	d8800215 	stw	r2,8(sp)
   89d64:	18001126 	beq	r3,zero,89dac <__floatsidf+0xbc>
   89d68:	0027883a 	mov	r19,zero
   89d6c:	2025883a 	mov	r18,r4
   89d70:	d9000315 	stw	r4,12(sp)
   89d74:	dcc00415 	stw	r19,16(sp)
   89d78:	008a2380 	call	8a238 <__clzsi2>
   89d7c:	11000744 	addi	r4,r2,29
   89d80:	013fe80e 	bge	zero,r4,89d24 <__floatsidf+0x34>
   89d84:	10bfff44 	addi	r2,r2,-3
   89d88:	10000c16 	blt	r2,zero,89dbc <__floatsidf+0xcc>
   89d8c:	90a2983a 	sll	r17,r18,r2
   89d90:	0021883a 	mov	r16,zero
   89d94:	d8800217 	ldw	r2,8(sp)
   89d98:	dc400415 	stw	r17,16(sp)
   89d9c:	dc000315 	stw	r16,12(sp)
   89da0:	1105c83a 	sub	r2,r2,r4
   89da4:	d8800215 	stw	r2,8(sp)
   89da8:	003fde06 	br	89d24 <__floatsidf+0x34>
   89dac:	00a00034 	movhi	r2,32768
   89db0:	20800a26 	beq	r4,r2,89ddc <__floatsidf+0xec>
   89db4:	0109c83a 	sub	r4,zero,r4
   89db8:	003feb06 	br	89d68 <__floatsidf+0x78>
   89dbc:	9006d07a 	srli	r3,r18,1
   89dc0:	008007c4 	movi	r2,31
   89dc4:	1105c83a 	sub	r2,r2,r4
   89dc8:	1886d83a 	srl	r3,r3,r2
   89dcc:	9922983a 	sll	r17,r19,r4
   89dd0:	9120983a 	sll	r16,r18,r4
   89dd4:	1c62b03a 	or	r17,r3,r17
   89dd8:	003fee06 	br	89d94 <__floatsidf+0xa4>
   89ddc:	0009883a 	mov	r4,zero
   89de0:	01707834 	movhi	r5,49632
   89de4:	003fd306 	br	89d34 <__floatsidf+0x44>

00089de8 <__fixdfsi>:
   89de8:	defff804 	addi	sp,sp,-32
   89dec:	2005883a 	mov	r2,r4
   89df0:	2807883a 	mov	r3,r5
   89df4:	d809883a 	mov	r4,sp
   89df8:	d9400204 	addi	r5,sp,8
   89dfc:	d8c00115 	stw	r3,4(sp)
   89e00:	d8800015 	stw	r2,0(sp)
   89e04:	dfc00715 	stw	ra,28(sp)
   89e08:	008a5cc0 	call	8a5cc <__unpack_d>
   89e0c:	d8c00217 	ldw	r3,8(sp)
   89e10:	00800084 	movi	r2,2
   89e14:	1880051e 	bne	r3,r2,89e2c <__fixdfsi+0x44>
   89e18:	0007883a 	mov	r3,zero
   89e1c:	1805883a 	mov	r2,r3
   89e20:	dfc00717 	ldw	ra,28(sp)
   89e24:	dec00804 	addi	sp,sp,32
   89e28:	f800283a 	ret
   89e2c:	00800044 	movi	r2,1
   89e30:	10fff92e 	bgeu	r2,r3,89e18 <__fixdfsi+0x30>
   89e34:	00800104 	movi	r2,4
   89e38:	18800426 	beq	r3,r2,89e4c <__fixdfsi+0x64>
   89e3c:	d8c00417 	ldw	r3,16(sp)
   89e40:	183ff516 	blt	r3,zero,89e18 <__fixdfsi+0x30>
   89e44:	00800784 	movi	r2,30
   89e48:	10c0080e 	bge	r2,r3,89e6c <__fixdfsi+0x84>
   89e4c:	d8800317 	ldw	r2,12(sp)
   89e50:	1000121e 	bne	r2,zero,89e9c <__fixdfsi+0xb4>
   89e54:	00e00034 	movhi	r3,32768
   89e58:	18ffffc4 	addi	r3,r3,-1
   89e5c:	1805883a 	mov	r2,r3
   89e60:	dfc00717 	ldw	ra,28(sp)
   89e64:	dec00804 	addi	sp,sp,32
   89e68:	f800283a 	ret
   89e6c:	00800f04 	movi	r2,60
   89e70:	10d1c83a 	sub	r8,r2,r3
   89e74:	40bff804 	addi	r2,r8,-32
   89e78:	d9800517 	ldw	r6,20(sp)
   89e7c:	d9c00617 	ldw	r7,24(sp)
   89e80:	10000816 	blt	r2,zero,89ea4 <__fixdfsi+0xbc>
   89e84:	3888d83a 	srl	r4,r7,r2
   89e88:	d8800317 	ldw	r2,12(sp)
   89e8c:	2007883a 	mov	r3,r4
   89e90:	103fe226 	beq	r2,zero,89e1c <__fixdfsi+0x34>
   89e94:	0107c83a 	sub	r3,zero,r4
   89e98:	003fe006 	br	89e1c <__fixdfsi+0x34>
   89e9c:	00e00034 	movhi	r3,32768
   89ea0:	003fde06 	br	89e1c <__fixdfsi+0x34>
   89ea4:	39c7883a 	add	r3,r7,r7
   89ea8:	008007c4 	movi	r2,31
   89eac:	1205c83a 	sub	r2,r2,r8
   89eb0:	1886983a 	sll	r3,r3,r2
   89eb4:	3208d83a 	srl	r4,r6,r8
   89eb8:	1908b03a 	or	r4,r3,r4
   89ebc:	003ff206 	br	89e88 <__fixdfsi+0xa0>

00089ec0 <__floatunsidf>:
   89ec0:	defff204 	addi	sp,sp,-56
   89ec4:	dfc00d15 	stw	ra,52(sp)
   89ec8:	ddc00c15 	stw	r23,48(sp)
   89ecc:	dd800b15 	stw	r22,44(sp)
   89ed0:	dd400a15 	stw	r21,40(sp)
   89ed4:	dd000915 	stw	r20,36(sp)
   89ed8:	dcc00815 	stw	r19,32(sp)
   89edc:	dc800715 	stw	r18,28(sp)
   89ee0:	dc400615 	stw	r17,24(sp)
   89ee4:	dc000515 	stw	r16,20(sp)
   89ee8:	d8000115 	stw	zero,4(sp)
   89eec:	20000f1e 	bne	r4,zero,89f2c <__floatunsidf+0x6c>
   89ef0:	00800084 	movi	r2,2
   89ef4:	d8800015 	stw	r2,0(sp)
   89ef8:	d809883a 	mov	r4,sp
   89efc:	008a2b80 	call	8a2b8 <__pack_d>
   89f00:	dfc00d17 	ldw	ra,52(sp)
   89f04:	ddc00c17 	ldw	r23,48(sp)
   89f08:	dd800b17 	ldw	r22,44(sp)
   89f0c:	dd400a17 	ldw	r21,40(sp)
   89f10:	dd000917 	ldw	r20,36(sp)
   89f14:	dcc00817 	ldw	r19,32(sp)
   89f18:	dc800717 	ldw	r18,28(sp)
   89f1c:	dc400617 	ldw	r17,24(sp)
   89f20:	dc000517 	ldw	r16,20(sp)
   89f24:	dec00e04 	addi	sp,sp,56
   89f28:	f800283a 	ret
   89f2c:	008000c4 	movi	r2,3
   89f30:	00c00f04 	movi	r3,60
   89f34:	002f883a 	mov	r23,zero
   89f38:	202d883a 	mov	r22,r4
   89f3c:	d8800015 	stw	r2,0(sp)
   89f40:	d8c00215 	stw	r3,8(sp)
   89f44:	d9000315 	stw	r4,12(sp)
   89f48:	ddc00415 	stw	r23,16(sp)
   89f4c:	008a2380 	call	8a238 <__clzsi2>
   89f50:	12400744 	addi	r9,r2,29
   89f54:	48000b16 	blt	r9,zero,89f84 <__floatunsidf+0xc4>
   89f58:	483fe726 	beq	r9,zero,89ef8 <__floatunsidf+0x38>
   89f5c:	10bfff44 	addi	r2,r2,-3
   89f60:	10002e16 	blt	r2,zero,8a01c <__floatunsidf+0x15c>
   89f64:	b0a2983a 	sll	r17,r22,r2
   89f68:	0021883a 	mov	r16,zero
   89f6c:	d8800217 	ldw	r2,8(sp)
   89f70:	dc400415 	stw	r17,16(sp)
   89f74:	dc000315 	stw	r16,12(sp)
   89f78:	1245c83a 	sub	r2,r2,r9
   89f7c:	d8800215 	stw	r2,8(sp)
   89f80:	003fdd06 	br	89ef8 <__floatunsidf+0x38>
   89f84:	0255c83a 	sub	r10,zero,r9
   89f88:	51bff804 	addi	r6,r10,-32
   89f8c:	30001b16 	blt	r6,zero,89ffc <__floatunsidf+0x13c>
   89f90:	b9a8d83a 	srl	r20,r23,r6
   89f94:	002b883a 	mov	r21,zero
   89f98:	000f883a 	mov	r7,zero
   89f9c:	01000044 	movi	r4,1
   89fa0:	0011883a 	mov	r8,zero
   89fa4:	30002516 	blt	r6,zero,8a03c <__floatunsidf+0x17c>
   89fa8:	21a6983a 	sll	r19,r4,r6
   89fac:	0025883a 	mov	r18,zero
   89fb0:	00bfffc4 	movi	r2,-1
   89fb4:	9089883a 	add	r4,r18,r2
   89fb8:	988b883a 	add	r5,r19,r2
   89fbc:	248d803a 	cmpltu	r6,r4,r18
   89fc0:	314b883a 	add	r5,r6,r5
   89fc4:	b104703a 	and	r2,r22,r4
   89fc8:	b946703a 	and	r3,r23,r5
   89fcc:	10c4b03a 	or	r2,r2,r3
   89fd0:	10000226 	beq	r2,zero,89fdc <__floatunsidf+0x11c>
   89fd4:	01c00044 	movi	r7,1
   89fd8:	0011883a 	mov	r8,zero
   89fdc:	d9000217 	ldw	r4,8(sp)
   89fe0:	a1c4b03a 	or	r2,r20,r7
   89fe4:	aa06b03a 	or	r3,r21,r8
   89fe8:	2249c83a 	sub	r4,r4,r9
   89fec:	d8c00415 	stw	r3,16(sp)
   89ff0:	d9000215 	stw	r4,8(sp)
   89ff4:	d8800315 	stw	r2,12(sp)
   89ff8:	003fbf06 	br	89ef8 <__floatunsidf+0x38>
   89ffc:	bdc7883a 	add	r3,r23,r23
   8a000:	008007c4 	movi	r2,31
   8a004:	1285c83a 	sub	r2,r2,r10
   8a008:	1886983a 	sll	r3,r3,r2
   8a00c:	b2a8d83a 	srl	r20,r22,r10
   8a010:	baaad83a 	srl	r21,r23,r10
   8a014:	1d28b03a 	or	r20,r3,r20
   8a018:	003fdf06 	br	89f98 <__floatunsidf+0xd8>
   8a01c:	b006d07a 	srli	r3,r22,1
   8a020:	008007c4 	movi	r2,31
   8a024:	1245c83a 	sub	r2,r2,r9
   8a028:	1886d83a 	srl	r3,r3,r2
   8a02c:	ba62983a 	sll	r17,r23,r9
   8a030:	b260983a 	sll	r16,r22,r9
   8a034:	1c62b03a 	or	r17,r3,r17
   8a038:	003fcc06 	br	89f6c <__floatunsidf+0xac>
   8a03c:	2006d07a 	srli	r3,r4,1
   8a040:	008007c4 	movi	r2,31
   8a044:	1285c83a 	sub	r2,r2,r10
   8a048:	18a6d83a 	srl	r19,r3,r2
   8a04c:	22a4983a 	sll	r18,r4,r10
   8a050:	003fd706 	br	89fb0 <__floatunsidf+0xf0>

0008a054 <udivmodsi4>:
   8a054:	29001b2e 	bgeu	r5,r4,8a0c4 <udivmodsi4+0x70>
   8a058:	28001a16 	blt	r5,zero,8a0c4 <udivmodsi4+0x70>
   8a05c:	00800044 	movi	r2,1
   8a060:	0007883a 	mov	r3,zero
   8a064:	01c007c4 	movi	r7,31
   8a068:	00000306 	br	8a078 <udivmodsi4+0x24>
   8a06c:	19c01326 	beq	r3,r7,8a0bc <udivmodsi4+0x68>
   8a070:	18c00044 	addi	r3,r3,1
   8a074:	28000416 	blt	r5,zero,8a088 <udivmodsi4+0x34>
   8a078:	294b883a 	add	r5,r5,r5
   8a07c:	1085883a 	add	r2,r2,r2
   8a080:	293ffa36 	bltu	r5,r4,8a06c <udivmodsi4+0x18>
   8a084:	10000d26 	beq	r2,zero,8a0bc <udivmodsi4+0x68>
   8a088:	0007883a 	mov	r3,zero
   8a08c:	21400236 	bltu	r4,r5,8a098 <udivmodsi4+0x44>
   8a090:	2149c83a 	sub	r4,r4,r5
   8a094:	1886b03a 	or	r3,r3,r2
   8a098:	1004d07a 	srli	r2,r2,1
   8a09c:	280ad07a 	srli	r5,r5,1
   8a0a0:	103ffa1e 	bne	r2,zero,8a08c <udivmodsi4+0x38>
   8a0a4:	30000226 	beq	r6,zero,8a0b0 <udivmodsi4+0x5c>
   8a0a8:	2005883a 	mov	r2,r4
   8a0ac:	f800283a 	ret
   8a0b0:	1809883a 	mov	r4,r3
   8a0b4:	2005883a 	mov	r2,r4
   8a0b8:	f800283a 	ret
   8a0bc:	0007883a 	mov	r3,zero
   8a0c0:	003ff806 	br	8a0a4 <udivmodsi4+0x50>
   8a0c4:	00800044 	movi	r2,1
   8a0c8:	0007883a 	mov	r3,zero
   8a0cc:	003fef06 	br	8a08c <udivmodsi4+0x38>

0008a0d0 <__divsi3>:
   8a0d0:	defffe04 	addi	sp,sp,-8
   8a0d4:	dc000015 	stw	r16,0(sp)
   8a0d8:	dfc00115 	stw	ra,4(sp)
   8a0dc:	0021883a 	mov	r16,zero
   8a0e0:	20000c16 	blt	r4,zero,8a114 <__divsi3+0x44>
   8a0e4:	000d883a 	mov	r6,zero
   8a0e8:	28000e16 	blt	r5,zero,8a124 <__divsi3+0x54>
   8a0ec:	008a0540 	call	8a054 <udivmodsi4>
   8a0f0:	1007883a 	mov	r3,r2
   8a0f4:	8005003a 	cmpeq	r2,r16,zero
   8a0f8:	1000011e 	bne	r2,zero,8a100 <__divsi3+0x30>
   8a0fc:	00c7c83a 	sub	r3,zero,r3
   8a100:	1805883a 	mov	r2,r3
   8a104:	dfc00117 	ldw	ra,4(sp)
   8a108:	dc000017 	ldw	r16,0(sp)
   8a10c:	dec00204 	addi	sp,sp,8
   8a110:	f800283a 	ret
   8a114:	0109c83a 	sub	r4,zero,r4
   8a118:	04000044 	movi	r16,1
   8a11c:	000d883a 	mov	r6,zero
   8a120:	283ff20e 	bge	r5,zero,8a0ec <__divsi3+0x1c>
   8a124:	014bc83a 	sub	r5,zero,r5
   8a128:	8021003a 	cmpeq	r16,r16,zero
   8a12c:	003fef06 	br	8a0ec <__divsi3+0x1c>

0008a130 <__modsi3>:
   8a130:	deffff04 	addi	sp,sp,-4
   8a134:	dfc00015 	stw	ra,0(sp)
   8a138:	01800044 	movi	r6,1
   8a13c:	2807883a 	mov	r3,r5
   8a140:	20000416 	blt	r4,zero,8a154 <__modsi3+0x24>
   8a144:	28000c16 	blt	r5,zero,8a178 <__modsi3+0x48>
   8a148:	dfc00017 	ldw	ra,0(sp)
   8a14c:	dec00104 	addi	sp,sp,4
   8a150:	008a0541 	jmpi	8a054 <udivmodsi4>
   8a154:	0109c83a 	sub	r4,zero,r4
   8a158:	28000b16 	blt	r5,zero,8a188 <__modsi3+0x58>
   8a15c:	180b883a 	mov	r5,r3
   8a160:	01800044 	movi	r6,1
   8a164:	008a0540 	call	8a054 <udivmodsi4>
   8a168:	0085c83a 	sub	r2,zero,r2
   8a16c:	dfc00017 	ldw	ra,0(sp)
   8a170:	dec00104 	addi	sp,sp,4
   8a174:	f800283a 	ret
   8a178:	014bc83a 	sub	r5,zero,r5
   8a17c:	dfc00017 	ldw	ra,0(sp)
   8a180:	dec00104 	addi	sp,sp,4
   8a184:	008a0541 	jmpi	8a054 <udivmodsi4>
   8a188:	0147c83a 	sub	r3,zero,r5
   8a18c:	003ff306 	br	8a15c <__modsi3+0x2c>

0008a190 <__udivsi3>:
   8a190:	000d883a 	mov	r6,zero
   8a194:	008a0541 	jmpi	8a054 <udivmodsi4>

0008a198 <__umodsi3>:
   8a198:	01800044 	movi	r6,1
   8a19c:	008a0541 	jmpi	8a054 <udivmodsi4>

0008a1a0 <__muldi3>:
   8a1a0:	2011883a 	mov	r8,r4
   8a1a4:	427fffcc 	andi	r9,r8,65535
   8a1a8:	4018d43a 	srli	r12,r8,16
   8a1ac:	32bfffcc 	andi	r10,r6,65535
   8a1b0:	3016d43a 	srli	r11,r6,16
   8a1b4:	4a85383a 	mul	r2,r9,r10
   8a1b8:	6295383a 	mul	r10,r12,r10
   8a1bc:	4ad3383a 	mul	r9,r9,r11
   8a1c0:	113fffcc 	andi	r4,r2,65535
   8a1c4:	1004d43a 	srli	r2,r2,16
   8a1c8:	4a93883a 	add	r9,r9,r10
   8a1cc:	3807883a 	mov	r3,r7
   8a1d0:	1245883a 	add	r2,r2,r9
   8a1d4:	280f883a 	mov	r7,r5
   8a1d8:	180b883a 	mov	r5,r3
   8a1dc:	1006943a 	slli	r3,r2,16
   8a1e0:	defffd04 	addi	sp,sp,-12
   8a1e4:	dc800215 	stw	r18,8(sp)
   8a1e8:	1907883a 	add	r3,r3,r4
   8a1ec:	dc400115 	stw	r17,4(sp)
   8a1f0:	dc000015 	stw	r16,0(sp)
   8a1f4:	4165383a 	mul	r18,r8,r5
   8a1f8:	31e3383a 	mul	r17,r6,r7
   8a1fc:	1012d43a 	srli	r9,r2,16
   8a200:	62d9383a 	mul	r12,r12,r11
   8a204:	181f883a 	mov	r15,r3
   8a208:	1280022e 	bgeu	r2,r10,8a214 <__muldi3+0x74>
   8a20c:	00800074 	movhi	r2,1
   8a210:	6099883a 	add	r12,r12,r2
   8a214:	624d883a 	add	r6,r12,r9
   8a218:	9187883a 	add	r3,r18,r6
   8a21c:	88c7883a 	add	r3,r17,r3
   8a220:	7805883a 	mov	r2,r15
   8a224:	dc800217 	ldw	r18,8(sp)
   8a228:	dc400117 	ldw	r17,4(sp)
   8a22c:	dc000017 	ldw	r16,0(sp)
   8a230:	dec00304 	addi	sp,sp,12
   8a234:	f800283a 	ret

0008a238 <__clzsi2>:
   8a238:	00bfffd4 	movui	r2,65535
   8a23c:	11000e36 	bltu	r2,r4,8a278 <__clzsi2+0x40>
   8a240:	00803fc4 	movi	r2,255
   8a244:	01400204 	movi	r5,8
   8a248:	0007883a 	mov	r3,zero
   8a24c:	11001036 	bltu	r2,r4,8a290 <__clzsi2+0x58>
   8a250:	000b883a 	mov	r5,zero
   8a254:	20c6d83a 	srl	r3,r4,r3
   8a258:	00800274 	movhi	r2,9
   8a25c:	10b5e904 	addi	r2,r2,-10332
   8a260:	1887883a 	add	r3,r3,r2
   8a264:	18800003 	ldbu	r2,0(r3)
   8a268:	00c00804 	movi	r3,32
   8a26c:	2885883a 	add	r2,r5,r2
   8a270:	1885c83a 	sub	r2,r3,r2
   8a274:	f800283a 	ret
   8a278:	01400404 	movi	r5,16
   8a27c:	00804034 	movhi	r2,256
   8a280:	10bfffc4 	addi	r2,r2,-1
   8a284:	2807883a 	mov	r3,r5
   8a288:	113ff22e 	bgeu	r2,r4,8a254 <__clzsi2+0x1c>
   8a28c:	01400604 	movi	r5,24
   8a290:	2807883a 	mov	r3,r5
   8a294:	20c6d83a 	srl	r3,r4,r3
   8a298:	00800274 	movhi	r2,9
   8a29c:	10b5e904 	addi	r2,r2,-10332
   8a2a0:	1887883a 	add	r3,r3,r2
   8a2a4:	18800003 	ldbu	r2,0(r3)
   8a2a8:	00c00804 	movi	r3,32
   8a2ac:	2885883a 	add	r2,r5,r2
   8a2b0:	1885c83a 	sub	r2,r3,r2
   8a2b4:	f800283a 	ret

0008a2b8 <__pack_d>:
   8a2b8:	20c00017 	ldw	r3,0(r4)
   8a2bc:	defffd04 	addi	sp,sp,-12
   8a2c0:	dc000015 	stw	r16,0(sp)
   8a2c4:	dc800215 	stw	r18,8(sp)
   8a2c8:	dc400115 	stw	r17,4(sp)
   8a2cc:	00800044 	movi	r2,1
   8a2d0:	22000317 	ldw	r8,12(r4)
   8a2d4:	001f883a 	mov	r15,zero
   8a2d8:	22400417 	ldw	r9,16(r4)
   8a2dc:	24000117 	ldw	r16,4(r4)
   8a2e0:	10c0552e 	bgeu	r2,r3,8a438 <__pack_d+0x180>
   8a2e4:	00800104 	movi	r2,4
   8a2e8:	18804f26 	beq	r3,r2,8a428 <__pack_d+0x170>
   8a2ec:	00800084 	movi	r2,2
   8a2f0:	18800226 	beq	r3,r2,8a2fc <__pack_d+0x44>
   8a2f4:	4244b03a 	or	r2,r8,r9
   8a2f8:	10001a1e 	bne	r2,zero,8a364 <__pack_d+0xac>
   8a2fc:	000d883a 	mov	r6,zero
   8a300:	000f883a 	mov	r7,zero
   8a304:	0011883a 	mov	r8,zero
   8a308:	00800434 	movhi	r2,16
   8a30c:	10bfffc4 	addi	r2,r2,-1
   8a310:	301d883a 	mov	r14,r6
   8a314:	3884703a 	and	r2,r7,r2
   8a318:	400a953a 	slli	r5,r8,20
   8a31c:	79bffc2c 	andhi	r6,r15,65520
   8a320:	308cb03a 	or	r6,r6,r2
   8a324:	00e00434 	movhi	r3,32784
   8a328:	18ffffc4 	addi	r3,r3,-1
   8a32c:	800497fa 	slli	r2,r16,31
   8a330:	30c6703a 	and	r3,r6,r3
   8a334:	1946b03a 	or	r3,r3,r5
   8a338:	01600034 	movhi	r5,32768
   8a33c:	297fffc4 	addi	r5,r5,-1
   8a340:	194a703a 	and	r5,r3,r5
   8a344:	288ab03a 	or	r5,r5,r2
   8a348:	2807883a 	mov	r3,r5
   8a34c:	7005883a 	mov	r2,r14
   8a350:	dc800217 	ldw	r18,8(sp)
   8a354:	dc400117 	ldw	r17,4(sp)
   8a358:	dc000017 	ldw	r16,0(sp)
   8a35c:	dec00304 	addi	sp,sp,12
   8a360:	f800283a 	ret
   8a364:	21000217 	ldw	r4,8(r4)
   8a368:	00bf0084 	movi	r2,-1022
   8a36c:	20803f16 	blt	r4,r2,8a46c <__pack_d+0x1b4>
   8a370:	0080ffc4 	movi	r2,1023
   8a374:	11002c16 	blt	r2,r4,8a428 <__pack_d+0x170>
   8a378:	00803fc4 	movi	r2,255
   8a37c:	408c703a 	and	r6,r8,r2
   8a380:	00802004 	movi	r2,128
   8a384:	0007883a 	mov	r3,zero
   8a388:	000f883a 	mov	r7,zero
   8a38c:	2280ffc4 	addi	r10,r4,1023
   8a390:	30801e26 	beq	r6,r2,8a40c <__pack_d+0x154>
   8a394:	00801fc4 	movi	r2,127
   8a398:	4089883a 	add	r4,r8,r2
   8a39c:	220d803a 	cmpltu	r6,r4,r8
   8a3a0:	324d883a 	add	r6,r6,r9
   8a3a4:	2011883a 	mov	r8,r4
   8a3a8:	3013883a 	mov	r9,r6
   8a3ac:	00880034 	movhi	r2,8192
   8a3b0:	10bfffc4 	addi	r2,r2,-1
   8a3b4:	12400d36 	bltu	r2,r9,8a3ec <__pack_d+0x134>
   8a3b8:	4804963a 	slli	r2,r9,24
   8a3bc:	400cd23a 	srli	r6,r8,8
   8a3c0:	480ed23a 	srli	r7,r9,8
   8a3c4:	013fffc4 	movi	r4,-1
   8a3c8:	118cb03a 	or	r6,r2,r6
   8a3cc:	01400434 	movhi	r5,16
   8a3d0:	297fffc4 	addi	r5,r5,-1
   8a3d4:	3104703a 	and	r2,r6,r4
   8a3d8:	3946703a 	and	r3,r7,r5
   8a3dc:	5201ffcc 	andi	r8,r10,2047
   8a3e0:	100d883a 	mov	r6,r2
   8a3e4:	180f883a 	mov	r7,r3
   8a3e8:	003fc706 	br	8a308 <__pack_d+0x50>
   8a3ec:	480897fa 	slli	r4,r9,31
   8a3f0:	4004d07a 	srli	r2,r8,1
   8a3f4:	4806d07a 	srli	r3,r9,1
   8a3f8:	52800044 	addi	r10,r10,1
   8a3fc:	2084b03a 	or	r2,r4,r2
   8a400:	1011883a 	mov	r8,r2
   8a404:	1813883a 	mov	r9,r3
   8a408:	003feb06 	br	8a3b8 <__pack_d+0x100>
   8a40c:	383fe11e 	bne	r7,zero,8a394 <__pack_d+0xdc>
   8a410:	01004004 	movi	r4,256
   8a414:	4104703a 	and	r2,r8,r4
   8a418:	10c4b03a 	or	r2,r2,r3
   8a41c:	103fe326 	beq	r2,zero,8a3ac <__pack_d+0xf4>
   8a420:	3005883a 	mov	r2,r6
   8a424:	003fdc06 	br	8a398 <__pack_d+0xe0>
   8a428:	000d883a 	mov	r6,zero
   8a42c:	000f883a 	mov	r7,zero
   8a430:	0201ffc4 	movi	r8,2047
   8a434:	003fb406 	br	8a308 <__pack_d+0x50>
   8a438:	0005883a 	mov	r2,zero
   8a43c:	00c00234 	movhi	r3,8
   8a440:	408cb03a 	or	r6,r8,r2
   8a444:	48ceb03a 	or	r7,r9,r3
   8a448:	013fffc4 	movi	r4,-1
   8a44c:	01400434 	movhi	r5,16
   8a450:	297fffc4 	addi	r5,r5,-1
   8a454:	3104703a 	and	r2,r6,r4
   8a458:	3946703a 	and	r3,r7,r5
   8a45c:	100d883a 	mov	r6,r2
   8a460:	180f883a 	mov	r7,r3
   8a464:	0201ffc4 	movi	r8,2047
   8a468:	003fa706 	br	8a308 <__pack_d+0x50>
   8a46c:	1109c83a 	sub	r4,r2,r4
   8a470:	00800e04 	movi	r2,56
   8a474:	11004316 	blt	r2,r4,8a584 <__pack_d+0x2cc>
   8a478:	21fff804 	addi	r7,r4,-32
   8a47c:	38004516 	blt	r7,zero,8a594 <__pack_d+0x2dc>
   8a480:	49d8d83a 	srl	r12,r9,r7
   8a484:	001b883a 	mov	r13,zero
   8a488:	0023883a 	mov	r17,zero
   8a48c:	01400044 	movi	r5,1
   8a490:	0025883a 	mov	r18,zero
   8a494:	38004716 	blt	r7,zero,8a5b4 <__pack_d+0x2fc>
   8a498:	29d6983a 	sll	r11,r5,r7
   8a49c:	0015883a 	mov	r10,zero
   8a4a0:	00bfffc4 	movi	r2,-1
   8a4a4:	5089883a 	add	r4,r10,r2
   8a4a8:	588b883a 	add	r5,r11,r2
   8a4ac:	228d803a 	cmpltu	r6,r4,r10
   8a4b0:	314b883a 	add	r5,r6,r5
   8a4b4:	4104703a 	and	r2,r8,r4
   8a4b8:	4946703a 	and	r3,r9,r5
   8a4bc:	10c4b03a 	or	r2,r2,r3
   8a4c0:	10000226 	beq	r2,zero,8a4cc <__pack_d+0x214>
   8a4c4:	04400044 	movi	r17,1
   8a4c8:	0025883a 	mov	r18,zero
   8a4cc:	00803fc4 	movi	r2,255
   8a4d0:	644eb03a 	or	r7,r12,r17
   8a4d4:	3892703a 	and	r9,r7,r2
   8a4d8:	00802004 	movi	r2,128
   8a4dc:	6c90b03a 	or	r8,r13,r18
   8a4e0:	0015883a 	mov	r10,zero
   8a4e4:	48801626 	beq	r9,r2,8a540 <__pack_d+0x288>
   8a4e8:	01001fc4 	movi	r4,127
   8a4ec:	3905883a 	add	r2,r7,r4
   8a4f0:	11cd803a 	cmpltu	r6,r2,r7
   8a4f4:	320d883a 	add	r6,r6,r8
   8a4f8:	100f883a 	mov	r7,r2
   8a4fc:	00840034 	movhi	r2,4096
   8a500:	10bfffc4 	addi	r2,r2,-1
   8a504:	3011883a 	mov	r8,r6
   8a508:	0007883a 	mov	r3,zero
   8a50c:	11801b36 	bltu	r2,r6,8a57c <__pack_d+0x2c4>
   8a510:	4004963a 	slli	r2,r8,24
   8a514:	3808d23a 	srli	r4,r7,8
   8a518:	400ad23a 	srli	r5,r8,8
   8a51c:	1813883a 	mov	r9,r3
   8a520:	1108b03a 	or	r4,r2,r4
   8a524:	00bfffc4 	movi	r2,-1
   8a528:	00c00434 	movhi	r3,16
   8a52c:	18ffffc4 	addi	r3,r3,-1
   8a530:	208c703a 	and	r6,r4,r2
   8a534:	28ce703a 	and	r7,r5,r3
   8a538:	4a01ffcc 	andi	r8,r9,2047
   8a53c:	003f7206 	br	8a308 <__pack_d+0x50>
   8a540:	503fe91e 	bne	r10,zero,8a4e8 <__pack_d+0x230>
   8a544:	01004004 	movi	r4,256
   8a548:	3904703a 	and	r2,r7,r4
   8a54c:	0007883a 	mov	r3,zero
   8a550:	10c4b03a 	or	r2,r2,r3
   8a554:	10000626 	beq	r2,zero,8a570 <__pack_d+0x2b8>
   8a558:	3a45883a 	add	r2,r7,r9
   8a55c:	11cd803a 	cmpltu	r6,r2,r7
   8a560:	320d883a 	add	r6,r6,r8
   8a564:	100f883a 	mov	r7,r2
   8a568:	3011883a 	mov	r8,r6
   8a56c:	0007883a 	mov	r3,zero
   8a570:	00840034 	movhi	r2,4096
   8a574:	10bfffc4 	addi	r2,r2,-1
   8a578:	123fe52e 	bgeu	r2,r8,8a510 <__pack_d+0x258>
   8a57c:	00c00044 	movi	r3,1
   8a580:	003fe306 	br	8a510 <__pack_d+0x258>
   8a584:	0009883a 	mov	r4,zero
   8a588:	0013883a 	mov	r9,zero
   8a58c:	000b883a 	mov	r5,zero
   8a590:	003fe406 	br	8a524 <__pack_d+0x26c>
   8a594:	4a47883a 	add	r3,r9,r9
   8a598:	008007c4 	movi	r2,31
   8a59c:	1105c83a 	sub	r2,r2,r4
   8a5a0:	1886983a 	sll	r3,r3,r2
   8a5a4:	4118d83a 	srl	r12,r8,r4
   8a5a8:	491ad83a 	srl	r13,r9,r4
   8a5ac:	1b18b03a 	or	r12,r3,r12
   8a5b0:	003fb506 	br	8a488 <__pack_d+0x1d0>
   8a5b4:	2806d07a 	srli	r3,r5,1
   8a5b8:	008007c4 	movi	r2,31
   8a5bc:	1105c83a 	sub	r2,r2,r4
   8a5c0:	1896d83a 	srl	r11,r3,r2
   8a5c4:	2914983a 	sll	r10,r5,r4
   8a5c8:	003fb506 	br	8a4a0 <__pack_d+0x1e8>

0008a5cc <__unpack_d>:
   8a5cc:	20c00117 	ldw	r3,4(r4)
   8a5d0:	22400017 	ldw	r9,0(r4)
   8a5d4:	00800434 	movhi	r2,16
   8a5d8:	10bfffc4 	addi	r2,r2,-1
   8a5dc:	1808d53a 	srli	r4,r3,20
   8a5e0:	180cd7fa 	srli	r6,r3,31
   8a5e4:	1894703a 	and	r10,r3,r2
   8a5e8:	2201ffcc 	andi	r8,r4,2047
   8a5ec:	281b883a 	mov	r13,r5
   8a5f0:	4817883a 	mov	r11,r9
   8a5f4:	29800115 	stw	r6,4(r5)
   8a5f8:	5019883a 	mov	r12,r10
   8a5fc:	40001e1e 	bne	r8,zero,8a678 <__unpack_d+0xac>
   8a600:	4a84b03a 	or	r2,r9,r10
   8a604:	10001926 	beq	r2,zero,8a66c <__unpack_d+0xa0>
   8a608:	4804d63a 	srli	r2,r9,24
   8a60c:	500c923a 	slli	r6,r10,8
   8a610:	013f0084 	movi	r4,-1022
   8a614:	00c40034 	movhi	r3,4096
   8a618:	18ffffc4 	addi	r3,r3,-1
   8a61c:	118cb03a 	or	r6,r2,r6
   8a620:	008000c4 	movi	r2,3
   8a624:	480a923a 	slli	r5,r9,8
   8a628:	68800015 	stw	r2,0(r13)
   8a62c:	69000215 	stw	r4,8(r13)
   8a630:	19800b36 	bltu	r3,r6,8a660 <__unpack_d+0x94>
   8a634:	200f883a 	mov	r7,r4
   8a638:	1811883a 	mov	r8,r3
   8a63c:	2945883a 	add	r2,r5,r5
   8a640:	1149803a 	cmpltu	r4,r2,r5
   8a644:	3187883a 	add	r3,r6,r6
   8a648:	20c9883a 	add	r4,r4,r3
   8a64c:	100b883a 	mov	r5,r2
   8a650:	200d883a 	mov	r6,r4
   8a654:	39ffffc4 	addi	r7,r7,-1
   8a658:	413ff82e 	bgeu	r8,r4,8a63c <__unpack_d+0x70>
   8a65c:	69c00215 	stw	r7,8(r13)
   8a660:	69800415 	stw	r6,16(r13)
   8a664:	69400315 	stw	r5,12(r13)
   8a668:	f800283a 	ret
   8a66c:	00800084 	movi	r2,2
   8a670:	28800015 	stw	r2,0(r5)
   8a674:	f800283a 	ret
   8a678:	0081ffc4 	movi	r2,2047
   8a67c:	40800f26 	beq	r8,r2,8a6bc <__unpack_d+0xf0>
   8a680:	480cd63a 	srli	r6,r9,24
   8a684:	5006923a 	slli	r3,r10,8
   8a688:	4804923a 	slli	r2,r9,8
   8a68c:	0009883a 	mov	r4,zero
   8a690:	30c6b03a 	or	r3,r6,r3
   8a694:	01440034 	movhi	r5,4096
   8a698:	110cb03a 	or	r6,r2,r4
   8a69c:	423f0044 	addi	r8,r8,-1023
   8a6a0:	194eb03a 	or	r7,r3,r5
   8a6a4:	008000c4 	movi	r2,3
   8a6a8:	69c00415 	stw	r7,16(r13)
   8a6ac:	6a000215 	stw	r8,8(r13)
   8a6b0:	68800015 	stw	r2,0(r13)
   8a6b4:	69800315 	stw	r6,12(r13)
   8a6b8:	f800283a 	ret
   8a6bc:	4a84b03a 	or	r2,r9,r10
   8a6c0:	1000031e 	bne	r2,zero,8a6d0 <__unpack_d+0x104>
   8a6c4:	00800104 	movi	r2,4
   8a6c8:	28800015 	stw	r2,0(r5)
   8a6cc:	f800283a 	ret
   8a6d0:	0009883a 	mov	r4,zero
   8a6d4:	01400234 	movhi	r5,8
   8a6d8:	4904703a 	and	r2,r9,r4
   8a6dc:	5146703a 	and	r3,r10,r5
   8a6e0:	10c4b03a 	or	r2,r2,r3
   8a6e4:	10000526 	beq	r2,zero,8a6fc <__unpack_d+0x130>
   8a6e8:	00800044 	movi	r2,1
   8a6ec:	68800015 	stw	r2,0(r13)
   8a6f0:	6b000415 	stw	r12,16(r13)
   8a6f4:	6ac00315 	stw	r11,12(r13)
   8a6f8:	f800283a 	ret
   8a6fc:	68000015 	stw	zero,0(r13)
   8a700:	003ffb06 	br	8a6f0 <__unpack_d+0x124>

0008a704 <__fpcmp_parts_d>:
   8a704:	21800017 	ldw	r6,0(r4)
   8a708:	00c00044 	movi	r3,1
   8a70c:	19800a2e 	bgeu	r3,r6,8a738 <__fpcmp_parts_d+0x34>
   8a710:	28800017 	ldw	r2,0(r5)
   8a714:	1880082e 	bgeu	r3,r2,8a738 <__fpcmp_parts_d+0x34>
   8a718:	00c00104 	movi	r3,4
   8a71c:	30c02626 	beq	r6,r3,8a7b8 <__fpcmp_parts_d+0xb4>
   8a720:	10c02226 	beq	r2,r3,8a7ac <__fpcmp_parts_d+0xa8>
   8a724:	00c00084 	movi	r3,2
   8a728:	30c00526 	beq	r6,r3,8a740 <__fpcmp_parts_d+0x3c>
   8a72c:	10c0071e 	bne	r2,r3,8a74c <__fpcmp_parts_d+0x48>
   8a730:	20800117 	ldw	r2,4(r4)
   8a734:	1000091e 	bne	r2,zero,8a75c <__fpcmp_parts_d+0x58>
   8a738:	00800044 	movi	r2,1
   8a73c:	f800283a 	ret
   8a740:	10c01a1e 	bne	r2,r3,8a7ac <__fpcmp_parts_d+0xa8>
   8a744:	0005883a 	mov	r2,zero
   8a748:	f800283a 	ret
   8a74c:	22000117 	ldw	r8,4(r4)
   8a750:	28800117 	ldw	r2,4(r5)
   8a754:	40800326 	beq	r8,r2,8a764 <__fpcmp_parts_d+0x60>
   8a758:	403ff726 	beq	r8,zero,8a738 <__fpcmp_parts_d+0x34>
   8a75c:	00bfffc4 	movi	r2,-1
   8a760:	f800283a 	ret
   8a764:	20c00217 	ldw	r3,8(r4)
   8a768:	28800217 	ldw	r2,8(r5)
   8a76c:	10fffa16 	blt	r2,r3,8a758 <__fpcmp_parts_d+0x54>
   8a770:	18800916 	blt	r3,r2,8a798 <__fpcmp_parts_d+0x94>
   8a774:	21c00417 	ldw	r7,16(r4)
   8a778:	28c00417 	ldw	r3,16(r5)
   8a77c:	21800317 	ldw	r6,12(r4)
   8a780:	28800317 	ldw	r2,12(r5)
   8a784:	19fff436 	bltu	r3,r7,8a758 <__fpcmp_parts_d+0x54>
   8a788:	38c00526 	beq	r7,r3,8a7a0 <__fpcmp_parts_d+0x9c>
   8a78c:	38c00236 	bltu	r7,r3,8a798 <__fpcmp_parts_d+0x94>
   8a790:	19ffec1e 	bne	r3,r7,8a744 <__fpcmp_parts_d+0x40>
   8a794:	30bfeb2e 	bgeu	r6,r2,8a744 <__fpcmp_parts_d+0x40>
   8a798:	403fe71e 	bne	r8,zero,8a738 <__fpcmp_parts_d+0x34>
   8a79c:	003fef06 	br	8a75c <__fpcmp_parts_d+0x58>
   8a7a0:	11bffa2e 	bgeu	r2,r6,8a78c <__fpcmp_parts_d+0x88>
   8a7a4:	403fe426 	beq	r8,zero,8a738 <__fpcmp_parts_d+0x34>
   8a7a8:	003fec06 	br	8a75c <__fpcmp_parts_d+0x58>
   8a7ac:	28800117 	ldw	r2,4(r5)
   8a7b0:	103fe11e 	bne	r2,zero,8a738 <__fpcmp_parts_d+0x34>
   8a7b4:	003fe906 	br	8a75c <__fpcmp_parts_d+0x58>
   8a7b8:	11bfdd1e 	bne	r2,r6,8a730 <__fpcmp_parts_d+0x2c>
   8a7bc:	28c00117 	ldw	r3,4(r5)
   8a7c0:	20800117 	ldw	r2,4(r4)
   8a7c4:	1885c83a 	sub	r2,r3,r2
   8a7c8:	f800283a 	ret

0008a7cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8a7cc:	defff804 	addi	sp,sp,-32
   8a7d0:	dfc00715 	stw	ra,28(sp)
   8a7d4:	df000615 	stw	fp,24(sp)
   8a7d8:	df000604 	addi	fp,sp,24
   8a7dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8a7e0:	e0bffc17 	ldw	r2,-16(fp)
   8a7e4:	1004803a 	cmplt	r2,r2,zero
   8a7e8:	1000081e 	bne	r2,zero,8a80c <close+0x40>
   8a7ec:	e0bffc17 	ldw	r2,-16(fp)
   8a7f0:	10800324 	muli	r2,r2,12
   8a7f4:	1007883a 	mov	r3,r2
   8a7f8:	00800274 	movhi	r2,9
   8a7fc:	10b84504 	addi	r2,r2,-7916
   8a800:	1887883a 	add	r3,r3,r2
   8a804:	e0ffff15 	stw	r3,-4(fp)
   8a808:	00000106 	br	8a810 <close+0x44>
   8a80c:	e03fff15 	stw	zero,-4(fp)
   8a810:	e0bfff17 	ldw	r2,-4(fp)
   8a814:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8a818:	e0bffb17 	ldw	r2,-20(fp)
   8a81c:	1005003a 	cmpeq	r2,r2,zero
   8a820:	10001d1e 	bne	r2,zero,8a898 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8a824:	e0bffb17 	ldw	r2,-20(fp)
   8a828:	10800017 	ldw	r2,0(r2)
   8a82c:	10800417 	ldw	r2,16(r2)
   8a830:	1005003a 	cmpeq	r2,r2,zero
   8a834:	1000071e 	bne	r2,zero,8a854 <close+0x88>
   8a838:	e0bffb17 	ldw	r2,-20(fp)
   8a83c:	10800017 	ldw	r2,0(r2)
   8a840:	10800417 	ldw	r2,16(r2)
   8a844:	e13ffb17 	ldw	r4,-20(fp)
   8a848:	103ee83a 	callr	r2
   8a84c:	e0bffe15 	stw	r2,-8(fp)
   8a850:	00000106 	br	8a858 <close+0x8c>
   8a854:	e03ffe15 	stw	zero,-8(fp)
   8a858:	e0bffe17 	ldw	r2,-8(fp)
   8a85c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8a860:	e13ffc17 	ldw	r4,-16(fp)
   8a864:	008b1d00 	call	8b1d0 <alt_release_fd>
    if (rval < 0)
   8a868:	e0bffa17 	ldw	r2,-24(fp)
   8a86c:	1004403a 	cmpge	r2,r2,zero
   8a870:	1000071e 	bne	r2,zero,8a890 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   8a874:	008a8c80 	call	8a8c8 <alt_get_errno>
   8a878:	e0fffa17 	ldw	r3,-24(fp)
   8a87c:	00c7c83a 	sub	r3,zero,r3
   8a880:	10c00015 	stw	r3,0(r2)
      return -1;
   8a884:	00bfffc4 	movi	r2,-1
   8a888:	e0bffd15 	stw	r2,-12(fp)
   8a88c:	00000806 	br	8a8b0 <close+0xe4>
    }
    return 0;
   8a890:	e03ffd15 	stw	zero,-12(fp)
   8a894:	00000606 	br	8a8b0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a898:	008a8c80 	call	8a8c8 <alt_get_errno>
   8a89c:	1007883a 	mov	r3,r2
   8a8a0:	00801444 	movi	r2,81
   8a8a4:	18800015 	stw	r2,0(r3)
    return -1;
   8a8a8:	00bfffc4 	movi	r2,-1
   8a8ac:	e0bffd15 	stw	r2,-12(fp)
   8a8b0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8a8b4:	e037883a 	mov	sp,fp
   8a8b8:	dfc00117 	ldw	ra,4(sp)
   8a8bc:	df000017 	ldw	fp,0(sp)
   8a8c0:	dec00204 	addi	sp,sp,8
   8a8c4:	f800283a 	ret

0008a8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a8c8:	defffd04 	addi	sp,sp,-12
   8a8cc:	dfc00215 	stw	ra,8(sp)
   8a8d0:	df000115 	stw	fp,4(sp)
   8a8d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a8d8:	00800274 	movhi	r2,9
   8a8dc:	10bcc804 	addi	r2,r2,-3296
   8a8e0:	10800017 	ldw	r2,0(r2)
   8a8e4:	1005003a 	cmpeq	r2,r2,zero
   8a8e8:	1000061e 	bne	r2,zero,8a904 <alt_get_errno+0x3c>
   8a8ec:	00800274 	movhi	r2,9
   8a8f0:	10bcc804 	addi	r2,r2,-3296
   8a8f4:	10800017 	ldw	r2,0(r2)
   8a8f8:	103ee83a 	callr	r2
   8a8fc:	e0bfff15 	stw	r2,-4(fp)
   8a900:	00000306 	br	8a910 <alt_get_errno+0x48>
   8a904:	00800274 	movhi	r2,9
   8a908:	10836a04 	addi	r2,r2,3496
   8a90c:	e0bfff15 	stw	r2,-4(fp)
   8a910:	e0bfff17 	ldw	r2,-4(fp)
}
   8a914:	e037883a 	mov	sp,fp
   8a918:	dfc00117 	ldw	ra,4(sp)
   8a91c:	df000017 	ldw	fp,0(sp)
   8a920:	dec00204 	addi	sp,sp,8
   8a924:	f800283a 	ret

0008a928 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8a928:	defffc04 	addi	sp,sp,-16
   8a92c:	df000315 	stw	fp,12(sp)
   8a930:	df000304 	addi	fp,sp,12
   8a934:	e13ffd15 	stw	r4,-12(fp)
   8a938:	e17ffe15 	stw	r5,-8(fp)
   8a93c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8a940:	e0bfff17 	ldw	r2,-4(fp)
}
   8a944:	e037883a 	mov	sp,fp
   8a948:	df000017 	ldw	fp,0(sp)
   8a94c:	dec00104 	addi	sp,sp,4
   8a950:	f800283a 	ret

0008a954 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8a954:	defff904 	addi	sp,sp,-28
   8a958:	dfc00615 	stw	ra,24(sp)
   8a95c:	df000515 	stw	fp,20(sp)
   8a960:	df000504 	addi	fp,sp,20
   8a964:	e13ffc15 	stw	r4,-16(fp)
   8a968:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a96c:	e0bffc17 	ldw	r2,-16(fp)
   8a970:	1004803a 	cmplt	r2,r2,zero
   8a974:	1000081e 	bne	r2,zero,8a998 <fstat+0x44>
   8a978:	e0bffc17 	ldw	r2,-16(fp)
   8a97c:	10800324 	muli	r2,r2,12
   8a980:	1007883a 	mov	r3,r2
   8a984:	00800274 	movhi	r2,9
   8a988:	10b84504 	addi	r2,r2,-7916
   8a98c:	1887883a 	add	r3,r3,r2
   8a990:	e0ffff15 	stw	r3,-4(fp)
   8a994:	00000106 	br	8a99c <fstat+0x48>
   8a998:	e03fff15 	stw	zero,-4(fp)
   8a99c:	e0bfff17 	ldw	r2,-4(fp)
   8a9a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a9a4:	e0bffb17 	ldw	r2,-20(fp)
   8a9a8:	1005003a 	cmpeq	r2,r2,zero
   8a9ac:	1000121e 	bne	r2,zero,8a9f8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8a9b0:	e0bffb17 	ldw	r2,-20(fp)
   8a9b4:	10800017 	ldw	r2,0(r2)
   8a9b8:	10800817 	ldw	r2,32(r2)
   8a9bc:	1005003a 	cmpeq	r2,r2,zero
   8a9c0:	1000081e 	bne	r2,zero,8a9e4 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   8a9c4:	e0bffb17 	ldw	r2,-20(fp)
   8a9c8:	10800017 	ldw	r2,0(r2)
   8a9cc:	10800817 	ldw	r2,32(r2)
   8a9d0:	e13ffb17 	ldw	r4,-20(fp)
   8a9d4:	e17ffd17 	ldw	r5,-12(fp)
   8a9d8:	103ee83a 	callr	r2
   8a9dc:	e0bffe15 	stw	r2,-8(fp)
   8a9e0:	00000b06 	br	8aa10 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8a9e4:	e0fffd17 	ldw	r3,-12(fp)
   8a9e8:	00880004 	movi	r2,8192
   8a9ec:	18800115 	stw	r2,4(r3)
      return 0;
   8a9f0:	e03ffe15 	stw	zero,-8(fp)
   8a9f4:	00000606 	br	8aa10 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a9f8:	008aa280 	call	8aa28 <alt_get_errno>
   8a9fc:	1007883a 	mov	r3,r2
   8aa00:	00801444 	movi	r2,81
   8aa04:	18800015 	stw	r2,0(r3)
    return -1;
   8aa08:	00bfffc4 	movi	r2,-1
   8aa0c:	e0bffe15 	stw	r2,-8(fp)
   8aa10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8aa14:	e037883a 	mov	sp,fp
   8aa18:	dfc00117 	ldw	ra,4(sp)
   8aa1c:	df000017 	ldw	fp,0(sp)
   8aa20:	dec00204 	addi	sp,sp,8
   8aa24:	f800283a 	ret

0008aa28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8aa28:	defffd04 	addi	sp,sp,-12
   8aa2c:	dfc00215 	stw	ra,8(sp)
   8aa30:	df000115 	stw	fp,4(sp)
   8aa34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8aa38:	00800274 	movhi	r2,9
   8aa3c:	10bcc804 	addi	r2,r2,-3296
   8aa40:	10800017 	ldw	r2,0(r2)
   8aa44:	1005003a 	cmpeq	r2,r2,zero
   8aa48:	1000061e 	bne	r2,zero,8aa64 <alt_get_errno+0x3c>
   8aa4c:	00800274 	movhi	r2,9
   8aa50:	10bcc804 	addi	r2,r2,-3296
   8aa54:	10800017 	ldw	r2,0(r2)
   8aa58:	103ee83a 	callr	r2
   8aa5c:	e0bfff15 	stw	r2,-4(fp)
   8aa60:	00000306 	br	8aa70 <alt_get_errno+0x48>
   8aa64:	00800274 	movhi	r2,9
   8aa68:	10836a04 	addi	r2,r2,3496
   8aa6c:	e0bfff15 	stw	r2,-4(fp)
   8aa70:	e0bfff17 	ldw	r2,-4(fp)
}
   8aa74:	e037883a 	mov	sp,fp
   8aa78:	dfc00117 	ldw	ra,4(sp)
   8aa7c:	df000017 	ldw	fp,0(sp)
   8aa80:	dec00204 	addi	sp,sp,8
   8aa84:	f800283a 	ret

0008aa88 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8aa88:	deffef04 	addi	sp,sp,-68
   8aa8c:	df001015 	stw	fp,64(sp)
   8aa90:	df001004 	addi	fp,sp,64
   8aa94:	e13ffc15 	stw	r4,-16(fp)
   8aa98:	e17ffd15 	stw	r5,-12(fp)
   8aa9c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8aaa0:	00bffa84 	movi	r2,-22
   8aaa4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8aaa8:	e0bffc17 	ldw	r2,-16(fp)
   8aaac:	10800828 	cmpgeui	r2,r2,32
   8aab0:	1000601e 	bne	r2,zero,8ac34 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aab4:	0005303a 	rdctl	r2,status
   8aab8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aabc:	e0fff917 	ldw	r3,-28(fp)
   8aac0:	00bfff84 	movi	r2,-2
   8aac4:	1884703a 	and	r2,r3,r2
   8aac8:	1001703a 	wrctl	status,r2
  
  return context;
   8aacc:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8aad0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8aad4:	e0bffc17 	ldw	r2,-16(fp)
   8aad8:	00c00274 	movhi	r3,9
   8aadc:	18c37b04 	addi	r3,r3,3564
   8aae0:	100490fa 	slli	r2,r2,3
   8aae4:	10c7883a 	add	r3,r2,r3
   8aae8:	e0bffe17 	ldw	r2,-8(fp)
   8aaec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8aaf0:	e0bffc17 	ldw	r2,-16(fp)
   8aaf4:	00c00274 	movhi	r3,9
   8aaf8:	18c37b04 	addi	r3,r3,3564
   8aafc:	100490fa 	slli	r2,r2,3
   8ab00:	10c5883a 	add	r2,r2,r3
   8ab04:	10c00104 	addi	r3,r2,4
   8ab08:	e0bffd17 	ldw	r2,-12(fp)
   8ab0c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8ab10:	e0bffe17 	ldw	r2,-8(fp)
   8ab14:	1005003a 	cmpeq	r2,r2,zero
   8ab18:	1000201e 	bne	r2,zero,8ab9c <alt_irq_register+0x114>
   8ab1c:	e0bffc17 	ldw	r2,-16(fp)
   8ab20:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ab24:	0005303a 	rdctl	r2,status
   8ab28:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ab2c:	e0fff617 	ldw	r3,-40(fp)
   8ab30:	00bfff84 	movi	r2,-2
   8ab34:	1884703a 	and	r2,r3,r2
   8ab38:	1001703a 	wrctl	status,r2
  
  return context;
   8ab3c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8ab40:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8ab44:	e0fff717 	ldw	r3,-36(fp)
   8ab48:	00800044 	movi	r2,1
   8ab4c:	10c4983a 	sll	r2,r2,r3
   8ab50:	1007883a 	mov	r3,r2
   8ab54:	00800274 	movhi	r2,9
   8ab58:	10836b04 	addi	r2,r2,3500
   8ab5c:	10800017 	ldw	r2,0(r2)
   8ab60:	1886b03a 	or	r3,r3,r2
   8ab64:	00800274 	movhi	r2,9
   8ab68:	10836b04 	addi	r2,r2,3500
   8ab6c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ab70:	00800274 	movhi	r2,9
   8ab74:	10836b04 	addi	r2,r2,3500
   8ab78:	10800017 	ldw	r2,0(r2)
   8ab7c:	100170fa 	wrctl	ienable,r2
   8ab80:	e0bff817 	ldw	r2,-32(fp)
   8ab84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ab88:	e0bff517 	ldw	r2,-44(fp)
   8ab8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ab90:	0005883a 	mov	r2,zero
   8ab94:	e0bfff15 	stw	r2,-4(fp)
   8ab98:	00002006 	br	8ac1c <alt_irq_register+0x194>
   8ab9c:	e0bffc17 	ldw	r2,-16(fp)
   8aba0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aba4:	0005303a 	rdctl	r2,status
   8aba8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8abac:	e0fff217 	ldw	r3,-56(fp)
   8abb0:	00bfff84 	movi	r2,-2
   8abb4:	1884703a 	and	r2,r3,r2
   8abb8:	1001703a 	wrctl	status,r2
  
  return context;
   8abbc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8abc0:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8abc4:	e0fff317 	ldw	r3,-52(fp)
   8abc8:	00800044 	movi	r2,1
   8abcc:	10c4983a 	sll	r2,r2,r3
   8abd0:	0084303a 	nor	r2,zero,r2
   8abd4:	1007883a 	mov	r3,r2
   8abd8:	00800274 	movhi	r2,9
   8abdc:	10836b04 	addi	r2,r2,3500
   8abe0:	10800017 	ldw	r2,0(r2)
   8abe4:	1886703a 	and	r3,r3,r2
   8abe8:	00800274 	movhi	r2,9
   8abec:	10836b04 	addi	r2,r2,3500
   8abf0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8abf4:	00800274 	movhi	r2,9
   8abf8:	10836b04 	addi	r2,r2,3500
   8abfc:	10800017 	ldw	r2,0(r2)
   8ac00:	100170fa 	wrctl	ienable,r2
   8ac04:	e0bff417 	ldw	r2,-48(fp)
   8ac08:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ac0c:	e0bff117 	ldw	r2,-60(fp)
   8ac10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ac14:	0005883a 	mov	r2,zero
   8ac18:	e0bfff15 	stw	r2,-4(fp)
   8ac1c:	e0bfff17 	ldw	r2,-4(fp)
   8ac20:	e0bffb15 	stw	r2,-20(fp)
   8ac24:	e0bffa17 	ldw	r2,-24(fp)
   8ac28:	e0bff015 	stw	r2,-64(fp)
   8ac2c:	e0bff017 	ldw	r2,-64(fp)
   8ac30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8ac34:	e0bffb17 	ldw	r2,-20(fp)
}
   8ac38:	e037883a 	mov	sp,fp
   8ac3c:	df000017 	ldw	fp,0(sp)
   8ac40:	dec00104 	addi	sp,sp,4
   8ac44:	f800283a 	ret

0008ac48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ac48:	deffeb04 	addi	sp,sp,-84
   8ac4c:	dfc01415 	stw	ra,80(sp)
   8ac50:	df001315 	stw	fp,76(sp)
   8ac54:	df001304 	addi	fp,sp,76
   8ac58:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ac5c:	e0bffd17 	ldw	r2,-12(fp)
   8ac60:	1004803a 	cmplt	r2,r2,zero
   8ac64:	1000081e 	bne	r2,zero,8ac88 <isatty+0x40>
   8ac68:	e0bffd17 	ldw	r2,-12(fp)
   8ac6c:	10800324 	muli	r2,r2,12
   8ac70:	1007883a 	mov	r3,r2
   8ac74:	00800274 	movhi	r2,9
   8ac78:	10b84504 	addi	r2,r2,-7916
   8ac7c:	1887883a 	add	r3,r3,r2
   8ac80:	e0ffff15 	stw	r3,-4(fp)
   8ac84:	00000106 	br	8ac8c <isatty+0x44>
   8ac88:	e03fff15 	stw	zero,-4(fp)
   8ac8c:	e0bfff17 	ldw	r2,-4(fp)
   8ac90:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8ac94:	e0bfed17 	ldw	r2,-76(fp)
   8ac98:	1005003a 	cmpeq	r2,r2,zero
   8ac9c:	10000f1e 	bne	r2,zero,8acdc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8aca0:	e0bfed17 	ldw	r2,-76(fp)
   8aca4:	10800017 	ldw	r2,0(r2)
   8aca8:	10800817 	ldw	r2,32(r2)
   8acac:	1004c03a 	cmpne	r2,r2,zero
   8acb0:	1000031e 	bne	r2,zero,8acc0 <isatty+0x78>
    {
      return 1;
   8acb4:	00800044 	movi	r2,1
   8acb8:	e0bffe15 	stw	r2,-8(fp)
   8acbc:	00000c06 	br	8acf0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8acc0:	e17fee04 	addi	r5,fp,-72
   8acc4:	e13ffd17 	ldw	r4,-12(fp)
   8acc8:	008a9540 	call	8a954 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8accc:	e0bfef17 	ldw	r2,-68(fp)
   8acd0:	10880020 	cmpeqi	r2,r2,8192
   8acd4:	e0bffe15 	stw	r2,-8(fp)
   8acd8:	00000506 	br	8acf0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8acdc:	008ad080 	call	8ad08 <alt_get_errno>
   8ace0:	1007883a 	mov	r3,r2
   8ace4:	00801444 	movi	r2,81
   8ace8:	18800015 	stw	r2,0(r3)
    return 0;
   8acec:	e03ffe15 	stw	zero,-8(fp)
   8acf0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8acf4:	e037883a 	mov	sp,fp
   8acf8:	dfc00117 	ldw	ra,4(sp)
   8acfc:	df000017 	ldw	fp,0(sp)
   8ad00:	dec00204 	addi	sp,sp,8
   8ad04:	f800283a 	ret

0008ad08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ad08:	defffd04 	addi	sp,sp,-12
   8ad0c:	dfc00215 	stw	ra,8(sp)
   8ad10:	df000115 	stw	fp,4(sp)
   8ad14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ad18:	00800274 	movhi	r2,9
   8ad1c:	10bcc804 	addi	r2,r2,-3296
   8ad20:	10800017 	ldw	r2,0(r2)
   8ad24:	1005003a 	cmpeq	r2,r2,zero
   8ad28:	1000061e 	bne	r2,zero,8ad44 <alt_get_errno+0x3c>
   8ad2c:	00800274 	movhi	r2,9
   8ad30:	10bcc804 	addi	r2,r2,-3296
   8ad34:	10800017 	ldw	r2,0(r2)
   8ad38:	103ee83a 	callr	r2
   8ad3c:	e0bfff15 	stw	r2,-4(fp)
   8ad40:	00000306 	br	8ad50 <alt_get_errno+0x48>
   8ad44:	00800274 	movhi	r2,9
   8ad48:	10836a04 	addi	r2,r2,3496
   8ad4c:	e0bfff15 	stw	r2,-4(fp)
   8ad50:	e0bfff17 	ldw	r2,-4(fp)
}
   8ad54:	e037883a 	mov	sp,fp
   8ad58:	dfc00117 	ldw	ra,4(sp)
   8ad5c:	df000017 	ldw	fp,0(sp)
   8ad60:	dec00204 	addi	sp,sp,8
   8ad64:	f800283a 	ret

0008ad68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8ad68:	defffe04 	addi	sp,sp,-8
   8ad6c:	dfc00115 	stw	ra,4(sp)
   8ad70:	df000015 	stw	fp,0(sp)
   8ad74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8ad78:	01000274 	movhi	r4,9
   8ad7c:	213ccd04 	addi	r4,r4,-3276
   8ad80:	01400274 	movhi	r5,9
   8ad84:	29763604 	addi	r5,r5,-10024
   8ad88:	01800274 	movhi	r6,9
   8ad8c:	31bccd04 	addi	r6,r6,-3276
   8ad90:	008ade80 	call	8ade8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8ad94:	01000234 	movhi	r4,8
   8ad98:	21000804 	addi	r4,r4,32
   8ad9c:	01400234 	movhi	r5,8
   8ada0:	29400804 	addi	r5,r5,32
   8ada4:	01800234 	movhi	r6,8
   8ada8:	31806d04 	addi	r6,r6,436
   8adac:	008ade80 	call	8ade8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8adb0:	01000274 	movhi	r4,9
   8adb4:	2134dc04 	addi	r4,r4,-11408
   8adb8:	01400274 	movhi	r5,9
   8adbc:	2974dc04 	addi	r5,r5,-11408
   8adc0:	01800274 	movhi	r6,9
   8adc4:	31b63604 	addi	r6,r6,-10024
   8adc8:	008ade80 	call	8ade8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8adcc:	008c11c0 	call	8c11c <alt_dcache_flush_all>
  alt_icache_flush_all();
   8add0:	008c33c0 	call	8c33c <alt_icache_flush_all>
}
   8add4:	e037883a 	mov	sp,fp
   8add8:	dfc00117 	ldw	ra,4(sp)
   8addc:	df000017 	ldw	fp,0(sp)
   8ade0:	dec00204 	addi	sp,sp,8
   8ade4:	f800283a 	ret

0008ade8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8ade8:	defffc04 	addi	sp,sp,-16
   8adec:	df000315 	stw	fp,12(sp)
   8adf0:	df000304 	addi	fp,sp,12
   8adf4:	e13ffd15 	stw	r4,-12(fp)
   8adf8:	e17ffe15 	stw	r5,-8(fp)
   8adfc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8ae00:	e0fffe17 	ldw	r3,-8(fp)
   8ae04:	e0bffd17 	ldw	r2,-12(fp)
   8ae08:	18800e26 	beq	r3,r2,8ae44 <alt_load_section+0x5c>
  {
    while( to != end )
   8ae0c:	00000a06 	br	8ae38 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8ae10:	e0bffd17 	ldw	r2,-12(fp)
   8ae14:	10c00017 	ldw	r3,0(r2)
   8ae18:	e0bffe17 	ldw	r2,-8(fp)
   8ae1c:	10c00015 	stw	r3,0(r2)
   8ae20:	e0bffe17 	ldw	r2,-8(fp)
   8ae24:	10800104 	addi	r2,r2,4
   8ae28:	e0bffe15 	stw	r2,-8(fp)
   8ae2c:	e0bffd17 	ldw	r2,-12(fp)
   8ae30:	10800104 	addi	r2,r2,4
   8ae34:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8ae38:	e0fffe17 	ldw	r3,-8(fp)
   8ae3c:	e0bfff17 	ldw	r2,-4(fp)
   8ae40:	18bff31e 	bne	r3,r2,8ae10 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8ae44:	e037883a 	mov	sp,fp
   8ae48:	df000017 	ldw	fp,0(sp)
   8ae4c:	dec00104 	addi	sp,sp,4
   8ae50:	f800283a 	ret

0008ae54 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ae54:	defff804 	addi	sp,sp,-32
   8ae58:	dfc00715 	stw	ra,28(sp)
   8ae5c:	df000615 	stw	fp,24(sp)
   8ae60:	df000604 	addi	fp,sp,24
   8ae64:	e13ffc15 	stw	r4,-16(fp)
   8ae68:	e17ffd15 	stw	r5,-12(fp)
   8ae6c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ae70:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ae74:	e0bffc17 	ldw	r2,-16(fp)
   8ae78:	1004803a 	cmplt	r2,r2,zero
   8ae7c:	1000081e 	bne	r2,zero,8aea0 <lseek+0x4c>
   8ae80:	e0bffc17 	ldw	r2,-16(fp)
   8ae84:	10800324 	muli	r2,r2,12
   8ae88:	1007883a 	mov	r3,r2
   8ae8c:	00800274 	movhi	r2,9
   8ae90:	10b84504 	addi	r2,r2,-7916
   8ae94:	1887883a 	add	r3,r3,r2
   8ae98:	e0ffff15 	stw	r3,-4(fp)
   8ae9c:	00000106 	br	8aea4 <lseek+0x50>
   8aea0:	e03fff15 	stw	zero,-4(fp)
   8aea4:	e0bfff17 	ldw	r2,-4(fp)
   8aea8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8aeac:	e0bffb17 	ldw	r2,-20(fp)
   8aeb0:	1005003a 	cmpeq	r2,r2,zero
   8aeb4:	1000111e 	bne	r2,zero,8aefc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8aeb8:	e0bffb17 	ldw	r2,-20(fp)
   8aebc:	10800017 	ldw	r2,0(r2)
   8aec0:	10800717 	ldw	r2,28(r2)
   8aec4:	1005003a 	cmpeq	r2,r2,zero
   8aec8:	1000091e 	bne	r2,zero,8aef0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8aecc:	e0bffb17 	ldw	r2,-20(fp)
   8aed0:	10800017 	ldw	r2,0(r2)
   8aed4:	10800717 	ldw	r2,28(r2)
   8aed8:	e13ffb17 	ldw	r4,-20(fp)
   8aedc:	e17ffd17 	ldw	r5,-12(fp)
   8aee0:	e1bffe17 	ldw	r6,-8(fp)
   8aee4:	103ee83a 	callr	r2
   8aee8:	e0bffa15 	stw	r2,-24(fp)
   8aeec:	00000506 	br	8af04 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8aef0:	00bfde84 	movi	r2,-134
   8aef4:	e0bffa15 	stw	r2,-24(fp)
   8aef8:	00000206 	br	8af04 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8aefc:	00bfebc4 	movi	r2,-81
   8af00:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8af04:	e0bffa17 	ldw	r2,-24(fp)
   8af08:	1004403a 	cmpge	r2,r2,zero
   8af0c:	1000071e 	bne	r2,zero,8af2c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   8af10:	008af440 	call	8af44 <alt_get_errno>
   8af14:	1007883a 	mov	r3,r2
   8af18:	e0bffa17 	ldw	r2,-24(fp)
   8af1c:	0085c83a 	sub	r2,zero,r2
   8af20:	18800015 	stw	r2,0(r3)
    rc = -1;
   8af24:	00bfffc4 	movi	r2,-1
   8af28:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8af2c:	e0bffa17 	ldw	r2,-24(fp)
}
   8af30:	e037883a 	mov	sp,fp
   8af34:	dfc00117 	ldw	ra,4(sp)
   8af38:	df000017 	ldw	fp,0(sp)
   8af3c:	dec00204 	addi	sp,sp,8
   8af40:	f800283a 	ret

0008af44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8af44:	defffd04 	addi	sp,sp,-12
   8af48:	dfc00215 	stw	ra,8(sp)
   8af4c:	df000115 	stw	fp,4(sp)
   8af50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8af54:	00800274 	movhi	r2,9
   8af58:	10bcc804 	addi	r2,r2,-3296
   8af5c:	10800017 	ldw	r2,0(r2)
   8af60:	1005003a 	cmpeq	r2,r2,zero
   8af64:	1000061e 	bne	r2,zero,8af80 <alt_get_errno+0x3c>
   8af68:	00800274 	movhi	r2,9
   8af6c:	10bcc804 	addi	r2,r2,-3296
   8af70:	10800017 	ldw	r2,0(r2)
   8af74:	103ee83a 	callr	r2
   8af78:	e0bfff15 	stw	r2,-4(fp)
   8af7c:	00000306 	br	8af8c <alt_get_errno+0x48>
   8af80:	00800274 	movhi	r2,9
   8af84:	10836a04 	addi	r2,r2,3496
   8af88:	e0bfff15 	stw	r2,-4(fp)
   8af8c:	e0bfff17 	ldw	r2,-4(fp)
}
   8af90:	e037883a 	mov	sp,fp
   8af94:	dfc00117 	ldw	ra,4(sp)
   8af98:	df000017 	ldw	fp,0(sp)
   8af9c:	dec00204 	addi	sp,sp,8
   8afa0:	f800283a 	ret

0008afa4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8afa4:	defffd04 	addi	sp,sp,-12
   8afa8:	dfc00215 	stw	ra,8(sp)
   8afac:	df000115 	stw	fp,4(sp)
   8afb0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8afb4:	0009883a 	mov	r4,zero
   8afb8:	008b46c0 	call	8b46c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8afbc:	008b4a00 	call	8b4a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8afc0:	01000274 	movhi	r4,9
   8afc4:	21362c04 	addi	r4,r4,-10064
   8afc8:	01400274 	movhi	r5,9
   8afcc:	29762c04 	addi	r5,r5,-10064
   8afd0:	01800274 	movhi	r6,9
   8afd4:	31b62c04 	addi	r6,r6,-10064
   8afd8:	008c6fc0 	call	8c6fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8afdc:	008c2740 	call	8c274 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8afe0:	01000274 	movhi	r4,9
   8afe4:	2130b604 	addi	r4,r4,-15656
   8afe8:	008cef80 	call	8cef8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8afec:	d126af17 	ldw	r4,-25924(gp)
   8aff0:	d166b017 	ldw	r5,-25920(gp)
   8aff4:	d1a6b117 	ldw	r6,-25916(gp)
   8aff8:	0080e200 	call	80e20 <main>
   8affc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b000:	01000044 	movi	r4,1
   8b004:	008a7cc0 	call	8a7cc <close>
  exit (result);
   8b008:	e13fff17 	ldw	r4,-4(fp)
   8b00c:	008cf0c0 	call	8cf0c <exit>

0008b010 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8b010:	defffe04 	addi	sp,sp,-8
   8b014:	df000115 	stw	fp,4(sp)
   8b018:	df000104 	addi	fp,sp,4
   8b01c:	e13fff15 	stw	r4,-4(fp)
}
   8b020:	e037883a 	mov	sp,fp
   8b024:	df000017 	ldw	fp,0(sp)
   8b028:	dec00104 	addi	sp,sp,4
   8b02c:	f800283a 	ret

0008b030 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b030:	defffe04 	addi	sp,sp,-8
   8b034:	df000115 	stw	fp,4(sp)
   8b038:	df000104 	addi	fp,sp,4
   8b03c:	e13fff15 	stw	r4,-4(fp)
}
   8b040:	e037883a 	mov	sp,fp
   8b044:	df000017 	ldw	fp,0(sp)
   8b048:	dec00104 	addi	sp,sp,4
   8b04c:	f800283a 	ret

0008b050 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b050:	defff704 	addi	sp,sp,-36
   8b054:	dfc00815 	stw	ra,32(sp)
   8b058:	df000715 	stw	fp,28(sp)
   8b05c:	df000704 	addi	fp,sp,28
   8b060:	e13ffb15 	stw	r4,-20(fp)
   8b064:	e17ffc15 	stw	r5,-16(fp)
   8b068:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b06c:	e0bffb17 	ldw	r2,-20(fp)
   8b070:	1004803a 	cmplt	r2,r2,zero
   8b074:	1000081e 	bne	r2,zero,8b098 <read+0x48>
   8b078:	e0bffb17 	ldw	r2,-20(fp)
   8b07c:	10800324 	muli	r2,r2,12
   8b080:	1007883a 	mov	r3,r2
   8b084:	00800274 	movhi	r2,9
   8b088:	10b84504 	addi	r2,r2,-7916
   8b08c:	1887883a 	add	r3,r3,r2
   8b090:	e0ffff15 	stw	r3,-4(fp)
   8b094:	00000106 	br	8b09c <read+0x4c>
   8b098:	e03fff15 	stw	zero,-4(fp)
   8b09c:	e0bfff17 	ldw	r2,-4(fp)
   8b0a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b0a4:	e0bffa17 	ldw	r2,-24(fp)
   8b0a8:	1005003a 	cmpeq	r2,r2,zero
   8b0ac:	1000241e 	bne	r2,zero,8b140 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b0b0:	e0bffa17 	ldw	r2,-24(fp)
   8b0b4:	10800217 	ldw	r2,8(r2)
   8b0b8:	108000cc 	andi	r2,r2,3
   8b0bc:	10800060 	cmpeqi	r2,r2,1
   8b0c0:	10001a1e 	bne	r2,zero,8b12c <read+0xdc>
   8b0c4:	e0bffa17 	ldw	r2,-24(fp)
   8b0c8:	10800017 	ldw	r2,0(r2)
   8b0cc:	10800517 	ldw	r2,20(r2)
   8b0d0:	1005003a 	cmpeq	r2,r2,zero
   8b0d4:	1000151e 	bne	r2,zero,8b12c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b0d8:	e0bffa17 	ldw	r2,-24(fp)
   8b0dc:	10800017 	ldw	r2,0(r2)
   8b0e0:	10800517 	ldw	r2,20(r2)
   8b0e4:	e17ffc17 	ldw	r5,-16(fp)
   8b0e8:	e1bffd17 	ldw	r6,-12(fp)
   8b0ec:	e13ffa17 	ldw	r4,-24(fp)
   8b0f0:	103ee83a 	callr	r2
   8b0f4:	e0bff915 	stw	r2,-28(fp)
   8b0f8:	e0bff917 	ldw	r2,-28(fp)
   8b0fc:	1004403a 	cmpge	r2,r2,zero
   8b100:	1000071e 	bne	r2,zero,8b120 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   8b104:	008b1700 	call	8b170 <alt_get_errno>
   8b108:	e0fff917 	ldw	r3,-28(fp)
   8b10c:	00c7c83a 	sub	r3,zero,r3
   8b110:	10c00015 	stw	r3,0(r2)
          return -1;
   8b114:	00bfffc4 	movi	r2,-1
   8b118:	e0bffe15 	stw	r2,-8(fp)
   8b11c:	00000e06 	br	8b158 <read+0x108>
        }
        return rval;
   8b120:	e0bff917 	ldw	r2,-28(fp)
   8b124:	e0bffe15 	stw	r2,-8(fp)
   8b128:	00000b06 	br	8b158 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b12c:	008b1700 	call	8b170 <alt_get_errno>
   8b130:	1007883a 	mov	r3,r2
   8b134:	00800344 	movi	r2,13
   8b138:	18800015 	stw	r2,0(r3)
   8b13c:	00000406 	br	8b150 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b140:	008b1700 	call	8b170 <alt_get_errno>
   8b144:	1007883a 	mov	r3,r2
   8b148:	00801444 	movi	r2,81
   8b14c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b150:	00bfffc4 	movi	r2,-1
   8b154:	e0bffe15 	stw	r2,-8(fp)
   8b158:	e0bffe17 	ldw	r2,-8(fp)
}
   8b15c:	e037883a 	mov	sp,fp
   8b160:	dfc00117 	ldw	ra,4(sp)
   8b164:	df000017 	ldw	fp,0(sp)
   8b168:	dec00204 	addi	sp,sp,8
   8b16c:	f800283a 	ret

0008b170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b170:	defffd04 	addi	sp,sp,-12
   8b174:	dfc00215 	stw	ra,8(sp)
   8b178:	df000115 	stw	fp,4(sp)
   8b17c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b180:	00800274 	movhi	r2,9
   8b184:	10bcc804 	addi	r2,r2,-3296
   8b188:	10800017 	ldw	r2,0(r2)
   8b18c:	1005003a 	cmpeq	r2,r2,zero
   8b190:	1000061e 	bne	r2,zero,8b1ac <alt_get_errno+0x3c>
   8b194:	00800274 	movhi	r2,9
   8b198:	10bcc804 	addi	r2,r2,-3296
   8b19c:	10800017 	ldw	r2,0(r2)
   8b1a0:	103ee83a 	callr	r2
   8b1a4:	e0bfff15 	stw	r2,-4(fp)
   8b1a8:	00000306 	br	8b1b8 <alt_get_errno+0x48>
   8b1ac:	00800274 	movhi	r2,9
   8b1b0:	10836a04 	addi	r2,r2,3496
   8b1b4:	e0bfff15 	stw	r2,-4(fp)
   8b1b8:	e0bfff17 	ldw	r2,-4(fp)
}
   8b1bc:	e037883a 	mov	sp,fp
   8b1c0:	dfc00117 	ldw	ra,4(sp)
   8b1c4:	df000017 	ldw	fp,0(sp)
   8b1c8:	dec00204 	addi	sp,sp,8
   8b1cc:	f800283a 	ret

0008b1d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b1d0:	defffe04 	addi	sp,sp,-8
   8b1d4:	df000115 	stw	fp,4(sp)
   8b1d8:	df000104 	addi	fp,sp,4
   8b1dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b1e0:	e0bfff17 	ldw	r2,-4(fp)
   8b1e4:	108000d0 	cmplti	r2,r2,3
   8b1e8:	10000d1e 	bne	r2,zero,8b220 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b1ec:	e0bfff17 	ldw	r2,-4(fp)
   8b1f0:	00c00274 	movhi	r3,9
   8b1f4:	18f84504 	addi	r3,r3,-7916
   8b1f8:	10800324 	muli	r2,r2,12
   8b1fc:	10c5883a 	add	r2,r2,r3
   8b200:	10800204 	addi	r2,r2,8
   8b204:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b208:	e0bfff17 	ldw	r2,-4(fp)
   8b20c:	00c00274 	movhi	r3,9
   8b210:	18f84504 	addi	r3,r3,-7916
   8b214:	10800324 	muli	r2,r2,12
   8b218:	10c5883a 	add	r2,r2,r3
   8b21c:	10000015 	stw	zero,0(r2)
  }
}
   8b220:	e037883a 	mov	sp,fp
   8b224:	df000017 	ldw	fp,0(sp)
   8b228:	dec00104 	addi	sp,sp,4
   8b22c:	f800283a 	ret

0008b230 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b230:	defff804 	addi	sp,sp,-32
   8b234:	df000715 	stw	fp,28(sp)
   8b238:	df000704 	addi	fp,sp,28
   8b23c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b240:	0005303a 	rdctl	r2,status
   8b244:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b248:	e0fffb17 	ldw	r3,-20(fp)
   8b24c:	00bfff84 	movi	r2,-2
   8b250:	1884703a 	and	r2,r3,r2
   8b254:	1001703a 	wrctl	status,r2
  
  return context;
   8b258:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b25c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b260:	d0a00d17 	ldw	r2,-32716(gp)
   8b264:	10c000c4 	addi	r3,r2,3
   8b268:	00bfff04 	movi	r2,-4
   8b26c:	1884703a 	and	r2,r3,r2
   8b270:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b274:	d0e00d17 	ldw	r3,-32716(gp)
   8b278:	e0bffe17 	ldw	r2,-8(fp)
   8b27c:	1887883a 	add	r3,r3,r2
   8b280:	00800434 	movhi	r2,16
   8b284:	10800004 	addi	r2,r2,0
   8b288:	10c0072e 	bgeu	r2,r3,8b2a8 <sbrk+0x78>
   8b28c:	e0bffd17 	ldw	r2,-12(fp)
   8b290:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b294:	e0bffa17 	ldw	r2,-24(fp)
   8b298:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b29c:	00bfffc4 	movi	r2,-1
   8b2a0:	e0bfff15 	stw	r2,-4(fp)
   8b2a4:	00000c06 	br	8b2d8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8b2a8:	d0a00d17 	ldw	r2,-32716(gp)
   8b2ac:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8b2b0:	d0e00d17 	ldw	r3,-32716(gp)
   8b2b4:	e0bffe17 	ldw	r2,-8(fp)
   8b2b8:	1885883a 	add	r2,r3,r2
   8b2bc:	d0a00d15 	stw	r2,-32716(gp)
   8b2c0:	e0bffd17 	ldw	r2,-12(fp)
   8b2c4:	e0bff915 	stw	r2,-28(fp)
   8b2c8:	e0bff917 	ldw	r2,-28(fp)
   8b2cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b2d0:	e0bffc17 	ldw	r2,-16(fp)
   8b2d4:	e0bfff15 	stw	r2,-4(fp)
   8b2d8:	e0bfff17 	ldw	r2,-4(fp)
} 
   8b2dc:	e037883a 	mov	sp,fp
   8b2e0:	df000017 	ldw	fp,0(sp)
   8b2e4:	dec00104 	addi	sp,sp,4
   8b2e8:	f800283a 	ret

0008b2ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b2ec:	defff704 	addi	sp,sp,-36
   8b2f0:	dfc00815 	stw	ra,32(sp)
   8b2f4:	df000715 	stw	fp,28(sp)
   8b2f8:	df000704 	addi	fp,sp,28
   8b2fc:	e13ffb15 	stw	r4,-20(fp)
   8b300:	e17ffc15 	stw	r5,-16(fp)
   8b304:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b308:	e0bffb17 	ldw	r2,-20(fp)
   8b30c:	1004803a 	cmplt	r2,r2,zero
   8b310:	1000081e 	bne	r2,zero,8b334 <write+0x48>
   8b314:	e0bffb17 	ldw	r2,-20(fp)
   8b318:	10800324 	muli	r2,r2,12
   8b31c:	1007883a 	mov	r3,r2
   8b320:	00800274 	movhi	r2,9
   8b324:	10b84504 	addi	r2,r2,-7916
   8b328:	1887883a 	add	r3,r3,r2
   8b32c:	e0ffff15 	stw	r3,-4(fp)
   8b330:	00000106 	br	8b338 <write+0x4c>
   8b334:	e03fff15 	stw	zero,-4(fp)
   8b338:	e0bfff17 	ldw	r2,-4(fp)
   8b33c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b340:	e0bffa17 	ldw	r2,-24(fp)
   8b344:	1005003a 	cmpeq	r2,r2,zero
   8b348:	1000241e 	bne	r2,zero,8b3dc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b34c:	e0bffa17 	ldw	r2,-24(fp)
   8b350:	10800217 	ldw	r2,8(r2)
   8b354:	108000cc 	andi	r2,r2,3
   8b358:	1005003a 	cmpeq	r2,r2,zero
   8b35c:	10001a1e 	bne	r2,zero,8b3c8 <write+0xdc>
   8b360:	e0bffa17 	ldw	r2,-24(fp)
   8b364:	10800017 	ldw	r2,0(r2)
   8b368:	10800617 	ldw	r2,24(r2)
   8b36c:	1005003a 	cmpeq	r2,r2,zero
   8b370:	1000151e 	bne	r2,zero,8b3c8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8b374:	e0bffa17 	ldw	r2,-24(fp)
   8b378:	10800017 	ldw	r2,0(r2)
   8b37c:	10800617 	ldw	r2,24(r2)
   8b380:	e17ffc17 	ldw	r5,-16(fp)
   8b384:	e1bffd17 	ldw	r6,-12(fp)
   8b388:	e13ffa17 	ldw	r4,-24(fp)
   8b38c:	103ee83a 	callr	r2
   8b390:	e0bff915 	stw	r2,-28(fp)
   8b394:	e0bff917 	ldw	r2,-28(fp)
   8b398:	1004403a 	cmpge	r2,r2,zero
   8b39c:	1000071e 	bne	r2,zero,8b3bc <write+0xd0>
      {
        ALT_ERRNO = -rval;
   8b3a0:	008b40c0 	call	8b40c <alt_get_errno>
   8b3a4:	e0fff917 	ldw	r3,-28(fp)
   8b3a8:	00c7c83a 	sub	r3,zero,r3
   8b3ac:	10c00015 	stw	r3,0(r2)
        return -1;
   8b3b0:	00bfffc4 	movi	r2,-1
   8b3b4:	e0bffe15 	stw	r2,-8(fp)
   8b3b8:	00000e06 	br	8b3f4 <write+0x108>
      }
      return rval;
   8b3bc:	e0bff917 	ldw	r2,-28(fp)
   8b3c0:	e0bffe15 	stw	r2,-8(fp)
   8b3c4:	00000b06 	br	8b3f4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8b3c8:	008b40c0 	call	8b40c <alt_get_errno>
   8b3cc:	1007883a 	mov	r3,r2
   8b3d0:	00800344 	movi	r2,13
   8b3d4:	18800015 	stw	r2,0(r3)
   8b3d8:	00000406 	br	8b3ec <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8b3dc:	008b40c0 	call	8b40c <alt_get_errno>
   8b3e0:	1007883a 	mov	r3,r2
   8b3e4:	00801444 	movi	r2,81
   8b3e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b3ec:	00bfffc4 	movi	r2,-1
   8b3f0:	e0bffe15 	stw	r2,-8(fp)
   8b3f4:	e0bffe17 	ldw	r2,-8(fp)
}
   8b3f8:	e037883a 	mov	sp,fp
   8b3fc:	dfc00117 	ldw	ra,4(sp)
   8b400:	df000017 	ldw	fp,0(sp)
   8b404:	dec00204 	addi	sp,sp,8
   8b408:	f800283a 	ret

0008b40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b40c:	defffd04 	addi	sp,sp,-12
   8b410:	dfc00215 	stw	ra,8(sp)
   8b414:	df000115 	stw	fp,4(sp)
   8b418:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b41c:	00800274 	movhi	r2,9
   8b420:	10bcc804 	addi	r2,r2,-3296
   8b424:	10800017 	ldw	r2,0(r2)
   8b428:	1005003a 	cmpeq	r2,r2,zero
   8b42c:	1000061e 	bne	r2,zero,8b448 <alt_get_errno+0x3c>
   8b430:	00800274 	movhi	r2,9
   8b434:	10bcc804 	addi	r2,r2,-3296
   8b438:	10800017 	ldw	r2,0(r2)
   8b43c:	103ee83a 	callr	r2
   8b440:	e0bfff15 	stw	r2,-4(fp)
   8b444:	00000306 	br	8b454 <alt_get_errno+0x48>
   8b448:	00800274 	movhi	r2,9
   8b44c:	10836a04 	addi	r2,r2,3496
   8b450:	e0bfff15 	stw	r2,-4(fp)
   8b454:	e0bfff17 	ldw	r2,-4(fp)
}
   8b458:	e037883a 	mov	sp,fp
   8b45c:	dfc00117 	ldw	ra,4(sp)
   8b460:	df000017 	ldw	fp,0(sp)
   8b464:	dec00204 	addi	sp,sp,8
   8b468:	f800283a 	ret

0008b46c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8b46c:	defffd04 	addi	sp,sp,-12
   8b470:	dfc00215 	stw	ra,8(sp)
   8b474:	df000115 	stw	fp,4(sp)
   8b478:	df000104 	addi	fp,sp,4
   8b47c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   8b480:	008cbdc0 	call	8cbdc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8b484:	00800044 	movi	r2,1
   8b488:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8b48c:	e037883a 	mov	sp,fp
   8b490:	dfc00117 	ldw	ra,4(sp)
   8b494:	df000017 	ldw	fp,0(sp)
   8b498:	dec00204 	addi	sp,sp,8
   8b49c:	f800283a 	ret

0008b4a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8b4a0:	defffe04 	addi	sp,sp,-8
   8b4a4:	dfc00115 	stw	ra,4(sp)
   8b4a8:	df000015 	stw	fp,0(sp)
   8b4ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8b4b0:	01000274 	movhi	r4,9
   8b4b4:	2138af04 	addi	r4,r4,-7492
   8b4b8:	000b883a 	mov	r5,zero
   8b4bc:	000d883a 	mov	r6,zero
   8b4c0:	008b6640 	call	8b664 <altera_avalon_jtag_uart_init>
   8b4c4:	01000274 	movhi	r4,9
   8b4c8:	2138a504 	addi	r4,r4,-7532
   8b4cc:	008b4e40 	call	8b4e4 <alt_dev_reg>
}
   8b4d0:	e037883a 	mov	sp,fp
   8b4d4:	dfc00117 	ldw	ra,4(sp)
   8b4d8:	df000017 	ldw	fp,0(sp)
   8b4dc:	dec00204 	addi	sp,sp,8
   8b4e0:	f800283a 	ret

0008b4e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8b4e4:	defffd04 	addi	sp,sp,-12
   8b4e8:	dfc00215 	stw	ra,8(sp)
   8b4ec:	df000115 	stw	fp,4(sp)
   8b4f0:	df000104 	addi	fp,sp,4
   8b4f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8b4f8:	e13fff17 	ldw	r4,-4(fp)
   8b4fc:	01400274 	movhi	r5,9
   8b500:	297cc504 	addi	r5,r5,-3308
   8b504:	008c1600 	call	8c160 <alt_dev_llist_insert>
}
   8b508:	e037883a 	mov	sp,fp
   8b50c:	dfc00117 	ldw	ra,4(sp)
   8b510:	df000017 	ldw	fp,0(sp)
   8b514:	dec00204 	addi	sp,sp,8
   8b518:	f800283a 	ret

0008b51c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8b51c:	defffa04 	addi	sp,sp,-24
   8b520:	dfc00515 	stw	ra,20(sp)
   8b524:	df000415 	stw	fp,16(sp)
   8b528:	df000404 	addi	fp,sp,16
   8b52c:	e13ffd15 	stw	r4,-12(fp)
   8b530:	e17ffe15 	stw	r5,-8(fp)
   8b534:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b538:	e0bffd17 	ldw	r2,-12(fp)
   8b53c:	10800017 	ldw	r2,0(r2)
   8b540:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8b544:	e0bffc17 	ldw	r2,-16(fp)
   8b548:	11000a04 	addi	r4,r2,40
   8b54c:	e0bffd17 	ldw	r2,-12(fp)
   8b550:	11c00217 	ldw	r7,8(r2)
   8b554:	e17ffe17 	ldw	r5,-8(fp)
   8b558:	e1bfff17 	ldw	r6,-4(fp)
   8b55c:	008bb640 	call	8bb64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8b560:	e037883a 	mov	sp,fp
   8b564:	dfc00117 	ldw	ra,4(sp)
   8b568:	df000017 	ldw	fp,0(sp)
   8b56c:	dec00204 	addi	sp,sp,8
   8b570:	f800283a 	ret

0008b574 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8b574:	defffa04 	addi	sp,sp,-24
   8b578:	dfc00515 	stw	ra,20(sp)
   8b57c:	df000415 	stw	fp,16(sp)
   8b580:	df000404 	addi	fp,sp,16
   8b584:	e13ffd15 	stw	r4,-12(fp)
   8b588:	e17ffe15 	stw	r5,-8(fp)
   8b58c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b590:	e0bffd17 	ldw	r2,-12(fp)
   8b594:	10800017 	ldw	r2,0(r2)
   8b598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8b59c:	e0bffc17 	ldw	r2,-16(fp)
   8b5a0:	11000a04 	addi	r4,r2,40
   8b5a4:	e0bffd17 	ldw	r2,-12(fp)
   8b5a8:	11c00217 	ldw	r7,8(r2)
   8b5ac:	e17ffe17 	ldw	r5,-8(fp)
   8b5b0:	e1bfff17 	ldw	r6,-4(fp)
   8b5b4:	008bd880 	call	8bd88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8b5b8:	e037883a 	mov	sp,fp
   8b5bc:	dfc00117 	ldw	ra,4(sp)
   8b5c0:	df000017 	ldw	fp,0(sp)
   8b5c4:	dec00204 	addi	sp,sp,8
   8b5c8:	f800283a 	ret

0008b5cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8b5cc:	defffc04 	addi	sp,sp,-16
   8b5d0:	dfc00315 	stw	ra,12(sp)
   8b5d4:	df000215 	stw	fp,8(sp)
   8b5d8:	df000204 	addi	fp,sp,8
   8b5dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b5e0:	e0bfff17 	ldw	r2,-4(fp)
   8b5e4:	10800017 	ldw	r2,0(r2)
   8b5e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8b5ec:	e0bffe17 	ldw	r2,-8(fp)
   8b5f0:	11000a04 	addi	r4,r2,40
   8b5f4:	e0bfff17 	ldw	r2,-4(fp)
   8b5f8:	11400217 	ldw	r5,8(r2)
   8b5fc:	008b9fc0 	call	8b9fc <altera_avalon_jtag_uart_close>
}
   8b600:	e037883a 	mov	sp,fp
   8b604:	dfc00117 	ldw	ra,4(sp)
   8b608:	df000017 	ldw	fp,0(sp)
   8b60c:	dec00204 	addi	sp,sp,8
   8b610:	f800283a 	ret

0008b614 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8b614:	defffa04 	addi	sp,sp,-24
   8b618:	dfc00515 	stw	ra,20(sp)
   8b61c:	df000415 	stw	fp,16(sp)
   8b620:	df000404 	addi	fp,sp,16
   8b624:	e13ffd15 	stw	r4,-12(fp)
   8b628:	e17ffe15 	stw	r5,-8(fp)
   8b62c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8b630:	e0bffd17 	ldw	r2,-12(fp)
   8b634:	10800017 	ldw	r2,0(r2)
   8b638:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8b63c:	e0bffc17 	ldw	r2,-16(fp)
   8b640:	11000a04 	addi	r4,r2,40
   8b644:	e17ffe17 	ldw	r5,-8(fp)
   8b648:	e1bfff17 	ldw	r6,-4(fp)
   8b64c:	008ba700 	call	8ba70 <altera_avalon_jtag_uart_ioctl>
}
   8b650:	e037883a 	mov	sp,fp
   8b654:	dfc00117 	ldw	ra,4(sp)
   8b658:	df000017 	ldw	fp,0(sp)
   8b65c:	dec00204 	addi	sp,sp,8
   8b660:	f800283a 	ret

0008b664 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8b664:	defffa04 	addi	sp,sp,-24
   8b668:	dfc00515 	stw	ra,20(sp)
   8b66c:	df000415 	stw	fp,16(sp)
   8b670:	df000404 	addi	fp,sp,16
   8b674:	e13ffd15 	stw	r4,-12(fp)
   8b678:	e17ffe15 	stw	r5,-8(fp)
   8b67c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b680:	e0fffd17 	ldw	r3,-12(fp)
   8b684:	00800044 	movi	r2,1
   8b688:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8b68c:	e0bffd17 	ldw	r2,-12(fp)
   8b690:	10800017 	ldw	r2,0(r2)
   8b694:	11000104 	addi	r4,r2,4
   8b698:	e0bffd17 	ldw	r2,-12(fp)
   8b69c:	10800817 	ldw	r2,32(r2)
   8b6a0:	1007883a 	mov	r3,r2
   8b6a4:	2005883a 	mov	r2,r4
   8b6a8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8b6ac:	e13ffe17 	ldw	r4,-8(fp)
   8b6b0:	e17fff17 	ldw	r5,-4(fp)
   8b6b4:	d8000015 	stw	zero,0(sp)
   8b6b8:	01800274 	movhi	r6,9
   8b6bc:	31adc904 	addi	r6,r6,-18652
   8b6c0:	e1fffd17 	ldw	r7,-12(fp)
   8b6c4:	008c36c0 	call	8c36c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8b6c8:	e0bffd17 	ldw	r2,-12(fp)
   8b6cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8b6d0:	e0bffd17 	ldw	r2,-12(fp)
   8b6d4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b6d8:	00800274 	movhi	r2,9
   8b6dc:	10836f04 	addi	r2,r2,3516
   8b6e0:	10800017 	ldw	r2,0(r2)
   8b6e4:	100b883a 	mov	r5,r2
   8b6e8:	01800274 	movhi	r6,9
   8b6ec:	31ae5304 	addi	r6,r6,-18100
   8b6f0:	e1fffd17 	ldw	r7,-12(fp)
   8b6f4:	008bfc80 	call	8bfc8 <alt_alarm_start>
   8b6f8:	1004403a 	cmpge	r2,r2,zero
   8b6fc:	1000041e 	bne	r2,zero,8b710 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8b700:	e0fffd17 	ldw	r3,-12(fp)
   8b704:	00a00034 	movhi	r2,32768
   8b708:	10bfffc4 	addi	r2,r2,-1
   8b70c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8b710:	e037883a 	mov	sp,fp
   8b714:	dfc00117 	ldw	ra,4(sp)
   8b718:	df000017 	ldw	fp,0(sp)
   8b71c:	dec00204 	addi	sp,sp,8
   8b720:	f800283a 	ret

0008b724 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8b724:	defff804 	addi	sp,sp,-32
   8b728:	df000715 	stw	fp,28(sp)
   8b72c:	df000704 	addi	fp,sp,28
   8b730:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8b734:	e0bfff17 	ldw	r2,-4(fp)
   8b738:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8b73c:	e0bffe17 	ldw	r2,-8(fp)
   8b740:	10800017 	ldw	r2,0(r2)
   8b744:	e0bffd15 	stw	r2,-12(fp)
   8b748:	00000006 	br	8b74c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b74c:	e0bffd17 	ldw	r2,-12(fp)
   8b750:	10800104 	addi	r2,r2,4
   8b754:	10800037 	ldwio	r2,0(r2)
   8b758:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8b75c:	e0bffc17 	ldw	r2,-16(fp)
   8b760:	1080c00c 	andi	r2,r2,768
   8b764:	1005003a 	cmpeq	r2,r2,zero
   8b768:	1000741e 	bne	r2,zero,8b93c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8b76c:	e0bffc17 	ldw	r2,-16(fp)
   8b770:	1080400c 	andi	r2,r2,256
   8b774:	1005003a 	cmpeq	r2,r2,zero
   8b778:	1000351e 	bne	r2,zero,8b850 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8b77c:	00800074 	movhi	r2,1
   8b780:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b784:	e0bffe17 	ldw	r2,-8(fp)
   8b788:	10800a17 	ldw	r2,40(r2)
   8b78c:	10800044 	addi	r2,r2,1
   8b790:	1081ffcc 	andi	r2,r2,2047
   8b794:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8b798:	e0bffe17 	ldw	r2,-8(fp)
   8b79c:	10c00b17 	ldw	r3,44(r2)
   8b7a0:	e0bffa17 	ldw	r2,-24(fp)
   8b7a4:	18801626 	beq	r3,r2,8b800 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8b7a8:	e0bffd17 	ldw	r2,-12(fp)
   8b7ac:	10800037 	ldwio	r2,0(r2)
   8b7b0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8b7b4:	e0bffb17 	ldw	r2,-20(fp)
   8b7b8:	10a0000c 	andi	r2,r2,32768
   8b7bc:	1005003a 	cmpeq	r2,r2,zero
   8b7c0:	10000f1e 	bne	r2,zero,8b800 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8b7c4:	e0bffe17 	ldw	r2,-8(fp)
   8b7c8:	10c00a17 	ldw	r3,40(r2)
   8b7cc:	e0bffb17 	ldw	r2,-20(fp)
   8b7d0:	1009883a 	mov	r4,r2
   8b7d4:	e0bffe17 	ldw	r2,-8(fp)
   8b7d8:	1885883a 	add	r2,r3,r2
   8b7dc:	10800e04 	addi	r2,r2,56
   8b7e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b7e4:	e0bffe17 	ldw	r2,-8(fp)
   8b7e8:	10800a17 	ldw	r2,40(r2)
   8b7ec:	10800044 	addi	r2,r2,1
   8b7f0:	10c1ffcc 	andi	r3,r2,2047
   8b7f4:	e0bffe17 	ldw	r2,-8(fp)
   8b7f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8b7fc:	003fe106 	br	8b784 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8b800:	e0bffb17 	ldw	r2,-20(fp)
   8b804:	10bfffec 	andhi	r2,r2,65535
   8b808:	1005003a 	cmpeq	r2,r2,zero
   8b80c:	1000101e 	bne	r2,zero,8b850 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b810:	e0bffe17 	ldw	r2,-8(fp)
   8b814:	10c00817 	ldw	r3,32(r2)
   8b818:	00bfff84 	movi	r2,-2
   8b81c:	1886703a 	and	r3,r3,r2
   8b820:	e0bffe17 	ldw	r2,-8(fp)
   8b824:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8b828:	e0bffd17 	ldw	r2,-12(fp)
   8b82c:	11000104 	addi	r4,r2,4
   8b830:	e0bffe17 	ldw	r2,-8(fp)
   8b834:	10800817 	ldw	r2,32(r2)
   8b838:	1007883a 	mov	r3,r2
   8b83c:	2005883a 	mov	r2,r4
   8b840:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b844:	e0bffd17 	ldw	r2,-12(fp)
   8b848:	10800104 	addi	r2,r2,4
   8b84c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8b850:	e0bffc17 	ldw	r2,-16(fp)
   8b854:	1080800c 	andi	r2,r2,512
   8b858:	1005003a 	cmpeq	r2,r2,zero
   8b85c:	103fbb1e 	bne	r2,zero,8b74c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8b860:	e0bffc17 	ldw	r2,-16(fp)
   8b864:	10bfffec 	andhi	r2,r2,65535
   8b868:	1004d43a 	srli	r2,r2,16
   8b86c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b870:	00001506 	br	8b8c8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8b874:	e13ffd17 	ldw	r4,-12(fp)
   8b878:	e0bffe17 	ldw	r2,-8(fp)
   8b87c:	10c00d17 	ldw	r3,52(r2)
   8b880:	e0bffe17 	ldw	r2,-8(fp)
   8b884:	1885883a 	add	r2,r3,r2
   8b888:	10820e04 	addi	r2,r2,2104
   8b88c:	10800003 	ldbu	r2,0(r2)
   8b890:	10c03fcc 	andi	r3,r2,255
   8b894:	18c0201c 	xori	r3,r3,128
   8b898:	18ffe004 	addi	r3,r3,-128
   8b89c:	2005883a 	mov	r2,r4
   8b8a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b8a4:	e0bffe17 	ldw	r2,-8(fp)
   8b8a8:	10800d17 	ldw	r2,52(r2)
   8b8ac:	10800044 	addi	r2,r2,1
   8b8b0:	10c1ffcc 	andi	r3,r2,2047
   8b8b4:	e0bffe17 	ldw	r2,-8(fp)
   8b8b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8b8bc:	e0bff917 	ldw	r2,-28(fp)
   8b8c0:	10bfffc4 	addi	r2,r2,-1
   8b8c4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b8c8:	e0bff917 	ldw	r2,-28(fp)
   8b8cc:	1005003a 	cmpeq	r2,r2,zero
   8b8d0:	1000051e 	bne	r2,zero,8b8e8 <altera_avalon_jtag_uart_irq+0x1c4>
   8b8d4:	e0bffe17 	ldw	r2,-8(fp)
   8b8d8:	10c00d17 	ldw	r3,52(r2)
   8b8dc:	e0bffe17 	ldw	r2,-8(fp)
   8b8e0:	10800c17 	ldw	r2,48(r2)
   8b8e4:	18bfe31e 	bne	r3,r2,8b874 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8b8e8:	e0bff917 	ldw	r2,-28(fp)
   8b8ec:	1005003a 	cmpeq	r2,r2,zero
   8b8f0:	103f961e 	bne	r2,zero,8b74c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b8f4:	e0bffe17 	ldw	r2,-8(fp)
   8b8f8:	10c00817 	ldw	r3,32(r2)
   8b8fc:	00bfff44 	movi	r2,-3
   8b900:	1886703a 	and	r3,r3,r2
   8b904:	e0bffe17 	ldw	r2,-8(fp)
   8b908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b90c:	e0bffe17 	ldw	r2,-8(fp)
   8b910:	10800017 	ldw	r2,0(r2)
   8b914:	11000104 	addi	r4,r2,4
   8b918:	e0bffe17 	ldw	r2,-8(fp)
   8b91c:	10800817 	ldw	r2,32(r2)
   8b920:	1007883a 	mov	r3,r2
   8b924:	2005883a 	mov	r2,r4
   8b928:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b92c:	e0bffd17 	ldw	r2,-12(fp)
   8b930:	10800104 	addi	r2,r2,4
   8b934:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8b938:	003f8406 	br	8b74c <altera_avalon_jtag_uart_irq+0x28>
}
   8b93c:	e037883a 	mov	sp,fp
   8b940:	df000017 	ldw	fp,0(sp)
   8b944:	dec00104 	addi	sp,sp,4
   8b948:	f800283a 	ret

0008b94c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8b94c:	defffc04 	addi	sp,sp,-16
   8b950:	df000315 	stw	fp,12(sp)
   8b954:	df000304 	addi	fp,sp,12
   8b958:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8b95c:	e0bfff17 	ldw	r2,-4(fp)
   8b960:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8b964:	e0bffe17 	ldw	r2,-8(fp)
   8b968:	10800017 	ldw	r2,0(r2)
   8b96c:	10800104 	addi	r2,r2,4
   8b970:	10800037 	ldwio	r2,0(r2)
   8b974:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8b978:	e0bffd17 	ldw	r2,-12(fp)
   8b97c:	1081000c 	andi	r2,r2,1024
   8b980:	1005003a 	cmpeq	r2,r2,zero
   8b984:	10000c1e 	bne	r2,zero,8b9b8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8b988:	e0bffe17 	ldw	r2,-8(fp)
   8b98c:	10800017 	ldw	r2,0(r2)
   8b990:	11000104 	addi	r4,r2,4
   8b994:	e0bffe17 	ldw	r2,-8(fp)
   8b998:	10800817 	ldw	r2,32(r2)
   8b99c:	10810014 	ori	r2,r2,1024
   8b9a0:	1007883a 	mov	r3,r2
   8b9a4:	2005883a 	mov	r2,r4
   8b9a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8b9ac:	e0bffe17 	ldw	r2,-8(fp)
   8b9b0:	10000915 	stw	zero,36(r2)
   8b9b4:	00000a06 	br	8b9e0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8b9b8:	e0bffe17 	ldw	r2,-8(fp)
   8b9bc:	10c00917 	ldw	r3,36(r2)
   8b9c0:	00a00034 	movhi	r2,32768
   8b9c4:	10bfff04 	addi	r2,r2,-4
   8b9c8:	10c00536 	bltu	r2,r3,8b9e0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8b9cc:	e0bffe17 	ldw	r2,-8(fp)
   8b9d0:	10800917 	ldw	r2,36(r2)
   8b9d4:	10c00044 	addi	r3,r2,1
   8b9d8:	e0bffe17 	ldw	r2,-8(fp)
   8b9dc:	10c00915 	stw	r3,36(r2)
   8b9e0:	00800274 	movhi	r2,9
   8b9e4:	10836f04 	addi	r2,r2,3516
   8b9e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8b9ec:	e037883a 	mov	sp,fp
   8b9f0:	df000017 	ldw	fp,0(sp)
   8b9f4:	dec00104 	addi	sp,sp,4
   8b9f8:	f800283a 	ret

0008b9fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8b9fc:	defffc04 	addi	sp,sp,-16
   8ba00:	df000315 	stw	fp,12(sp)
   8ba04:	df000304 	addi	fp,sp,12
   8ba08:	e13ffd15 	stw	r4,-12(fp)
   8ba0c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ba10:	00000706 	br	8ba30 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8ba14:	e0bffe17 	ldw	r2,-8(fp)
   8ba18:	1090000c 	andi	r2,r2,16384
   8ba1c:	1005003a 	cmpeq	r2,r2,zero
   8ba20:	1000031e 	bne	r2,zero,8ba30 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8ba24:	00bffd44 	movi	r2,-11
   8ba28:	e0bfff15 	stw	r2,-4(fp)
   8ba2c:	00000b06 	br	8ba5c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ba30:	e0bffd17 	ldw	r2,-12(fp)
   8ba34:	10c00d17 	ldw	r3,52(r2)
   8ba38:	e0bffd17 	ldw	r2,-12(fp)
   8ba3c:	10800c17 	ldw	r2,48(r2)
   8ba40:	18800526 	beq	r3,r2,8ba58 <altera_avalon_jtag_uart_close+0x5c>
   8ba44:	e0bffd17 	ldw	r2,-12(fp)
   8ba48:	10c00917 	ldw	r3,36(r2)
   8ba4c:	e0bffd17 	ldw	r2,-12(fp)
   8ba50:	10800117 	ldw	r2,4(r2)
   8ba54:	18bfef36 	bltu	r3,r2,8ba14 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8ba58:	e03fff15 	stw	zero,-4(fp)
   8ba5c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ba60:	e037883a 	mov	sp,fp
   8ba64:	df000017 	ldw	fp,0(sp)
   8ba68:	dec00104 	addi	sp,sp,4
   8ba6c:	f800283a 	ret

0008ba70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8ba70:	defff804 	addi	sp,sp,-32
   8ba74:	df000715 	stw	fp,28(sp)
   8ba78:	df000704 	addi	fp,sp,28
   8ba7c:	e13ffb15 	stw	r4,-20(fp)
   8ba80:	e17ffc15 	stw	r5,-16(fp)
   8ba84:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8ba88:	00bff9c4 	movi	r2,-25
   8ba8c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8ba90:	e0bffc17 	ldw	r2,-16(fp)
   8ba94:	e0bfff15 	stw	r2,-4(fp)
   8ba98:	e0ffff17 	ldw	r3,-4(fp)
   8ba9c:	189a8060 	cmpeqi	r2,r3,27137
   8baa0:	1000041e 	bne	r2,zero,8bab4 <altera_avalon_jtag_uart_ioctl+0x44>
   8baa4:	e0ffff17 	ldw	r3,-4(fp)
   8baa8:	189a80a0 	cmpeqi	r2,r3,27138
   8baac:	10001b1e 	bne	r2,zero,8bb1c <altera_avalon_jtag_uart_ioctl+0xac>
   8bab0:	00002706 	br	8bb50 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8bab4:	e0bffb17 	ldw	r2,-20(fp)
   8bab8:	10c00117 	ldw	r3,4(r2)
   8babc:	00a00034 	movhi	r2,32768
   8bac0:	10bfffc4 	addi	r2,r2,-1
   8bac4:	18802226 	beq	r3,r2,8bb50 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8bac8:	e0bffd17 	ldw	r2,-12(fp)
   8bacc:	10800017 	ldw	r2,0(r2)
   8bad0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8bad4:	e0bff917 	ldw	r2,-28(fp)
   8bad8:	10800090 	cmplti	r2,r2,2
   8badc:	1000071e 	bne	r2,zero,8bafc <altera_avalon_jtag_uart_ioctl+0x8c>
   8bae0:	e0fff917 	ldw	r3,-28(fp)
   8bae4:	00a00034 	movhi	r2,32768
   8bae8:	10bfffc4 	addi	r2,r2,-1
   8baec:	18800326 	beq	r3,r2,8bafc <altera_avalon_jtag_uart_ioctl+0x8c>
   8baf0:	e0bff917 	ldw	r2,-28(fp)
   8baf4:	e0bffe15 	stw	r2,-8(fp)
   8baf8:	00000306 	br	8bb08 <altera_avalon_jtag_uart_ioctl+0x98>
   8bafc:	00e00034 	movhi	r3,32768
   8bb00:	18ffff84 	addi	r3,r3,-2
   8bb04:	e0fffe15 	stw	r3,-8(fp)
   8bb08:	e0bffb17 	ldw	r2,-20(fp)
   8bb0c:	e0fffe17 	ldw	r3,-8(fp)
   8bb10:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8bb14:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8bb18:	00000d06 	br	8bb50 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8bb1c:	e0bffb17 	ldw	r2,-20(fp)
   8bb20:	10c00117 	ldw	r3,4(r2)
   8bb24:	00a00034 	movhi	r2,32768
   8bb28:	10bfffc4 	addi	r2,r2,-1
   8bb2c:	18800826 	beq	r3,r2,8bb50 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8bb30:	e13ffd17 	ldw	r4,-12(fp)
   8bb34:	e0bffb17 	ldw	r2,-20(fp)
   8bb38:	10c00917 	ldw	r3,36(r2)
   8bb3c:	e0bffb17 	ldw	r2,-20(fp)
   8bb40:	10800117 	ldw	r2,4(r2)
   8bb44:	1885803a 	cmpltu	r2,r3,r2
   8bb48:	20800015 	stw	r2,0(r4)
      rc = 0;
   8bb4c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8bb50:	e0bffa17 	ldw	r2,-24(fp)
}
   8bb54:	e037883a 	mov	sp,fp
   8bb58:	df000017 	ldw	fp,0(sp)
   8bb5c:	dec00104 	addi	sp,sp,4
   8bb60:	f800283a 	ret

0008bb64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8bb64:	defff204 	addi	sp,sp,-56
   8bb68:	dfc00d15 	stw	ra,52(sp)
   8bb6c:	df000c15 	stw	fp,48(sp)
   8bb70:	df000c04 	addi	fp,sp,48
   8bb74:	e13ffb15 	stw	r4,-20(fp)
   8bb78:	e17ffc15 	stw	r5,-16(fp)
   8bb7c:	e1bffd15 	stw	r6,-12(fp)
   8bb80:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8bb84:	e0bffc17 	ldw	r2,-16(fp)
   8bb88:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bb8c:	00004806 	br	8bcb0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8bb90:	e0bffb17 	ldw	r2,-20(fp)
   8bb94:	10800a17 	ldw	r2,40(r2)
   8bb98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8bb9c:	e0bffb17 	ldw	r2,-20(fp)
   8bba0:	10800b17 	ldw	r2,44(r2)
   8bba4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8bba8:	e0fff717 	ldw	r3,-36(fp)
   8bbac:	e0bff617 	ldw	r2,-40(fp)
   8bbb0:	18800536 	bltu	r3,r2,8bbc8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8bbb4:	e0bff717 	ldw	r2,-36(fp)
   8bbb8:	e0fff617 	ldw	r3,-40(fp)
   8bbbc:	10c5c83a 	sub	r2,r2,r3
   8bbc0:	e0bff815 	stw	r2,-32(fp)
   8bbc4:	00000406 	br	8bbd8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8bbc8:	00820004 	movi	r2,2048
   8bbcc:	e0fff617 	ldw	r3,-40(fp)
   8bbd0:	10c5c83a 	sub	r2,r2,r3
   8bbd4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bbd8:	e0bff817 	ldw	r2,-32(fp)
   8bbdc:	1005003a 	cmpeq	r2,r2,zero
   8bbe0:	10001f1e 	bne	r2,zero,8bc60 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8bbe4:	e0fffd17 	ldw	r3,-12(fp)
   8bbe8:	e0bff817 	ldw	r2,-32(fp)
   8bbec:	1880022e 	bgeu	r3,r2,8bbf8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8bbf0:	e0bffd17 	ldw	r2,-12(fp)
   8bbf4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8bbf8:	e0bffb17 	ldw	r2,-20(fp)
   8bbfc:	10c00e04 	addi	r3,r2,56
   8bc00:	e0bff617 	ldw	r2,-40(fp)
   8bc04:	1887883a 	add	r3,r3,r2
   8bc08:	e0bffa17 	ldw	r2,-24(fp)
   8bc0c:	1009883a 	mov	r4,r2
   8bc10:	180b883a 	mov	r5,r3
   8bc14:	e1bff817 	ldw	r6,-32(fp)
   8bc18:	00864200 	call	86420 <memcpy>
      ptr   += n;
   8bc1c:	e0fff817 	ldw	r3,-32(fp)
   8bc20:	e0bffa17 	ldw	r2,-24(fp)
   8bc24:	10c5883a 	add	r2,r2,r3
   8bc28:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8bc2c:	e0fffd17 	ldw	r3,-12(fp)
   8bc30:	e0bff817 	ldw	r2,-32(fp)
   8bc34:	1885c83a 	sub	r2,r3,r2
   8bc38:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bc3c:	e0fff617 	ldw	r3,-40(fp)
   8bc40:	e0bff817 	ldw	r2,-32(fp)
   8bc44:	1885883a 	add	r2,r3,r2
   8bc48:	10c1ffcc 	andi	r3,r2,2047
   8bc4c:	e0bffb17 	ldw	r2,-20(fp)
   8bc50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8bc54:	e0bffd17 	ldw	r2,-12(fp)
   8bc58:	10800048 	cmpgei	r2,r2,1
   8bc5c:	103fcc1e 	bne	r2,zero,8bb90 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8bc60:	e0fffa17 	ldw	r3,-24(fp)
   8bc64:	e0bffc17 	ldw	r2,-16(fp)
   8bc68:	1880141e 	bne	r3,r2,8bcbc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8bc6c:	e0bffe17 	ldw	r2,-8(fp)
   8bc70:	1090000c 	andi	r2,r2,16384
   8bc74:	1004c03a 	cmpne	r2,r2,zero
   8bc78:	1000101e 	bne	r2,zero,8bcbc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8bc7c:	e0bffb17 	ldw	r2,-20(fp)
   8bc80:	10c00a17 	ldw	r3,40(r2)
   8bc84:	e0bff717 	ldw	r2,-36(fp)
   8bc88:	1880051e 	bne	r3,r2,8bca0 <altera_avalon_jtag_uart_read+0x13c>
   8bc8c:	e0bffb17 	ldw	r2,-20(fp)
   8bc90:	10c00917 	ldw	r3,36(r2)
   8bc94:	e0bffb17 	ldw	r2,-20(fp)
   8bc98:	10800117 	ldw	r2,4(r2)
   8bc9c:	18bff736 	bltu	r3,r2,8bc7c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8bca0:	e0bffb17 	ldw	r2,-20(fp)
   8bca4:	10c00a17 	ldw	r3,40(r2)
   8bca8:	e0bff717 	ldw	r2,-36(fp)
   8bcac:	18800326 	beq	r3,r2,8bcbc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bcb0:	e0bffd17 	ldw	r2,-12(fp)
   8bcb4:	10800048 	cmpgei	r2,r2,1
   8bcb8:	103fb51e 	bne	r2,zero,8bb90 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8bcbc:	e0fffa17 	ldw	r3,-24(fp)
   8bcc0:	e0bffc17 	ldw	r2,-16(fp)
   8bcc4:	18801926 	beq	r3,r2,8bd2c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bcc8:	0005303a 	rdctl	r2,status
   8bccc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bcd0:	e0fff517 	ldw	r3,-44(fp)
   8bcd4:	00bfff84 	movi	r2,-2
   8bcd8:	1884703a 	and	r2,r3,r2
   8bcdc:	1001703a 	wrctl	status,r2
  
  return context;
   8bce0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8bce4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bce8:	e0bffb17 	ldw	r2,-20(fp)
   8bcec:	10800817 	ldw	r2,32(r2)
   8bcf0:	10c00054 	ori	r3,r2,1
   8bcf4:	e0bffb17 	ldw	r2,-20(fp)
   8bcf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bcfc:	e0bffb17 	ldw	r2,-20(fp)
   8bd00:	10800017 	ldw	r2,0(r2)
   8bd04:	11000104 	addi	r4,r2,4
   8bd08:	e0bffb17 	ldw	r2,-20(fp)
   8bd0c:	10800817 	ldw	r2,32(r2)
   8bd10:	1007883a 	mov	r3,r2
   8bd14:	2005883a 	mov	r2,r4
   8bd18:	10c00035 	stwio	r3,0(r2)
   8bd1c:	e0bff917 	ldw	r2,-28(fp)
   8bd20:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bd24:	e0bff417 	ldw	r2,-48(fp)
   8bd28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8bd2c:	e0fffa17 	ldw	r3,-24(fp)
   8bd30:	e0bffc17 	ldw	r2,-16(fp)
   8bd34:	18800526 	beq	r3,r2,8bd4c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8bd38:	e0fffa17 	ldw	r3,-24(fp)
   8bd3c:	e0bffc17 	ldw	r2,-16(fp)
   8bd40:	1887c83a 	sub	r3,r3,r2
   8bd44:	e0ffff15 	stw	r3,-4(fp)
   8bd48:	00000906 	br	8bd70 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8bd4c:	e0bffe17 	ldw	r2,-8(fp)
   8bd50:	1090000c 	andi	r2,r2,16384
   8bd54:	1005003a 	cmpeq	r2,r2,zero
   8bd58:	1000031e 	bne	r2,zero,8bd68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8bd5c:	00bffd44 	movi	r2,-11
   8bd60:	e0bfff15 	stw	r2,-4(fp)
   8bd64:	00000206 	br	8bd70 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8bd68:	00bffec4 	movi	r2,-5
   8bd6c:	e0bfff15 	stw	r2,-4(fp)
   8bd70:	e0bfff17 	ldw	r2,-4(fp)
}
   8bd74:	e037883a 	mov	sp,fp
   8bd78:	dfc00117 	ldw	ra,4(sp)
   8bd7c:	df000017 	ldw	fp,0(sp)
   8bd80:	dec00204 	addi	sp,sp,8
   8bd84:	f800283a 	ret

0008bd88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8bd88:	defff204 	addi	sp,sp,-56
   8bd8c:	dfc00d15 	stw	ra,52(sp)
   8bd90:	df000c15 	stw	fp,48(sp)
   8bd94:	df000c04 	addi	fp,sp,48
   8bd98:	e13ffb15 	stw	r4,-20(fp)
   8bd9c:	e17ffc15 	stw	r5,-16(fp)
   8bda0:	e1bffd15 	stw	r6,-12(fp)
   8bda4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8bda8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8bdac:	e0bffc17 	ldw	r2,-16(fp)
   8bdb0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bdb4:	00003a06 	br	8bea0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8bdb8:	e0bffb17 	ldw	r2,-20(fp)
   8bdbc:	10800c17 	ldw	r2,48(r2)
   8bdc0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8bdc4:	e0bffb17 	ldw	r2,-20(fp)
   8bdc8:	10800d17 	ldw	r2,52(r2)
   8bdcc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8bdd0:	e0fffa17 	ldw	r3,-24(fp)
   8bdd4:	e0bff917 	ldw	r2,-28(fp)
   8bdd8:	1880062e 	bgeu	r3,r2,8bdf4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8bddc:	e0fff917 	ldw	r3,-28(fp)
   8bde0:	e0bffa17 	ldw	r2,-24(fp)
   8bde4:	1885c83a 	sub	r2,r3,r2
   8bde8:	10bfffc4 	addi	r2,r2,-1
   8bdec:	e0bff815 	stw	r2,-32(fp)
   8bdf0:	00000c06 	br	8be24 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8bdf4:	e0bff917 	ldw	r2,-28(fp)
   8bdf8:	1005003a 	cmpeq	r2,r2,zero
   8bdfc:	1000051e 	bne	r2,zero,8be14 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8be00:	00820004 	movi	r2,2048
   8be04:	e0fffa17 	ldw	r3,-24(fp)
   8be08:	10c5c83a 	sub	r2,r2,r3
   8be0c:	e0bff815 	stw	r2,-32(fp)
   8be10:	00000406 	br	8be24 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8be14:	0081ffc4 	movi	r2,2047
   8be18:	e0fffa17 	ldw	r3,-24(fp)
   8be1c:	10c5c83a 	sub	r2,r2,r3
   8be20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8be24:	e0bff817 	ldw	r2,-32(fp)
   8be28:	1005003a 	cmpeq	r2,r2,zero
   8be2c:	10001f1e 	bne	r2,zero,8beac <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8be30:	e0fffd17 	ldw	r3,-12(fp)
   8be34:	e0bff817 	ldw	r2,-32(fp)
   8be38:	1880022e 	bgeu	r3,r2,8be44 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8be3c:	e0bffd17 	ldw	r2,-12(fp)
   8be40:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8be44:	e0bffb17 	ldw	r2,-20(fp)
   8be48:	10c20e04 	addi	r3,r2,2104
   8be4c:	e0bffa17 	ldw	r2,-24(fp)
   8be50:	1885883a 	add	r2,r3,r2
   8be54:	e0fffc17 	ldw	r3,-16(fp)
   8be58:	1009883a 	mov	r4,r2
   8be5c:	180b883a 	mov	r5,r3
   8be60:	e1bff817 	ldw	r6,-32(fp)
   8be64:	00864200 	call	86420 <memcpy>
      ptr   += n;
   8be68:	e0fff817 	ldw	r3,-32(fp)
   8be6c:	e0bffc17 	ldw	r2,-16(fp)
   8be70:	10c5883a 	add	r2,r2,r3
   8be74:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8be78:	e0fffd17 	ldw	r3,-12(fp)
   8be7c:	e0bff817 	ldw	r2,-32(fp)
   8be80:	1885c83a 	sub	r2,r3,r2
   8be84:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be88:	e0fffa17 	ldw	r3,-24(fp)
   8be8c:	e0bff817 	ldw	r2,-32(fp)
   8be90:	1885883a 	add	r2,r3,r2
   8be94:	10c1ffcc 	andi	r3,r2,2047
   8be98:	e0bffb17 	ldw	r2,-20(fp)
   8be9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bea0:	e0bffd17 	ldw	r2,-12(fp)
   8bea4:	10800048 	cmpgei	r2,r2,1
   8bea8:	103fc31e 	bne	r2,zero,8bdb8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8beac:	0005303a 	rdctl	r2,status
   8beb0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8beb4:	e0fff517 	ldw	r3,-44(fp)
   8beb8:	00bfff84 	movi	r2,-2
   8bebc:	1884703a 	and	r2,r3,r2
   8bec0:	1001703a 	wrctl	status,r2
  
  return context;
   8bec4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8bec8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8becc:	e0bffb17 	ldw	r2,-20(fp)
   8bed0:	10800817 	ldw	r2,32(r2)
   8bed4:	10c00094 	ori	r3,r2,2
   8bed8:	e0bffb17 	ldw	r2,-20(fp)
   8bedc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bee0:	e0bffb17 	ldw	r2,-20(fp)
   8bee4:	10800017 	ldw	r2,0(r2)
   8bee8:	11000104 	addi	r4,r2,4
   8beec:	e0bffb17 	ldw	r2,-20(fp)
   8bef0:	10800817 	ldw	r2,32(r2)
   8bef4:	1007883a 	mov	r3,r2
   8bef8:	2005883a 	mov	r2,r4
   8befc:	10c00035 	stwio	r3,0(r2)
   8bf00:	e0bff717 	ldw	r2,-36(fp)
   8bf04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bf08:	e0bff417 	ldw	r2,-48(fp)
   8bf0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8bf10:	e0bffd17 	ldw	r2,-12(fp)
   8bf14:	10800050 	cmplti	r2,r2,1
   8bf18:	1000111e 	bne	r2,zero,8bf60 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8bf1c:	e0bffe17 	ldw	r2,-8(fp)
   8bf20:	1090000c 	andi	r2,r2,16384
   8bf24:	1004c03a 	cmpne	r2,r2,zero
   8bf28:	1000101e 	bne	r2,zero,8bf6c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8bf2c:	e0bffb17 	ldw	r2,-20(fp)
   8bf30:	10c00d17 	ldw	r3,52(r2)
   8bf34:	e0bff917 	ldw	r2,-28(fp)
   8bf38:	1880051e 	bne	r3,r2,8bf50 <altera_avalon_jtag_uart_write+0x1c8>
   8bf3c:	e0bffb17 	ldw	r2,-20(fp)
   8bf40:	10c00917 	ldw	r3,36(r2)
   8bf44:	e0bffb17 	ldw	r2,-20(fp)
   8bf48:	10800117 	ldw	r2,4(r2)
   8bf4c:	18bff736 	bltu	r3,r2,8bf2c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8bf50:	e0bffb17 	ldw	r2,-20(fp)
   8bf54:	10c00d17 	ldw	r3,52(r2)
   8bf58:	e0bff917 	ldw	r2,-28(fp)
   8bf5c:	18800326 	beq	r3,r2,8bf6c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8bf60:	e0bffd17 	ldw	r2,-12(fp)
   8bf64:	10800048 	cmpgei	r2,r2,1
   8bf68:	103fcd1e 	bne	r2,zero,8bea0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8bf6c:	e0fffc17 	ldw	r3,-16(fp)
   8bf70:	e0bff617 	ldw	r2,-40(fp)
   8bf74:	18800526 	beq	r3,r2,8bf8c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8bf78:	e0fffc17 	ldw	r3,-16(fp)
   8bf7c:	e0bff617 	ldw	r2,-40(fp)
   8bf80:	1887c83a 	sub	r3,r3,r2
   8bf84:	e0ffff15 	stw	r3,-4(fp)
   8bf88:	00000906 	br	8bfb0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8bf8c:	e0bffe17 	ldw	r2,-8(fp)
   8bf90:	1090000c 	andi	r2,r2,16384
   8bf94:	1005003a 	cmpeq	r2,r2,zero
   8bf98:	1000031e 	bne	r2,zero,8bfa8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8bf9c:	00bffd44 	movi	r2,-11
   8bfa0:	e0bfff15 	stw	r2,-4(fp)
   8bfa4:	00000206 	br	8bfb0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8bfa8:	00bffec4 	movi	r2,-5
   8bfac:	e0bfff15 	stw	r2,-4(fp)
   8bfb0:	e0bfff17 	ldw	r2,-4(fp)
}
   8bfb4:	e037883a 	mov	sp,fp
   8bfb8:	dfc00117 	ldw	ra,4(sp)
   8bfbc:	df000017 	ldw	fp,0(sp)
   8bfc0:	dec00204 	addi	sp,sp,8
   8bfc4:	f800283a 	ret

0008bfc8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8bfc8:	defff404 	addi	sp,sp,-48
   8bfcc:	df000b15 	stw	fp,44(sp)
   8bfd0:	df000b04 	addi	fp,sp,44
   8bfd4:	e13ffb15 	stw	r4,-20(fp)
   8bfd8:	e17ffc15 	stw	r5,-16(fp)
   8bfdc:	e1bffd15 	stw	r6,-12(fp)
   8bfe0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8bfe4:	e03ff915 	stw	zero,-28(fp)
   8bfe8:	00800274 	movhi	r2,9
   8bfec:	10836f04 	addi	r2,r2,3516
   8bff0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8bff4:	1005003a 	cmpeq	r2,r2,zero
   8bff8:	1000411e 	bne	r2,zero,8c100 <alt_alarm_start+0x138>
  {
    if (alarm)
   8bffc:	e0bffb17 	ldw	r2,-20(fp)
   8c000:	1005003a 	cmpeq	r2,r2,zero
   8c004:	10003b1e 	bne	r2,zero,8c0f4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8c008:	e0fffb17 	ldw	r3,-20(fp)
   8c00c:	e0bffd17 	ldw	r2,-12(fp)
   8c010:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8c014:	e0fffb17 	ldw	r3,-20(fp)
   8c018:	e0bffe17 	ldw	r2,-8(fp)
   8c01c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c020:	0005303a 	rdctl	r2,status
   8c024:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c028:	e0fff817 	ldw	r3,-32(fp)
   8c02c:	00bfff84 	movi	r2,-2
   8c030:	1884703a 	and	r2,r3,r2
   8c034:	1001703a 	wrctl	status,r2
  
  return context;
   8c038:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8c03c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8c040:	00800274 	movhi	r2,9
   8c044:	10837004 	addi	r2,r2,3520
   8c048:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8c04c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8c050:	e0fffc17 	ldw	r3,-16(fp)
   8c054:	e0bff917 	ldw	r2,-28(fp)
   8c058:	1885883a 	add	r2,r3,r2
   8c05c:	10c00044 	addi	r3,r2,1
   8c060:	e0bffb17 	ldw	r2,-20(fp)
   8c064:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8c068:	e0bffb17 	ldw	r2,-20(fp)
   8c06c:	10c00217 	ldw	r3,8(r2)
   8c070:	e0bff917 	ldw	r2,-28(fp)
   8c074:	1880042e 	bgeu	r3,r2,8c088 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8c078:	e0fffb17 	ldw	r3,-20(fp)
   8c07c:	00800044 	movi	r2,1
   8c080:	18800405 	stb	r2,16(r3)
   8c084:	00000206 	br	8c090 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8c088:	e0bffb17 	ldw	r2,-20(fp)
   8c08c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8c090:	e0fffb17 	ldw	r3,-20(fp)
   8c094:	00800274 	movhi	r2,9
   8c098:	10bccb04 	addi	r2,r2,-3284
   8c09c:	e0bff615 	stw	r2,-40(fp)
   8c0a0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c0a4:	e0fff717 	ldw	r3,-36(fp)
   8c0a8:	e0bff617 	ldw	r2,-40(fp)
   8c0ac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c0b0:	e0bff617 	ldw	r2,-40(fp)
   8c0b4:	10c00017 	ldw	r3,0(r2)
   8c0b8:	e0bff717 	ldw	r2,-36(fp)
   8c0bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c0c0:	e0bff617 	ldw	r2,-40(fp)
   8c0c4:	10c00017 	ldw	r3,0(r2)
   8c0c8:	e0bff717 	ldw	r2,-36(fp)
   8c0cc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c0d0:	e0fff617 	ldw	r3,-40(fp)
   8c0d4:	e0bff717 	ldw	r2,-36(fp)
   8c0d8:	18800015 	stw	r2,0(r3)
   8c0dc:	e0bffa17 	ldw	r2,-24(fp)
   8c0e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c0e4:	e0bff517 	ldw	r2,-44(fp)
   8c0e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8c0ec:	e03fff15 	stw	zero,-4(fp)
   8c0f0:	00000506 	br	8c108 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8c0f4:	00bffa84 	movi	r2,-22
   8c0f8:	e0bfff15 	stw	r2,-4(fp)
   8c0fc:	00000206 	br	8c108 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8c100:	00bfde84 	movi	r2,-134
   8c104:	e0bfff15 	stw	r2,-4(fp)
   8c108:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c10c:	e037883a 	mov	sp,fp
   8c110:	df000017 	ldw	fp,0(sp)
   8c114:	dec00104 	addi	sp,sp,4
   8c118:	f800283a 	ret

0008c11c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8c11c:	defffe04 	addi	sp,sp,-8
   8c120:	df000115 	stw	fp,4(sp)
   8c124:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8c128:	e03fff15 	stw	zero,-4(fp)
   8c12c:	00000506 	br	8c144 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8c130:	e0bfff17 	ldw	r2,-4(fp)
   8c134:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8c138:	e0bfff17 	ldw	r2,-4(fp)
   8c13c:	10800804 	addi	r2,r2,32
   8c140:	e0bfff15 	stw	r2,-4(fp)
   8c144:	e0bfff17 	ldw	r2,-4(fp)
   8c148:	10820030 	cmpltui	r2,r2,2048
   8c14c:	103ff81e 	bne	r2,zero,8c130 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c150:	e037883a 	mov	sp,fp
   8c154:	df000017 	ldw	fp,0(sp)
   8c158:	dec00104 	addi	sp,sp,4
   8c15c:	f800283a 	ret

0008c160 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8c160:	defff904 	addi	sp,sp,-28
   8c164:	dfc00615 	stw	ra,24(sp)
   8c168:	df000515 	stw	fp,20(sp)
   8c16c:	df000504 	addi	fp,sp,20
   8c170:	e13ffd15 	stw	r4,-12(fp)
   8c174:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8c178:	e0bffd17 	ldw	r2,-12(fp)
   8c17c:	1005003a 	cmpeq	r2,r2,zero
   8c180:	1000041e 	bne	r2,zero,8c194 <alt_dev_llist_insert+0x34>
   8c184:	e0bffd17 	ldw	r2,-12(fp)
   8c188:	10800217 	ldw	r2,8(r2)
   8c18c:	1004c03a 	cmpne	r2,r2,zero
   8c190:	1000071e 	bne	r2,zero,8c1b0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8c194:	008c2140 	call	8c214 <alt_get_errno>
   8c198:	1007883a 	mov	r3,r2
   8c19c:	00800584 	movi	r2,22
   8c1a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8c1a4:	00bffa84 	movi	r2,-22
   8c1a8:	e0bfff15 	stw	r2,-4(fp)
   8c1ac:	00001306 	br	8c1fc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8c1b0:	e0fffd17 	ldw	r3,-12(fp)
   8c1b4:	e0bffe17 	ldw	r2,-8(fp)
   8c1b8:	e0bffb15 	stw	r2,-20(fp)
   8c1bc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c1c0:	e0fffc17 	ldw	r3,-16(fp)
   8c1c4:	e0bffb17 	ldw	r2,-20(fp)
   8c1c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c1cc:	e0bffb17 	ldw	r2,-20(fp)
   8c1d0:	10c00017 	ldw	r3,0(r2)
   8c1d4:	e0bffc17 	ldw	r2,-16(fp)
   8c1d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c1dc:	e0bffb17 	ldw	r2,-20(fp)
   8c1e0:	10c00017 	ldw	r3,0(r2)
   8c1e4:	e0bffc17 	ldw	r2,-16(fp)
   8c1e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c1ec:	e0fffb17 	ldw	r3,-20(fp)
   8c1f0:	e0bffc17 	ldw	r2,-16(fp)
   8c1f4:	18800015 	stw	r2,0(r3)

  return 0;  
   8c1f8:	e03fff15 	stw	zero,-4(fp)
   8c1fc:	e0bfff17 	ldw	r2,-4(fp)
}
   8c200:	e037883a 	mov	sp,fp
   8c204:	dfc00117 	ldw	ra,4(sp)
   8c208:	df000017 	ldw	fp,0(sp)
   8c20c:	dec00204 	addi	sp,sp,8
   8c210:	f800283a 	ret

0008c214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c214:	defffd04 	addi	sp,sp,-12
   8c218:	dfc00215 	stw	ra,8(sp)
   8c21c:	df000115 	stw	fp,4(sp)
   8c220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c224:	00800274 	movhi	r2,9
   8c228:	10bcc804 	addi	r2,r2,-3296
   8c22c:	10800017 	ldw	r2,0(r2)
   8c230:	1005003a 	cmpeq	r2,r2,zero
   8c234:	1000061e 	bne	r2,zero,8c250 <alt_get_errno+0x3c>
   8c238:	00800274 	movhi	r2,9
   8c23c:	10bcc804 	addi	r2,r2,-3296
   8c240:	10800017 	ldw	r2,0(r2)
   8c244:	103ee83a 	callr	r2
   8c248:	e0bfff15 	stw	r2,-4(fp)
   8c24c:	00000306 	br	8c25c <alt_get_errno+0x48>
   8c250:	00800274 	movhi	r2,9
   8c254:	10836a04 	addi	r2,r2,3496
   8c258:	e0bfff15 	stw	r2,-4(fp)
   8c25c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c260:	e037883a 	mov	sp,fp
   8c264:	dfc00117 	ldw	ra,4(sp)
   8c268:	df000017 	ldw	fp,0(sp)
   8c26c:	dec00204 	addi	sp,sp,8
   8c270:	f800283a 	ret

0008c274 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8c274:	defffd04 	addi	sp,sp,-12
   8c278:	dfc00215 	stw	ra,8(sp)
   8c27c:	df000115 	stw	fp,4(sp)
   8c280:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c284:	00bfff04 	movi	r2,-4
   8c288:	00c00274 	movhi	r3,9
   8c28c:	18f4dc04 	addi	r3,r3,-11408
   8c290:	1885883a 	add	r2,r3,r2
   8c294:	e0bfff15 	stw	r2,-4(fp)
   8c298:	00000606 	br	8c2b4 <_do_ctors+0x40>
        (*ctor) (); 
   8c29c:	e0bfff17 	ldw	r2,-4(fp)
   8c2a0:	10800017 	ldw	r2,0(r2)
   8c2a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c2a8:	e0bfff17 	ldw	r2,-4(fp)
   8c2ac:	10bfff04 	addi	r2,r2,-4
   8c2b0:	e0bfff15 	stw	r2,-4(fp)
   8c2b4:	e0ffff17 	ldw	r3,-4(fp)
   8c2b8:	00800274 	movhi	r2,9
   8c2bc:	10b4db04 	addi	r2,r2,-11412
   8c2c0:	18bff62e 	bgeu	r3,r2,8c29c <_do_ctors+0x28>
        (*ctor) (); 
}
   8c2c4:	e037883a 	mov	sp,fp
   8c2c8:	dfc00117 	ldw	ra,4(sp)
   8c2cc:	df000017 	ldw	fp,0(sp)
   8c2d0:	dec00204 	addi	sp,sp,8
   8c2d4:	f800283a 	ret

0008c2d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8c2d8:	defffd04 	addi	sp,sp,-12
   8c2dc:	dfc00215 	stw	ra,8(sp)
   8c2e0:	df000115 	stw	fp,4(sp)
   8c2e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c2e8:	00bfff04 	movi	r2,-4
   8c2ec:	00c00274 	movhi	r3,9
   8c2f0:	18f4dc04 	addi	r3,r3,-11408
   8c2f4:	1885883a 	add	r2,r3,r2
   8c2f8:	e0bfff15 	stw	r2,-4(fp)
   8c2fc:	00000606 	br	8c318 <_do_dtors+0x40>
        (*dtor) (); 
   8c300:	e0bfff17 	ldw	r2,-4(fp)
   8c304:	10800017 	ldw	r2,0(r2)
   8c308:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c30c:	e0bfff17 	ldw	r2,-4(fp)
   8c310:	10bfff04 	addi	r2,r2,-4
   8c314:	e0bfff15 	stw	r2,-4(fp)
   8c318:	e0ffff17 	ldw	r3,-4(fp)
   8c31c:	00800274 	movhi	r2,9
   8c320:	10b4dc04 	addi	r2,r2,-11408
   8c324:	18bff62e 	bgeu	r3,r2,8c300 <_do_dtors+0x28>
        (*dtor) (); 
}
   8c328:	e037883a 	mov	sp,fp
   8c32c:	dfc00117 	ldw	ra,4(sp)
   8c330:	df000017 	ldw	fp,0(sp)
   8c334:	dec00204 	addi	sp,sp,8
   8c338:	f800283a 	ret

0008c33c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8c33c:	defffe04 	addi	sp,sp,-8
   8c340:	dfc00115 	stw	ra,4(sp)
   8c344:	df000015 	stw	fp,0(sp)
   8c348:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8c34c:	0009883a 	mov	r4,zero
   8c350:	01440004 	movi	r5,4096
   8c354:	008ce680 	call	8ce68 <alt_icache_flush>
#endif
}
   8c358:	e037883a 	mov	sp,fp
   8c35c:	dfc00117 	ldw	ra,4(sp)
   8c360:	df000017 	ldw	fp,0(sp)
   8c364:	dec00204 	addi	sp,sp,8
   8c368:	f800283a 	ret

0008c36c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c36c:	defff904 	addi	sp,sp,-28
   8c370:	dfc00615 	stw	ra,24(sp)
   8c374:	df000515 	stw	fp,20(sp)
   8c378:	df000504 	addi	fp,sp,20
   8c37c:	e13ffc15 	stw	r4,-16(fp)
   8c380:	e17ffd15 	stw	r5,-12(fp)
   8c384:	e1bffe15 	stw	r6,-8(fp)
   8c388:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8c38c:	e0800217 	ldw	r2,8(fp)
   8c390:	d8800015 	stw	r2,0(sp)
   8c394:	e13ffc17 	ldw	r4,-16(fp)
   8c398:	e17ffd17 	ldw	r5,-12(fp)
   8c39c:	e1bffe17 	ldw	r6,-8(fp)
   8c3a0:	e1ffff17 	ldw	r7,-4(fp)
   8c3a4:	008c5400 	call	8c540 <alt_iic_isr_register>
}  
   8c3a8:	e037883a 	mov	sp,fp
   8c3ac:	dfc00117 	ldw	ra,4(sp)
   8c3b0:	df000017 	ldw	fp,0(sp)
   8c3b4:	dec00204 	addi	sp,sp,8
   8c3b8:	f800283a 	ret

0008c3bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8c3bc:	defff904 	addi	sp,sp,-28
   8c3c0:	df000615 	stw	fp,24(sp)
   8c3c4:	df000604 	addi	fp,sp,24
   8c3c8:	e13ffe15 	stw	r4,-8(fp)
   8c3cc:	e17fff15 	stw	r5,-4(fp)
   8c3d0:	e0bfff17 	ldw	r2,-4(fp)
   8c3d4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c3d8:	0005303a 	rdctl	r2,status
   8c3dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c3e0:	e0fffb17 	ldw	r3,-20(fp)
   8c3e4:	00bfff84 	movi	r2,-2
   8c3e8:	1884703a 	and	r2,r3,r2
   8c3ec:	1001703a 	wrctl	status,r2
  
  return context;
   8c3f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c3f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8c3f8:	e0fffc17 	ldw	r3,-16(fp)
   8c3fc:	00800044 	movi	r2,1
   8c400:	10c4983a 	sll	r2,r2,r3
   8c404:	1007883a 	mov	r3,r2
   8c408:	00800274 	movhi	r2,9
   8c40c:	10836b04 	addi	r2,r2,3500
   8c410:	10800017 	ldw	r2,0(r2)
   8c414:	1886b03a 	or	r3,r3,r2
   8c418:	00800274 	movhi	r2,9
   8c41c:	10836b04 	addi	r2,r2,3500
   8c420:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c424:	00800274 	movhi	r2,9
   8c428:	10836b04 	addi	r2,r2,3500
   8c42c:	10800017 	ldw	r2,0(r2)
   8c430:	100170fa 	wrctl	ienable,r2
   8c434:	e0bffd17 	ldw	r2,-12(fp)
   8c438:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c43c:	e0bffa17 	ldw	r2,-24(fp)
   8c440:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c444:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8c448:	e037883a 	mov	sp,fp
   8c44c:	df000017 	ldw	fp,0(sp)
   8c450:	dec00104 	addi	sp,sp,4
   8c454:	f800283a 	ret

0008c458 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8c458:	defff904 	addi	sp,sp,-28
   8c45c:	df000615 	stw	fp,24(sp)
   8c460:	df000604 	addi	fp,sp,24
   8c464:	e13ffe15 	stw	r4,-8(fp)
   8c468:	e17fff15 	stw	r5,-4(fp)
   8c46c:	e0bfff17 	ldw	r2,-4(fp)
   8c470:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c474:	0005303a 	rdctl	r2,status
   8c478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c47c:	e0fffb17 	ldw	r3,-20(fp)
   8c480:	00bfff84 	movi	r2,-2
   8c484:	1884703a 	and	r2,r3,r2
   8c488:	1001703a 	wrctl	status,r2
  
  return context;
   8c48c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c490:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8c494:	e0fffc17 	ldw	r3,-16(fp)
   8c498:	00800044 	movi	r2,1
   8c49c:	10c4983a 	sll	r2,r2,r3
   8c4a0:	0084303a 	nor	r2,zero,r2
   8c4a4:	1007883a 	mov	r3,r2
   8c4a8:	00800274 	movhi	r2,9
   8c4ac:	10836b04 	addi	r2,r2,3500
   8c4b0:	10800017 	ldw	r2,0(r2)
   8c4b4:	1886703a 	and	r3,r3,r2
   8c4b8:	00800274 	movhi	r2,9
   8c4bc:	10836b04 	addi	r2,r2,3500
   8c4c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c4c4:	00800274 	movhi	r2,9
   8c4c8:	10836b04 	addi	r2,r2,3500
   8c4cc:	10800017 	ldw	r2,0(r2)
   8c4d0:	100170fa 	wrctl	ienable,r2
   8c4d4:	e0bffd17 	ldw	r2,-12(fp)
   8c4d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c4dc:	e0bffa17 	ldw	r2,-24(fp)
   8c4e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c4e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8c4e8:	e037883a 	mov	sp,fp
   8c4ec:	df000017 	ldw	fp,0(sp)
   8c4f0:	dec00104 	addi	sp,sp,4
   8c4f4:	f800283a 	ret

0008c4f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8c4f8:	defffc04 	addi	sp,sp,-16
   8c4fc:	df000315 	stw	fp,12(sp)
   8c500:	df000304 	addi	fp,sp,12
   8c504:	e13ffe15 	stw	r4,-8(fp)
   8c508:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8c50c:	000530fa 	rdctl	r2,ienable
   8c510:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8c514:	e0ffff17 	ldw	r3,-4(fp)
   8c518:	00800044 	movi	r2,1
   8c51c:	10c4983a 	sll	r2,r2,r3
   8c520:	1007883a 	mov	r3,r2
   8c524:	e0bffd17 	ldw	r2,-12(fp)
   8c528:	1884703a 	and	r2,r3,r2
   8c52c:	1004c03a 	cmpne	r2,r2,zero
}
   8c530:	e037883a 	mov	sp,fp
   8c534:	df000017 	ldw	fp,0(sp)
   8c538:	dec00104 	addi	sp,sp,4
   8c53c:	f800283a 	ret

0008c540 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c540:	defff404 	addi	sp,sp,-48
   8c544:	dfc00b15 	stw	ra,44(sp)
   8c548:	df000a15 	stw	fp,40(sp)
   8c54c:	df000a04 	addi	fp,sp,40
   8c550:	e13ffb15 	stw	r4,-20(fp)
   8c554:	e17ffc15 	stw	r5,-16(fp)
   8c558:	e1bffd15 	stw	r6,-12(fp)
   8c55c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8c560:	00bffa84 	movi	r2,-22
   8c564:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8c568:	e0bffc17 	ldw	r2,-16(fp)
   8c56c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8c570:	e0bff917 	ldw	r2,-28(fp)
   8c574:	10800808 	cmpgei	r2,r2,32
   8c578:	1000291e 	bne	r2,zero,8c620 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c57c:	0005303a 	rdctl	r2,status
   8c580:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c584:	e0fff717 	ldw	r3,-36(fp)
   8c588:	00bfff84 	movi	r2,-2
   8c58c:	1884703a 	and	r2,r3,r2
   8c590:	1001703a 	wrctl	status,r2
  
  return context;
   8c594:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8c598:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8c59c:	e0bff917 	ldw	r2,-28(fp)
   8c5a0:	00c00274 	movhi	r3,9
   8c5a4:	18c37b04 	addi	r3,r3,3564
   8c5a8:	100490fa 	slli	r2,r2,3
   8c5ac:	10c7883a 	add	r3,r2,r3
   8c5b0:	e0bffd17 	ldw	r2,-12(fp)
   8c5b4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8c5b8:	e0bff917 	ldw	r2,-28(fp)
   8c5bc:	00c00274 	movhi	r3,9
   8c5c0:	18c37b04 	addi	r3,r3,3564
   8c5c4:	100490fa 	slli	r2,r2,3
   8c5c8:	10c5883a 	add	r2,r2,r3
   8c5cc:	10c00104 	addi	r3,r2,4
   8c5d0:	e0bffe17 	ldw	r2,-8(fp)
   8c5d4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8c5d8:	e0bffd17 	ldw	r2,-12(fp)
   8c5dc:	1005003a 	cmpeq	r2,r2,zero
   8c5e0:	1000051e 	bne	r2,zero,8c5f8 <alt_iic_isr_register+0xb8>
   8c5e4:	e17ff917 	ldw	r5,-28(fp)
   8c5e8:	e13ffb17 	ldw	r4,-20(fp)
   8c5ec:	008c3bc0 	call	8c3bc <alt_ic_irq_enable>
   8c5f0:	e0bfff15 	stw	r2,-4(fp)
   8c5f4:	00000406 	br	8c608 <alt_iic_isr_register+0xc8>
   8c5f8:	e17ff917 	ldw	r5,-28(fp)
   8c5fc:	e13ffb17 	ldw	r4,-20(fp)
   8c600:	008c4580 	call	8c458 <alt_ic_irq_disable>
   8c604:	e0bfff15 	stw	r2,-4(fp)
   8c608:	e0bfff17 	ldw	r2,-4(fp)
   8c60c:	e0bffa15 	stw	r2,-24(fp)
   8c610:	e0bff817 	ldw	r2,-32(fp)
   8c614:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c618:	e0bff617 	ldw	r2,-40(fp)
   8c61c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8c620:	e0bffa17 	ldw	r2,-24(fp)
}
   8c624:	e037883a 	mov	sp,fp
   8c628:	dfc00117 	ldw	ra,4(sp)
   8c62c:	df000017 	ldw	fp,0(sp)
   8c630:	dec00204 	addi	sp,sp,8
   8c634:	f800283a 	ret

0008c638 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8c638:	defff904 	addi	sp,sp,-28
   8c63c:	dfc00615 	stw	ra,24(sp)
   8c640:	df000515 	stw	fp,20(sp)
   8c644:	df000504 	addi	fp,sp,20
   8c648:	e13ffc15 	stw	r4,-16(fp)
   8c64c:	e17ffd15 	stw	r5,-12(fp)
   8c650:	e1bffe15 	stw	r6,-8(fp)
   8c654:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8c658:	e13ffd17 	ldw	r4,-12(fp)
   8c65c:	e17ffe17 	ldw	r5,-8(fp)
   8c660:	e1bfff17 	ldw	r6,-4(fp)
   8c664:	008c8500 	call	8c850 <open>
   8c668:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8c66c:	e0bffb17 	ldw	r2,-20(fp)
   8c670:	1004803a 	cmplt	r2,r2,zero
   8c674:	10001c1e 	bne	r2,zero,8c6e8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c678:	e0bffb17 	ldw	r2,-20(fp)
   8c67c:	00c00274 	movhi	r3,9
   8c680:	18f84504 	addi	r3,r3,-7916
   8c684:	10800324 	muli	r2,r2,12
   8c688:	10c5883a 	add	r2,r2,r3
   8c68c:	10c00017 	ldw	r3,0(r2)
   8c690:	e0bffc17 	ldw	r2,-16(fp)
   8c694:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c698:	e0bffb17 	ldw	r2,-20(fp)
   8c69c:	00c00274 	movhi	r3,9
   8c6a0:	18f84504 	addi	r3,r3,-7916
   8c6a4:	10800324 	muli	r2,r2,12
   8c6a8:	10c5883a 	add	r2,r2,r3
   8c6ac:	10800104 	addi	r2,r2,4
   8c6b0:	10c00017 	ldw	r3,0(r2)
   8c6b4:	e0bffc17 	ldw	r2,-16(fp)
   8c6b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c6bc:	e0bffb17 	ldw	r2,-20(fp)
   8c6c0:	00c00274 	movhi	r3,9
   8c6c4:	18f84504 	addi	r3,r3,-7916
   8c6c8:	10800324 	muli	r2,r2,12
   8c6cc:	10c5883a 	add	r2,r2,r3
   8c6d0:	10800204 	addi	r2,r2,8
   8c6d4:	10c00017 	ldw	r3,0(r2)
   8c6d8:	e0bffc17 	ldw	r2,-16(fp)
   8c6dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8c6e0:	e13ffb17 	ldw	r4,-20(fp)
   8c6e4:	008b1d00 	call	8b1d0 <alt_release_fd>
  }
} 
   8c6e8:	e037883a 	mov	sp,fp
   8c6ec:	dfc00117 	ldw	ra,4(sp)
   8c6f0:	df000017 	ldw	fp,0(sp)
   8c6f4:	dec00204 	addi	sp,sp,8
   8c6f8:	f800283a 	ret

0008c6fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c6fc:	defffb04 	addi	sp,sp,-20
   8c700:	dfc00415 	stw	ra,16(sp)
   8c704:	df000315 	stw	fp,12(sp)
   8c708:	df000304 	addi	fp,sp,12
   8c70c:	e13ffd15 	stw	r4,-12(fp)
   8c710:	e17ffe15 	stw	r5,-8(fp)
   8c714:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8c718:	01000274 	movhi	r4,9
   8c71c:	21384804 	addi	r4,r4,-7904
   8c720:	e17ffd17 	ldw	r5,-12(fp)
   8c724:	01800044 	movi	r6,1
   8c728:	01c07fc4 	movi	r7,511
   8c72c:	008c6380 	call	8c638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8c730:	01000274 	movhi	r4,9
   8c734:	21384504 	addi	r4,r4,-7916
   8c738:	e17ffe17 	ldw	r5,-8(fp)
   8c73c:	000d883a 	mov	r6,zero
   8c740:	01c07fc4 	movi	r7,511
   8c744:	008c6380 	call	8c638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8c748:	01000274 	movhi	r4,9
   8c74c:	21384b04 	addi	r4,r4,-7892
   8c750:	e17fff17 	ldw	r5,-4(fp)
   8c754:	01800044 	movi	r6,1
   8c758:	01c07fc4 	movi	r7,511
   8c75c:	008c6380 	call	8c638 <alt_open_fd>
}  
   8c760:	e037883a 	mov	sp,fp
   8c764:	dfc00117 	ldw	ra,4(sp)
   8c768:	df000017 	ldw	fp,0(sp)
   8c76c:	dec00204 	addi	sp,sp,8
   8c770:	f800283a 	ret

0008c774 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8c774:	defffc04 	addi	sp,sp,-16
   8c778:	df000315 	stw	fp,12(sp)
   8c77c:	df000304 	addi	fp,sp,12
   8c780:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c784:	e0bffe17 	ldw	r2,-8(fp)
   8c788:	10800217 	ldw	r2,8(r2)
   8c78c:	10d00034 	orhi	r3,r2,16384
   8c790:	e0bffe17 	ldw	r2,-8(fp)
   8c794:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c798:	e03ffd15 	stw	zero,-12(fp)
   8c79c:	00002006 	br	8c820 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c7a0:	e0bffd17 	ldw	r2,-12(fp)
   8c7a4:	00c00274 	movhi	r3,9
   8c7a8:	18f84504 	addi	r3,r3,-7916
   8c7ac:	10800324 	muli	r2,r2,12
   8c7b0:	10c5883a 	add	r2,r2,r3
   8c7b4:	10c00017 	ldw	r3,0(r2)
   8c7b8:	e0bffe17 	ldw	r2,-8(fp)
   8c7bc:	10800017 	ldw	r2,0(r2)
   8c7c0:	1880141e 	bne	r3,r2,8c814 <alt_file_locked+0xa0>
   8c7c4:	e0bffd17 	ldw	r2,-12(fp)
   8c7c8:	00c00274 	movhi	r3,9
   8c7cc:	18f84504 	addi	r3,r3,-7916
   8c7d0:	10800324 	muli	r2,r2,12
   8c7d4:	10c5883a 	add	r2,r2,r3
   8c7d8:	10800204 	addi	r2,r2,8
   8c7dc:	10800017 	ldw	r2,0(r2)
   8c7e0:	1004403a 	cmpge	r2,r2,zero
   8c7e4:	10000b1e 	bne	r2,zero,8c814 <alt_file_locked+0xa0>
   8c7e8:	e0bffd17 	ldw	r2,-12(fp)
   8c7ec:	10800324 	muli	r2,r2,12
   8c7f0:	1007883a 	mov	r3,r2
   8c7f4:	00800274 	movhi	r2,9
   8c7f8:	10b84504 	addi	r2,r2,-7916
   8c7fc:	1887883a 	add	r3,r3,r2
   8c800:	e0bffe17 	ldw	r2,-8(fp)
   8c804:	18800326 	beq	r3,r2,8c814 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8c808:	00bffcc4 	movi	r2,-13
   8c80c:	e0bfff15 	stw	r2,-4(fp)
   8c810:	00000a06 	br	8c83c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c814:	e0bffd17 	ldw	r2,-12(fp)
   8c818:	10800044 	addi	r2,r2,1
   8c81c:	e0bffd15 	stw	r2,-12(fp)
   8c820:	00800274 	movhi	r2,9
   8c824:	10bcc704 	addi	r2,r2,-3300
   8c828:	10800017 	ldw	r2,0(r2)
   8c82c:	1007883a 	mov	r3,r2
   8c830:	e0bffd17 	ldw	r2,-12(fp)
   8c834:	18bfda2e 	bgeu	r3,r2,8c7a0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8c838:	e03fff15 	stw	zero,-4(fp)
   8c83c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c840:	e037883a 	mov	sp,fp
   8c844:	df000017 	ldw	fp,0(sp)
   8c848:	dec00104 	addi	sp,sp,4
   8c84c:	f800283a 	ret

0008c850 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c850:	defff404 	addi	sp,sp,-48
   8c854:	dfc00b15 	stw	ra,44(sp)
   8c858:	df000a15 	stw	fp,40(sp)
   8c85c:	df000a04 	addi	fp,sp,40
   8c860:	e13ffb15 	stw	r4,-20(fp)
   8c864:	e17ffc15 	stw	r5,-16(fp)
   8c868:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c86c:	00bfffc4 	movi	r2,-1
   8c870:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8c874:	00bffb44 	movi	r2,-19
   8c878:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8c87c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c880:	e13ffb17 	ldw	r4,-20(fp)
   8c884:	01400274 	movhi	r5,9
   8c888:	297cc504 	addi	r5,r5,-3308
   8c88c:	008cbfc0 	call	8cbfc <alt_find_dev>
   8c890:	e0bffa15 	stw	r2,-24(fp)
   8c894:	e0bffa17 	ldw	r2,-24(fp)
   8c898:	1004c03a 	cmpne	r2,r2,zero
   8c89c:	1000051e 	bne	r2,zero,8c8b4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c8a0:	e13ffb17 	ldw	r4,-20(fp)
   8c8a4:	008cc900 	call	8cc90 <alt_find_file>
   8c8a8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8c8ac:	00800044 	movi	r2,1
   8c8b0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c8b4:	e0bffa17 	ldw	r2,-24(fp)
   8c8b8:	1005003a 	cmpeq	r2,r2,zero
   8c8bc:	1000301e 	bne	r2,zero,8c980 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c8c0:	e13ffa17 	ldw	r4,-24(fp)
   8c8c4:	008cdb00 	call	8cdb0 <alt_get_fd>
   8c8c8:	e0bff815 	stw	r2,-32(fp)
   8c8cc:	e0bff817 	ldw	r2,-32(fp)
   8c8d0:	1004403a 	cmpge	r2,r2,zero
   8c8d4:	1000031e 	bne	r2,zero,8c8e4 <open+0x94>
    {
      status = index;
   8c8d8:	e0bff817 	ldw	r2,-32(fp)
   8c8dc:	e0bff715 	stw	r2,-36(fp)
   8c8e0:	00002906 	br	8c988 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   8c8e4:	e0bff817 	ldw	r2,-32(fp)
   8c8e8:	10800324 	muli	r2,r2,12
   8c8ec:	1007883a 	mov	r3,r2
   8c8f0:	00800274 	movhi	r2,9
   8c8f4:	10b84504 	addi	r2,r2,-7916
   8c8f8:	1885883a 	add	r2,r3,r2
   8c8fc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c900:	e0fffc17 	ldw	r3,-16(fp)
   8c904:	00900034 	movhi	r2,16384
   8c908:	10bfffc4 	addi	r2,r2,-1
   8c90c:	1886703a 	and	r3,r3,r2
   8c910:	e0bff917 	ldw	r2,-28(fp)
   8c914:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c918:	e0bff617 	ldw	r2,-40(fp)
   8c91c:	1004c03a 	cmpne	r2,r2,zero
   8c920:	1000061e 	bne	r2,zero,8c93c <open+0xec>
   8c924:	e13ff917 	ldw	r4,-28(fp)
   8c928:	008c7740 	call	8c774 <alt_file_locked>
   8c92c:	e0bff715 	stw	r2,-36(fp)
   8c930:	e0bff717 	ldw	r2,-36(fp)
   8c934:	1004803a 	cmplt	r2,r2,zero
   8c938:	1000131e 	bne	r2,zero,8c988 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c93c:	e0bffa17 	ldw	r2,-24(fp)
   8c940:	10800317 	ldw	r2,12(r2)
   8c944:	1005003a 	cmpeq	r2,r2,zero
   8c948:	1000091e 	bne	r2,zero,8c970 <open+0x120>
   8c94c:	e0bffa17 	ldw	r2,-24(fp)
   8c950:	10800317 	ldw	r2,12(r2)
   8c954:	e13ff917 	ldw	r4,-28(fp)
   8c958:	e17ffb17 	ldw	r5,-20(fp)
   8c95c:	e1bffc17 	ldw	r6,-16(fp)
   8c960:	e1fffd17 	ldw	r7,-12(fp)
   8c964:	103ee83a 	callr	r2
   8c968:	e0bfff15 	stw	r2,-4(fp)
   8c96c:	00000106 	br	8c974 <open+0x124>
   8c970:	e03fff15 	stw	zero,-4(fp)
   8c974:	e0bfff17 	ldw	r2,-4(fp)
   8c978:	e0bff715 	stw	r2,-36(fp)
   8c97c:	00000206 	br	8c988 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c980:	00bffb44 	movi	r2,-19
   8c984:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c988:	e0bff717 	ldw	r2,-36(fp)
   8c98c:	1004403a 	cmpge	r2,r2,zero
   8c990:	1000091e 	bne	r2,zero,8c9b8 <open+0x168>
  {
    alt_release_fd (index);  
   8c994:	e13ff817 	ldw	r4,-32(fp)
   8c998:	008b1d00 	call	8b1d0 <alt_release_fd>
    ALT_ERRNO = -status;
   8c99c:	008c9d80 	call	8c9d8 <alt_get_errno>
   8c9a0:	e0fff717 	ldw	r3,-36(fp)
   8c9a4:	00c7c83a 	sub	r3,zero,r3
   8c9a8:	10c00015 	stw	r3,0(r2)
    return -1;
   8c9ac:	00bfffc4 	movi	r2,-1
   8c9b0:	e0bffe15 	stw	r2,-8(fp)
   8c9b4:	00000206 	br	8c9c0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   8c9b8:	e0bff817 	ldw	r2,-32(fp)
   8c9bc:	e0bffe15 	stw	r2,-8(fp)
   8c9c0:	e0bffe17 	ldw	r2,-8(fp)
}
   8c9c4:	e037883a 	mov	sp,fp
   8c9c8:	dfc00117 	ldw	ra,4(sp)
   8c9cc:	df000017 	ldw	fp,0(sp)
   8c9d0:	dec00204 	addi	sp,sp,8
   8c9d4:	f800283a 	ret

0008c9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c9d8:	defffd04 	addi	sp,sp,-12
   8c9dc:	dfc00215 	stw	ra,8(sp)
   8c9e0:	df000115 	stw	fp,4(sp)
   8c9e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c9e8:	00800274 	movhi	r2,9
   8c9ec:	10bcc804 	addi	r2,r2,-3296
   8c9f0:	10800017 	ldw	r2,0(r2)
   8c9f4:	1005003a 	cmpeq	r2,r2,zero
   8c9f8:	1000061e 	bne	r2,zero,8ca14 <alt_get_errno+0x3c>
   8c9fc:	00800274 	movhi	r2,9
   8ca00:	10bcc804 	addi	r2,r2,-3296
   8ca04:	10800017 	ldw	r2,0(r2)
   8ca08:	103ee83a 	callr	r2
   8ca0c:	e0bfff15 	stw	r2,-4(fp)
   8ca10:	00000306 	br	8ca20 <alt_get_errno+0x48>
   8ca14:	00800274 	movhi	r2,9
   8ca18:	10836a04 	addi	r2,r2,3496
   8ca1c:	e0bfff15 	stw	r2,-4(fp)
   8ca20:	e0bfff17 	ldw	r2,-4(fp)
}
   8ca24:	e037883a 	mov	sp,fp
   8ca28:	dfc00117 	ldw	ra,4(sp)
   8ca2c:	df000017 	ldw	fp,0(sp)
   8ca30:	dec00204 	addi	sp,sp,8
   8ca34:	f800283a 	ret

0008ca38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8ca38:	defffa04 	addi	sp,sp,-24
   8ca3c:	df000515 	stw	fp,20(sp)
   8ca40:	df000504 	addi	fp,sp,20
   8ca44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ca48:	0005303a 	rdctl	r2,status
   8ca4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ca50:	e0fffd17 	ldw	r3,-12(fp)
   8ca54:	00bfff84 	movi	r2,-2
   8ca58:	1884703a 	and	r2,r3,r2
   8ca5c:	1001703a 	wrctl	status,r2
  
  return context;
   8ca60:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8ca64:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8ca68:	e0bfff17 	ldw	r2,-4(fp)
   8ca6c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8ca70:	e0bffc17 	ldw	r2,-16(fp)
   8ca74:	10c00017 	ldw	r3,0(r2)
   8ca78:	e0bffc17 	ldw	r2,-16(fp)
   8ca7c:	10800117 	ldw	r2,4(r2)
   8ca80:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8ca84:	e0bffc17 	ldw	r2,-16(fp)
   8ca88:	10c00117 	ldw	r3,4(r2)
   8ca8c:	e0bffc17 	ldw	r2,-16(fp)
   8ca90:	10800017 	ldw	r2,0(r2)
   8ca94:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8ca98:	e0fffc17 	ldw	r3,-16(fp)
   8ca9c:	e0bffc17 	ldw	r2,-16(fp)
   8caa0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8caa4:	e0fffc17 	ldw	r3,-16(fp)
   8caa8:	e0bffc17 	ldw	r2,-16(fp)
   8caac:	18800015 	stw	r2,0(r3)
   8cab0:	e0bffe17 	ldw	r2,-8(fp)
   8cab4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cab8:	e0bffb17 	ldw	r2,-20(fp)
   8cabc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8cac0:	e037883a 	mov	sp,fp
   8cac4:	df000017 	ldw	fp,0(sp)
   8cac8:	dec00104 	addi	sp,sp,4
   8cacc:	f800283a 	ret

0008cad0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8cad0:	defffb04 	addi	sp,sp,-20
   8cad4:	dfc00415 	stw	ra,16(sp)
   8cad8:	df000315 	stw	fp,12(sp)
   8cadc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8cae0:	d0a00e17 	ldw	r2,-32712(gp)
   8cae4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8cae8:	d0a6b317 	ldw	r2,-25908(gp)
   8caec:	10800044 	addi	r2,r2,1
   8caf0:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8caf4:	00003106 	br	8cbbc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8caf8:	e0bffe17 	ldw	r2,-8(fp)
   8cafc:	10800017 	ldw	r2,0(r2)
   8cb00:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8cb04:	e0bffe17 	ldw	r2,-8(fp)
   8cb08:	10800403 	ldbu	r2,16(r2)
   8cb0c:	10803fcc 	andi	r2,r2,255
   8cb10:	1005003a 	cmpeq	r2,r2,zero
   8cb14:	1000051e 	bne	r2,zero,8cb2c <alt_tick+0x5c>
   8cb18:	d0a6b317 	ldw	r2,-25908(gp)
   8cb1c:	1004c03a 	cmpne	r2,r2,zero
   8cb20:	1000021e 	bne	r2,zero,8cb2c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8cb24:	e0bffe17 	ldw	r2,-8(fp)
   8cb28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8cb2c:	e0bffe17 	ldw	r2,-8(fp)
   8cb30:	10c00217 	ldw	r3,8(r2)
   8cb34:	d0a6b317 	ldw	r2,-25908(gp)
   8cb38:	10c01e36 	bltu	r2,r3,8cbb4 <alt_tick+0xe4>
   8cb3c:	e0bffe17 	ldw	r2,-8(fp)
   8cb40:	10800403 	ldbu	r2,16(r2)
   8cb44:	10803fcc 	andi	r2,r2,255
   8cb48:	1004c03a 	cmpne	r2,r2,zero
   8cb4c:	1000191e 	bne	r2,zero,8cbb4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8cb50:	e0bffe17 	ldw	r2,-8(fp)
   8cb54:	10c00317 	ldw	r3,12(r2)
   8cb58:	e0bffe17 	ldw	r2,-8(fp)
   8cb5c:	11000517 	ldw	r4,20(r2)
   8cb60:	183ee83a 	callr	r3
   8cb64:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8cb68:	e0bffd17 	ldw	r2,-12(fp)
   8cb6c:	1004c03a 	cmpne	r2,r2,zero
   8cb70:	1000031e 	bne	r2,zero,8cb80 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8cb74:	e13ffe17 	ldw	r4,-8(fp)
   8cb78:	008ca380 	call	8ca38 <alt_alarm_stop>
   8cb7c:	00000d06 	br	8cbb4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8cb80:	e0bffe17 	ldw	r2,-8(fp)
   8cb84:	10c00217 	ldw	r3,8(r2)
   8cb88:	e0bffd17 	ldw	r2,-12(fp)
   8cb8c:	1887883a 	add	r3,r3,r2
   8cb90:	e0bffe17 	ldw	r2,-8(fp)
   8cb94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8cb98:	e0bffe17 	ldw	r2,-8(fp)
   8cb9c:	10c00217 	ldw	r3,8(r2)
   8cba0:	d0a6b317 	ldw	r2,-25908(gp)
   8cba4:	1880032e 	bgeu	r3,r2,8cbb4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8cba8:	e0fffe17 	ldw	r3,-8(fp)
   8cbac:	00800044 	movi	r2,1
   8cbb0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8cbb4:	e0bfff17 	ldw	r2,-4(fp)
   8cbb8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8cbbc:	d0e00e04 	addi	r3,gp,-32712
   8cbc0:	e0bffe17 	ldw	r2,-8(fp)
   8cbc4:	10ffcc1e 	bne	r2,r3,8caf8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8cbc8:	e037883a 	mov	sp,fp
   8cbcc:	dfc00117 	ldw	ra,4(sp)
   8cbd0:	df000017 	ldw	fp,0(sp)
   8cbd4:	dec00204 	addi	sp,sp,8
   8cbd8:	f800283a 	ret

0008cbdc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8cbdc:	deffff04 	addi	sp,sp,-4
   8cbe0:	df000015 	stw	fp,0(sp)
   8cbe4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8cbe8:	000170fa 	wrctl	ienable,zero
}
   8cbec:	e037883a 	mov	sp,fp
   8cbf0:	df000017 	ldw	fp,0(sp)
   8cbf4:	dec00104 	addi	sp,sp,4
   8cbf8:	f800283a 	ret

0008cbfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8cbfc:	defff904 	addi	sp,sp,-28
   8cc00:	dfc00615 	stw	ra,24(sp)
   8cc04:	df000515 	stw	fp,20(sp)
   8cc08:	df000504 	addi	fp,sp,20
   8cc0c:	e13ffd15 	stw	r4,-12(fp)
   8cc10:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8cc14:	e0bffe17 	ldw	r2,-8(fp)
   8cc18:	10800017 	ldw	r2,0(r2)
   8cc1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8cc20:	e13ffd17 	ldw	r4,-12(fp)
   8cc24:	00811b40 	call	811b4 <strlen>
   8cc28:	10800044 	addi	r2,r2,1
   8cc2c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cc30:	00000d06 	br	8cc68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8cc34:	e0bffc17 	ldw	r2,-16(fp)
   8cc38:	11000217 	ldw	r4,8(r2)
   8cc3c:	e1bffb17 	ldw	r6,-20(fp)
   8cc40:	e17ffd17 	ldw	r5,-12(fp)
   8cc44:	008cf440 	call	8cf44 <memcmp>
   8cc48:	1004c03a 	cmpne	r2,r2,zero
   8cc4c:	1000031e 	bne	r2,zero,8cc5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8cc50:	e0bffc17 	ldw	r2,-16(fp)
   8cc54:	e0bfff15 	stw	r2,-4(fp)
   8cc58:	00000706 	br	8cc78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8cc5c:	e0bffc17 	ldw	r2,-16(fp)
   8cc60:	10800017 	ldw	r2,0(r2)
   8cc64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cc68:	e0fffe17 	ldw	r3,-8(fp)
   8cc6c:	e0bffc17 	ldw	r2,-16(fp)
   8cc70:	10fff01e 	bne	r2,r3,8cc34 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8cc74:	e03fff15 	stw	zero,-4(fp)
   8cc78:	e0bfff17 	ldw	r2,-4(fp)
}
   8cc7c:	e037883a 	mov	sp,fp
   8cc80:	dfc00117 	ldw	ra,4(sp)
   8cc84:	df000017 	ldw	fp,0(sp)
   8cc88:	dec00204 	addi	sp,sp,8
   8cc8c:	f800283a 	ret

0008cc90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8cc90:	defffa04 	addi	sp,sp,-24
   8cc94:	dfc00515 	stw	ra,20(sp)
   8cc98:	df000415 	stw	fp,16(sp)
   8cc9c:	df000404 	addi	fp,sp,16
   8cca0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8cca4:	00800274 	movhi	r2,9
   8cca8:	10bcc304 	addi	r2,r2,-3316
   8ccac:	10800017 	ldw	r2,0(r2)
   8ccb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8ccb4:	00003306 	br	8cd84 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8ccb8:	e0bffd17 	ldw	r2,-12(fp)
   8ccbc:	11000217 	ldw	r4,8(r2)
   8ccc0:	00811b40 	call	811b4 <strlen>
   8ccc4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8ccc8:	e0bffd17 	ldw	r2,-12(fp)
   8cccc:	10c00217 	ldw	r3,8(r2)
   8ccd0:	e0bffc17 	ldw	r2,-16(fp)
   8ccd4:	1885883a 	add	r2,r3,r2
   8ccd8:	10bfffc4 	addi	r2,r2,-1
   8ccdc:	10800003 	ldbu	r2,0(r2)
   8cce0:	10803fcc 	andi	r2,r2,255
   8cce4:	1080201c 	xori	r2,r2,128
   8cce8:	10bfe004 	addi	r2,r2,-128
   8ccec:	10800bd8 	cmpnei	r2,r2,47
   8ccf0:	1000031e 	bne	r2,zero,8cd00 <alt_find_file+0x70>
    {
      len -= 1;
   8ccf4:	e0bffc17 	ldw	r2,-16(fp)
   8ccf8:	10bfffc4 	addi	r2,r2,-1
   8ccfc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8cd00:	e0bffc17 	ldw	r2,-16(fp)
   8cd04:	1007883a 	mov	r3,r2
   8cd08:	e0bffe17 	ldw	r2,-8(fp)
   8cd0c:	1885883a 	add	r2,r3,r2
   8cd10:	10800003 	ldbu	r2,0(r2)
   8cd14:	10803fcc 	andi	r2,r2,255
   8cd18:	1080201c 	xori	r2,r2,128
   8cd1c:	10bfe004 	addi	r2,r2,-128
   8cd20:	10800be0 	cmpeqi	r2,r2,47
   8cd24:	10000a1e 	bne	r2,zero,8cd50 <alt_find_file+0xc0>
   8cd28:	e0bffc17 	ldw	r2,-16(fp)
   8cd2c:	1007883a 	mov	r3,r2
   8cd30:	e0bffe17 	ldw	r2,-8(fp)
   8cd34:	1885883a 	add	r2,r3,r2
   8cd38:	10800003 	ldbu	r2,0(r2)
   8cd3c:	10803fcc 	andi	r2,r2,255
   8cd40:	1080201c 	xori	r2,r2,128
   8cd44:	10bfe004 	addi	r2,r2,-128
   8cd48:	1004c03a 	cmpne	r2,r2,zero
   8cd4c:	10000a1e 	bne	r2,zero,8cd78 <alt_find_file+0xe8>
   8cd50:	e0bffd17 	ldw	r2,-12(fp)
   8cd54:	11000217 	ldw	r4,8(r2)
   8cd58:	e1bffc17 	ldw	r6,-16(fp)
   8cd5c:	e17ffe17 	ldw	r5,-8(fp)
   8cd60:	008cf440 	call	8cf44 <memcmp>
   8cd64:	1004c03a 	cmpne	r2,r2,zero
   8cd68:	1000031e 	bne	r2,zero,8cd78 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8cd6c:	e0bffd17 	ldw	r2,-12(fp)
   8cd70:	e0bfff15 	stw	r2,-4(fp)
   8cd74:	00000806 	br	8cd98 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8cd78:	e0bffd17 	ldw	r2,-12(fp)
   8cd7c:	10800017 	ldw	r2,0(r2)
   8cd80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8cd84:	00c00274 	movhi	r3,9
   8cd88:	18fcc304 	addi	r3,r3,-3316
   8cd8c:	e0bffd17 	ldw	r2,-12(fp)
   8cd90:	10ffc91e 	bne	r2,r3,8ccb8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8cd94:	e03fff15 	stw	zero,-4(fp)
   8cd98:	e0bfff17 	ldw	r2,-4(fp)
}
   8cd9c:	e037883a 	mov	sp,fp
   8cda0:	dfc00117 	ldw	ra,4(sp)
   8cda4:	df000017 	ldw	fp,0(sp)
   8cda8:	dec00204 	addi	sp,sp,8
   8cdac:	f800283a 	ret

0008cdb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8cdb0:	defffc04 	addi	sp,sp,-16
   8cdb4:	df000315 	stw	fp,12(sp)
   8cdb8:	df000304 	addi	fp,sp,12
   8cdbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8cdc0:	00bffa04 	movi	r2,-24
   8cdc4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8cdc8:	e03ffe15 	stw	zero,-8(fp)
   8cdcc:	00001e06 	br	8ce48 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   8cdd0:	e0bffe17 	ldw	r2,-8(fp)
   8cdd4:	00c00274 	movhi	r3,9
   8cdd8:	18f84504 	addi	r3,r3,-7916
   8cddc:	10800324 	muli	r2,r2,12
   8cde0:	10c5883a 	add	r2,r2,r3
   8cde4:	10800017 	ldw	r2,0(r2)
   8cde8:	1004c03a 	cmpne	r2,r2,zero
   8cdec:	1000131e 	bne	r2,zero,8ce3c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   8cdf0:	e0bffe17 	ldw	r2,-8(fp)
   8cdf4:	00c00274 	movhi	r3,9
   8cdf8:	18f84504 	addi	r3,r3,-7916
   8cdfc:	10800324 	muli	r2,r2,12
   8ce00:	10c7883a 	add	r3,r2,r3
   8ce04:	e0bfff17 	ldw	r2,-4(fp)
   8ce08:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8ce0c:	00800274 	movhi	r2,9
   8ce10:	10bcc704 	addi	r2,r2,-3300
   8ce14:	10c00017 	ldw	r3,0(r2)
   8ce18:	e0bffe17 	ldw	r2,-8(fp)
   8ce1c:	1880040e 	bge	r3,r2,8ce30 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   8ce20:	00c00274 	movhi	r3,9
   8ce24:	18fcc704 	addi	r3,r3,-3300
   8ce28:	e0bffe17 	ldw	r2,-8(fp)
   8ce2c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8ce30:	e0bffe17 	ldw	r2,-8(fp)
   8ce34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8ce38:	00000606 	br	8ce54 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8ce3c:	e0bffe17 	ldw	r2,-8(fp)
   8ce40:	10800044 	addi	r2,r2,1
   8ce44:	e0bffe15 	stw	r2,-8(fp)
   8ce48:	e0bffe17 	ldw	r2,-8(fp)
   8ce4c:	10800810 	cmplti	r2,r2,32
   8ce50:	103fdf1e 	bne	r2,zero,8cdd0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8ce54:	e0bffd17 	ldw	r2,-12(fp)
}
   8ce58:	e037883a 	mov	sp,fp
   8ce5c:	df000017 	ldw	fp,0(sp)
   8ce60:	dec00104 	addi	sp,sp,4
   8ce64:	f800283a 	ret

0008ce68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8ce68:	defffb04 	addi	sp,sp,-20
   8ce6c:	df000415 	stw	fp,16(sp)
   8ce70:	df000404 	addi	fp,sp,16
   8ce74:	e13ffe15 	stw	r4,-8(fp)
   8ce78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   8ce7c:	e0bfff17 	ldw	r2,-4(fp)
   8ce80:	10840070 	cmpltui	r2,r2,4097
   8ce84:	1000021e 	bne	r2,zero,8ce90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8ce88:	00840004 	movi	r2,4096
   8ce8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   8ce90:	e0fffe17 	ldw	r3,-8(fp)
   8ce94:	e0bfff17 	ldw	r2,-4(fp)
   8ce98:	1885883a 	add	r2,r3,r2
   8ce9c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8cea0:	e0bffe17 	ldw	r2,-8(fp)
   8cea4:	e0bffd15 	stw	r2,-12(fp)
   8cea8:	00000506 	br	8cec0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8ceac:	e0bffd17 	ldw	r2,-12(fp)
   8ceb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8ceb4:	e0bffd17 	ldw	r2,-12(fp)
   8ceb8:	10800804 	addi	r2,r2,32
   8cebc:	e0bffd15 	stw	r2,-12(fp)
   8cec0:	e0fffd17 	ldw	r3,-12(fp)
   8cec4:	e0bffc17 	ldw	r2,-16(fp)
   8cec8:	18bff836 	bltu	r3,r2,8ceac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8cecc:	e0bffe17 	ldw	r2,-8(fp)
   8ced0:	108007cc 	andi	r2,r2,31
   8ced4:	1005003a 	cmpeq	r2,r2,zero
   8ced8:	1000021e 	bne	r2,zero,8cee4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8cedc:	e0bffd17 	ldw	r2,-12(fp)
   8cee0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8cee4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8cee8:	e037883a 	mov	sp,fp
   8ceec:	df000017 	ldw	fp,0(sp)
   8cef0:	dec00104 	addi	sp,sp,4
   8cef4:	f800283a 	ret

0008cef8 <atexit>:
   8cef8:	200b883a 	mov	r5,r4
   8cefc:	000d883a 	mov	r6,zero
   8cf00:	0009883a 	mov	r4,zero
   8cf04:	000f883a 	mov	r7,zero
   8cf08:	008cfb81 	jmpi	8cfb8 <__register_exitproc>

0008cf0c <exit>:
   8cf0c:	defffe04 	addi	sp,sp,-8
   8cf10:	000b883a 	mov	r5,zero
   8cf14:	dc000015 	stw	r16,0(sp)
   8cf18:	dfc00115 	stw	ra,4(sp)
   8cf1c:	2021883a 	mov	r16,r4
   8cf20:	008d0f00 	call	8d0f0 <__call_exitprocs>
   8cf24:	00800274 	movhi	r2,9
   8cf28:	10bcbe04 	addi	r2,r2,-3336
   8cf2c:	11000017 	ldw	r4,0(r2)
   8cf30:	20800f17 	ldw	r2,60(r4)
   8cf34:	10000126 	beq	r2,zero,8cf3c <exit+0x30>
   8cf38:	103ee83a 	callr	r2
   8cf3c:	8009883a 	mov	r4,r16
   8cf40:	008d2e00 	call	8d2e0 <_exit>

0008cf44 <memcmp>:
   8cf44:	00c000c4 	movi	r3,3
   8cf48:	1980032e 	bgeu	r3,r6,8cf58 <memcmp+0x14>
   8cf4c:	2144b03a 	or	r2,r4,r5
   8cf50:	10c4703a 	and	r2,r2,r3
   8cf54:	10000f26 	beq	r2,zero,8cf94 <memcmp+0x50>
   8cf58:	31ffffc4 	addi	r7,r6,-1
   8cf5c:	3000061e 	bne	r6,zero,8cf78 <memcmp+0x34>
   8cf60:	00000a06 	br	8cf8c <memcmp+0x48>
   8cf64:	39ffffc4 	addi	r7,r7,-1
   8cf68:	00bfffc4 	movi	r2,-1
   8cf6c:	21000044 	addi	r4,r4,1
   8cf70:	29400044 	addi	r5,r5,1
   8cf74:	38800526 	beq	r7,r2,8cf8c <memcmp+0x48>
   8cf78:	20c00003 	ldbu	r3,0(r4)
   8cf7c:	28800003 	ldbu	r2,0(r5)
   8cf80:	18bff826 	beq	r3,r2,8cf64 <memcmp+0x20>
   8cf84:	1885c83a 	sub	r2,r3,r2
   8cf88:	f800283a 	ret
   8cf8c:	0005883a 	mov	r2,zero
   8cf90:	f800283a 	ret
   8cf94:	180f883a 	mov	r7,r3
   8cf98:	20c00017 	ldw	r3,0(r4)
   8cf9c:	28800017 	ldw	r2,0(r5)
   8cfa0:	18bfed1e 	bne	r3,r2,8cf58 <memcmp+0x14>
   8cfa4:	31bfff04 	addi	r6,r6,-4
   8cfa8:	21000104 	addi	r4,r4,4
   8cfac:	29400104 	addi	r5,r5,4
   8cfb0:	39bff936 	bltu	r7,r6,8cf98 <memcmp+0x54>
   8cfb4:	003fe806 	br	8cf58 <memcmp+0x14>

0008cfb8 <__register_exitproc>:
   8cfb8:	defffa04 	addi	sp,sp,-24
   8cfbc:	00800274 	movhi	r2,9
   8cfc0:	10bcbe04 	addi	r2,r2,-3336
   8cfc4:	dc000015 	stw	r16,0(sp)
   8cfc8:	14000017 	ldw	r16,0(r2)
   8cfcc:	dd000415 	stw	r20,16(sp)
   8cfd0:	2829883a 	mov	r20,r5
   8cfd4:	81405217 	ldw	r5,328(r16)
   8cfd8:	dcc00315 	stw	r19,12(sp)
   8cfdc:	dc800215 	stw	r18,8(sp)
   8cfe0:	dc400115 	stw	r17,4(sp)
   8cfe4:	dfc00515 	stw	ra,20(sp)
   8cfe8:	2023883a 	mov	r17,r4
   8cfec:	3027883a 	mov	r19,r6
   8cff0:	3825883a 	mov	r18,r7
   8cff4:	28002526 	beq	r5,zero,8d08c <__register_exitproc+0xd4>
   8cff8:	29000117 	ldw	r4,4(r5)
   8cffc:	008007c4 	movi	r2,31
   8d000:	11002716 	blt	r2,r4,8d0a0 <__register_exitproc+0xe8>
   8d004:	8800101e 	bne	r17,zero,8d048 <__register_exitproc+0x90>
   8d008:	2105883a 	add	r2,r4,r4
   8d00c:	1085883a 	add	r2,r2,r2
   8d010:	20c00044 	addi	r3,r4,1
   8d014:	1145883a 	add	r2,r2,r5
   8d018:	0009883a 	mov	r4,zero
   8d01c:	15000215 	stw	r20,8(r2)
   8d020:	28c00115 	stw	r3,4(r5)
   8d024:	2005883a 	mov	r2,r4
   8d028:	dfc00517 	ldw	ra,20(sp)
   8d02c:	dd000417 	ldw	r20,16(sp)
   8d030:	dcc00317 	ldw	r19,12(sp)
   8d034:	dc800217 	ldw	r18,8(sp)
   8d038:	dc400117 	ldw	r17,4(sp)
   8d03c:	dc000017 	ldw	r16,0(sp)
   8d040:	dec00604 	addi	sp,sp,24
   8d044:	f800283a 	ret
   8d048:	29802204 	addi	r6,r5,136
   8d04c:	00800044 	movi	r2,1
   8d050:	110e983a 	sll	r7,r2,r4
   8d054:	30c04017 	ldw	r3,256(r6)
   8d058:	2105883a 	add	r2,r4,r4
   8d05c:	1085883a 	add	r2,r2,r2
   8d060:	1185883a 	add	r2,r2,r6
   8d064:	19c6b03a 	or	r3,r3,r7
   8d068:	14802015 	stw	r18,128(r2)
   8d06c:	14c00015 	stw	r19,0(r2)
   8d070:	00800084 	movi	r2,2
   8d074:	30c04015 	stw	r3,256(r6)
   8d078:	88bfe31e 	bne	r17,r2,8d008 <__register_exitproc+0x50>
   8d07c:	30804117 	ldw	r2,260(r6)
   8d080:	11c4b03a 	or	r2,r2,r7
   8d084:	30804115 	stw	r2,260(r6)
   8d088:	003fdf06 	br	8d008 <__register_exitproc+0x50>
   8d08c:	00800274 	movhi	r2,9
   8d090:	1083bb04 	addi	r2,r2,3820
   8d094:	100b883a 	mov	r5,r2
   8d098:	80805215 	stw	r2,328(r16)
   8d09c:	003fd606 	br	8cff8 <__register_exitproc+0x40>
   8d0a0:	00800034 	movhi	r2,0
   8d0a4:	10800004 	addi	r2,r2,0
   8d0a8:	1000021e 	bne	r2,zero,8d0b4 <__register_exitproc+0xfc>
   8d0ac:	013fffc4 	movi	r4,-1
   8d0b0:	003fdc06 	br	8d024 <__register_exitproc+0x6c>
   8d0b4:	01006404 	movi	r4,400
   8d0b8:	103ee83a 	callr	r2
   8d0bc:	1007883a 	mov	r3,r2
   8d0c0:	103ffa26 	beq	r2,zero,8d0ac <__register_exitproc+0xf4>
   8d0c4:	80805217 	ldw	r2,328(r16)
   8d0c8:	180b883a 	mov	r5,r3
   8d0cc:	18000115 	stw	zero,4(r3)
   8d0d0:	18800015 	stw	r2,0(r3)
   8d0d4:	80c05215 	stw	r3,328(r16)
   8d0d8:	18006215 	stw	zero,392(r3)
   8d0dc:	18006315 	stw	zero,396(r3)
   8d0e0:	0009883a 	mov	r4,zero
   8d0e4:	883fc826 	beq	r17,zero,8d008 <__register_exitproc+0x50>
   8d0e8:	003fd706 	br	8d048 <__register_exitproc+0x90>

0008d0ec <register_fini>:
   8d0ec:	f800283a 	ret

0008d0f0 <__call_exitprocs>:
   8d0f0:	00800274 	movhi	r2,9
   8d0f4:	10bcbe04 	addi	r2,r2,-3336
   8d0f8:	10800017 	ldw	r2,0(r2)
   8d0fc:	defff304 	addi	sp,sp,-52
   8d100:	df000b15 	stw	fp,44(sp)
   8d104:	d8800115 	stw	r2,4(sp)
   8d108:	00800034 	movhi	r2,0
   8d10c:	10800004 	addi	r2,r2,0
   8d110:	1005003a 	cmpeq	r2,r2,zero
   8d114:	d8800215 	stw	r2,8(sp)
   8d118:	d8800117 	ldw	r2,4(sp)
   8d11c:	dd400815 	stw	r21,32(sp)
   8d120:	dd000715 	stw	r20,28(sp)
   8d124:	10805204 	addi	r2,r2,328
   8d128:	dfc00c15 	stw	ra,48(sp)
   8d12c:	ddc00a15 	stw	r23,40(sp)
   8d130:	dd800915 	stw	r22,36(sp)
   8d134:	dcc00615 	stw	r19,24(sp)
   8d138:	dc800515 	stw	r18,20(sp)
   8d13c:	dc400415 	stw	r17,16(sp)
   8d140:	dc000315 	stw	r16,12(sp)
   8d144:	282b883a 	mov	r21,r5
   8d148:	2039883a 	mov	fp,r4
   8d14c:	d8800015 	stw	r2,0(sp)
   8d150:	2829003a 	cmpeq	r20,r5,zero
   8d154:	d8800117 	ldw	r2,4(sp)
   8d158:	14405217 	ldw	r17,328(r2)
   8d15c:	88001026 	beq	r17,zero,8d1a0 <__call_exitprocs+0xb0>
   8d160:	ddc00017 	ldw	r23,0(sp)
   8d164:	88800117 	ldw	r2,4(r17)
   8d168:	8c802204 	addi	r18,r17,136
   8d16c:	143fffc4 	addi	r16,r2,-1
   8d170:	80000916 	blt	r16,zero,8d198 <__call_exitprocs+0xa8>
   8d174:	05bfffc4 	movi	r22,-1
   8d178:	a000151e 	bne	r20,zero,8d1d0 <__call_exitprocs+0xe0>
   8d17c:	8409883a 	add	r4,r16,r16
   8d180:	2105883a 	add	r2,r4,r4
   8d184:	1485883a 	add	r2,r2,r18
   8d188:	10c02017 	ldw	r3,128(r2)
   8d18c:	a8c01126 	beq	r21,r3,8d1d4 <__call_exitprocs+0xe4>
   8d190:	843fffc4 	addi	r16,r16,-1
   8d194:	85bff81e 	bne	r16,r22,8d178 <__call_exitprocs+0x88>
   8d198:	d8800217 	ldw	r2,8(sp)
   8d19c:	10003126 	beq	r2,zero,8d264 <__call_exitprocs+0x174>
   8d1a0:	dfc00c17 	ldw	ra,48(sp)
   8d1a4:	df000b17 	ldw	fp,44(sp)
   8d1a8:	ddc00a17 	ldw	r23,40(sp)
   8d1ac:	dd800917 	ldw	r22,36(sp)
   8d1b0:	dd400817 	ldw	r21,32(sp)
   8d1b4:	dd000717 	ldw	r20,28(sp)
   8d1b8:	dcc00617 	ldw	r19,24(sp)
   8d1bc:	dc800517 	ldw	r18,20(sp)
   8d1c0:	dc400417 	ldw	r17,16(sp)
   8d1c4:	dc000317 	ldw	r16,12(sp)
   8d1c8:	dec00d04 	addi	sp,sp,52
   8d1cc:	f800283a 	ret
   8d1d0:	8409883a 	add	r4,r16,r16
   8d1d4:	88c00117 	ldw	r3,4(r17)
   8d1d8:	2105883a 	add	r2,r4,r4
   8d1dc:	1445883a 	add	r2,r2,r17
   8d1e0:	18ffffc4 	addi	r3,r3,-1
   8d1e4:	11800217 	ldw	r6,8(r2)
   8d1e8:	1c001526 	beq	r3,r16,8d240 <__call_exitprocs+0x150>
   8d1ec:	10000215 	stw	zero,8(r2)
   8d1f0:	303fe726 	beq	r6,zero,8d190 <__call_exitprocs+0xa0>
   8d1f4:	00c00044 	movi	r3,1
   8d1f8:	1c06983a 	sll	r3,r3,r16
   8d1fc:	90804017 	ldw	r2,256(r18)
   8d200:	8cc00117 	ldw	r19,4(r17)
   8d204:	1884703a 	and	r2,r3,r2
   8d208:	10001426 	beq	r2,zero,8d25c <__call_exitprocs+0x16c>
   8d20c:	90804117 	ldw	r2,260(r18)
   8d210:	1884703a 	and	r2,r3,r2
   8d214:	10000c1e 	bne	r2,zero,8d248 <__call_exitprocs+0x158>
   8d218:	2105883a 	add	r2,r4,r4
   8d21c:	1485883a 	add	r2,r2,r18
   8d220:	11400017 	ldw	r5,0(r2)
   8d224:	e009883a 	mov	r4,fp
   8d228:	303ee83a 	callr	r6
   8d22c:	88800117 	ldw	r2,4(r17)
   8d230:	98bfc81e 	bne	r19,r2,8d154 <__call_exitprocs+0x64>
   8d234:	b8800017 	ldw	r2,0(r23)
   8d238:	147fd526 	beq	r2,r17,8d190 <__call_exitprocs+0xa0>
   8d23c:	003fc506 	br	8d154 <__call_exitprocs+0x64>
   8d240:	8c000115 	stw	r16,4(r17)
   8d244:	003fea06 	br	8d1f0 <__call_exitprocs+0x100>
   8d248:	2105883a 	add	r2,r4,r4
   8d24c:	1485883a 	add	r2,r2,r18
   8d250:	11000017 	ldw	r4,0(r2)
   8d254:	303ee83a 	callr	r6
   8d258:	003ff406 	br	8d22c <__call_exitprocs+0x13c>
   8d25c:	303ee83a 	callr	r6
   8d260:	003ff206 	br	8d22c <__call_exitprocs+0x13c>
   8d264:	88800117 	ldw	r2,4(r17)
   8d268:	1000081e 	bne	r2,zero,8d28c <__call_exitprocs+0x19c>
   8d26c:	89000017 	ldw	r4,0(r17)
   8d270:	20000726 	beq	r4,zero,8d290 <__call_exitprocs+0x1a0>
   8d274:	b9000015 	stw	r4,0(r23)
   8d278:	8809883a 	mov	r4,r17
   8d27c:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8d280:	bc400017 	ldw	r17,0(r23)
   8d284:	883fb71e 	bne	r17,zero,8d164 <__call_exitprocs+0x74>
   8d288:	003fc506 	br	8d1a0 <__call_exitprocs+0xb0>
   8d28c:	89000017 	ldw	r4,0(r17)
   8d290:	882f883a 	mov	r23,r17
   8d294:	2023883a 	mov	r17,r4
   8d298:	883fb21e 	bne	r17,zero,8d164 <__call_exitprocs+0x74>
   8d29c:	003fc006 	br	8d1a0 <__call_exitprocs+0xb0>

0008d2a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8d2a0:	defffd04 	addi	sp,sp,-12
   8d2a4:	df000215 	stw	fp,8(sp)
   8d2a8:	df000204 	addi	fp,sp,8
   8d2ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8d2b0:	e0bfff17 	ldw	r2,-4(fp)
   8d2b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8d2b8:	e0bffe17 	ldw	r2,-8(fp)
   8d2bc:	1005003a 	cmpeq	r2,r2,zero
   8d2c0:	1000021e 	bne	r2,zero,8d2cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8d2c4:	002af070 	cmpltui	zero,zero,43969
   8d2c8:	00000106 	br	8d2d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8d2cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8d2d0:	e037883a 	mov	sp,fp
   8d2d4:	df000017 	ldw	fp,0(sp)
   8d2d8:	dec00104 	addi	sp,sp,4
   8d2dc:	f800283a 	ret

0008d2e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8d2e0:	defffd04 	addi	sp,sp,-12
   8d2e4:	dfc00215 	stw	ra,8(sp)
   8d2e8:	df000115 	stw	fp,4(sp)
   8d2ec:	df000104 	addi	fp,sp,4
   8d2f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8d2f4:	e13fff17 	ldw	r4,-4(fp)
   8d2f8:	008d2a00 	call	8d2a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8d2fc:	003fff06 	br	8d2fc <_exit+0x1c>
   8d300:	00000010 	cmplti	zero,zero,0
   8d304:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8d308:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   8d30c:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   8d310:	001b0c0b 	ldhu	zero,27696(zero)
   8d314:	00000028 	cmpgeui	zero,zero,0
   8d318:	00000018 	cmpnei	zero,zero,0
   8d31c:	0008839c 	xori	zero,zero,8718
   8d320:	000005dc 	xori	zero,zero,23
   8d324:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   8d328:	92099170 	cmpltui	r8,r18,9797
   8d32c:	95079308 	cmpgei	r20,r18,7756
   8d330:	97049605 	stb	fp,4696(r18)
   8d334:	90019f03 	ldbu	zero,1660(r18)
   8d338:	9c06940a 	0x9c06940a
   8d33c:	00000002 	0x2
   8d340:	00000028 	cmpgeui	zero,zero,0
   8d344:	00000044 	movi	zero,1
   8d348:	00088978 	rdprs	zero,zero,8741
   8d34c:	000005b0 	cmpltui	zero,zero,22
   8d350:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   8d354:	92099168 	cmpgeui	r8,r18,9797
   8d358:	95079308 	cmpgei	r20,r18,7756
   8d35c:	9c039705 	stb	r16,3676(r19)
   8d360:	90019f02 	0x90019f02
   8d364:	9606940a 	0x9606940a
   8d368:	00000004 	movi	zero,0
   8d36c:	0008d0ec 	andhi	zero,zero,9027
